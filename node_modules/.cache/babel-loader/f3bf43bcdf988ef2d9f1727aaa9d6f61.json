{"ast":null,"code":"import { toListingReceiptAccount } from '../accounts.mjs';\nimport { ListingReceiptGpaBuilder } from '../gpaBuilders/ListingReceiptGpaBuilder.mjs';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { toLazyListing } from '../models/Listing.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindListingsOperation';\n/**\n * Finds Listings by multiple criteria.\n * You can use any combination of keys.\n *\n * ```ts\n * // Find all listings in an Auction House.\n * const listings = await metaplex\n *   .auctionHouse()\n *   .findListings({ auctionHouse });\n *\n * // Find listings by seller and mint.\n * const listings = await metaplex\n *   .auctionHouse()\n *   .findListings({ auctionHouse, seller, mint });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst findListingsOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst findListingsOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const {\n      commitment,\n      programs\n    } = scope;\n    const {\n      auctionHouse,\n      seller,\n      metadata,\n      mint\n    } = operation.input;\n    const auctionHouseProgram = metaplex.programs().getAuctionHouse(programs);\n    let listingQuery = new ListingReceiptGpaBuilder(metaplex, auctionHouseProgram.address).mergeConfig({\n      commitment\n    }).whereAuctionHouse(auctionHouse.address);\n\n    if (seller) {\n      listingQuery = listingQuery.whereSeller(seller);\n    }\n\n    if (metadata && !mint) {\n      listingQuery = listingQuery.whereMetadata(metadata);\n    }\n\n    if (mint) {\n      listingQuery = listingQuery.whereMetadata(metaplex.nfts().pdas().metadata({\n        mint,\n        programs\n      }));\n    }\n\n    scope.throwIfCanceled();\n    return listingQuery.getAndMap(account => toLazyListing(toListingReceiptAccount(account), auctionHouse));\n  }\n};\nexport { findListingsOperation, findListingsOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/operations/findListings.ts"],"names":["Key","findListingsOperation","useOperation","findListingsOperationHandler","handle","operation","metaplex","scope","commitment","programs","auctionHouse","seller","metadata","mint","input","auctionHouseProgram","getAuctionHouse","listingQuery","ListingReceiptGpaBuilder","address","mergeConfig","whereAuctionHouse","whereSeller","whereMetadata","nfts","pdas","throwIfCanceled","getAndMap","account","toLazyListing","toListingReceiptAccount"],"mappings":";;;uDAYA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,uBAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,qBAAqB,GAAGC,YAAY,CAAwBF,GAAxB,C;AAEjD;AACA;AACA;AACA;;AAkCA;AACA;AACA;AACA;;AACO,MAAMG,4BAAqE,GAChF;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI0B;IAChC,MAAM;MAAEC,UAAF;MAAcC;IAAd,IAA2BF,KAAjC;IACA,MAAM;MAAEG,YAAF;MAAgBC,MAAhB;MAAwBC,QAAxB;MAAkCC;IAAlC,IAA2CR,SAAS,CAACS,KAA3D;IACA,MAAMC,mBAAmB,GAAGT,QAAQ,CAACG,QAATH,GAAoBU,eAApBV,CAAoCG,QAApCH,CAA5B;IAEA,IAAIW,YAAY,GAAG,IAAIC,wBAAJ,CACjBZ,QADiB,EAEjBS,mBAAmB,CAACI,OAFH,EAIhBC,WAJgB,CAIJ;MAAEZ;IAAF,CAJI,EAKhBa,iBALgB,CAKEX,YAAY,CAACS,OALf,CAAnB;;IAOA,IAAIR,MAAJ,EAAY;MACVM,YAAY,GAAGA,YAAY,CAACK,WAAbL,CAAyBN,MAAzBM,CAAfA;IACF;;IAEA,IAAIL,QAAQ,IAAI,CAACC,IAAjB,EAAuB;MACrBI,YAAY,GAAGA,YAAY,CAACM,aAAbN,CAA2BL,QAA3BK,CAAfA;IACF;;IAEA,IAAIJ,IAAJ,EAAU;MACRI,YAAY,GAAGA,YAAY,CAACM,aAAbN,CACbX,QAAQ,CAACkB,IAATlB,GAAgBmB,IAAhBnB,GAAuBM,QAAvBN,CAAgC;QAAEO,IAAF;QAAQJ;MAAR,CAAhCH,CADaW,CAAfA;IAGF;;IAEAV,KAAK,CAACmB,eAANnB;IAEA,OAAOU,YAAY,CAACU,SAAbV,CAAwBW,OAAO,IACpCC,aAAa,CAACC,uBAAuB,CAACF,OAAD,CAAxB,EAAmClB,YAAnC,CADRO,CAAP;EAGF;AApCF,CADK","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { toListingReceiptAccount } from '../accounts';\nimport { ListingReceiptGpaBuilder } from '../gpaBuilders';\nimport { AuctionHouse, LazyListing, Listing, toLazyListing } from '../models';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindListingsOperation' as const;\n\n/**\n * Finds Listings by multiple criteria.\n * You can use any combination of keys.\n *\n * ```ts\n * // Find all listings in an Auction House.\n * const listings = await metaplex\n *   .auctionHouse()\n *   .findListings({ auctionHouse });\n *\n * // Find listings by seller and mint.\n * const listings = await metaplex\n *   .auctionHouse()\n *   .findListings({ auctionHouse, seller, mint });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findListingsOperation = useOperation<FindListingsOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindListingsOperation = Operation<\n  typeof Key,\n  FindListingsInput,\n  FindListingsOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindListingsInput = {\n  /** A model of the Auction House related to these listings. */\n  auctionHouse: AuctionHouse;\n\n  /** The address of a seller to search by. */\n  seller?: PublicKey;\n\n  /**\n   * The address of metadata to search by.\n   * Ignored when mint provided.\n   */\n  metadata?: PublicKey;\n\n  /** The address of a mint to search by. */\n  mint?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindListingsOutput = (Listing | LazyListing)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findListingsOperationHandler: OperationHandler<FindListingsOperation> =\n  {\n    handle: async (\n      operation: FindListingsOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindListingsOutput> => {\n      const { commitment, programs } = scope;\n      const { auctionHouse, seller, metadata, mint } = operation.input;\n      const auctionHouseProgram = metaplex.programs().getAuctionHouse(programs);\n\n      let listingQuery = new ListingReceiptGpaBuilder(\n        metaplex,\n        auctionHouseProgram.address\n      )\n        .mergeConfig({ commitment })\n        .whereAuctionHouse(auctionHouse.address);\n\n      if (seller) {\n        listingQuery = listingQuery.whereSeller(seller);\n      }\n\n      if (metadata && !mint) {\n        listingQuery = listingQuery.whereMetadata(metadata);\n      }\n\n      if (mint) {\n        listingQuery = listingQuery.whereMetadata(\n          metaplex.nfts().pdas().metadata({ mint, programs })\n        );\n      }\n\n      scope.throwIfCanceled();\n\n      return listingQuery.getAndMap((account) =>\n        toLazyListing(toListingReceiptAccount(account), auctionHouse)\n      );\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}