{"ast":null,"code":"import { isWalletAdapterCompatibleWallet, StandardWalletAdapter } from '@solana/wallet-standard-wallet-adapter-base';\nimport { DEPRECATED_getWallets } from '@wallet-standard/app';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nexport function useStandardWalletAdapters(adapters) {\n  const {\n    get: get,\n    on: on\n  } = useConstant(() => DEPRECATED_getWallets());\n  const [standardAdapters, setStandardAdapters] = useState(() => wrapWalletsWithAdapters(get()));\n  const warnings = useConstant(() => new Set());\n  useEffect(() => {\n    const listeners = [on('register', function () {\n      for (var _len = arguments.length, wallets = new Array(_len), _key = 0; _key < _len; _key++) {\n        wallets[_key] = arguments[_key];\n      }\n\n      return setStandardAdapters(standardAdapters => [...standardAdapters, ...wrapWalletsWithAdapters(wallets)]);\n    }), on('unregister', function () {\n      for (var _len2 = arguments.length, wallets = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        wallets[_key2] = arguments[_key2];\n      }\n\n      return setStandardAdapters(standardAdapters => standardAdapters.filter(standardAdapter => wallets.some(wallet => wallet === standardAdapter.wallet)));\n    })];\n    return () => listeners.forEach(destroy => destroy());\n  }, [on]);\n  return useMemo(() => [...standardAdapters, ...adapters.filter(_ref => {\n    let {\n      name: name\n    } = _ref;\n\n    if (standardAdapters.some(standardAdapter => standardAdapter.name === name)) {\n      if (!warnings.has(name)) {\n        warnings.add(name);\n        console.warn(`${name} was registered as a Standard Wallet. The Wallet Adapter for ${name} can be removed from your app.`);\n      }\n\n      return false;\n    }\n\n    return true;\n  })], [standardAdapters, adapters, warnings]);\n}\n\nfunction useConstant(fn) {\n  const ref = useRef();\n\n  if (!ref.current) {\n    ref.current = {\n      value: fn()\n    };\n  }\n\n  return ref.current.value;\n}\n\nfunction wrapWalletsWithAdapters(wallets) {\n  return wallets.filter(isWalletAdapterCompatibleWallet).map(wallet => new StandardWalletAdapter({\n    wallet: wallet\n  }));\n}","map":{"version":3,"sources":["../../src/useStandardWalletAdapters.ts"],"names":[],"mappings":"AACA,SAAS,+BAAT,EAA0C,qBAA1C,QAAuE,6CAAvE;AACA,SAAS,qBAAT,QAAsC,sBAAtC;AAEA,SAAS,SAAT,EAAoB,OAApB,EAA6B,MAA7B,EAAqC,QAArC,QAAqD,OAArD;AAEA,OAAM,SAAU,yBAAV,CAAoC,QAApC,EAAuD;EACzD,MAAM;IAAE,GAAG,EAAH,GAAF;IAAO,EAAE,EAAF;EAAP,IAAc,WAAW,CAAC,MAAM,qBAAqB,EAA5B,CAA/B;EACA,MAAM,CAAC,gBAAD,EAAmB,mBAAnB,IAA0C,QAAQ,CAAC,MAAM,uBAAuB,CAAC,GAAG,EAAJ,CAA9B,CAAxD;EACA,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,IAAI,GAAJ,EAAP,CAA5B;EAEA,SAAS,CAAC,MAAK;IACX,MAAM,SAAS,GAAG,CACd,EAAE,CAAC,UAAD,EAAa;MAAA,kCAAI,OAAJ;QAAI,OAAJ;MAAA;;MAAA,OACX,mBAAmB,CAAE,gBAAD,IAAsB,CAAC,GAAG,gBAAJ,EAAsB,GAAG,uBAAuB,CAAC,OAAD,CAAhD,CAAvB,CADR;IAAA,CAAb,CADY,EAId,EAAE,CAAC,YAAD,EAAe;MAAA,mCAAI,OAAJ;QAAI,OAAJ;MAAA;;MAAA,OACb,mBAAmB,CAAE,gBAAD,IAChB,gBAAgB,CAAC,MAAjB,CAAyB,eAAD,IACpB,OAAO,CAAC,IAAR,CAAc,MAAD,IAAY,MAAM,KAAK,eAAe,CAAC,MAApD,CADJ,CADe,CADN;IAAA,CAAf,CAJY,CAAlB;IAYA,OAAO,MAAM,SAAS,CAAC,OAAV,CAAmB,OAAD,IAAa,OAAO,EAAtC,CAAb;EACH,CAdQ,EAcN,CAAC,EAAD,CAdM,CAAT;EAgBA,OAAO,OAAO,CACV,MAAM,CACF,GAAG,gBADD,EAEF,GAAG,QAAQ,CAAC,MAAT,CAAgB,QAAa;IAAA,IAAZ;MAAE,IAAI,EAAJ;IAAF,CAAY;;IAC5B,IAAI,gBAAgB,CAAC,IAAjB,CAAuB,eAAD,IAAqB,eAAe,CAAC,IAAhB,KAAyB,IAApE,CAAJ,EAA+E;MAC3E,IAAI,CAAC,QAAQ,CAAC,GAAT,CAAa,IAAb,CAAL,EAAyB;QACrB,QAAQ,CAAC,GAAT,CAAa,IAAb;QACA,OAAO,CAAC,IAAR,CACI,GAAG,IAAI,gEAAgE,IAAI,gCAD/E;MAGH;;MACD,OAAO,KAAP;IACH;;IACD,OAAO,IAAP;EACH,CAXE,CAFD,CADI,EAgBV,CAAC,gBAAD,EAAmB,QAAnB,EAA6B,QAA7B,CAhBU,CAAd;AAkBH;;AAED,SAAS,WAAT,CAAwB,EAAxB,EAAmC;EAC/B,MAAM,GAAG,GAAG,MAAM,EAAlB;;EACA,IAAI,CAAC,GAAG,CAAC,OAAT,EAAkB;IACd,GAAG,CAAC,OAAJ,GAAc;MAAE,KAAK,EAAE,EAAE;IAAX,CAAd;EACH;;EACD,OAAO,GAAG,CAAC,OAAJ,CAAY,KAAnB;AACH;;AAED,SAAS,uBAAT,CAAiC,OAAjC,EAA+D;EAC3D,OAAO,OAAO,CAAC,MAAR,CAAe,+BAAf,EAAgD,GAAhD,CAAqD,MAAD,IAAY,IAAI,qBAAJ,CAA0B;IAAE,MAAM,EAAN;EAAF,CAA1B,CAAhE,CAAP;AACH","sourceRoot":"","sourcesContent":["import { isWalletAdapterCompatibleWallet, StandardWalletAdapter } from '@solana/wallet-standard-wallet-adapter-base';\nimport { DEPRECATED_getWallets } from '@wallet-standard/app';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nexport function useStandardWalletAdapters(adapters) {\n    const { get, on } = useConstant(() => DEPRECATED_getWallets());\n    const [standardAdapters, setStandardAdapters] = useState(() => wrapWalletsWithAdapters(get()));\n    const warnings = useConstant(() => new Set());\n    useEffect(() => {\n        const listeners = [\n            on('register', (...wallets) => setStandardAdapters((standardAdapters) => [...standardAdapters, ...wrapWalletsWithAdapters(wallets)])),\n            on('unregister', (...wallets) => setStandardAdapters((standardAdapters) => standardAdapters.filter((standardAdapter) => wallets.some((wallet) => wallet === standardAdapter.wallet)))),\n        ];\n        return () => listeners.forEach((destroy) => destroy());\n    }, [on]);\n    return useMemo(() => [\n        ...standardAdapters,\n        ...adapters.filter(({ name }) => {\n            if (standardAdapters.some((standardAdapter) => standardAdapter.name === name)) {\n                if (!warnings.has(name)) {\n                    warnings.add(name);\n                    console.warn(`${name} was registered as a Standard Wallet. The Wallet Adapter for ${name} can be removed from your app.`);\n                }\n                return false;\n            }\n            return true;\n        }),\n    ], [standardAdapters, adapters, warnings]);\n}\nfunction useConstant(fn) {\n    const ref = useRef();\n    if (!ref.current) {\n        ref.current = { value: fn() };\n    }\n    return ref.current.value;\n}\nfunction wrapWalletsWithAdapters(wallets) {\n    return wallets.filter(isWalletAdapterCompatibleWallet).map((wallet) => new StandardWalletAdapter({ wallet }));\n}\n//# sourceMappingURL=useStandardWalletAdapters.js.map"]},"metadata":{},"sourceType":"module"}