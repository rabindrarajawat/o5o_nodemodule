{"ast":null,"code":"var _jsxFileName = \"D:\\\\software\\\\o5o BNB\\\\o5o-staking-frontend\\\\src\\\\pages\\\\Admin.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable array-callback-return */\n\n/* eslint-disable no-lone-blocks */\nimport { web3 } from \"@project-serum/anchor\";\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\nimport axios from \"axios\";\nimport { useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { BACKEND_URL, GLOBAL_AUTHORITY_SEED, NEXT_PUBLIC_SOLANA_NETWORK, NEXT_PUBLIC_STAKE_CONTRACT_ID, REWARD_TOKEN, USER_POOL_SEED } from '../constant/env';\nimport * as anchor from \"@project-serum/anchor\";\nimport { PublicKey, Transaction } from \"@solana/web3.js\";\nimport { STAKE_CONTRACT_IDL } from \"../constant/contract\";\nimport { sendTransactions } from \"../helpers/sol/connection\";\nimport * as splToken from \"@solana/spl-token\";\nimport Loader from \"../components/loader/Loader\";\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { REWARD_TOKEN_DECIMALS } from './../constant/env';\nimport Sidebar from \"../components/views/Sidebar\";\nimport Navbar from \"../components/views/Navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Admin = () => {\n  _s();\n\n  const rewardMint = new PublicKey(REWARD_TOKEN);\n  const {\n    wallet: wallet\n  } = useWallet();\n  const anchorWallet = useAnchorWallet();\n  const solInputRef = useRef(null);\n  const connection = new anchor.web3.Connection(NEXT_PUBLIC_SOLANA_NETWORK == \"devnet\" ? \"https://api.devnet.solana.com\" : \"https://metaplex.mainnet.rpcpool.com\");\n  const [showLoader, setShowLoader] = useState(false);\n  const [globalData, setGlobalData] = useState();\n\n  const getTokenWallet = async (wallet, mint) => {\n    return (await anchor.web3.PublicKey.findProgramAddress([wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], ASSOCIATED_TOKEN_PROGRAM_ID))[0];\n  };\n\n  const getGlobalData = async anchorWallet => {\n    const programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID);\n    const idl = STAKE_CONTRACT_IDL;\n    const confirmOption = {\n      commitment: \"finalized\",\n      preflightCommitment: \"finalized\",\n      skipPreflight: false\n    };\n    let provider = new anchor.Provider(connection, anchorWallet, confirmOption);\n    let program = new anchor.Program(idl, programId, provider);\n    const [globalAuthority] = await PublicKey.findProgramAddress([Buffer.from(GLOBAL_AUTHORITY_SEED)], program.programId);\n    console.log(globalAuthority.toString());\n    const globalAuthorityInfo = await program.account.globalPool.fetch(globalAuthority);\n    console.log(\"globalAuthorityInfo\", globalAuthorityInfo);\n    return globalAuthorityInfo;\n  };\n\n  useEffect(() => {\n    try {\n      if (anchorWallet) {\n        setShowLoader(true);\n        getGlobalData(anchorWallet).then(res => {\n          setGlobalData(res);\n          setShowLoader(false);\n        }).catch(() => {\n          setShowLoader(false);\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }, [anchorWallet]);\n\n  const sendTransaction = async (transaction, signers, wallet) => {\n    try {\n      transaction.feePayer = wallet.publicKey;\n      transaction.recentBlockhash = (await connection.getRecentBlockhash(\"max\")).blockhash;\n      await transaction.setSigners(wallet.publicKey, ...signers.map(s => s.publicKey));\n      if (signers.length != 0) await transaction.partialSign(...signers);\n      const signedTransaction = await wallet.signTransaction(transaction);\n      let hash = await connection.sendRawTransaction(await signedTransaction.serialize());\n      await connection.confirmTransaction(hash);\n      toast.success(\"Transaction succeed.\");\n    } catch (err) {\n      console.log('error', err);\n      toast.error(\"Transaction failed. Please try again.\");\n    }\n  };\n\n  async function withFindOrInitAssociatedTokenAccount(transaction, connection, mint, owner, payer, allowOwnerOffCurve) {\n    const associatedAddress = await splToken.Token.getAssociatedTokenAddress(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, mint, owner, allowOwnerOffCurve);\n    const account = await connection.getAccountInfo(associatedAddress);\n\n    if (!account) {\n      transaction.add(splToken.Token.createAssociatedTokenAccountInstruction(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, mint, associatedAddress, owner, payer));\n    }\n\n    return associatedAddress;\n  }\n\n  const onAllocateReward = async () => {\n    try {\n      if (anchorWallet) {\n        const signersMatrix = [];\n        const instructionsMatrix = [];\n        const programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID);\n        const idl = STAKE_CONTRACT_IDL;\n        const confirmOption = {\n          commitment: \"finalized\",\n          preflightCommitment: \"finalized\",\n          skipPreflight: false\n        };\n        let provider = new anchor.Provider(connection, anchorWallet, confirmOption);\n        let program = new anchor.Program(idl, programId, provider);\n        const [globalAuthority] = await PublicKey.findProgramAddress([Buffer.from(GLOBAL_AUTHORITY_SEED)], program.programId);\n        console.log(globalAuthority.toString());\n        const globalAuthorityInfo = await program.account.globalPool.fetch(globalAuthority);\n        console.log(\"globalAuthorityInfo\", globalAuthorityInfo); // if (allocated_month == current_month && allocated_year == current_year) {\n        // \ttoast.error(\"You already allocate reward to users\");\n        // \treturn\n        // }\n\n        let keypair = anchor.web3.Keypair.generate();\n        let signers = [keypair];\n        let instructions = [];\n        instructions.push(program.instruction.initDurationPoint({\n          accounts: {\n            globalAuthority: globalAuthority\n          }\n        }));\n        signersMatrix.push(signers);\n        instructionsMatrix.push(instructions);\n        const users = (await axios.get(`${BACKEND_URL}/user/getUsers`)).data.users; // const users = await User.find().sort({ x: 1 });\n\n        console.log('users', users);\n        const signersMatrix2 = [];\n        const instructionsMatrix2 = [];\n\n        for (let i = 0; i < users.length; i++) {\n          let [userPool] = await PublicKey.findProgramAddress([Buffer.from(USER_POOL_SEED), new PublicKey(users[i].wallet).toBuffer()], program.programId);\n          let userPoolInfo = null;\n\n          try {\n            userPoolInfo = await program.account.userPool.fetch(userPool);\n          } catch {}\n\n          console.log('userPoolInfo', userPoolInfo);\n\n          if (userPoolInfo) {\n            let keypair1 = anchor.web3.Keypair.generate();\n            let signers1 = [keypair1];\n            let instructions1 = [];\n            console.log('instructions push');\n            instructions1.push(program.instruction.calcDurationBonus({\n              accounts: {\n                globalAuthority: globalAuthority,\n                userPool: userPool\n              }\n            }));\n            signersMatrix.push(signers1);\n            instructionsMatrix.push(instructions1);\n            let keypair2 = anchor.web3.Keypair.generate();\n            let signers2 = [keypair2];\n            let instructions2 = [];\n            console.log('instructions push');\n            instructions2.push(program.instruction.calcDailyReward({\n              accounts: {\n                globalAuthority: globalAuthority,\n                userPool: userPool\n              }\n            }));\n            signersMatrix2.push(signers2);\n            instructionsMatrix2.push(instructions2);\n          }\n        }\n\n        let keypair3 = anchor.web3.Keypair.generate();\n        let signers3 = [keypair3];\n        let instructions3 = [];\n        instructions3.push(program.instruction.initDurationPoint({\n          accounts: {\n            globalAuthority: globalAuthority\n          }\n        }));\n        signersMatrix2.push(signers3);\n        instructionsMatrix2.push(instructions3);\n        console.log('instructionsMatrix', [...instructionsMatrix, ...instructionsMatrix2]);\n        console.log('signersMatrix', [...signersMatrix, ...signersMatrix2]);\n        await sendTransactions(connection, anchorWallet, [...instructionsMatrix, ...instructionsMatrix2], [...signersMatrix, ...signersMatrix2]);\n        toast.success(\"The reward is allocated to users\"); // await sendTransaction(transaction, [], anchorWallet);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const onDepositToken = async () => {\n    var _solInputRef$current, _solInputRef$current2, _solInputRef$current3;\n\n    console.log(\"test\", (_solInputRef$current = solInputRef.current) === null || _solInputRef$current === void 0 ? void 0 : _solInputRef$current.value);\n\n    if (!((_solInputRef$current2 = solInputRef.current) !== null && _solInputRef$current2 !== void 0 && _solInputRef$current2.value) || Number((_solInputRef$current3 = solInputRef.current) === null || _solInputRef$current3 === void 0 ? void 0 : _solInputRef$current3.value) <= 0) {\n      toast.error(\"Input sol amount, please.\");\n      return;\n    }\n\n    try {\n      if (anchorWallet) {\n        var _solInputRef$current4;\n\n        setShowLoader(true);\n        const programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID);\n        const idl = STAKE_CONTRACT_IDL;\n        const confirmOption = {\n          commitment: \"finalized\",\n          preflightCommitment: \"finalized\",\n          skipPreflight: false\n        };\n        let provider = new anchor.Provider(connection, anchorWallet, confirmOption);\n        let program = new anchor.Program(idl, programId, provider);\n        const [globalAuthority] = await PublicKey.findProgramAddress([Buffer.from(GLOBAL_AUTHORITY_SEED)], program.programId);\n        var myToken = new Token(connection, rewardMint, TOKEN_PROGRAM_ID, wallet);\n        let sourceRewardAccount = await getTokenWallet(anchorWallet.publicKey, rewardMint);\n        console.log('source', sourceRewardAccount.toString());\n        console.log('global', globalAuthority.toString());\n        let srcAccInfo = await myToken.getAccountInfo(sourceRewardAccount);\n\n        if (!srcAccInfo) {\n          return;\n        }\n\n        let transaction = new Transaction();\n        let destRewardAccount = await withFindOrInitAssociatedTokenAccount(transaction, provider.connection, rewardMint, globalAuthority, anchorWallet.publicKey, true);\n        console.log('dest', destRewardAccount.toString());\n        console.log('lamports for sol', web3.LAMPORTS_PER_SOL);\n        let signers = [];\n        transaction.add(await program.instruction.depositToken(new anchor.BN(REWARD_TOKEN_DECIMALS * Number((_solInputRef$current4 = solInputRef.current) === null || _solInputRef$current4 === void 0 ? void 0 : _solInputRef$current4.value)), {\n          accounts: {\n            globalAuthority: globalAuthority,\n            owner: anchorWallet.publicKey,\n            sourceAccount: sourceRewardAccount,\n            destAccount: destRewardAccount,\n            tokenProgram: TOKEN_PROGRAM_ID\n          }\n        }));\n        await sendTransaction(transaction, signers, anchorWallet);\n        setShowLoader(false);\n      }\n    } catch (e) {\n      console.error(e);\n      setShowLoader(false);\n    }\n  };\n\n  const onWithdrawToken = async () => {\n    var _solInputRef$current5, _solInputRef$current6, _solInputRef$current7;\n\n    console.log(\"test\", (_solInputRef$current5 = solInputRef.current) === null || _solInputRef$current5 === void 0 ? void 0 : _solInputRef$current5.value);\n\n    if (!((_solInputRef$current6 = solInputRef.current) !== null && _solInputRef$current6 !== void 0 && _solInputRef$current6.value) || Number((_solInputRef$current7 = solInputRef.current) === null || _solInputRef$current7 === void 0 ? void 0 : _solInputRef$current7.value) <= 0) {\n      toast.error(\"Input sol amount, please.\");\n      return;\n    }\n\n    try {\n      if (anchorWallet) {\n        var _solInputRef$current8;\n\n        setShowLoader(true);\n        const programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID);\n        const idl = STAKE_CONTRACT_IDL;\n        const confirmOption = {\n          commitment: \"finalized\",\n          preflightCommitment: \"finalized\",\n          skipPreflight: false\n        };\n        let provider = new anchor.Provider(connection, anchorWallet, confirmOption);\n        let program = new anchor.Program(idl, programId, provider);\n        const [globalAuthority, globalBump] = await PublicKey.findProgramAddress([Buffer.from(GLOBAL_AUTHORITY_SEED)], program.programId);\n        var myToken = new Token(connection, rewardMint, TOKEN_PROGRAM_ID, wallet);\n        let sourceRewardAccount = await getTokenWallet(globalAuthority, rewardMint);\n        let srcAccInfo = await myToken.getAccountInfo(sourceRewardAccount);\n\n        if (!srcAccInfo) {\n          return;\n        }\n\n        let transaction = new Transaction();\n        let destRewardAccount = await withFindOrInitAssociatedTokenAccount(transaction, provider.connection, rewardMint, anchorWallet.publicKey, anchorWallet.publicKey, true);\n        console.log('src', sourceRewardAccount.toString());\n        console.log('dest', destRewardAccount.toString());\n        console.log('lamports for sol', web3.LAMPORTS_PER_SOL);\n        let signers = [];\n        transaction.add(await program.instruction.withdrawToken(new anchor.BN(REWARD_TOKEN_DECIMALS * Number((_solInputRef$current8 = solInputRef.current) === null || _solInputRef$current8 === void 0 ? void 0 : _solInputRef$current8.value)), {\n          accounts: {\n            globalAuthority: globalAuthority,\n            owner: anchorWallet.publicKey,\n            sourceAccount: sourceRewardAccount,\n            destAccount: destRewardAccount,\n            tokenProgram: TOKEN_PROGRAM_ID\n          }\n        }));\n        await sendTransaction(transaction, signers, anchorWallet);\n        setShowLoader(false);\n      }\n    } catch (e) {\n      console.error(e);\n      setShowLoader(false);\n    }\n  };\n\n  const [minSidebar, setMinSiderBar] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex h-full-screen\",\n    children: [showLoader && /*#__PURE__*/_jsxDEV(Loader, {\n      text: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(Sidebar, {\n      minSidebar: minSidebar,\n      setMinSiderBar: setMinSiderBar,\n      activeLink: \"admin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        setMinSiderBar: setMinSiderBar,\n        minSidebar: minSidebar,\n        globalData: undefined\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-4xl mt-5\",\n          children: \"Admin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center ml-5 py-5\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Total Staked NFTs : \", globalData ? globalData.stakedCount : 0]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center ml-5 py-5\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"durationPoint : \", globalData ? globalData.durationPoint.toNumber() : 0]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center ml-5 py-5\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"rarityPoint : \", globalData ? globalData.rarityPoint.toNumber() : 0]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center ml-5 py-5\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"accountVerifyPoint : \", globalData ? globalData.accountVerifyPoint.toNumber() : 0]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center ml-5 py-5\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Available Token : \", globalData ? Math.floor(globalData.availableTokenAmount.toNumber() / REWARD_TOKEN_DECIMALS * 100) / 100 : 0]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center ml-5 py-5\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Allocated Token : \", globalData ? Math.floor(globalData.allocatedTokenAmount.toNumber() / REWARD_TOKEN_DECIMALS * 100) / 100 : 0]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center ml-5 py-5\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Claimed Token : \", globalData ? Math.floor(globalData.claimedTokenAmount.toNumber() / REWARD_TOKEN_DECIMALS * 100) / 100 : 0]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center ml-5 py-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              ref: solInputRef,\n              type: \"number\",\n              className: \"py-3 px-3 rounded-2xl sm:w-1/4 w-full outline-none bg-LightPurple uppercase\",\n              placeholder: \"Input Token Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: onDepositToken,\n              className: \"sm:ml-5 ml-2 mt-2 sm:mt-0 bg-gradient-to-r from-primary to-secondary py-3 px-8 rounded-2xl cursor-pointer\",\n              children: \"Deposit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: onWithdrawToken,\n              className: \"sm:ml-5 ml-2 mt-2 sm:mt-0 bg-gradient-to-r from-primary to-secondary py-3 px-8 rounded-2xl cursor-pointer\",\n              children: \"Withdraw\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: onAllocateReward,\n              className: \"sm:ml-5 ml-2 mt-2 sm:mt-0 bg-gradient-to-r from-primary to-secondary py-3 px-8 rounded-2xl cursor-pointer mr-5\",\n              children: \"Allocate Rewards\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 442,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Admin, \"rgSlgOnI/A/rEEGFXgYfhegE2yA=\", false, function () {\n  return [useWallet, useAnchorWallet];\n});\n\n_c = Admin;\nexport default Admin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"names":["web3","useAnchorWallet","useWallet","axios","useEffect","useRef","useState","toast","BACKEND_URL","GLOBAL_AUTHORITY_SEED","NEXT_PUBLIC_SOLANA_NETWORK","NEXT_PUBLIC_STAKE_CONTRACT_ID","REWARD_TOKEN","USER_POOL_SEED","anchor","PublicKey","Transaction","STAKE_CONTRACT_IDL","sendTransactions","splToken","Loader","ASSOCIATED_TOKEN_PROGRAM_ID","Token","TOKEN_PROGRAM_ID","REWARD_TOKEN_DECIMALS","Sidebar","Navbar","Admin","rewardMint","wallet","anchorWallet","solInputRef","connection","Connection","showLoader","setShowLoader","globalData","setGlobalData","getTokenWallet","mint","findProgramAddress","toBuffer","getGlobalData","programId","idl","confirmOption","commitment","preflightCommitment","skipPreflight","provider","Provider","program","Program","globalAuthority","Buffer","from","console","log","toString","globalAuthorityInfo","account","globalPool","fetch","then","res","catch","error","sendTransaction","transaction","signers","feePayer","publicKey","recentBlockhash","getRecentBlockhash","blockhash","setSigners","map","s","length","partialSign","signedTransaction","signTransaction","hash","sendRawTransaction","serialize","confirmTransaction","success","err","withFindOrInitAssociatedTokenAccount","owner","payer","allowOwnerOffCurve","associatedAddress","getAssociatedTokenAddress","getAccountInfo","add","createAssociatedTokenAccountInstruction","onAllocateReward","signersMatrix","instructionsMatrix","keypair","Keypair","generate","instructions","push","instruction","initDurationPoint","accounts","users","get","data","signersMatrix2","instructionsMatrix2","i","userPool","userPoolInfo","keypair1","signers1","instructions1","calcDurationBonus","keypair2","signers2","instructions2","calcDailyReward","keypair3","signers3","instructions3","e","onDepositToken","current","value","Number","myToken","sourceRewardAccount","srcAccInfo","destRewardAccount","LAMPORTS_PER_SOL","depositToken","BN","sourceAccount","destAccount","tokenProgram","onWithdrawToken","globalBump","withdrawToken","minSidebar","setMinSiderBar","undefined","stakedCount","durationPoint","toNumber","rarityPoint","accountVerifyPoint","Math","floor","availableTokenAmount","allocatedTokenAmount","claimedTokenAmount"],"sources":["D:/software/o5o BNB/o5o-staking-frontend/src/pages/Admin.tsx"],"sourcesContent":["/* eslint-disable array-callback-return */\r\n/* eslint-disable no-lone-blocks */\r\nimport { web3 } from \"@project-serum/anchor\";\r\nimport { AnchorWallet, useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletMultiButton, } from \"@solana/wallet-adapter-react-ui\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { BACKEND_URL, GLOBAL_AUTHORITY_SEED, NEXT_PUBLIC_SOLANA_NETWORK, NEXT_PUBLIC_STAKE_CONTRACT_ID, REWARD_TOKEN, USER_POOL_SEED } from '../constant/env';\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { ConfirmOptions, Connection, Keypair, PublicKey, Transaction } from \"@solana/web3.js\";\r\nimport { STAKE_CONTRACT_IDL } from \"../constant/contract\";\r\nimport { sendTransactions } from \"../helpers/sol/connection\";\r\nimport * as splToken from \"@solana/spl-token\";\r\nimport Loader from \"../components/loader/Loader\";\r\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { REWARD_TOKEN_DECIMALS } from './../constant/env';\r\nimport Sidebar from \"../components/views/Sidebar\";\r\nimport Navbar from \"../components/views/Navbar\";\r\n\r\n\r\nconst Admin = () => {\r\n\r\n\tconst rewardMint = new PublicKey(REWARD_TOKEN);\r\n\r\n\tconst { wallet } = useWallet();\r\n\r\n\tconst anchorWallet = useAnchorWallet();\r\n\r\n\tconst solInputRef = useRef<HTMLInputElement>(null);\r\n\r\n\tconst connection = new anchor.web3.Connection(\r\n\t\tNEXT_PUBLIC_SOLANA_NETWORK == \"devnet\"\r\n\t\t\t? \"https://api.devnet.solana.com\"\r\n\t\t\t: \"https://metaplex.mainnet.rpcpool.com\"\r\n\t);\r\n\r\n\tconst [showLoader, setShowLoader] = useState(false);\r\n\tconst [globalData, setGlobalData] = useState<any>();\r\n\r\n\tconst getTokenWallet = async (\r\n\t\twallet: anchor.web3.PublicKey,\r\n\t\tmint: anchor.web3.PublicKey\r\n\t) => {\r\n\t\treturn (\r\n\t\t\tawait anchor.web3.PublicKey.findProgramAddress(\r\n\t\t\t\t[wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n\t\t\t\tASSOCIATED_TOKEN_PROGRAM_ID\r\n\t\t\t)\r\n\t\t)[0];\r\n\t};\r\n\r\n\tconst getGlobalData = async (anchorWallet: AnchorWallet) => {\r\n\t\tconst programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID!);\r\n\t\tconst idl = STAKE_CONTRACT_IDL as anchor.Idl;\r\n\r\n\t\tconst confirmOption: ConfirmOptions = {\r\n\t\t\tcommitment: \"finalized\",\r\n\t\t\tpreflightCommitment: \"finalized\",\r\n\t\t\tskipPreflight: false,\r\n\t\t};\r\n\t\tlet provider = new anchor.Provider(connection, anchorWallet, confirmOption);\r\n\t\tlet program = new anchor.Program(idl, programId, provider);\r\n\r\n\t\tconst [globalAuthority] = await PublicKey.findProgramAddress(\r\n\t\t\t[Buffer.from(GLOBAL_AUTHORITY_SEED)],\r\n\t\t\tprogram.programId\r\n\t\t);\r\n\r\n\t\tconsole.log(globalAuthority.toString())\r\n\r\n\t\tconst globalAuthorityInfo = await program.account.globalPool.fetch(globalAuthority);\r\n\r\n\t\tconsole.log(\"globalAuthorityInfo\", globalAuthorityInfo)\r\n\r\n\t\treturn globalAuthorityInfo;\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\ttry {\r\n\t\t\tif (anchorWallet) {\r\n\t\t\t\tsetShowLoader(true);\r\n\t\t\t\tgetGlobalData(anchorWallet).then((res) => {\r\n\t\t\t\t\tsetGlobalData(res);\r\n\t\t\t\t\tsetShowLoader(false);\r\n\t\t\t\t}).catch(() => {\r\n\t\t\t\t\tsetShowLoader(false);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t}, [anchorWallet]);\r\n\r\n\tconst sendTransaction = async (\r\n\t\ttransaction: Transaction,\r\n\t\tsigners: Keypair[],\r\n\t\twallet: AnchorWallet\r\n\t) => {\r\n\t\ttry {\r\n\t\t\ttransaction.feePayer = wallet.publicKey;\r\n\t\t\ttransaction.recentBlockhash = (\r\n\t\t\t\tawait connection.getRecentBlockhash(\"max\")\r\n\t\t\t).blockhash;\r\n\t\t\tawait transaction.setSigners(\r\n\t\t\t\twallet.publicKey,\r\n\t\t\t\t...signers.map((s) => s.publicKey)\r\n\t\t\t);\r\n\t\t\tif (signers.length != 0) await transaction.partialSign(...signers);\r\n\t\t\tconst signedTransaction = await wallet.signTransaction(transaction);\r\n\t\t\tlet hash = await connection.sendRawTransaction(\r\n\t\t\t\tawait signedTransaction.serialize()\r\n\t\t\t);\r\n\t\t\tawait connection.confirmTransaction(hash);\r\n\t\t\ttoast.success(\"Transaction succeed.\");\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log('error', err)\r\n\t\t\ttoast.error(\"Transaction failed. Please try again.\");\r\n\t\t}\r\n\t};\r\n\r\n\tasync function withFindOrInitAssociatedTokenAccount(\r\n\t\ttransaction: Transaction,\r\n\t\tconnection: Connection,\r\n\t\tmint: PublicKey,\r\n\t\towner: PublicKey,\r\n\t\tpayer: PublicKey,\r\n\t\tallowOwnerOffCurve: boolean\r\n\t) {\r\n\t\tconst associatedAddress = await splToken.Token.getAssociatedTokenAddress(\r\n\t\t\tsplToken.ASSOCIATED_TOKEN_PROGRAM_ID,\r\n\t\t\tsplToken.TOKEN_PROGRAM_ID,\r\n\t\t\tmint,\r\n\t\t\towner,\r\n\t\t\tallowOwnerOffCurve\r\n\t\t);\r\n\t\tconst account = await connection.getAccountInfo(associatedAddress);\r\n\t\tif (!account) {\r\n\t\t\ttransaction.add(\r\n\t\t\t\tsplToken.Token.createAssociatedTokenAccountInstruction(\r\n\t\t\t\t\tsplToken.ASSOCIATED_TOKEN_PROGRAM_ID,\r\n\t\t\t\t\tsplToken.TOKEN_PROGRAM_ID,\r\n\t\t\t\t\tmint,\r\n\t\t\t\t\tassociatedAddress,\r\n\t\t\t\t\towner,\r\n\t\t\t\t\tpayer\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn associatedAddress;\r\n\t}\r\n\r\n\tconst onAllocateReward = async () => {\r\n\t\ttry {\r\n\t\t\tif (anchorWallet) {\r\n\t\t\t\tconst signersMatrix: any[] = [];\r\n\t\t\t\tconst instructionsMatrix: any[] = [];\r\n\r\n\t\t\t\tconst programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID!);\r\n\t\t\t\tconst idl = STAKE_CONTRACT_IDL as anchor.Idl;\r\n\r\n\t\t\t\tconst confirmOption: ConfirmOptions = {\r\n\t\t\t\t\tcommitment: \"finalized\",\r\n\t\t\t\t\tpreflightCommitment: \"finalized\",\r\n\t\t\t\t\tskipPreflight: false,\r\n\t\t\t\t};\r\n\t\t\t\tlet provider = new anchor.Provider(connection, anchorWallet, confirmOption);\r\n\t\t\t\tlet program = new anchor.Program(idl, programId, provider);\r\n\r\n\t\t\t\tconst [globalAuthority] = await PublicKey.findProgramAddress(\r\n\t\t\t\t\t[Buffer.from(GLOBAL_AUTHORITY_SEED)],\r\n\t\t\t\t\tprogram.programId\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconsole.log(globalAuthority.toString())\r\n\r\n\t\t\t\tconst globalAuthorityInfo = await program.account.globalPool.fetch(globalAuthority);\r\n\r\n\t\t\t\tconsole.log(\"globalAuthorityInfo\", globalAuthorityInfo)\r\n\t\t\t\t// if (allocated_month == current_month && allocated_year == current_year) {\r\n\t\t\t\t// \ttoast.error(\"You already allocate reward to users\");\r\n\t\t\t\t// \treturn\r\n\t\t\t\t// }\r\n\r\n\t\t\t\tlet keypair = anchor.web3.Keypair.generate();\r\n\t\t\t\tlet signers = [keypair];\r\n\t\t\t\tlet instructions = [];\r\n\t\t\t\tinstructions.push(\r\n\t\t\t\t\tprogram.instruction.initDurationPoint({\r\n\t\t\t\t\t\taccounts: {\r\n\t\t\t\t\t\t\tglobalAuthority: globalAuthority\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t\tsignersMatrix.push(signers);\r\n\t\t\t\tinstructionsMatrix.push(instructions);\r\n\r\n\t\t\t\tconst users = (await axios.get(`${BACKEND_URL}/user/getUsers`)).data.users;\r\n\t\t\t\t// const users = await User.find().sort({ x: 1 });\r\n\t\t\t\tconsole.log('users', users)\r\n\r\n\t\t\t\tconst signersMatrix2 = [];\r\n\t\t\t\tconst instructionsMatrix2 = [];\r\n\r\n\t\t\t\tfor (let i = 0; i < users.length; i++) {\r\n\t\t\t\t\tlet [userPool] = await PublicKey.findProgramAddress(\r\n\t\t\t\t\t\t[Buffer.from(USER_POOL_SEED), new PublicKey(users[i].wallet).toBuffer()],\r\n\t\t\t\t\t\tprogram.programId\r\n\t\t\t\t\t);\r\n\t\t\t\t\tlet userPoolInfo = null;\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tuserPoolInfo = await program.account.userPool.fetch(userPool);\r\n\t\t\t\t\t} catch { }\r\n\r\n\t\t\t\t\tconsole.log('userPoolInfo', userPoolInfo)\r\n\r\n\t\t\t\t\tif (userPoolInfo) {\r\n\t\t\t\t\t\tlet keypair1 = anchor.web3.Keypair.generate();\r\n\t\t\t\t\t\tlet signers1 = [keypair1];\r\n\t\t\t\t\t\tlet instructions1 = [];\r\n\r\n\t\t\t\t\t\tconsole.log('instructions push')\r\n\t\t\t\t\t\tinstructions1.push(\r\n\t\t\t\t\t\t\tprogram.instruction.calcDurationBonus({\r\n\t\t\t\t\t\t\t\taccounts: {\r\n\t\t\t\t\t\t\t\t\tglobalAuthority: globalAuthority,\r\n\t\t\t\t\t\t\t\t\tuserPool: userPool,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tsignersMatrix.push(signers1);\r\n\t\t\t\t\t\tinstructionsMatrix.push(instructions1);\r\n\r\n\t\t\t\t\t\tlet keypair2 = anchor.web3.Keypair.generate();\r\n\t\t\t\t\t\tlet signers2 = [keypair2];\r\n\t\t\t\t\t\tlet instructions2: any[] = [];\r\n\r\n\t\t\t\t\t\tconsole.log('instructions push')\r\n\t\t\t\t\t\tinstructions2.push(\r\n\t\t\t\t\t\t\tprogram.instruction.calcDailyReward({\r\n\t\t\t\t\t\t\t\taccounts: {\r\n\t\t\t\t\t\t\t\t\tglobalAuthority: globalAuthority,\r\n\t\t\t\t\t\t\t\t\tuserPool: userPool,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tsignersMatrix2.push(signers2);\r\n\t\t\t\t\t\tinstructionsMatrix2.push(instructions2);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tlet keypair3 = anchor.web3.Keypair.generate();\r\n\t\t\t\tlet signers3 = [keypair3];\r\n\t\t\t\tlet instructions3 = [];\r\n\t\t\t\tinstructions3.push(\r\n\t\t\t\t\tprogram.instruction.initDurationPoint({\r\n\t\t\t\t\t\taccounts: {\r\n\t\t\t\t\t\t\tglobalAuthority: globalAuthority\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t\tsignersMatrix2.push(signers3);\r\n\t\t\t\tinstructionsMatrix2.push(instructions3);\r\n\r\n\t\t\t\tconsole.log('instructionsMatrix', [...instructionsMatrix, ...instructionsMatrix2]);\r\n\t\t\t\tconsole.log('signersMatrix', [...signersMatrix, ...signersMatrix2]);\r\n\t\t\t\tawait sendTransactions(\r\n\t\t\t\t\tconnection,\r\n\t\t\t\t\tanchorWallet,\r\n\t\t\t\t\t[...instructionsMatrix, ...instructionsMatrix2],\r\n\t\t\t\t\t[...signersMatrix, ...signersMatrix2],\r\n\t\t\t\t);\r\n\r\n\t\t\t\ttoast.success(\"The reward is allocated to users\")\r\n\t\t\t\t// await sendTransaction(transaction, [], anchorWallet);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tconsole.error(e)\r\n\t\t}\r\n\t}\r\n\r\n\tconst onDepositToken = async () => {\r\n\t\tconsole.log(\"test\", solInputRef.current?.value)\r\n\t\tif (!solInputRef.current?.value || Number(solInputRef.current?.value) <= 0) {\r\n\t\t\ttoast.error(\"Input sol amount, please.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tif (anchorWallet) {\r\n\t\t\t\tsetShowLoader(true);\r\n\t\t\t\tconst programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID!);\r\n\t\t\t\tconst idl = STAKE_CONTRACT_IDL as anchor.Idl;\r\n\r\n\t\t\t\tconst confirmOption: ConfirmOptions = {\r\n\t\t\t\t\tcommitment: \"finalized\",\r\n\t\t\t\t\tpreflightCommitment: \"finalized\",\r\n\t\t\t\t\tskipPreflight: false,\r\n\t\t\t\t};\r\n\t\t\t\tlet provider = new anchor.Provider(connection, anchorWallet, confirmOption);\r\n\t\t\t\tlet program = new anchor.Program(idl, programId, provider);\r\n\r\n\t\t\t\tconst [globalAuthority] = await PublicKey.findProgramAddress(\r\n\t\t\t\t\t[Buffer.from(GLOBAL_AUTHORITY_SEED)],\r\n\t\t\t\t\tprogram.programId\r\n\t\t\t\t);\r\n\r\n\t\t\t\tvar myToken = new Token(\r\n\t\t\t\t\tconnection,\r\n\t\t\t\t\trewardMint,\r\n\t\t\t\t\tTOKEN_PROGRAM_ID,\r\n\t\t\t\t\twallet as any\r\n\t\t\t\t);\r\n\t\t\t\tlet sourceRewardAccount = await getTokenWallet(anchorWallet.publicKey, rewardMint);\r\n\t\t\t\tconsole.log('source', sourceRewardAccount.toString());\r\n\t\t\t\tconsole.log('global', globalAuthority.toString());\r\n\t\t\t\tlet srcAccInfo = await myToken.getAccountInfo(sourceRewardAccount);\r\n\t\t\t\tif (!srcAccInfo) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet transaction = new Transaction();\r\n\r\n\t\t\t\tlet destRewardAccount = await withFindOrInitAssociatedTokenAccount(\r\n\t\t\t\t\ttransaction,\r\n\t\t\t\t\tprovider.connection,\r\n\t\t\t\t\trewardMint,\r\n\t\t\t\t\tglobalAuthority,\r\n\t\t\t\t\tanchorWallet.publicKey,\r\n\t\t\t\t\ttrue\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconsole.log('dest', destRewardAccount.toString());\r\n\t\t\t\tconsole.log('lamports for sol', web3.LAMPORTS_PER_SOL);\r\n\r\n\r\n\t\t\t\tlet signers: Keypair[] = [];\r\n\t\t\t\ttransaction.add(\r\n\t\t\t\t\tawait program.instruction.depositToken(new anchor.BN(REWARD_TOKEN_DECIMALS * Number(solInputRef.current?.value)), {\r\n\t\t\t\t\t\taccounts: {\r\n\t\t\t\t\t\t\tglobalAuthority: globalAuthority,\r\n\t\t\t\t\t\t\towner: anchorWallet.publicKey,\r\n\t\t\t\t\t\t\tsourceAccount: sourceRewardAccount,\r\n\t\t\t\t\t\t\tdestAccount: destRewardAccount,\r\n\t\t\t\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\r\n\t\t\t\tawait sendTransaction(transaction, signers, anchorWallet);\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tconsole.error(e)\r\n\t\t\tsetShowLoader(false);\r\n\t\t}\r\n\t}\r\n\r\n\tconst onWithdrawToken = async () => {\r\n\t\tconsole.log(\"test\", solInputRef.current?.value)\r\n\t\tif (!solInputRef.current?.value || Number(solInputRef.current?.value) <= 0) {\r\n\t\t\ttoast.error(\"Input sol amount, please.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tif (anchorWallet) {\r\n\t\t\t\tsetShowLoader(true);\r\n\t\t\t\tconst programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID!);\r\n\t\t\t\tconst idl = STAKE_CONTRACT_IDL as anchor.Idl;\r\n\r\n\t\t\t\tconst confirmOption: ConfirmOptions = {\r\n\t\t\t\t\tcommitment: \"finalized\",\r\n\t\t\t\t\tpreflightCommitment: \"finalized\",\r\n\t\t\t\t\tskipPreflight: false,\r\n\t\t\t\t};\r\n\t\t\t\tlet provider = new anchor.Provider(connection, anchorWallet, confirmOption);\r\n\t\t\t\tlet program = new anchor.Program(idl, programId, provider);\r\n\r\n\t\t\t\tconst [globalAuthority, globalBump] = await PublicKey.findProgramAddress(\r\n\t\t\t\t\t[Buffer.from(GLOBAL_AUTHORITY_SEED)],\r\n\t\t\t\t\tprogram.programId\r\n\t\t\t\t);\r\n\r\n\t\t\t\tvar myToken = new Token(\r\n\t\t\t\t\tconnection,\r\n\t\t\t\t\trewardMint,\r\n\t\t\t\t\tTOKEN_PROGRAM_ID,\r\n\t\t\t\t\twallet as any\r\n\t\t\t\t);\r\n\t\t\t\tlet sourceRewardAccount = await getTokenWallet(globalAuthority, rewardMint);\r\n\t\t\t\tlet srcAccInfo = await myToken.getAccountInfo(sourceRewardAccount);\r\n\t\t\t\tif (!srcAccInfo) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet transaction = new Transaction();\r\n\r\n\t\t\t\tlet destRewardAccount = await withFindOrInitAssociatedTokenAccount(\r\n\t\t\t\t\ttransaction,\r\n\t\t\t\t\tprovider.connection,\r\n\t\t\t\t\trewardMint,\r\n\t\t\t\t\tanchorWallet.publicKey,\r\n\t\t\t\t\tanchorWallet.publicKey,\r\n\t\t\t\t\ttrue\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconsole.log('src', sourceRewardAccount.toString());\r\n\t\t\t\tconsole.log('dest', destRewardAccount.toString());\r\n\t\t\t\tconsole.log('lamports for sol', web3.LAMPORTS_PER_SOL);\r\n\r\n\t\t\t\tlet signers: Keypair[] = [];\r\n\t\t\t\ttransaction.add(\r\n\t\t\t\t\tawait program.instruction.withdrawToken(new anchor.BN(REWARD_TOKEN_DECIMALS * Number(solInputRef.current?.value)), {\r\n\t\t\t\t\t\taccounts: {\r\n\t\t\t\t\t\t\tglobalAuthority: globalAuthority,\r\n\t\t\t\t\t\t\towner: anchorWallet.publicKey,\r\n\t\t\t\t\t\t\tsourceAccount: sourceRewardAccount,\r\n\t\t\t\t\t\t\tdestAccount: destRewardAccount,\r\n\t\t\t\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\r\n\t\t\t\tawait sendTransaction(transaction, signers, anchorWallet);\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tconsole.error(e)\r\n\t\t\tsetShowLoader(false);\r\n\t\t}\r\n\t}\r\n\tconst [minSidebar, setMinSiderBar] = useState(false);\r\n\t\r\n\treturn (\r\n\t\t<div className=\"flex h-full-screen\">\r\n\t\t\t{(showLoader) && <Loader text={\"Loading\"} />}\r\n\t\t\t<Sidebar minSidebar={minSidebar} setMinSiderBar={setMinSiderBar} activeLink=\"admin\" />\r\n\t\t\t<div className=\"w-full h-full\">\r\n\t\t\t\t<Navbar setMinSiderBar={setMinSiderBar} minSidebar={minSidebar}  globalData={undefined}/>\r\n\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t<h1 className=\"text-4xl mt-5\">Admin</h1>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\r\n\t\t\t\t\t\t\t<span>Total Staked NFTs : {globalData ? globalData.stakedCount : 0}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\r\n\t\t\t\t\t\t\t<span>durationPoint : {globalData ? globalData.durationPoint.toNumber() : 0}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\r\n\t\t\t\t\t\t\t<span>rarityPoint : {globalData ? globalData.rarityPoint.toNumber() : 0}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\r\n\t\t\t\t\t\t\t<span>accountVerifyPoint : {globalData ? globalData.accountVerifyPoint.toNumber() : 0}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\r\n\t\t\t\t\t\t\t<span>Available Token : {globalData ? Math.floor(globalData.availableTokenAmount.toNumber()/REWARD_TOKEN_DECIMALS * 100) / 100 : 0}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\r\n\t\t\t\t\t\t\t<span>Allocated Token : {globalData ? Math.floor(globalData.allocatedTokenAmount.toNumber()/REWARD_TOKEN_DECIMALS * 100) / 100 : 0}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\r\n\t\t\t\t\t\t\t<span>Claimed Token : {globalData ? Math.floor(globalData.claimedTokenAmount.toNumber()/REWARD_TOKEN_DECIMALS * 100) / 100  : 0}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\r\n\t\t\t\t\t\t\t<input ref={solInputRef} type=\"number\" className=\"py-3 px-3 rounded-2xl sm:w-1/4 w-full outline-none bg-LightPurple uppercase\" placeholder=\"Input Token Amount\" />\r\n\t\t\t\t\t\t\t<button onClick={onDepositToken} className=\"sm:ml-5 ml-2 mt-2 sm:mt-0 bg-gradient-to-r from-primary to-secondary py-3 px-8 rounded-2xl cursor-pointer\">\r\n\t\t\t\t\t\t\t\tDeposit\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t<button onClick={onWithdrawToken} className=\"sm:ml-5 ml-2 mt-2 sm:mt-0 bg-gradient-to-r from-primary to-secondary py-3 px-8 rounded-2xl cursor-pointer\">\r\n\t\t\t\t\t\t\t\tWithdraw\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t<button onClick={onAllocateReward} className=\"sm:ml-5 ml-2 mt-2 sm:mt-0 bg-gradient-to-r from-primary to-secondary py-3 px-8 rounded-2xl cursor-pointer mr-5\">\r\n\t\t\t\t\t\t\t\tAllocate Rewards\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Admin;\r\n"],"mappings":";;;AAAA;;AACA;AACA,SAASA,IAAT,QAAqB,uBAArB;AACA,SAAuBC,eAAvB,EAAwCC,SAAxC,QAAyD,8BAAzD;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,SAASC,WAAT,EAAsBC,qBAAtB,EAA6CC,0BAA7C,EAAyEC,6BAAzE,EAAwGC,YAAxG,EAAsHC,cAAtH,QAA4I,iBAA5I;AACA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;AACA,SAA8CC,SAA9C,EAAyDC,WAAzD,QAA4E,iBAA5E;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,OAAO,KAAKC,QAAZ,MAA0B,mBAA1B;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAASC,2BAAT,EAAsCC,KAAtC,EAA6CC,gBAA7C,QAAqE,mBAArE;AACA,SAASC,qBAAT,QAAsC,mBAAtC;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;;;AAGA,MAAMC,KAAK,GAAG,MAAM;EAAA;;EAEnB,MAAMC,UAAU,GAAG,IAAIb,SAAJ,CAAcH,YAAd,CAAnB;EAEA,MAAM;IAAEiB,MAAM,EAANA;EAAF,IAAa3B,SAAS,EAA5B;EAEA,MAAM4B,YAAY,GAAG7B,eAAe,EAApC;EAEA,MAAM8B,WAAW,GAAG1B,MAAM,CAAmB,IAAnB,CAA1B;EAEA,MAAM2B,UAAU,GAAG,IAAIlB,MAAM,CAACd,IAAP,CAAYiC,UAAhB,CAClBvB,0BAA0B,IAAI,QAA9B,GACG,+BADH,GAEG,sCAHe,CAAnB;EAMA,MAAM,CAACwB,UAAD,EAAaC,aAAb,IAA8B7B,QAAQ,CAAC,KAAD,CAA5C;EACA,MAAM,CAAC8B,UAAD,EAAaC,aAAb,IAA8B/B,QAAQ,EAA5C;;EAEA,MAAMgC,cAAc,GAAG,OACtBT,MADsB,EAEtBU,IAFsB,KAGlB;IACJ,OAAO,CACN,MAAMzB,MAAM,CAACd,IAAP,CAAYe,SAAZ,CAAsByB,kBAAtB,CACL,CAACX,MAAM,CAACY,QAAP,EAAD,EAAoBlB,gBAAgB,CAACkB,QAAjB,EAApB,EAAiDF,IAAI,CAACE,QAAL,EAAjD,CADK,EAELpB,2BAFK,CADA,EAKL,CALK,CAAP;EAMA,CAVD;;EAYA,MAAMqB,aAAa,GAAG,MAAOZ,YAAP,IAAsC;IAC3D,MAAMa,SAAS,GAAG,IAAI5B,SAAJ,CAAcJ,6BAAd,CAAlB;IACA,MAAMiC,GAAG,GAAG3B,kBAAZ;IAEA,MAAM4B,aAA6B,GAAG;MACrCC,UAAU,EAAE,WADyB;MAErCC,mBAAmB,EAAE,WAFgB;MAGrCC,aAAa,EAAE;IAHsB,CAAtC;IAKA,IAAIC,QAAQ,GAAG,IAAInC,MAAM,CAACoC,QAAX,CAAoBlB,UAApB,EAAgCF,YAAhC,EAA8Ce,aAA9C,CAAf;IACA,IAAIM,OAAO,GAAG,IAAIrC,MAAM,CAACsC,OAAX,CAAmBR,GAAnB,EAAwBD,SAAxB,EAAmCM,QAAnC,CAAd;IAEA,MAAM,CAACI,eAAD,IAAoB,MAAMtC,SAAS,CAACyB,kBAAV,CAC/B,CAACc,MAAM,CAACC,IAAP,CAAY9C,qBAAZ,CAAD,CAD+B,EAE/B0C,OAAO,CAACR,SAFuB,CAAhC;IAKAa,OAAO,CAACC,GAAR,CAAYJ,eAAe,CAACK,QAAhB,EAAZ;IAEA,MAAMC,mBAAmB,GAAG,MAAMR,OAAO,CAACS,OAAR,CAAgBC,UAAhB,CAA2BC,KAA3B,CAAiCT,eAAjC,CAAlC;IAEAG,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCE,mBAAnC;IAEA,OAAOA,mBAAP;EACA,CAxBD;;EA0BAvD,SAAS,CAAC,MAAM;IACf,IAAI;MACH,IAAI0B,YAAJ,EAAkB;QACjBK,aAAa,CAAC,IAAD,CAAb;QACAO,aAAa,CAACZ,YAAD,CAAb,CAA4BiC,IAA5B,CAAkCC,GAAD,IAAS;UACzC3B,aAAa,CAAC2B,GAAD,CAAb;UACA7B,aAAa,CAAC,KAAD,CAAb;QACA,CAHD,EAGG8B,KAHH,CAGS,MAAM;UACd9B,aAAa,CAAC,KAAD,CAAb;QACA,CALD;MAMA;IACD,CAVD,CAUE,OAAO+B,KAAP,EAAc;MACfV,OAAO,CAACC,GAAR,CAAYS,KAAZ;IACA;EACD,CAdQ,EAcN,CAACpC,YAAD,CAdM,CAAT;;EAgBA,MAAMqC,eAAe,GAAG,OACvBC,WADuB,EAEvBC,OAFuB,EAGvBxC,MAHuB,KAInB;IACJ,IAAI;MACHuC,WAAW,CAACE,QAAZ,GAAuBzC,MAAM,CAAC0C,SAA9B;MACAH,WAAW,CAACI,eAAZ,GAA8B,CAC7B,MAAMxC,UAAU,CAACyC,kBAAX,CAA8B,KAA9B,CADuB,EAE5BC,SAFF;MAGA,MAAMN,WAAW,CAACO,UAAZ,CACL9C,MAAM,CAAC0C,SADF,EAEL,GAAGF,OAAO,CAACO,GAAR,CAAaC,CAAD,IAAOA,CAAC,CAACN,SAArB,CAFE,CAAN;MAIA,IAAIF,OAAO,CAACS,MAAR,IAAkB,CAAtB,EAAyB,MAAMV,WAAW,CAACW,WAAZ,CAAwB,GAAGV,OAA3B,CAAN;MACzB,MAAMW,iBAAiB,GAAG,MAAMnD,MAAM,CAACoD,eAAP,CAAuBb,WAAvB,CAAhC;MACA,IAAIc,IAAI,GAAG,MAAMlD,UAAU,CAACmD,kBAAX,CAChB,MAAMH,iBAAiB,CAACI,SAAlB,EADU,CAAjB;MAGA,MAAMpD,UAAU,CAACqD,kBAAX,CAA8BH,IAA9B,CAAN;MACA3E,KAAK,CAAC+E,OAAN,CAAc,sBAAd;IACA,CAhBD,CAgBE,OAAOC,GAAP,EAAY;MACb/B,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB8B,GAArB;MACAhF,KAAK,CAAC2D,KAAN,CAAY,uCAAZ;IACA;EACD,CAzBD;;EA2BA,eAAesB,oCAAf,CACCpB,WADD,EAECpC,UAFD,EAGCO,IAHD,EAICkD,KAJD,EAKCC,KALD,EAMCC,kBAND,EAOE;IACD,MAAMC,iBAAiB,GAAG,MAAMzE,QAAQ,CAACG,KAAT,CAAeuE,yBAAf,CAC/B1E,QAAQ,CAACE,2BADsB,EAE/BF,QAAQ,CAACI,gBAFsB,EAG/BgB,IAH+B,EAI/BkD,KAJ+B,EAK/BE,kBAL+B,CAAhC;IAOA,MAAM/B,OAAO,GAAG,MAAM5B,UAAU,CAAC8D,cAAX,CAA0BF,iBAA1B,CAAtB;;IACA,IAAI,CAAChC,OAAL,EAAc;MACbQ,WAAW,CAAC2B,GAAZ,CACC5E,QAAQ,CAACG,KAAT,CAAe0E,uCAAf,CACC7E,QAAQ,CAACE,2BADV,EAECF,QAAQ,CAACI,gBAFV,EAGCgB,IAHD,EAICqD,iBAJD,EAKCH,KALD,EAMCC,KAND,CADD;IAUA;;IACD,OAAOE,iBAAP;EACA;;EAED,MAAMK,gBAAgB,GAAG,YAAY;IACpC,IAAI;MACH,IAAInE,YAAJ,EAAkB;QACjB,MAAMoE,aAAoB,GAAG,EAA7B;QACA,MAAMC,kBAAyB,GAAG,EAAlC;QAEA,MAAMxD,SAAS,GAAG,IAAI5B,SAAJ,CAAcJ,6BAAd,CAAlB;QACA,MAAMiC,GAAG,GAAG3B,kBAAZ;QAEA,MAAM4B,aAA6B,GAAG;UACrCC,UAAU,EAAE,WADyB;UAErCC,mBAAmB,EAAE,WAFgB;UAGrCC,aAAa,EAAE;QAHsB,CAAtC;QAKA,IAAIC,QAAQ,GAAG,IAAInC,MAAM,CAACoC,QAAX,CAAoBlB,UAApB,EAAgCF,YAAhC,EAA8Ce,aAA9C,CAAf;QACA,IAAIM,OAAO,GAAG,IAAIrC,MAAM,CAACsC,OAAX,CAAmBR,GAAnB,EAAwBD,SAAxB,EAAmCM,QAAnC,CAAd;QAEA,MAAM,CAACI,eAAD,IAAoB,MAAMtC,SAAS,CAACyB,kBAAV,CAC/B,CAACc,MAAM,CAACC,IAAP,CAAY9C,qBAAZ,CAAD,CAD+B,EAE/B0C,OAAO,CAACR,SAFuB,CAAhC;QAKAa,OAAO,CAACC,GAAR,CAAYJ,eAAe,CAACK,QAAhB,EAAZ;QAEA,MAAMC,mBAAmB,GAAG,MAAMR,OAAO,CAACS,OAAR,CAAgBC,UAAhB,CAA2BC,KAA3B,CAAiCT,eAAjC,CAAlC;QAEAG,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCE,mBAAnC,EAxBiB,CAyBjB;QACA;QACA;QACA;;QAEA,IAAIyC,OAAO,GAAGtF,MAAM,CAACd,IAAP,CAAYqG,OAAZ,CAAoBC,QAApB,EAAd;QACA,IAAIjC,OAAO,GAAG,CAAC+B,OAAD,CAAd;QACA,IAAIG,YAAY,GAAG,EAAnB;QACAA,YAAY,CAACC,IAAb,CACCrD,OAAO,CAACsD,WAAR,CAAoBC,iBAApB,CAAsC;UACrCC,QAAQ,EAAE;YACTtD,eAAe,EAAEA;UADR;QAD2B,CAAtC,CADD;QAOA6C,aAAa,CAACM,IAAd,CAAmBnC,OAAnB;QACA8B,kBAAkB,CAACK,IAAnB,CAAwBD,YAAxB;QAEA,MAAMK,KAAK,GAAG,CAAC,MAAMzG,KAAK,CAAC0G,GAAN,CAAW,GAAErG,WAAY,gBAAzB,CAAP,EAAkDsG,IAAlD,CAAuDF,KAArE,CA3CiB,CA4CjB;;QACApD,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBmD,KAArB;QAEA,MAAMG,cAAc,GAAG,EAAvB;QACA,MAAMC,mBAAmB,GAAG,EAA5B;;QAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAAC9B,MAA1B,EAAkCmC,CAAC,EAAnC,EAAuC;UACtC,IAAI,CAACC,QAAD,IAAa,MAAMnG,SAAS,CAACyB,kBAAV,CACtB,CAACc,MAAM,CAACC,IAAP,CAAY1C,cAAZ,CAAD,EAA8B,IAAIE,SAAJ,CAAc6F,KAAK,CAACK,CAAD,CAAL,CAASpF,MAAvB,EAA+BY,QAA/B,EAA9B,CADsB,EAEtBU,OAAO,CAACR,SAFc,CAAvB;UAIA,IAAIwE,YAAY,GAAG,IAAnB;;UACA,IAAI;YACHA,YAAY,GAAG,MAAMhE,OAAO,CAACS,OAAR,CAAgBsD,QAAhB,CAAyBpD,KAAzB,CAA+BoD,QAA/B,CAArB;UACA,CAFD,CAEE,MAAM,CAAG;;UAEX1D,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B0D,YAA5B;;UAEA,IAAIA,YAAJ,EAAkB;YACjB,IAAIC,QAAQ,GAAGtG,MAAM,CAACd,IAAP,CAAYqG,OAAZ,CAAoBC,QAApB,EAAf;YACA,IAAIe,QAAQ,GAAG,CAACD,QAAD,CAAf;YACA,IAAIE,aAAa,GAAG,EAApB;YAEA9D,OAAO,CAACC,GAAR,CAAY,mBAAZ;YACA6D,aAAa,CAACd,IAAd,CACCrD,OAAO,CAACsD,WAAR,CAAoBc,iBAApB,CAAsC;cACrCZ,QAAQ,EAAE;gBACTtD,eAAe,EAAEA,eADR;gBAET6D,QAAQ,EAAEA;cAFD;YAD2B,CAAtC,CADD;YASAhB,aAAa,CAACM,IAAd,CAAmBa,QAAnB;YACAlB,kBAAkB,CAACK,IAAnB,CAAwBc,aAAxB;YAEA,IAAIE,QAAQ,GAAG1G,MAAM,CAACd,IAAP,CAAYqG,OAAZ,CAAoBC,QAApB,EAAf;YACA,IAAImB,QAAQ,GAAG,CAACD,QAAD,CAAf;YACA,IAAIE,aAAoB,GAAG,EAA3B;YAEAlE,OAAO,CAACC,GAAR,CAAY,mBAAZ;YACAiE,aAAa,CAAClB,IAAd,CACCrD,OAAO,CAACsD,WAAR,CAAoBkB,eAApB,CAAoC;cACnChB,QAAQ,EAAE;gBACTtD,eAAe,EAAEA,eADR;gBAET6D,QAAQ,EAAEA;cAFD;YADyB,CAApC,CADD;YASAH,cAAc,CAACP,IAAf,CAAoBiB,QAApB;YACAT,mBAAmB,CAACR,IAApB,CAAyBkB,aAAzB;UACA;QACD;;QAGD,IAAIE,QAAQ,GAAG9G,MAAM,CAACd,IAAP,CAAYqG,OAAZ,CAAoBC,QAApB,EAAf;QACA,IAAIuB,QAAQ,GAAG,CAACD,QAAD,CAAf;QACA,IAAIE,aAAa,GAAG,EAApB;QACAA,aAAa,CAACtB,IAAd,CACCrD,OAAO,CAACsD,WAAR,CAAoBC,iBAApB,CAAsC;UACrCC,QAAQ,EAAE;YACTtD,eAAe,EAAEA;UADR;QAD2B,CAAtC,CADD;QAOA0D,cAAc,CAACP,IAAf,CAAoBqB,QAApB;QACAb,mBAAmB,CAACR,IAApB,CAAyBsB,aAAzB;QAEAtE,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC,CAAC,GAAG0C,kBAAJ,EAAwB,GAAGa,mBAA3B,CAAlC;QACAxD,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,CAAC,GAAGyC,aAAJ,EAAmB,GAAGa,cAAtB,CAA7B;QACA,MAAM7F,gBAAgB,CACrBc,UADqB,EAErBF,YAFqB,EAGrB,CAAC,GAAGqE,kBAAJ,EAAwB,GAAGa,mBAA3B,CAHqB,EAIrB,CAAC,GAAGd,aAAJ,EAAmB,GAAGa,cAAtB,CAJqB,CAAtB;QAOAxG,KAAK,CAAC+E,OAAN,CAAc,kCAAd,EA1HiB,CA2HjB;MACA;IACD,CA9HD,CA+HA,OAAOyC,CAAP,EAAU;MACTvE,OAAO,CAACU,KAAR,CAAc6D,CAAd;IACA;EACD,CAnID;;EAqIA,MAAMC,cAAc,GAAG,YAAY;IAAA;;IAClCxE,OAAO,CAACC,GAAR,CAAY,MAAZ,0BAAoB1B,WAAW,CAACkG,OAAhC,yDAAoB,qBAAqBC,KAAzC;;IACA,IAAI,2BAACnG,WAAW,CAACkG,OAAb,kDAAC,sBAAqBC,KAAtB,KAA+BC,MAAM,0BAACpG,WAAW,CAACkG,OAAb,0DAAC,sBAAqBC,KAAtB,CAAN,IAAsC,CAAzE,EAA4E;MAC3E3H,KAAK,CAAC2D,KAAN,CAAY,2BAAZ;MACA;IACA;;IAED,IAAI;MACH,IAAIpC,YAAJ,EAAkB;QAAA;;QACjBK,aAAa,CAAC,IAAD,CAAb;QACA,MAAMQ,SAAS,GAAG,IAAI5B,SAAJ,CAAcJ,6BAAd,CAAlB;QACA,MAAMiC,GAAG,GAAG3B,kBAAZ;QAEA,MAAM4B,aAA6B,GAAG;UACrCC,UAAU,EAAE,WADyB;UAErCC,mBAAmB,EAAE,WAFgB;UAGrCC,aAAa,EAAE;QAHsB,CAAtC;QAKA,IAAIC,QAAQ,GAAG,IAAInC,MAAM,CAACoC,QAAX,CAAoBlB,UAApB,EAAgCF,YAAhC,EAA8Ce,aAA9C,CAAf;QACA,IAAIM,OAAO,GAAG,IAAIrC,MAAM,CAACsC,OAAX,CAAmBR,GAAnB,EAAwBD,SAAxB,EAAmCM,QAAnC,CAAd;QAEA,MAAM,CAACI,eAAD,IAAoB,MAAMtC,SAAS,CAACyB,kBAAV,CAC/B,CAACc,MAAM,CAACC,IAAP,CAAY9C,qBAAZ,CAAD,CAD+B,EAE/B0C,OAAO,CAACR,SAFuB,CAAhC;QAKA,IAAIyF,OAAO,GAAG,IAAI9G,KAAJ,CACbU,UADa,EAEbJ,UAFa,EAGbL,gBAHa,EAIbM,MAJa,CAAd;QAMA,IAAIwG,mBAAmB,GAAG,MAAM/F,cAAc,CAACR,YAAY,CAACyC,SAAd,EAAyB3C,UAAzB,CAA9C;QACA4B,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB4E,mBAAmB,CAAC3E,QAApB,EAAtB;QACAF,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,eAAe,CAACK,QAAhB,EAAtB;QACA,IAAI4E,UAAU,GAAG,MAAMF,OAAO,CAACtC,cAAR,CAAuBuC,mBAAvB,CAAvB;;QACA,IAAI,CAACC,UAAL,EAAiB;UAChB;QACA;;QAED,IAAIlE,WAAW,GAAG,IAAIpD,WAAJ,EAAlB;QAEA,IAAIuH,iBAAiB,GAAG,MAAM/C,oCAAoC,CACjEpB,WADiE,EAEjEnB,QAAQ,CAACjB,UAFwD,EAGjEJ,UAHiE,EAIjEyB,eAJiE,EAKjEvB,YAAY,CAACyC,SALoD,EAMjE,IANiE,CAAlE;QASAf,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB8E,iBAAiB,CAAC7E,QAAlB,EAApB;QACAF,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCzD,IAAI,CAACwI,gBAArC;QAGA,IAAInE,OAAkB,GAAG,EAAzB;QACAD,WAAW,CAAC2B,GAAZ,CACC,MAAM5C,OAAO,CAACsD,WAAR,CAAoBgC,YAApB,CAAiC,IAAI3H,MAAM,CAAC4H,EAAX,CAAclH,qBAAqB,GAAG2G,MAAM,0BAACpG,WAAW,CAACkG,OAAb,0DAAC,sBAAqBC,KAAtB,CAA5C,CAAjC,EAA4G;UACjHvB,QAAQ,EAAE;YACTtD,eAAe,EAAEA,eADR;YAEToC,KAAK,EAAE3D,YAAY,CAACyC,SAFX;YAGToE,aAAa,EAAEN,mBAHN;YAITO,WAAW,EAAEL,iBAJJ;YAKTM,YAAY,EAAEtH;UALL;QADuG,CAA5G,CADP;QAYA,MAAM4C,eAAe,CAACC,WAAD,EAAcC,OAAd,EAAuBvC,YAAvB,CAArB;QACAK,aAAa,CAAC,KAAD,CAAb;MACA;IACD,CAhED,CAiEA,OAAO4F,CAAP,EAAU;MACTvE,OAAO,CAACU,KAAR,CAAc6D,CAAd;MACA5F,aAAa,CAAC,KAAD,CAAb;IACA;EACD,CA5ED;;EA8EA,MAAM2G,eAAe,GAAG,YAAY;IAAA;;IACnCtF,OAAO,CAACC,GAAR,CAAY,MAAZ,2BAAoB1B,WAAW,CAACkG,OAAhC,0DAAoB,sBAAqBC,KAAzC;;IACA,IAAI,2BAACnG,WAAW,CAACkG,OAAb,kDAAC,sBAAqBC,KAAtB,KAA+BC,MAAM,0BAACpG,WAAW,CAACkG,OAAb,0DAAC,sBAAqBC,KAAtB,CAAN,IAAsC,CAAzE,EAA4E;MAC3E3H,KAAK,CAAC2D,KAAN,CAAY,2BAAZ;MACA;IACA;;IAED,IAAI;MACH,IAAIpC,YAAJ,EAAkB;QAAA;;QACjBK,aAAa,CAAC,IAAD,CAAb;QACA,MAAMQ,SAAS,GAAG,IAAI5B,SAAJ,CAAcJ,6BAAd,CAAlB;QACA,MAAMiC,GAAG,GAAG3B,kBAAZ;QAEA,MAAM4B,aAA6B,GAAG;UACrCC,UAAU,EAAE,WADyB;UAErCC,mBAAmB,EAAE,WAFgB;UAGrCC,aAAa,EAAE;QAHsB,CAAtC;QAKA,IAAIC,QAAQ,GAAG,IAAInC,MAAM,CAACoC,QAAX,CAAoBlB,UAApB,EAAgCF,YAAhC,EAA8Ce,aAA9C,CAAf;QACA,IAAIM,OAAO,GAAG,IAAIrC,MAAM,CAACsC,OAAX,CAAmBR,GAAnB,EAAwBD,SAAxB,EAAmCM,QAAnC,CAAd;QAEA,MAAM,CAACI,eAAD,EAAkB0F,UAAlB,IAAgC,MAAMhI,SAAS,CAACyB,kBAAV,CAC3C,CAACc,MAAM,CAACC,IAAP,CAAY9C,qBAAZ,CAAD,CAD2C,EAE3C0C,OAAO,CAACR,SAFmC,CAA5C;QAKA,IAAIyF,OAAO,GAAG,IAAI9G,KAAJ,CACbU,UADa,EAEbJ,UAFa,EAGbL,gBAHa,EAIbM,MAJa,CAAd;QAMA,IAAIwG,mBAAmB,GAAG,MAAM/F,cAAc,CAACe,eAAD,EAAkBzB,UAAlB,CAA9C;QACA,IAAI0G,UAAU,GAAG,MAAMF,OAAO,CAACtC,cAAR,CAAuBuC,mBAAvB,CAAvB;;QACA,IAAI,CAACC,UAAL,EAAiB;UAChB;QACA;;QAED,IAAIlE,WAAW,GAAG,IAAIpD,WAAJ,EAAlB;QAEA,IAAIuH,iBAAiB,GAAG,MAAM/C,oCAAoC,CACjEpB,WADiE,EAEjEnB,QAAQ,CAACjB,UAFwD,EAGjEJ,UAHiE,EAIjEE,YAAY,CAACyC,SAJoD,EAKjEzC,YAAY,CAACyC,SALoD,EAMjE,IANiE,CAAlE;QASAf,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmB4E,mBAAmB,CAAC3E,QAApB,EAAnB;QACAF,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB8E,iBAAiB,CAAC7E,QAAlB,EAApB;QACAF,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCzD,IAAI,CAACwI,gBAArC;QAEA,IAAInE,OAAkB,GAAG,EAAzB;QACAD,WAAW,CAAC2B,GAAZ,CACC,MAAM5C,OAAO,CAACsD,WAAR,CAAoBuC,aAApB,CAAkC,IAAIlI,MAAM,CAAC4H,EAAX,CAAclH,qBAAqB,GAAG2G,MAAM,0BAACpG,WAAW,CAACkG,OAAb,0DAAC,sBAAqBC,KAAtB,CAA5C,CAAlC,EAA6G;UAClHvB,QAAQ,EAAE;YACTtD,eAAe,EAAEA,eADR;YAEToC,KAAK,EAAE3D,YAAY,CAACyC,SAFX;YAGToE,aAAa,EAAEN,mBAHN;YAITO,WAAW,EAAEL,iBAJJ;YAKTM,YAAY,EAAEtH;UALL;QADwG,CAA7G,CADP;QAYA,MAAM4C,eAAe,CAACC,WAAD,EAAcC,OAAd,EAAuBvC,YAAvB,CAArB;QACAK,aAAa,CAAC,KAAD,CAAb;MACA;IACD,CA9DD,CA+DA,OAAO4F,CAAP,EAAU;MACTvE,OAAO,CAACU,KAAR,CAAc6D,CAAd;MACA5F,aAAa,CAAC,KAAD,CAAb;IACA;EACD,CA1ED;;EA2EA,MAAM,CAAC8G,UAAD,EAAaC,cAAb,IAA+B5I,QAAQ,CAAC,KAAD,CAA7C;EAEA,oBACC;IAAK,SAAS,EAAC,oBAAf;IAAA,WACG4B,UAAD,iBAAgB,QAAC,MAAD;MAAQ,IAAI,EAAE;IAAd;MAAA;MAAA;MAAA;IAAA,QADlB,eAEC,QAAC,OAAD;MAAS,UAAU,EAAE+G,UAArB;MAAiC,cAAc,EAAEC,cAAjD;MAAiE,UAAU,EAAC;IAA5E;MAAA;MAAA;MAAA;IAAA,QAFD,eAGC;MAAK,SAAS,EAAC,eAAf;MAAA,wBACC,QAAC,MAAD;QAAQ,cAAc,EAAEA,cAAxB;QAAwC,UAAU,EAAED,UAApD;QAAiE,UAAU,EAAEE;MAA7E;QAAA;QAAA;QAAA;MAAA,QADD,eAEC;QAAK,SAAS,EAAC,aAAf;QAAA,wBACC;UAAI,SAAS,EAAC,eAAd;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADD,eAEC;UAAA,wBACC;YAAK,SAAS,EAAC,6BAAf;YAAA,uBACC;cAAA,mCAA2B/G,UAAU,GAAGA,UAAU,CAACgH,WAAd,GAA4B,CAAjE;YAAA;cAAA;cAAA;cAAA;YAAA;UADD;YAAA;YAAA;YAAA;UAAA,QADD,eAIC;YAAK,SAAS,EAAC,6BAAf;YAAA,uBACC;cAAA,+BAAuBhH,UAAU,GAAGA,UAAU,CAACiH,aAAX,CAAyBC,QAAzB,EAAH,GAAyC,CAA1E;YAAA;cAAA;cAAA;cAAA;YAAA;UADD;YAAA;YAAA;YAAA;UAAA,QAJD,eAOC;YAAK,SAAS,EAAC,6BAAf;YAAA,uBACC;cAAA,6BAAqBlH,UAAU,GAAGA,UAAU,CAACmH,WAAX,CAAuBD,QAAvB,EAAH,GAAuC,CAAtE;YAAA;cAAA;cAAA;cAAA;YAAA;UADD;YAAA;YAAA;YAAA;UAAA,QAPD,eAUC;YAAK,SAAS,EAAC,6BAAf;YAAA,uBACC;cAAA,oCAA4BlH,UAAU,GAAGA,UAAU,CAACoH,kBAAX,CAA8BF,QAA9B,EAAH,GAA8C,CAApF;YAAA;cAAA;cAAA;cAAA;YAAA;UADD;YAAA;YAAA;YAAA;UAAA,QAVD,eAaC;YAAK,SAAS,EAAC,6BAAf;YAAA,uBACC;cAAA,iCAAyBlH,UAAU,GAAGqH,IAAI,CAACC,KAAL,CAAWtH,UAAU,CAACuH,oBAAX,CAAgCL,QAAhC,KAA2C9H,qBAA3C,GAAmE,GAA9E,IAAqF,GAAxF,GAA8F,CAAjI;YAAA;cAAA;cAAA;cAAA;YAAA;UADD;YAAA;YAAA;YAAA;UAAA,QAbD,eAgBC;YAAK,SAAS,EAAC,6BAAf;YAAA,uBACC;cAAA,iCAAyBY,UAAU,GAAGqH,IAAI,CAACC,KAAL,CAAWtH,UAAU,CAACwH,oBAAX,CAAgCN,QAAhC,KAA2C9H,qBAA3C,GAAmE,GAA9E,IAAqF,GAAxF,GAA8F,CAAjI;YAAA;cAAA;cAAA;cAAA;YAAA;UADD;YAAA;YAAA;YAAA;UAAA,QAhBD,eAmBC;YAAK,SAAS,EAAC,6BAAf;YAAA,uBACC;cAAA,+BAAuBY,UAAU,GAAGqH,IAAI,CAACC,KAAL,CAAWtH,UAAU,CAACyH,kBAAX,CAA8BP,QAA9B,KAAyC9H,qBAAzC,GAAiE,GAA5E,IAAmF,GAAtF,GAA6F,CAA9H;YAAA;cAAA;cAAA;cAAA;YAAA;UADD;YAAA;YAAA;YAAA;UAAA,QAnBD,eAsBC;YAAK,SAAS,EAAC,6BAAf;YAAA,wBACC;cAAO,GAAG,EAAEO,WAAZ;cAAyB,IAAI,EAAC,QAA9B;cAAuC,SAAS,EAAC,6EAAjD;cAA+H,WAAW,EAAC;YAA3I;cAAA;cAAA;cAAA;YAAA,QADD,eAEC;cAAQ,OAAO,EAAEiG,cAAjB;cAAiC,SAAS,EAAC,2GAA3C;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QAFD,eAKC;cAAQ,OAAO,EAAEc,eAAjB;cAAkC,SAAS,EAAC,2GAA5C;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QALD,eAQC;cAAQ,OAAO,EAAE7C,gBAAjB;cAAmC,SAAS,EAAC,gHAA7C;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QARD;UAAA;YAAA;YAAA;YAAA;UAAA,QAtBD;QAAA;UAAA;UAAA;UAAA;QAAA,QAFD;MAAA;QAAA;QAAA;QAAA;MAAA,QAFD;IAAA;MAAA;MAAA;MAAA;IAAA,QAHD;EAAA;IAAA;IAAA;IAAA;EAAA,QADD;AA+CA,CAldD;;GAAMtE,K;UAIczB,S,EAEED,e;;;KANhB0B,K;AAodN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}