{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateRateInterestBearingMint = exports.createInterestBearingMint = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst internal_js_1 = require(\"../../actions/internal.js\");\n\nconst constants_js_1 = require(\"../../constants.js\");\n\nconst initializeMint_js_1 = require(\"../../instructions/initializeMint.js\");\n\nconst extensionType_js_1 = require(\"../extensionType.js\");\n\nconst instructions_js_1 = require(\"./instructions.js\");\n/**\n * Initialize an interest bearing account on a mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Public key of the mint\n */\n\n\nfunction createInterestBearingMint(connection, payer, mintAuthority, freezeAuthority, rateAuthority, rate, decimals) {\n  let keypair = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : web3_js_1.Keypair.generate();\n  let confirmOptions = arguments.length > 8 ? arguments[8] : undefined;\n  let programId = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const mintLen = (0, extensionType_js_1.getMintLen)([extensionType_js_1.ExtensionType.InterestBearingMint]);\n    const lamports = yield connection.getMinimumBalanceForRentExemption(mintLen);\n    const transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({\n      fromPubkey: payer.publicKey,\n      newAccountPubkey: keypair.publicKey,\n      space: mintLen,\n      lamports,\n      programId\n    }), (0, instructions_js_1.createInitializeInterestBearingMintInstruction)(keypair.publicKey, rateAuthority, rate, programId), (0, initializeMint_js_1.createInitializeMintInstruction)(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));\n    yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);\n    return keypair.publicKey;\n  });\n}\n\nexports.createInterestBearingMint = createInterestBearingMint;\n/**\n * Update the interest rate of an interest bearing account\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mint            Public key of the mint\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param multiSigners    Signing accounts if `owner` is a multisig\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nfunction updateRateInterestBearingMint(connection, payer, mint, rateAuthority, rate) {\n  let multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  let confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const [rateAuthorityPublicKey, signers] = (0, internal_js_1.getSigners)(rateAuthority, multiSigners);\n    const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createUpdateRateInterestBearingMintInstruction)(mint, rateAuthorityPublicKey, rate, signers, programId));\n    return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, rateAuthority, ...signers], confirmOptions);\n  });\n}\n\nexports.updateRateInterestBearingMint = updateRateInterestBearingMint;","map":{"version":3,"sources":["../../../../src/extensions/interestBearingMint/actions.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,aAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,MAAA,mBAAA,GAAA,OAAA,CAAA,sCAAA,CAAA;;AACA,MAAA,kBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,MAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAKA;;;;;;;;;;;;;;;AAeG;;;AACH,SAAsB,yBAAtB,CACI,UADJ,EAEI,KAFJ,EAGI,aAHJ,EAII,eAJJ,EAKI,aALJ,EAMI,IANJ,EAOI,QAPJ,EAUqC;EAAA,IAFjC,OAEiC,uEAFvB,SAAA,CAAA,OAAA,CAAQ,QAAR,EAEuB;EAAA,IADjC,cACiC;EAAA,IAAjC,SAAiC,uEAArB,cAAA,CAAA,qBAAqB;;IAEjC,MAAM,OAAO,GAAG,CAAA,GAAA,kBAAA,CAAA,UAAA,EAAW,CAAC,kBAAA,CAAA,aAAA,CAAc,mBAAf,CAAX,CAAhB;IACA,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,iCAAX,CAA6C,OAA7C,CAAvB;IACA,MAAM,WAAW,GAAG,IAAI,SAAA,CAAA,WAAJ,GAAkB,GAAlB,CAChB,SAAA,CAAA,aAAA,CAAc,aAAd,CAA4B;MACxB,UAAU,EAAE,KAAK,CAAC,SADM;MAExB,gBAAgB,EAAE,OAAO,CAAC,SAFF;MAGxB,KAAK,EAAE,OAHiB;MAIxB,QAJwB;MAKxB;IALwB,CAA5B,CADgB,EAQhB,CAAA,GAAA,iBAAA,CAAA,8CAAA,EAA+C,OAAO,CAAC,SAAvD,EAAkE,aAAlE,EAAiF,IAAjF,EAAuF,SAAvF,CARgB,EAShB,CAAA,GAAA,mBAAA,CAAA,+BAAA,EAAgC,OAAO,CAAC,SAAxC,EAAmD,QAAnD,EAA6D,aAA7D,EAA4E,eAA5E,EAA6F,SAA7F,CATgB,CAApB;IAWA,MAAM,CAAA,GAAA,SAAA,CAAA,yBAAA,EAA0B,UAA1B,EAAsC,WAAtC,EAAmD,CAAC,KAAD,EAAQ,OAAR,CAAnD,EAAqE,cAArE,CAAN;IACA,OAAO,OAAO,CAAC,SAAf;EACH,C;AAAA;;AA3BD,OAAA,CAAA,yBAAA,GAAA,yBAAA;AA6BA;;;;;;;;;;;;;AAaG;;AACH,SAAsB,6BAAtB,CACI,UADJ,EAEI,KAFJ,EAGI,IAHJ,EAII,aAJJ,EAKI,IALJ,EAQqC;EAAA,IAFjC,YAEiC,uEAFR,EAEQ;EAAA,IADjC,cACiC;EAAA,IAAjC,SAAiC,uEAArB,cAAA,CAAA,qBAAqB;;IAEjC,MAAM,CAAC,sBAAD,EAAyB,OAAzB,IAAoC,CAAA,GAAA,aAAA,CAAA,UAAA,EAAW,aAAX,EAA0B,YAA1B,CAA1C;IACA,MAAM,WAAW,GAAG,IAAI,SAAA,CAAA,WAAJ,GAAkB,GAAlB,CAChB,CAAA,GAAA,iBAAA,CAAA,8CAAA,EAA+C,IAA/C,EAAqD,sBAArD,EAA6E,IAA7E,EAAmF,OAAnF,EAA4F,SAA5F,CADgB,CAApB;IAIA,OAAO,MAAM,CAAA,GAAA,SAAA,CAAA,yBAAA,EAA0B,UAA1B,EAAsC,WAAtC,EAAmD,CAAC,KAAD,EAAQ,aAAR,EAAuB,GAAG,OAA1B,CAAnD,EAAuF,cAAvF,CAAb;EACH,C;AAAA;;AAhBD,OAAA,CAAA,6BAAA,GAAA,6BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateRateInterestBearingMint = exports.createInterestBearingMint = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst internal_js_1 = require(\"../../actions/internal.js\");\nconst constants_js_1 = require(\"../../constants.js\");\nconst initializeMint_js_1 = require(\"../../instructions/initializeMint.js\");\nconst extensionType_js_1 = require(\"../extensionType.js\");\nconst instructions_js_1 = require(\"./instructions.js\");\n/**\n * Initialize an interest bearing account on a mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Public key of the mint\n */\nfunction createInterestBearingMint(connection, payer, mintAuthority, freezeAuthority, rateAuthority, rate, decimals, keypair = web3_js_1.Keypair.generate(), confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const mintLen = (0, extensionType_js_1.getMintLen)([extensionType_js_1.ExtensionType.InterestBearingMint]);\n        const lamports = yield connection.getMinimumBalanceForRentExemption(mintLen);\n        const transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: mintLen,\n            lamports,\n            programId,\n        }), (0, instructions_js_1.createInitializeInterestBearingMintInstruction)(keypair.publicKey, rateAuthority, rate, programId), (0, initializeMint_js_1.createInitializeMintInstruction)(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));\n        yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);\n        return keypair.publicKey;\n    });\n}\nexports.createInterestBearingMint = createInterestBearingMint;\n/**\n * Update the interest rate of an interest bearing account\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mint            Public key of the mint\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param multiSigners    Signing accounts if `owner` is a multisig\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction updateRateInterestBearingMint(connection, payer, mint, rateAuthority, rate, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [rateAuthorityPublicKey, signers] = (0, internal_js_1.getSigners)(rateAuthority, multiSigners);\n        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createUpdateRateInterestBearingMintInstruction)(mint, rateAuthorityPublicKey, rate, signers, programId));\n        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, rateAuthority, ...signers], confirmOptions);\n    });\n}\nexports.updateRateInterestBearingMint = updateRateInterestBearingMint;\n//# sourceMappingURL=actions.js.map"]},"metadata":{},"sourceType":"script"}