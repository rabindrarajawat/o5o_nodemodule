{"ast":null,"code":"var _jsxFileName = \"D:\\\\software\\\\o5o BNB\\\\o5o-staking-frontend\\\\src\\\\pages\\\\Admin.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable array-callback-return */\n\n/* eslint-disable no-lone-blocks */\nimport { web3 } from \"@project-serum/anchor\";\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletMultiButton } from \"@solana/wallet-adapter-react-ui\";\nimport axios from \"axios\";\nimport { useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { BACKEND_URL, NEXT_PUBLIC_SOLANA_NETWORK, NEXT_PUBLIC_STAKE_CONTRACT_ID } from '../constant/env';\nimport * as anchor from \"@project-serum/anchor\";\nimport { PublicKey, Transaction } from \"@solana/web3.js\";\nimport { STAKE_CONTRACT_IDL } from \"../constant/contract\";\nimport { sendTransactions } from \"../helpers/sol/connection\";\nimport * as splToken from \"@solana/spl-token\";\nimport Loader from \"../components/loader/Loader\";\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Admin = () => {\n  _s();\n\n  const REWARD_TOKEN = \"8mvhb6p7GzRseE1FjHdzTxLQfz7tmDXMxyxuXAnot34x\";\n  const rewardMint = new PublicKey(REWARD_TOKEN);\n  const {\n    wallet\n  } = useWallet();\n  const anchorWallet = useAnchorWallet();\n  const solInputRef = useRef(null);\n  const connection = new anchor.web3.Connection(NEXT_PUBLIC_SOLANA_NETWORK == \"devnet\" ? \"https://api.devnet.solana.com\" : \"https://metaplex.mainnet.rpcpool.com\");\n  const [showLoader, setShowLoader] = useState(false);\n\n  const getTokenWallet = async (wallet, mint) => {\n    return (await anchor.web3.PublicKey.findProgramAddress([wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], ASSOCIATED_TOKEN_PROGRAM_ID))[0];\n  };\n\n  const GLOBAL_AUTHORITY_SEED = \"global-authority\";\n  useEffect(() => {// try {\n    // \tsetShowLoader(true);\n    // \taxios.get(`${BACKEND_URL}/admin/getTweet`).then((res) => {\n    // \t\tif (res.status == 200) {\n    // \t\t\tconsole.log('tweet', res.data.tweet);\n    // \t\t\tsetTweetLink(res.data.tweet.tweetLink);\n    // \t\t\tsetTweetId(res.data.tweet.tweetId);\n    // \t\t\tsetUserName(res.data.tweet.userName);\n    // \t\t\tsetTweetOptions(res.data.tweet.option);\n    // \t\t}\n    // \t\tsetShowLoader(false);\n    // \t}).catch((err) => {\n    // \t\tconsole.log('error', err)\n    // \t\tsetShowLoader(false);\n    // \t})\n    // } catch (error) {\n    // \tconsole.log(error);\n    // }\n  }, []);\n\n  const sendTransaction = async (transaction, signers, wallet) => {\n    try {\n      transaction.feePayer = wallet.publicKey;\n      transaction.recentBlockhash = (await connection.getRecentBlockhash(\"max\")).blockhash;\n      await transaction.setSigners(wallet.publicKey, ...signers.map(s => s.publicKey));\n      if (signers.length != 0) await transaction.partialSign(...signers);\n      const signedTransaction = await wallet.signTransaction(transaction);\n      let hash = await connection.sendRawTransaction(await signedTransaction.serialize());\n      await connection.confirmTransaction(hash);\n      toast.success(\"Transaction succeed.\");\n    } catch (err) {\n      console.log('error', err);\n      toast.error(\"Transaction failed. Please try again.\");\n    }\n  };\n\n  async function withFindOrInitAssociatedTokenAccount(transaction, connection, mint, owner, payer, allowOwnerOffCurve) {\n    const associatedAddress = await splToken.Token.getAssociatedTokenAddress(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, mint, owner, allowOwnerOffCurve);\n    const account = await connection.getAccountInfo(associatedAddress);\n\n    if (!account) {\n      transaction.add(splToken.Token.createAssociatedTokenAccountInstruction(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, mint, associatedAddress, owner, payer));\n    }\n\n    return associatedAddress;\n  }\n\n  const onAllocateReward = async () => {\n    try {\n      if (anchorWallet) {\n        const signersMatrix = [];\n        const instructionsMatrix = [];\n        const programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID);\n        const idl = STAKE_CONTRACT_IDL;\n        const confirmOption = {\n          commitment: \"finalized\",\n          preflightCommitment: \"finalized\",\n          skipPreflight: false\n        };\n        let provider = new anchor.Provider(connection, anchorWallet, confirmOption);\n        let program = new anchor.Program(idl, programId, provider);\n        const GLOBAL_AUTHORITY_SEED = \"global-authority\";\n        const USER_POOL_SEED = \"user-pool\";\n        const [globalAuthority] = await PublicKey.findProgramAddress([Buffer.from(GLOBAL_AUTHORITY_SEED)], program.programId);\n        console.log(globalAuthority.toString());\n        const globalAuthorityInfo = await program.account.globalPool.fetch(globalAuthority);\n        const allocated_year = new Date(globalAuthorityInfo.allocateTime.toNumber() * 1000).getFullYear();\n        const allocated_month = new Date(globalAuthorityInfo.allocateTime.toNumber() * 1000).getMonth();\n        const current_year = new Date().getFullYear();\n        const current_month = new Date().getMonth(); // console.log(\"globalAuthorityInfo\", globalAuthorityInfo)\n        // if (allocated_month == current_month && allocated_year == current_year) {\n        // \ttoast.error(\"You already allocate reward to users\");\n        // \treturn\n        // }\n\n        const monthStr = new Date().getFullYear().toString() + new Date().getMonth().toString();\n        const [monthInfo] = await PublicKey.findProgramAddress([Buffer.from(anchor.utils.bytes.utf8.encode('escrow-cjh')), Buffer.from(monthStr)], program.programId);\n        let keypair = anchor.web3.Keypair.generate();\n        let signers = [keypair];\n        let instructions = [];\n        instructions.push(program.instruction.calcMonthTotalReward({\n          accounts: {\n            globalAuthority: globalAuthority,\n            monthInfo: monthInfo\n          }\n        }));\n        signersMatrix.push(signers);\n        instructionsMatrix.push(instructions);\n        const users = (await axios.get(`${BACKEND_URL}/user/getUsers`)).data.users;\n\n        for (let i = 0; i < users.length; i++) {\n          let [userPool] = await PublicKey.findProgramAddress([Buffer.from(USER_POOL_SEED), new PublicKey(users[i].walletAddress).toBuffer()], program.programId);\n          let userPoolInfo = null;\n\n          try {\n            userPoolInfo = await program.account.userPool.fetch(userPool);\n          } catch {}\n\n          if (userPoolInfo) {\n            let [userPoolAllocate] = await PublicKey.findProgramAddress([Buffer.from(USER_POOL_SEED), new PublicKey(users[i].walletAddress).toBuffer(), userPoolInfo.counter.toArrayLike(Buffer, \"le\", 8)], program.programId);\n            let keypair1 = anchor.web3.Keypair.generate();\n            let signers1 = [keypair1];\n            let instructions1 = [];\n            console.log('instructions push');\n            instructions1.push(program.instruction.allocateReward({\n              accounts: {\n                admin: anchorWallet.publicKey,\n                monthInfo: monthInfo,\n                userPool: userPool,\n                userPoolAllocate: userPoolAllocate,\n                systemProgram: anchor.web3.SystemProgram.programId\n              }\n            }));\n            signersMatrix.push(signers1);\n            instructionsMatrix.push(instructions1);\n          }\n        }\n\n        console.log('instructionsMatrix', instructionsMatrix.length);\n        await sendTransactions(connection, anchorWallet, instructionsMatrix, signersMatrix);\n        toast.success(\"The reward ia allocated to users\"); // await sendTransaction(transaction, [], anchorWallet);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const onDepositToken = async () => {\n    var _solInputRef$current, _solInputRef$current2, _solInputRef$current3;\n\n    console.log(\"test\", (_solInputRef$current = solInputRef.current) === null || _solInputRef$current === void 0 ? void 0 : _solInputRef$current.value);\n\n    if (!((_solInputRef$current2 = solInputRef.current) !== null && _solInputRef$current2 !== void 0 && _solInputRef$current2.value) || Number((_solInputRef$current3 = solInputRef.current) === null || _solInputRef$current3 === void 0 ? void 0 : _solInputRef$current3.value) <= 0) {\n      toast.error(\"Input sol amount, please.\");\n      return;\n    }\n\n    try {\n      if (anchorWallet) {\n        var _solInputRef$current4;\n\n        setShowLoader(true);\n        const programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID);\n        const idl = STAKE_CONTRACT_IDL;\n        const confirmOption = {\n          commitment: \"finalized\",\n          preflightCommitment: \"finalized\",\n          skipPreflight: false\n        };\n        let provider = new anchor.Provider(connection, anchorWallet, confirmOption);\n        let program = new anchor.Program(idl, programId, provider);\n        const [globalAuthority] = await PublicKey.findProgramAddress([Buffer.from(GLOBAL_AUTHORITY_SEED)], program.programId);\n        var myToken = new Token(connection, rewardMint, TOKEN_PROGRAM_ID, wallet);\n        let sourceRewardAccount = await getTokenWallet(anchorWallet.publicKey, rewardMint);\n        console.log('source', sourceRewardAccount.toString());\n        console.log('global', globalAuthority.toString());\n        let srcAccInfo = await myToken.getAccountInfo(sourceRewardAccount);\n\n        if (!srcAccInfo) {\n          return;\n        }\n\n        let transaction = new Transaction();\n        let destRewardAccount = await withFindOrInitAssociatedTokenAccount(transaction, provider.connection, rewardMint, globalAuthority, anchorWallet.publicKey, true);\n        console.log('dest', destRewardAccount.toString());\n        console.log('lamports for sol', web3.LAMPORTS_PER_SOL);\n        const token_decimals = 100000000;\n        let signers = [];\n        transaction.add(await program.instruction.depositToken(new anchor.BN(token_decimals * Number((_solInputRef$current4 = solInputRef.current) === null || _solInputRef$current4 === void 0 ? void 0 : _solInputRef$current4.value)), {\n          accounts: {\n            globalAuthority: globalAuthority,\n            owner: anchorWallet.publicKey,\n            sourceAccount: sourceRewardAccount,\n            destAccount: destRewardAccount,\n            tokenProgram: TOKEN_PROGRAM_ID\n          }\n        }));\n        await sendTransaction(transaction, signers, anchorWallet);\n        setShowLoader(false);\n      }\n    } catch (e) {\n      console.error(e);\n      setShowLoader(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-black h-screen\",\n    children: [showLoader && /*#__PURE__*/_jsxDEV(Loader, {\n      text: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-4 lg:px-8 h-full\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"sm:flex items-center justify-between py-5\",\n        children: /*#__PURE__*/_jsxDEV(WalletMultiButton, {\n          className: \"wallet-btn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sm:flex items-center py-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onAllocateReward,\n          className: \"sm:ml-5 ml-2 mt-2 sm:mt-0 bg-gradient-to-r from-primary to-secondary py-3 px-8 rounded-2xl cursor-pointer mr-5\",\n          children: \"Allocate Rewards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: solInputRef,\n          type: \"number\",\n          className: \"py-3 px-3 rounded-2xl sm:w-1/4 w-full outline-none bg-LightPurple uppercase\",\n          placeholder: \"Sol Amount to Send to User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onDepositToken,\n          className: \"sm:ml-5 ml-2 mt-2 sm:mt-0 bg-gradient-to-r from-primary to-secondary py-3 px-8 rounded-2xl cursor-pointer\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Admin, \"jCuvM7G553CINnL/90d1dkdtSPg=\", false, function () {\n  return [useWallet, useAnchorWallet];\n});\n\n_c = Admin;\nexport default Admin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"names":["web3","useAnchorWallet","useWallet","WalletMultiButton","axios","useEffect","useRef","useState","toast","BACKEND_URL","NEXT_PUBLIC_SOLANA_NETWORK","NEXT_PUBLIC_STAKE_CONTRACT_ID","anchor","PublicKey","Transaction","STAKE_CONTRACT_IDL","sendTransactions","splToken","Loader","ASSOCIATED_TOKEN_PROGRAM_ID","Token","TOKEN_PROGRAM_ID","Admin","REWARD_TOKEN","rewardMint","wallet","anchorWallet","solInputRef","connection","Connection","showLoader","setShowLoader","getTokenWallet","mint","findProgramAddress","toBuffer","GLOBAL_AUTHORITY_SEED","sendTransaction","transaction","signers","feePayer","publicKey","recentBlockhash","getRecentBlockhash","blockhash","setSigners","map","s","length","partialSign","signedTransaction","signTransaction","hash","sendRawTransaction","serialize","confirmTransaction","success","err","console","log","error","withFindOrInitAssociatedTokenAccount","owner","payer","allowOwnerOffCurve","associatedAddress","getAssociatedTokenAddress","account","getAccountInfo","add","createAssociatedTokenAccountInstruction","onAllocateReward","signersMatrix","instructionsMatrix","programId","idl","confirmOption","commitment","preflightCommitment","skipPreflight","provider","Provider","program","Program","USER_POOL_SEED","globalAuthority","Buffer","from","toString","globalAuthorityInfo","globalPool","fetch","allocated_year","Date","allocateTime","toNumber","getFullYear","allocated_month","getMonth","current_year","current_month","monthStr","monthInfo","utils","bytes","utf8","encode","keypair","Keypair","generate","instructions","push","instruction","calcMonthTotalReward","accounts","users","get","data","i","userPool","walletAddress","userPoolInfo","userPoolAllocate","counter","toArrayLike","keypair1","signers1","instructions1","allocateReward","admin","systemProgram","SystemProgram","e","onDepositToken","current","value","Number","myToken","sourceRewardAccount","srcAccInfo","destRewardAccount","LAMPORTS_PER_SOL","token_decimals","depositToken","BN","sourceAccount","destAccount","tokenProgram"],"sources":["D:/software/o5o BNB/o5o-staking-frontend/src/pages/Admin.tsx"],"sourcesContent":["/* eslint-disable array-callback-return */\r\n/* eslint-disable no-lone-blocks */\r\nimport { web3 } from \"@project-serum/anchor\";\r\nimport { AnchorWallet, useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletMultiButton, } from \"@solana/wallet-adapter-react-ui\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { BACKEND_URL, NEXT_PUBLIC_SOLANA_NETWORK, NEXT_PUBLIC_STAKE_CONTRACT_ID } from '../constant/env';\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { ConfirmOptions, Connection, Keypair, PublicKey, Transaction } from \"@solana/web3.js\";\r\nimport { STAKE_CONTRACT_IDL } from \"../constant/contract\";\r\nimport { sendTransactions } from \"../helpers/sol/connection\";\r\nimport * as splToken from \"@solana/spl-token\";\r\nimport Loader from \"../components/loader/Loader\";\r\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nconst Admin = () => {\r\n\r\n\tconst REWARD_TOKEN = \"8mvhb6p7GzRseE1FjHdzTxLQfz7tmDXMxyxuXAnot34x\";\r\n\tconst rewardMint = new PublicKey(REWARD_TOKEN);\r\n\r\n\tconst { wallet } = useWallet();\r\n\r\n\tconst anchorWallet = useAnchorWallet();\r\n\r\n\tconst solInputRef = useRef<HTMLInputElement>(null);\r\n\r\n\tconst connection = new anchor.web3.Connection(\r\n\t\tNEXT_PUBLIC_SOLANA_NETWORK == \"devnet\"\r\n\t\t\t? \"https://api.devnet.solana.com\"\r\n\t\t\t: \"https://metaplex.mainnet.rpcpool.com\"\r\n\t);\r\n\r\n\tconst [showLoader, setShowLoader] = useState(false);\r\n\r\n\tconst getTokenWallet = async (\r\n\t\twallet: anchor.web3.PublicKey,\r\n\t\tmint: anchor.web3.PublicKey\r\n\t  ) => {\r\n\t\treturn (\r\n\t\t  await anchor.web3.PublicKey.findProgramAddress(\r\n\t\t\t[wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n\t\t\tASSOCIATED_TOKEN_PROGRAM_ID\r\n\t\t  )\r\n\t\t)[0];\r\n\t  };\r\n\t  \r\n\tconst GLOBAL_AUTHORITY_SEED = \"global-authority\";\r\n\r\n\tuseEffect(() => {\r\n\t\t// try {\r\n\t\t// \tsetShowLoader(true);\r\n\t\t// \taxios.get(`${BACKEND_URL}/admin/getTweet`).then((res) => {\r\n\t\t// \t\tif (res.status == 200) {\r\n\t\t// \t\t\tconsole.log('tweet', res.data.tweet);\r\n\t\t// \t\t\tsetTweetLink(res.data.tweet.tweetLink);\r\n\t\t// \t\t\tsetTweetId(res.data.tweet.tweetId);\r\n\t\t// \t\t\tsetUserName(res.data.tweet.userName);\r\n\t\t// \t\t\tsetTweetOptions(res.data.tweet.option);\r\n\t\t// \t\t}\r\n\t\t// \t\tsetShowLoader(false);\r\n\t\t// \t}).catch((err) => {\r\n\t\t// \t\tconsole.log('error', err)\r\n\t\t// \t\tsetShowLoader(false);\r\n\t\t// \t})\r\n\t\t// } catch (error) {\r\n\t\t// \tconsole.log(error);\r\n\t\t// }\r\n\t}, []);\r\n\r\n\tconst sendTransaction = async (\r\n\t\ttransaction: Transaction,\r\n\t\tsigners: Keypair[],\r\n\t\twallet: AnchorWallet\r\n\t) => {\r\n\t\ttry {\r\n\t\t\ttransaction.feePayer = wallet.publicKey;\r\n\t\t\ttransaction.recentBlockhash = (\r\n\t\t\t\tawait connection.getRecentBlockhash(\"max\")\r\n\t\t\t).blockhash;\r\n\t\t\tawait transaction.setSigners(\r\n\t\t\t\twallet.publicKey,\r\n\t\t\t\t...signers.map((s) => s.publicKey)\r\n\t\t\t);\r\n\t\t\tif (signers.length != 0) await transaction.partialSign(...signers);\r\n\t\t\tconst signedTransaction = await wallet.signTransaction(transaction);\r\n\t\t\tlet hash = await connection.sendRawTransaction(\r\n\t\t\t\tawait signedTransaction.serialize()\r\n\t\t\t);\r\n\t\t\tawait connection.confirmTransaction(hash);\r\n\t\t\ttoast.success(\"Transaction succeed.\");\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log('error', err)\r\n\t\t\ttoast.error(\"Transaction failed. Please try again.\");\r\n\t\t}\r\n\t};\r\n\r\n\tasync function withFindOrInitAssociatedTokenAccount(\r\n\t\ttransaction: Transaction,\r\n\t\tconnection: Connection,\r\n\t\tmint: PublicKey,\r\n\t\towner: PublicKey,\r\n\t\tpayer: PublicKey,\r\n\t\tallowOwnerOffCurve: boolean\r\n\t  ) {\r\n\t\tconst associatedAddress = await splToken.Token.getAssociatedTokenAddress(\r\n\t\t  splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\r\n\t\t  splToken.TOKEN_PROGRAM_ID,\r\n\t\t  mint,\r\n\t\t  owner,\r\n\t\t  allowOwnerOffCurve\r\n\t\t);\r\n\t\tconst account = await connection.getAccountInfo(associatedAddress);\r\n\t\tif (!account) {\r\n\t\t  transaction.add(\r\n\t\t\tsplToken.Token.createAssociatedTokenAccountInstruction(\r\n\t\t\t  splToken.ASSOCIATED_TOKEN_PROGRAM_ID,\r\n\t\t\t  splToken.TOKEN_PROGRAM_ID,\r\n\t\t\t  mint,\r\n\t\t\t  associatedAddress,\r\n\t\t\t  owner,\r\n\t\t\t  payer\r\n\t\t\t)\r\n\t\t  );\r\n\t\t}\r\n\t\treturn associatedAddress;\r\n\t  }\r\n\r\n\tconst onAllocateReward = async () => {\r\n\t\ttry {\r\n\t\t\tif (anchorWallet) {\r\n\t\t\t\tconst signersMatrix: any[] = [];\r\n\t\t\t\tconst instructionsMatrix: any[] = [];\r\n\r\n\t\t\t\tconst programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID!);\r\n\t\t\t\tconst idl = STAKE_CONTRACT_IDL as anchor.Idl;\r\n\r\n\t\t\t\tconst confirmOption: ConfirmOptions = {\r\n\t\t\t\t\tcommitment: \"finalized\",\r\n\t\t\t\t\tpreflightCommitment: \"finalized\",\r\n\t\t\t\t\tskipPreflight: false,\r\n\t\t\t\t};\r\n\t\t\t\tlet provider = new anchor.Provider(connection, anchorWallet, confirmOption);\r\n\t\t\t\tlet program = new anchor.Program(idl, programId, provider);\r\n\r\n\t\t\t\tconst GLOBAL_AUTHORITY_SEED = \"global-authority\";\r\n\t\t\t\tconst USER_POOL_SEED = \"user-pool\"\r\n\r\n\t\t\t\tconst [globalAuthority] = await PublicKey.findProgramAddress(\r\n\t\t\t\t\t[Buffer.from(GLOBAL_AUTHORITY_SEED)],\r\n\t\t\t\t\tprogram.programId\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconsole.log(globalAuthority.toString())\r\n\r\n\t\t\t\tconst globalAuthorityInfo = await program.account.globalPool.fetch(globalAuthority);\r\n\t\t\t\tconst allocated_year = new Date(globalAuthorityInfo.allocateTime.toNumber() * 1000).getFullYear();\r\n\t\t\t\tconst allocated_month = new Date(globalAuthorityInfo.allocateTime.toNumber() * 1000).getMonth();\r\n\r\n\t\t\t\tconst current_year = new Date().getFullYear();\r\n\t\t\t\tconst current_month = new Date().getMonth();\r\n\r\n\t\t\t\t// console.log(\"globalAuthorityInfo\", globalAuthorityInfo)\r\n\t\t\t\t// if (allocated_month == current_month && allocated_year == current_year) {\r\n\t\t\t\t// \ttoast.error(\"You already allocate reward to users\");\r\n\t\t\t\t// \treturn\r\n\t\t\t\t// }\r\n\r\n\t\t\t\tconst monthStr = new Date().getFullYear().toString() + new Date().getMonth().toString();\r\n\t\t\t\tconst [monthInfo] = await PublicKey.findProgramAddress(\r\n\t\t\t\t\t[Buffer.from(anchor.utils.bytes.utf8.encode('escrow-cjh')), Buffer.from(monthStr)],\r\n\t\t\t\t\tprogram.programId\r\n\t\t\t\t);\r\n\r\n\t\t\t\tlet keypair = anchor.web3.Keypair.generate();\r\n\t\t\t\tlet signers = [keypair];\r\n\t\t\t\tlet instructions: any[] = [];\r\n\t\t\t\tinstructions.push(\r\n\t\t\t\t\tprogram.instruction.calcMonthTotalReward({\r\n\t\t\t\t\t\taccounts: {\r\n\t\t\t\t\t\t\tglobalAuthority: globalAuthority,\r\n\t\t\t\t\t\t\tmonthInfo: monthInfo\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t\tsignersMatrix.push(signers);\r\n\t\t\t\tinstructionsMatrix.push(instructions);\r\n\r\n\t\t\t\tconst users = (await axios.get(`${BACKEND_URL}/user/getUsers`)).data.users;\r\n\t\t\t\tfor (let i = 0; i < users.length; i++) {\r\n\t\t\t\t\tlet [userPool] = await PublicKey.findProgramAddress(\r\n\t\t\t\t\t\t[Buffer.from(USER_POOL_SEED), new PublicKey(users[i].walletAddress).toBuffer()],\r\n\t\t\t\t\t\tprogram.programId\r\n\t\t\t\t\t);\r\n\t\t\t\t\tlet userPoolInfo = null;\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tuserPoolInfo = await program.account.userPool.fetch(userPool);\r\n\t\t\t\t\t} catch { }\r\n\r\n\t\t\t\t\tif (userPoolInfo) {\r\n\t\t\t\t\t\tlet [userPoolAllocate] = await PublicKey.findProgramAddress(\r\n\t\t\t\t\t\t\t[Buffer.from(USER_POOL_SEED), new PublicKey(users[i].walletAddress).toBuffer(), userPoolInfo.counter.toArrayLike(Buffer, \"le\", 8)],\r\n\t\t\t\t\t\t\tprogram.programId\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tlet keypair1 = anchor.web3.Keypair.generate();\r\n\t\t\t\t\t\tlet signers1 = [keypair1];\r\n\t\t\t\t\t\tlet instructions1: any[] = [];\r\n\r\n\t\t\t\t\t\tconsole.log('instructions push')\r\n\t\t\t\t\t\tinstructions1.push(\r\n\t\t\t\t\t\t\tprogram.instruction.allocateReward({\r\n\t\t\t\t\t\t\t\taccounts: {\r\n\t\t\t\t\t\t\t\t\tadmin: anchorWallet.publicKey,\r\n\t\t\t\t\t\t\t\t\tmonthInfo: monthInfo,\r\n\t\t\t\t\t\t\t\t\tuserPool: userPool,\r\n\t\t\t\t\t\t\t\t\tuserPoolAllocate: userPoolAllocate,\r\n\t\t\t\t\t\t\t\t\tsystemProgram: anchor.web3.SystemProgram.programId,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tsignersMatrix.push(signers1);\r\n\t\t\t\t\t\tinstructionsMatrix.push(instructions1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log('instructionsMatrix', instructionsMatrix.length);\r\n\r\n\t\t\t\tawait sendTransactions(\r\n\t\t\t\t\tconnection,\r\n\t\t\t\t\tanchorWallet,\r\n\t\t\t\t\tinstructionsMatrix,\r\n\t\t\t\t\tsignersMatrix\r\n\t\t\t\t);\r\n\r\n\t\t\t\ttoast.success(\"The reward ia allocated to users\")\r\n\t\t\t\t// await sendTransaction(transaction, [], anchorWallet);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tconsole.error(e)\r\n\t\t}\r\n\t}\r\n\r\n\tconst onDepositToken = async () => {\r\n\t\tconsole.log(\"test\", solInputRef.current?.value)\r\n\t\tif (!solInputRef.current?.value || Number(solInputRef.current?.value) <= 0) {\r\n\t\t\ttoast.error(\"Input sol amount, please.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tif (anchorWallet) {\r\n\t\t\t\tsetShowLoader(true);\r\n\t\t\t\tconst programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID!);\r\n\t\t\t\tconst idl = STAKE_CONTRACT_IDL as anchor.Idl;\r\n\r\n\t\t\t\tconst confirmOption: ConfirmOptions = {\r\n\t\t\t\t\tcommitment: \"finalized\",\r\n\t\t\t\t\tpreflightCommitment: \"finalized\",\r\n\t\t\t\t\tskipPreflight: false,\r\n\t\t\t\t};\r\n\t\t\t\tlet provider = new anchor.Provider(connection, anchorWallet, confirmOption);\r\n\t\t\t\tlet program = new anchor.Program(idl, programId, provider);\r\n\r\n\t\t\t\tconst [globalAuthority] = await PublicKey.findProgramAddress(\r\n\t\t\t\t\t[Buffer.from(GLOBAL_AUTHORITY_SEED)],\r\n\t\t\t\t\tprogram.programId\r\n\t\t\t\t);\r\n\r\n\t\t\t\tvar myToken = new Token(\r\n\t\t\t\t\tconnection,\r\n\t\t\t\t\trewardMint,\r\n\t\t\t\t\tTOKEN_PROGRAM_ID,\r\n\t\t\t\t\twallet as any\r\n\t\t\t\t);\r\n\t\t\t\tlet sourceRewardAccount = await getTokenWallet(anchorWallet.publicKey, rewardMint);\r\n\t\t\t\tconsole.log('source',sourceRewardAccount.toString());\r\n\t\t\t\tconsole.log('global',globalAuthority.toString());\r\n\t\t\t\tlet srcAccInfo = await myToken.getAccountInfo(sourceRewardAccount);\r\n\t\t\t\tif (!srcAccInfo) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet transaction = new Transaction();\r\n\r\n\t\t\t\tlet destRewardAccount = await withFindOrInitAssociatedTokenAccount(\r\n\t\t\t\t\ttransaction,\r\n\t\t\t\t\tprovider.connection,\r\n\t\t\t\t\trewardMint,\r\n\t\t\t\t\tglobalAuthority,\r\n\t\t\t\t\tanchorWallet.publicKey,\r\n\t\t\t\t\ttrue\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconsole.log('dest', destRewardAccount.toString());\r\n\t\t\t\tconsole.log('lamports for sol', web3.LAMPORTS_PER_SOL);\r\n\r\n\t\t\t\tconst token_decimals = 100000000;\r\n\t\t\t\tlet signers: Keypair[] = [];\r\n\t\t\t\ttransaction.add(\r\n\t\t\t\t\tawait program.instruction.depositToken(new anchor.BN(token_decimals * Number(solInputRef.current?.value)), {\r\n\t\t\t\t\t\taccounts: {\r\n\t\t\t\t\t\t\tglobalAuthority: globalAuthority,\r\n\t\t\t\t\t\t\towner: anchorWallet.publicKey,\r\n\t\t\t\t\t\t\tsourceAccount: sourceRewardAccount,\r\n\t\t\t\t\t\t\tdestAccount: destRewardAccount,\r\n\t\t\t\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\r\n\t\t\t\tawait sendTransaction(transaction, signers, anchorWallet);\r\n\t\t\t\tsetShowLoader(false);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tconsole.error(e)\r\n\t\t\tsetShowLoader(false);\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"bg-black h-screen\">\r\n\t\t\t{(showLoader) && <Loader text={\"Loading\"} />}\r\n\t\t\t<div className=\"px-4 lg:px-8 h-full\">\r\n\t\t\t\t{/* Main Navbar */}\r\n\t\t\t\t<nav className=\"sm:flex items-center justify-between py-5\">\r\n\t\t\t\t\t<WalletMultiButton className=\"wallet-btn\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t</WalletMultiButton>\r\n\t\t\t\t</nav>\r\n\t\t\t\t<div className=\"sm:flex items-center py-5\">\r\n\t\t\t\t\t<button onClick={onAllocateReward} className=\"sm:ml-5 ml-2 mt-2 sm:mt-0 bg-gradient-to-r from-primary to-secondary py-3 px-8 rounded-2xl cursor-pointer mr-5\">\r\n\t\t\t\t\t\tAllocate Rewards\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<input ref={solInputRef} type=\"number\" className=\"py-3 px-3 rounded-2xl sm:w-1/4 w-full outline-none bg-LightPurple uppercase\" placeholder=\"Sol Amount to Send to User\" />\r\n\t\t\t\t\t<button onClick={onDepositToken} className=\"sm:ml-5 ml-2 mt-2 sm:mt-0 bg-gradient-to-r from-primary to-secondary py-3 px-8 rounded-2xl cursor-pointer\">\r\n\t\t\t\t\t\tSend\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Admin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}