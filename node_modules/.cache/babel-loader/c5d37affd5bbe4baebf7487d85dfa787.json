{"ast":null,"code":"import { createAddConfigLinesInstruction } from '@metaplex-foundation/mpl-candy-machine-core';\nimport { assertNotFull, assertCanAdd, assertAllItemConstraints } from '../asserts.mjs';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'InsertCandyMachineItemsOperation';\n/**\n * Insert items into an existing Candy Machine.\n *\n * Note that the name and URI of each item should not include\n * the prefixes configured in the config line settings.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .insertItems({\n *     candyMachine,\n *     items: [\n *       { name: 'My NFT #1', uri: 'https://example.com/nft1' },\n *       { name: 'My NFT #2', uri: 'https://example.com/nft2' },\n *       { name: 'My NFT #3', uri: 'https://example.com/nft3' },\n *     ],\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst insertCandyMachineItemsOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst insertCandyMachineItemsOperationHandler = {\n  async handle(operation, metaplex, scope) {\n    return insertCandyMachineItemsBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Insert items into an existing Candy Machine.\n *\n * Note that the name and URI of each item should not include\n * the prefixes configured in the config line settings.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .candyMachines()\n *   .builders()\n *   .insertItems({ candyMachine, items });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst insertCandyMachineItemsBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const authority = params.authority ?? metaplex.identity();\n  const index = params.index ?? params.candyMachine.itemsLoaded;\n  const {\n    items\n  } = params;\n  assertNotFull(params.candyMachine, index);\n  assertCanAdd(params.candyMachine, index, items.length);\n  assertAllItemConstraints(params.candyMachine, items); // Programs.\n\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n  return TransactionBuilder.make().setFeePayer(payer).add({\n    instruction: createAddConfigLinesInstruction({\n      candyMachine: params.candyMachine.address,\n      authority: authority.publicKey\n    }, {\n      index,\n      configLines: items\n    }, candyMachineProgram.address),\n    signers: [authority],\n    key: params.instructionKey ?? 'insertItems'\n  });\n};\n\nexport { insertCandyMachineItemsBuilder, insertCandyMachineItemsOperation, insertCandyMachineItemsOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineModule/operations/insertCandyMachineItems.ts"],"names":["Key","insertCandyMachineItemsOperation","useOperation","insertCandyMachineItemsOperationHandler","handle","operation","metaplex","scope","insertCandyMachineItemsBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","authority","identity","index","candyMachine","itemsLoaded","items","assertNotFull","assertCanAdd","length","assertAllItemConstraints","candyMachineProgram","getCandyMachine","TransactionBuilder","make","setFeePayer","add","instruction","createAddConfigLinesInstruction","address","publicKey","configLines","signers","key","instructionKey"],"mappings":";;;4EAkBA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,kCAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,gCAAgC,GAC3CC,YAAY,CAAmCF,GAAnC,C;AAEd;AACA;AACA;AACA;;AAsEA;AACA;AACA;AACA;;AACO,MAAMG,uCAA2F,GACtG;EACE,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAI0C;IACxC,OAAOC,8BAA8B,CACnCF,QADmC,EAEnCD,SAAS,CAACI,KAFyB,EAGnCF,KAHmC,CAA9BC,CAILE,cAJKF,CAIUF,QAJVE,EAIoBD,KAAK,CAACI,cAJ1BH,CAAP;EAKF;;AAXF,CADK,C,CAeP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaA,MAAAA,8BAA8B,GAAG,UAC5CF,QAD4C,EAE5CM,MAF4C,EAIrB;EAAA,IADvBC,OACuB,uEADc,EACd;EACvB,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGT,QAAQ,CAACU,GAATV,GAAeW,kBAAfX;EAApB,IAA4DO,OAAlE;EACA,MAAMK,SAAS,GAAGN,MAAM,CAACM,SAAPN,IAAoBN,QAAQ,CAACa,QAATb,EAAtC;EACA,MAAMc,KAAK,GAAGR,MAAM,CAACQ,KAAPR,IAAgBA,MAAM,CAACS,YAAPT,CAAoBU,WAAlD;EACA,MAAM;IAAEC;EAAF,IAAYX,MAAlB;EAEAY,aAAa,CAACZ,MAAM,CAACS,YAAR,EAAsBD,KAAtB,CAAbI;EACAC,YAAY,CAACb,MAAM,CAACS,YAAR,EAAsBD,KAAtB,EAA6BG,KAAK,CAACG,MAAnC,CAAZD;EACAE,wBAAwB,CAACf,MAAM,CAACS,YAAR,EAAsBE,KAAtB,CAAxBI,CARuB,CAUvB;;EACA,MAAMC,mBAAmB,GAAGtB,QAAQ,CAACQ,QAATR,GAAoBuB,eAApBvB,CAAoCQ,QAApCR,CAA5B;EAEA,OAAOwB,kBAAkB,CAACC,IAAnBD,GACJE,WADIF,CACQf,KADRe,EAEJG,GAFIH,CAEA;IACHI,WAAW,EAAEC,+BAA+B,CAC1C;MACEd,YAAY,EAAET,MAAM,CAACS,YAAPT,CAAoBwB,OADpC;MAEElB,SAAS,EAAEA,SAAS,CAACmB;IAFvB,CAD0C,EAK1C;MAAEjB,KAAF;MAASkB,WAAW,EAAEf;IAAtB,CAL0C,EAM1CK,mBAAmB,CAACQ,OANsB,CADzC;IASHG,OAAO,EAAE,CAACrB,SAAD,CATN;IAUHsB,GAAG,EAAE5B,MAAM,CAAC6B,cAAP7B,IAAyB;EAV3B,CAFAkB,CAAP;AAcF,CA/BatB","sourcesContent":["import { createAddConfigLinesInstruction } from '@metaplex-foundation/mpl-candy-machine-core';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  assertAllItemConstraints,\n  assertCanAdd,\n  assertNotFull,\n} from '../asserts';\nimport { CandyMachine, CandyMachineItem } from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'InsertCandyMachineItemsOperation' as const;\n\n/**\n * Insert items into an existing Candy Machine.\n *\n * Note that the name and URI of each item should not include\n * the prefixes configured in the config line settings.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .insertItems({\n *     candyMachine,\n *     items: [\n *       { name: 'My NFT #1', uri: 'https://example.com/nft1' },\n *       { name: 'My NFT #2', uri: 'https://example.com/nft2' },\n *       { name: 'My NFT #3', uri: 'https://example.com/nft3' },\n *     ],\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const insertCandyMachineItemsOperation =\n  useOperation<InsertCandyMachineItemsOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type InsertCandyMachineItemsOperation = Operation<\n  typeof Key,\n  InsertCandyMachineItemsInput,\n  InsertCandyMachineItemsOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type InsertCandyMachineItemsInput = {\n  /**\n   * The Candy Machine to insert items into.\n   *\n   * We only need a subset of the `CandyMachine` model.\n   * We need its address, its items settings and the number of items loaded\n   * and to be loaded so we can check if the operation is valid.\n   */\n  candyMachine: Pick<\n    CandyMachine,\n    'address' | 'itemsAvailable' | 'itemsLoaded' | 'itemSettings'\n  >;\n\n  /**\n   * The Signer authorized to update the candy machine.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /**\n   * The items to insert into the candy machine.\n   *\n   * This only requires the `name` and the `uri` to insert for each item.\n   *\n   * Important: If your config line settings use prefixes, you must\n   * only provide the part of the name or URI that comes after theses prefixes.\n   *\n   * For example, if your config line settings use the following prefixes:\n   * - `prefixName`: `My NFT #`\n   * - `prefixUri`: `https://example.com/nfts/`\n   *\n   * Then, an item to insert could be: `{ name: '1', uri: '1.json' }`.\n   *\n   * @see {@link CandyMachineItem}\n   */\n  items: Pick<CandyMachineItem, 'name' | 'uri'>[];\n\n  /**\n   * The index we should use to insert the new items. This refers to the\n   * index of the first item to insert and the others will follow after it.\n   *\n   * By defaults, this uses the `itemsLoaded` property so items are simply\n   * appended to the current items.\n   *\n   * @defaultValue `candyMachine.itemsLoaded`\n   */\n  index?: number;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type InsertCandyMachineItemsOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const insertCandyMachineItemsOperationHandler: OperationHandler<InsertCandyMachineItemsOperation> =\n  {\n    async handle(\n      operation: InsertCandyMachineItemsOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<InsertCandyMachineItemsOutput> {\n      return insertCandyMachineItemsBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type InsertCandyMachineItemsBuilderParams = Omit<\n  InsertCandyMachineItemsInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * Insert items into an existing Candy Machine.\n *\n * Note that the name and URI of each item should not include\n * the prefixes configured in the config line settings.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .candyMachines()\n *   .builders()\n *   .insertItems({ candyMachine, items });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const insertCandyMachineItemsBuilder = (\n  metaplex: Metaplex,\n  params: InsertCandyMachineItemsBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const authority = params.authority ?? metaplex.identity();\n  const index = params.index ?? params.candyMachine.itemsLoaded;\n  const { items } = params;\n\n  assertNotFull(params.candyMachine, index);\n  assertCanAdd(params.candyMachine, index, items.length);\n  assertAllItemConstraints(params.candyMachine, items);\n\n  // Programs.\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createAddConfigLinesInstruction(\n        {\n          candyMachine: params.candyMachine.address,\n          authority: authority.publicKey,\n        },\n        { index, configLines: items },\n        candyMachineProgram.address\n      ),\n      signers: [authority],\n      key: params.instructionKey ?? 'insertItems',\n    });\n};\n"]},"metadata":{},"sourceType":"module"}