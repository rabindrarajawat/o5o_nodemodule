{"ast":null,"code":"import { PROGRAM_ID, cusper } from '@metaplex-foundation/mpl-token-metadata';\nimport { NftClient } from './NftClient.mjs';\nimport { approveNftCollectionAuthorityOperation, approveNftCollectionAuthorityOperationHandler } from './operations/approveNftCollectionAuthority.mjs';\nimport { approveNftUseAuthorityOperation, approveNftUseAuthorityOperationHandler } from './operations/approveNftUseAuthority.mjs';\nimport { createNftOperation, createNftOperationHandler } from './operations/createNft.mjs';\nimport { createSftOperation, createSftOperationHandler } from './operations/createSft.mjs';\nimport { deleteNftOperation, deleteNftOperationHandler } from './operations/deleteNft.mjs';\nimport { findNftByMetadataOperation, findNftByMetadataOperationHandler } from './operations/findNftByMetadata.mjs';\nimport { findNftByMintOperation, findNftByMintOperationHandler } from './operations/findNftByMint.mjs';\nimport { findNftByTokenOperation, findNftByTokenOperationHandler } from './operations/findNftByToken.mjs';\nimport { findNftsByCreatorOperation, findNftsByCreatorOperationHandler } from './operations/findNftsByCreator.mjs';\nimport { findNftsByMintListOperation, findNftsByMintListOperationHandler } from './operations/findNftsByMintList.mjs';\nimport { findNftsByOwnerOperation, findNftsByOwnerOperationHandler } from './operations/findNftsByOwner.mjs';\nimport { findNftsByUpdateAuthorityOperation, findNftsByUpdateAuthorityOperationHandler } from './operations/findNftsByUpdateAuthority.mjs';\nimport { freezeDelegatedNftOperation, freezeDelegatedNftOperationHandler } from './operations/freezeDelegatedNft.mjs';\nimport { loadMetadataOperation, loadMetadataOperationHandler } from './operations/loadMetadata.mjs';\nimport { migrateToSizedCollectionNftOperation, migrateToSizedCollectionNftOperationHandler } from './operations/migrateToSizedCollectionNft.mjs';\nimport { printNewEditionOperation, printNewEditionOperationHandler } from './operations/printNewEdition.mjs';\nimport { revokeNftCollectionAuthorityOperation, revokeNftCollectionAuthorityOperationHandler } from './operations/revokeNftCollectionAuthority.mjs';\nimport { revokeNftUseAuthorityOperation, revokeNftUseAuthorityOperationHandler } from './operations/revokeNftUseAuthority.mjs';\nimport { thawDelegatedNftOperation, thawDelegatedNftOperationHandler } from './operations/thawDelegatedNft.mjs';\nimport { unverifyNftCollectionOperation, unverifyNftCollectionOperationHandler } from './operations/unverifyNftCollection.mjs';\nimport { unverifyNftCreatorOperation, unverifyNftCreatorOperationHandler } from './operations/unverifyNftCreator.mjs';\nimport { updateNftOperation, updateNftOperationHandler } from './operations/updateNft.mjs';\nimport { uploadMetadataOperation, uploadMetadataOperationHandler } from './operations/uploadMetadata.mjs';\nimport { useNftOperation, useNftOperationHandler } from './operations/useNft.mjs';\nimport { verifyNftCollectionOperation, verifyNftCollectionOperationHandler } from './operations/verifyNftCollection.mjs';\nimport { verifyNftCreatorOperation, verifyNftCreatorOperationHandler } from './operations/verifyNftCreator.mjs';\n/** @group Plugins */\n\nconst nftModule = () => ({\n  install(metaplex) {\n    // Token Metadata Program.\n    const tokenMetadataProgram = {\n      name: 'TokenMetadataProgram',\n      address: PROGRAM_ID,\n      errorResolver: error => cusper.errorFromProgramLogs(error.logs, false)\n    };\n    metaplex.programs().register(tokenMetadataProgram);\n\n    metaplex.programs().getTokenMetadata = function (programs) {\n      return this.get(tokenMetadataProgram.name, programs);\n    }; // Operations.\n\n\n    const op = metaplex.operations();\n    op.register(approveNftCollectionAuthorityOperation, approveNftCollectionAuthorityOperationHandler);\n    op.register(approveNftUseAuthorityOperation, approveNftUseAuthorityOperationHandler);\n    op.register(createNftOperation, createNftOperationHandler);\n    op.register(createSftOperation, createSftOperationHandler);\n    op.register(deleteNftOperation, deleteNftOperationHandler);\n    op.register(findNftByMetadataOperation, findNftByMetadataOperationHandler);\n    op.register(findNftByMintOperation, findNftByMintOperationHandler);\n    op.register(findNftByTokenOperation, findNftByTokenOperationHandler);\n    op.register(findNftsByCreatorOperation, findNftsByCreatorOperationHandler);\n    op.register(findNftsByMintListOperation, findNftsByMintListOperationHandler);\n    op.register(findNftsByOwnerOperation, findNftsByOwnerOperationHandler);\n    op.register(findNftsByUpdateAuthorityOperation, findNftsByUpdateAuthorityOperationHandler);\n    op.register(freezeDelegatedNftOperation, freezeDelegatedNftOperationHandler);\n    op.register(loadMetadataOperation, loadMetadataOperationHandler);\n    op.register(migrateToSizedCollectionNftOperation, migrateToSizedCollectionNftOperationHandler);\n    op.register(printNewEditionOperation, printNewEditionOperationHandler);\n    op.register(revokeNftCollectionAuthorityOperation, revokeNftCollectionAuthorityOperationHandler);\n    op.register(revokeNftUseAuthorityOperation, revokeNftUseAuthorityOperationHandler);\n    op.register(thawDelegatedNftOperation, thawDelegatedNftOperationHandler);\n    op.register(unverifyNftCollectionOperation, unverifyNftCollectionOperationHandler);\n    op.register(unverifyNftCreatorOperation, unverifyNftCreatorOperationHandler);\n    op.register(updateNftOperation, updateNftOperationHandler);\n    op.register(uploadMetadataOperation, uploadMetadataOperationHandler);\n    op.register(useNftOperation, useNftOperationHandler);\n    op.register(verifyNftCollectionOperation, verifyNftCollectionOperationHandler);\n    op.register(verifyNftCreatorOperation, verifyNftCreatorOperationHandler);\n\n    metaplex.nfts = function () {\n      return new NftClient(this);\n    };\n  }\n\n});\n\nexport { nftModule };","map":{"version":3,"sources":["../../../../src/plugins/nftModule/plugin.ts"],"names":["nftModule","install","metaplex","tokenMetadataProgram","name","address","PROGRAM_ID","errorResolver","error","cusper","errorFromProgramLogs","logs","programs","register","getTokenMetadata","get","op","operations","approveNftCollectionAuthorityOperation","approveNftCollectionAuthorityOperationHandler","approveNftUseAuthorityOperation","approveNftUseAuthorityOperationHandler","createNftOperation","createNftOperationHandler","createSftOperation","createSftOperationHandler","deleteNftOperation","deleteNftOperationHandler","findNftByMetadataOperation","findNftByMetadataOperationHandler","findNftByMintOperation","findNftByMintOperationHandler","findNftByTokenOperation","findNftByTokenOperationHandler","findNftsByCreatorOperation","findNftsByCreatorOperationHandler","findNftsByMintListOperation","findNftsByMintListOperationHandler","findNftsByOwnerOperation","findNftsByOwnerOperationHandler","findNftsByUpdateAuthorityOperation","findNftsByUpdateAuthorityOperationHandler","freezeDelegatedNftOperation","freezeDelegatedNftOperationHandler","loadMetadataOperation","loadMetadataOperationHandler","migrateToSizedCollectionNftOperation","migrateToSizedCollectionNftOperationHandler","printNewEditionOperation","printNewEditionOperationHandler","revokeNftCollectionAuthorityOperation","revokeNftCollectionAuthorityOperationHandler","revokeNftUseAuthorityOperation","revokeNftUseAuthorityOperationHandler","thawDelegatedNftOperation","thawDelegatedNftOperationHandler","unverifyNftCollectionOperation","unverifyNftCollectionOperationHandler","unverifyNftCreatorOperation","unverifyNftCreatorOperationHandler","updateNftOperation","updateNftOperationHandler","uploadMetadataOperation","uploadMetadataOperationHandler","useNftOperation","useNftOperationHandler","verifyNftCollectionOperation","verifyNftCollectionOperationHandler","verifyNftCreatorOperation","verifyNftCreatorOperationHandler","nfts","NftClient"],"mappings":"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","sourcesContent":["import { cusper, PROGRAM_ID } from '@metaplex-foundation/mpl-token-metadata';\nimport { ProgramClient } from '../programModule';\nimport { NftClient } from './NftClient';\nimport {\n  approveNftCollectionAuthorityOperation,\n  approveNftCollectionAuthorityOperationHandler,\n  approveNftUseAuthorityOperation,\n  approveNftUseAuthorityOperationHandler,\n  createNftOperation,\n  createNftOperationHandler,\n  createSftOperation,\n  createSftOperationHandler,\n  deleteNftOperation,\n  deleteNftOperationHandler,\n  findNftByMetadataOperation,\n  findNftByMetadataOperationHandler,\n  findNftByMintOperation,\n  findNftByMintOperationHandler,\n  findNftByTokenOperation,\n  findNftByTokenOperationHandler,\n  findNftsByCreatorOperation,\n  findNftsByCreatorOperationHandler,\n  findNftsByMintListOperation,\n  findNftsByMintListOperationHandler,\n  findNftsByOwnerOperation,\n  findNftsByOwnerOperationHandler,\n  findNftsByUpdateAuthorityOperation,\n  findNftsByUpdateAuthorityOperationHandler,\n  freezeDelegatedNftOperation,\n  freezeDelegatedNftOperationHandler,\n  loadMetadataOperation,\n  loadMetadataOperationHandler,\n  migrateToSizedCollectionNftOperation,\n  migrateToSizedCollectionNftOperationHandler,\n  printNewEditionOperation,\n  printNewEditionOperationHandler,\n  revokeNftCollectionAuthorityOperation,\n  revokeNftCollectionAuthorityOperationHandler,\n  revokeNftUseAuthorityOperation,\n  revokeNftUseAuthorityOperationHandler,\n  thawDelegatedNftOperation,\n  thawDelegatedNftOperationHandler,\n  unverifyNftCollectionOperation,\n  unverifyNftCollectionOperationHandler,\n  unverifyNftCreatorOperation,\n  unverifyNftCreatorOperationHandler,\n  updateNftOperation,\n  updateNftOperationHandler,\n  uploadMetadataOperation,\n  uploadMetadataOperationHandler,\n  useNftOperation,\n  useNftOperationHandler,\n  verifyNftCollectionOperation,\n  verifyNftCollectionOperationHandler,\n  verifyNftCreatorOperation,\n  verifyNftCreatorOperationHandler,\n} from './operations';\nimport { ErrorWithLogs, MetaplexPlugin, Program } from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n/** @group Plugins */\nexport const nftModule = (): MetaplexPlugin => ({\n  install(metaplex: Metaplex) {\n    // Token Metadata Program.\n    const tokenMetadataProgram = {\n      name: 'TokenMetadataProgram',\n      address: PROGRAM_ID,\n      errorResolver: (error: ErrorWithLogs) =>\n        cusper.errorFromProgramLogs(error.logs, false),\n    };\n    metaplex.programs().register(tokenMetadataProgram);\n    metaplex.programs().getTokenMetadata = function (\n      this: ProgramClient,\n      programs?: Program[]\n    ) {\n      return this.get(tokenMetadataProgram.name, programs);\n    };\n\n    // Operations.\n    const op = metaplex.operations();\n    op.register(\n      approveNftCollectionAuthorityOperation,\n      approveNftCollectionAuthorityOperationHandler\n    );\n    op.register(\n      approveNftUseAuthorityOperation,\n      approveNftUseAuthorityOperationHandler\n    );\n    op.register(createNftOperation, createNftOperationHandler);\n    op.register(createSftOperation, createSftOperationHandler);\n    op.register(deleteNftOperation, deleteNftOperationHandler);\n    op.register(findNftByMetadataOperation, findNftByMetadataOperationHandler);\n    op.register(findNftByMintOperation, findNftByMintOperationHandler);\n    op.register(findNftByTokenOperation, findNftByTokenOperationHandler);\n    op.register(findNftsByCreatorOperation, findNftsByCreatorOperationHandler);\n    op.register(\n      findNftsByMintListOperation,\n      findNftsByMintListOperationHandler\n    );\n    op.register(findNftsByOwnerOperation, findNftsByOwnerOperationHandler);\n    op.register(\n      findNftsByUpdateAuthorityOperation,\n      findNftsByUpdateAuthorityOperationHandler\n    );\n    op.register(\n      freezeDelegatedNftOperation,\n      freezeDelegatedNftOperationHandler\n    );\n    op.register(loadMetadataOperation, loadMetadataOperationHandler);\n    op.register(\n      migrateToSizedCollectionNftOperation,\n      migrateToSizedCollectionNftOperationHandler\n    );\n    op.register(printNewEditionOperation, printNewEditionOperationHandler);\n    op.register(\n      revokeNftCollectionAuthorityOperation,\n      revokeNftCollectionAuthorityOperationHandler\n    );\n    op.register(\n      revokeNftUseAuthorityOperation,\n      revokeNftUseAuthorityOperationHandler\n    );\n    op.register(thawDelegatedNftOperation, thawDelegatedNftOperationHandler);\n    op.register(\n      unverifyNftCollectionOperation,\n      unverifyNftCollectionOperationHandler\n    );\n    op.register(\n      unverifyNftCreatorOperation,\n      unverifyNftCreatorOperationHandler\n    );\n    op.register(updateNftOperation, updateNftOperationHandler);\n    op.register(uploadMetadataOperation, uploadMetadataOperationHandler);\n    op.register(useNftOperation, useNftOperationHandler);\n    op.register(\n      verifyNftCollectionOperation,\n      verifyNftCollectionOperationHandler\n    );\n    op.register(verifyNftCreatorOperation, verifyNftCreatorOperationHandler);\n\n    metaplex.nfts = function () {\n      return new NftClient(this);\n    };\n  },\n});\n\ndeclare module '../../Metaplex' {\n  interface Metaplex {\n    nfts(): NftClient;\n  }\n}\n\ndeclare module '../programModule/ProgramClient' {\n  interface ProgramClient {\n    getTokenMetadata(programs?: Program[]): Program;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}