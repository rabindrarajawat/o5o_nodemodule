{"ast":null,"code":"import { Buffer } from 'buffer';\nimport { Pda } from '../../types/Pda.mjs';\nimport { toBigNumber } from '../../types/BigNumber.mjs';\n/**\n * This client allows you to build PDAs related to the NFT module.\n *\n * @see {@link NftClient}\n * @group Module Pdas\n */\n\nclass NftPdasClient {\n  constructor(metaplex) {\n    this.metaplex = metaplex;\n  }\n  /** Finds the Metadata PDA of a given mint address. */\n\n\n  metadata(_ref) {\n    let {\n      mint,\n      programs\n    } = _ref;\n    const programId = this.programId(programs);\n    return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), mint.toBuffer()]);\n  }\n  /** Finds the Master Edition PDA of a given mint address. */\n\n\n  masterEdition(_ref2) {\n    let {\n      mint,\n      programs\n    } = _ref2;\n    const programId = this.programId(programs);\n    return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), mint.toBuffer(), Buffer.from('edition', 'utf8')]);\n  }\n  /** Finds the Edition PDA of a given mint address. */\n\n\n  edition(input) {\n    return this.masterEdition(input);\n  }\n  /** Finds the Edition Marker PDA of a given edition number. */\n\n\n  editionMarker(_ref3) {\n    let {\n      mint,\n      edition,\n      programs\n    } = _ref3;\n    const programId = this.programId(programs);\n    return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), mint.toBuffer(), Buffer.from('edition', 'utf8'), Buffer.from(edition.div(toBigNumber(248)).toString())]);\n  }\n  /** Finds the collection authority PDA for a given NFT and authority. */\n\n\n  collectionAuthorityRecord(_ref4) {\n    let {\n      mint,\n      collectionAuthority,\n      programs\n    } = _ref4;\n    const programId = this.programId(programs);\n    return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), mint.toBuffer(), Buffer.from('collection_authority', 'utf8'), collectionAuthority.toBuffer()]);\n  }\n  /** Finds the use authority PDA for a given NFT and user. */\n\n\n  useAuthorityRecord(_ref5) {\n    let {\n      mint,\n      useAuthority,\n      programs\n    } = _ref5;\n    const programId = this.programId(programs);\n    return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), mint.toBuffer(), Buffer.from('user', 'utf8'), useAuthority.toBuffer()]);\n  }\n  /** Finds the burner PDA of the Token Metadata program. */\n\n\n  burner(_ref6) {\n    let {\n      programs\n    } = _ref6;\n    const programId = this.programId(programs);\n    return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), Buffer.from('burn', 'utf8')]);\n  }\n\n  programId(programs) {\n    return this.metaplex.programs().getTokenMetadata(programs).address;\n  }\n\n}\n\nexport { NftPdasClient };","map":{"version":3,"sources":["../../../../src/plugins/nftModule/NftPdasClient.ts"],"names":["NftPdasClient","constructor","metaplex","metadata","mint","programs","programId","Pda","find","Buffer","from","toBuffer","masterEdition","edition","input","editionMarker","div","toBigNumber","toString","collectionAuthorityRecord","collectionAuthority","useAuthorityRecord","useAuthority","burner","getTokenMetadata","address"],"mappings":"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","sourcesContent":["import { Buffer } from 'buffer';\nimport type { Metaplex } from '@/Metaplex';\nimport { BigNumber, Pda, Program, PublicKey, toBigNumber } from '@/types';\n\n/**\n * This client allows you to build PDAs related to the NFT module.\n *\n * @see {@link NftClient}\n * @group Module Pdas\n */\nexport class NftPdasClient {\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  /** Finds the Metadata PDA of a given mint address. */\n  metadata({ mint, programs }: MintAddressPdaInput): Pda {\n    const programId = this.programId(programs);\n    return Pda.find(programId, [\n      Buffer.from('metadata', 'utf8'),\n      programId.toBuffer(),\n      mint.toBuffer(),\n    ]);\n  }\n\n  /** Finds the Master Edition PDA of a given mint address. */\n  masterEdition({ mint, programs }: MintAddressPdaInput): Pda {\n    const programId = this.programId(programs);\n    return Pda.find(programId, [\n      Buffer.from('metadata', 'utf8'),\n      programId.toBuffer(),\n      mint.toBuffer(),\n      Buffer.from('edition', 'utf8'),\n    ]);\n  }\n\n  /** Finds the Edition PDA of a given mint address. */\n  edition(input: MintAddressPdaInput): Pda {\n    return this.masterEdition(input);\n  }\n\n  /** Finds the Edition Marker PDA of a given edition number. */\n  editionMarker({\n    mint,\n    edition,\n    programs,\n  }: {\n    /** The address of the mint account of the edition NFT. */\n    mint: PublicKey;\n    /** The edition number of the NFT. */\n    edition: BigNumber;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(programs);\n    return Pda.find(programId, [\n      Buffer.from('metadata', 'utf8'),\n      programId.toBuffer(),\n      mint.toBuffer(),\n      Buffer.from('edition', 'utf8'),\n      Buffer.from(edition.div(toBigNumber(248)).toString()),\n    ]);\n  }\n\n  /** Finds the collection authority PDA for a given NFT and authority. */\n  collectionAuthorityRecord({\n    mint,\n    collectionAuthority,\n    programs,\n  }: {\n    /** The address of the NFT's mint account. */\n    mint: PublicKey;\n    /** The address of the collection authority. */\n    collectionAuthority: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(programs);\n    return Pda.find(programId, [\n      Buffer.from('metadata', 'utf8'),\n      programId.toBuffer(),\n      mint.toBuffer(),\n      Buffer.from('collection_authority', 'utf8'),\n      collectionAuthority.toBuffer(),\n    ]);\n  }\n\n  /** Finds the use authority PDA for a given NFT and user. */\n  useAuthorityRecord({\n    mint,\n    useAuthority,\n    programs,\n  }: {\n    /** The address of the NFT's mint account. */\n    mint: PublicKey;\n    /** The address of the use authority. */\n    useAuthority: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(programs);\n    return Pda.find(programId, [\n      Buffer.from('metadata', 'utf8'),\n      programId.toBuffer(),\n      mint.toBuffer(),\n      Buffer.from('user', 'utf8'),\n      useAuthority.toBuffer(),\n    ]);\n  }\n\n  /** Finds the burner PDA of the Token Metadata program. */\n  burner({\n    programs,\n  }: {\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(programs);\n    return Pda.find(programId, [\n      Buffer.from('metadata', 'utf8'),\n      programId.toBuffer(),\n      Buffer.from('burn', 'utf8'),\n    ]);\n  }\n\n  private programId(programs?: Program[]) {\n    return this.metaplex.programs().getTokenMetadata(programs).address;\n  }\n}\n\ntype MintAddressPdaInput = {\n  /** The address of the mint account. */\n  mint: PublicKey;\n\n  /** An optional set of programs that override the registered ones. */\n  programs?: Program[];\n};\n"]},"metadata":{},"sourceType":"module"}