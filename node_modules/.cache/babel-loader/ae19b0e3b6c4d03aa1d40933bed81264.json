{"ast":null,"code":"var _jsxFileName = \"D:\\\\software\\\\o5o BNB\\\\o5o-staking-frontend\\\\src\\\\hooks\\\\use-wallet-balance.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { NEXT_PUBLIC_SOLANA_NETWORK } from '../constant/env';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BalanceContext = /*#__PURE__*/createContext(null); // const connection = new anchor.web3.Connection(NEXT_PUBLIC_SOLANA_NETWORK == \"devnet\" ? \"https://metaplex.devnet.rpcpool.com\" : \"https://metaplex.mainnet.rpcpool.com\");\n\nconst connection = new anchor.web3.Connection(NEXT_PUBLIC_SOLANA_NETWORK == \"devnet\" ? \"https://api.devnet.solana.com\" : \"https://metaplex.mainnet.rpcpool.com\");\nexport default function useWalletBalance() {\n  _s();\n\n  const [balance, setBalance] = useContext(BalanceContext);\n  return [balance, setBalance];\n}\n\n_s(useWalletBalance, \"WRdAy7r/LQQwOYeqN9GGDwsJ3Y0=\");\n\nexport const WalletBalanceProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const wallet = useWallet();\n  const [balance, setBalance] = useState(0);\n  useEffect(() => {\n    (async () => {\n      try {\n        if (wallet !== null && wallet !== void 0 && wallet.publicKey) {\n          const balance = await connection.getBalance(wallet.publicKey);\n          setBalance(balance / LAMPORTS_PER_SOL);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    })();\n  }, [wallet, connection]);\n  return /*#__PURE__*/_jsxDEV(BalanceContext.Provider, {\n    value: [balance, setBalance],\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(WalletBalanceProvider, \"auFS8xgfKUxFhZN3gIA8RDUePf4=\", false, function () {\n  return [useWallet];\n});\n\n_c = WalletBalanceProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletBalanceProvider\");","map":{"version":3,"names":["useWallet","LAMPORTS_PER_SOL","createContext","useContext","useEffect","useState","anchor","NEXT_PUBLIC_SOLANA_NETWORK","BalanceContext","connection","web3","Connection","useWalletBalance","balance","setBalance","WalletBalanceProvider","children","wallet","publicKey","getBalance","err","console","log"],"sources":["D:/software/o5o BNB/o5o-staking-frontend/src/hooks/use-wallet-balance.tsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\r\nimport { createContext, useContext, useEffect, useState } from \"react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { NEXT_PUBLIC_SOLANA_NETWORK } from '../constant/env';\r\nconst BalanceContext = createContext(null);\r\n\r\n// const connection = new anchor.web3.Connection(NEXT_PUBLIC_SOLANA_NETWORK == \"devnet\" ? \"https://metaplex.devnet.rpcpool.com\" : \"https://metaplex.mainnet.rpcpool.com\");\r\nconst connection = new anchor.web3.Connection(NEXT_PUBLIC_SOLANA_NETWORK == \"devnet\" ? \"https://api.devnet.solana.com\" : \"https://metaplex.mainnet.rpcpool.com\");\r\n\r\nexport default function useWalletBalance() {\r\n\tconst [balance, setBalance]: any = useContext(BalanceContext);\r\n\treturn [balance, setBalance]\r\n}\r\n\r\nexport const WalletBalanceProvider: React.FC<{}> = ({ children }) => {\r\n\tconst wallet = useWallet();\r\n\tconst [balance, setBalance] = useState(0);\r\n\r\n\tuseEffect(() => {\r\n\t\t(async () => {\r\n\t\t\ttry {\r\n\t\t\t\tif (wallet?.publicKey) {\r\n\t\t\t\t\tconst balance = await connection.getBalance(wallet.publicKey);\r\n\t\t\t\t\tsetBalance(balance / LAMPORTS_PER_SOL);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (err) {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t}\r\n\t\t})();\r\n\t}, [wallet, connection]);\r\n\r\n\treturn <BalanceContext.Provider\r\n\t\tvalue={[balance, setBalance] as any}>\r\n\t\t{children}\r\n\t</BalanceContext.Provider>\r\n}"],"mappings":";;;;AAAA;;AACA;AACA,SAASA,SAAT,QAA0B,8BAA1B;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;AACA,SAASC,0BAAT,QAA2C,iBAA3C;;AACA,MAAMC,cAAc,gBAAGN,aAAa,CAAC,IAAD,CAApC,C,CAEA;;AACA,MAAMO,UAAU,GAAG,IAAIH,MAAM,CAACI,IAAP,CAAYC,UAAhB,CAA2BJ,0BAA0B,IAAI,QAA9B,GAAyC,+BAAzC,GAA2E,sCAAtG,CAAnB;AAEA,eAAe,SAASK,gBAAT,GAA4B;EAAA;;EAC1C,MAAM,CAACC,OAAD,EAAUC,UAAV,IAA6BX,UAAU,CAACK,cAAD,CAA7C;EACA,OAAO,CAACK,OAAD,EAAUC,UAAV,CAAP;AACA;;GAHuBF,gB;;AAKxB,OAAO,MAAMG,qBAAmC,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EACpE,MAAMC,MAAM,GAAGjB,SAAS,EAAxB;EACA,MAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,CAAD,CAAtC;EAEAD,SAAS,CAAC,MAAM;IACf,CAAC,YAAY;MACZ,IAAI;QACH,IAAIa,MAAJ,aAAIA,MAAJ,eAAIA,MAAM,CAAEC,SAAZ,EAAuB;UACtB,MAAML,OAAO,GAAG,MAAMJ,UAAU,CAACU,UAAX,CAAsBF,MAAM,CAACC,SAA7B,CAAtB;UACAJ,UAAU,CAACD,OAAO,GAAGZ,gBAAX,CAAV;QACA;MACD,CALD,CAMA,OAAOmB,GAAP,EAAY;QACXC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACA;IACD,CAVD;EAWA,CAZQ,EAYN,CAACH,MAAD,EAASR,UAAT,CAZM,CAAT;EAcA,oBAAO,QAAC,cAAD,CAAgB,QAAhB;IACN,KAAK,EAAE,CAACI,OAAD,EAAUC,UAAV,CADD;IAAA,UAELE;EAFK;IAAA;IAAA;IAAA;EAAA,QAAP;AAIA,CAtBM;;IAAMD,qB;UACGf,S;;;KADHe,qB"},"metadata":{},"sourceType":"module"}