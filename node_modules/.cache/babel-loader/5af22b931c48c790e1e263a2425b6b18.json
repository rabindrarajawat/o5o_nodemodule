{"ast":null,"code":"\"client\";\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = dynamic;\nexports.noSSR = noSSR;\n\nvar _extends = require(\"@swc/helpers/lib/_extends.js\").default;\n\nvar _interop_require_default = require(\"@swc/helpers/lib/_interop_require_default.js\").default;\n\nvar _react = _interop_require_default(require(\"react\"));\n\nvar _loadable = _interop_require_default(require(\"./loadable\"));\n\nfunction dynamic(dynamicOptions, options) {\n  let loadableFn = _loadable.default;\n  let loadableOptions = (options == null ? void 0 : options.suspense) ? {} : {\n    // A loading component is not required, so we default it\n    loading: _ref => {\n      let {\n        error: error,\n        isLoading: isLoading,\n        pastDelay: pastDelay\n      } = _ref;\n      if (!pastDelay) return null;\n\n      if (process.env.NODE_ENV === 'development') {\n        if (isLoading) {\n          return null;\n        }\n\n        if (error) {\n          return /*#__PURE__*/_react.default.createElement(\"p\", null, error.message, /*#__PURE__*/_react.default.createElement(\"br\", null), error.stack);\n        }\n      }\n\n      return null;\n    }\n  }; // Support for direct import(), eg: dynamic(import('../hello-world'))\n  // Note that this is only kept for the edge case where someone is passing in a promise as first argument\n  // The react-loadable babel plugin will turn dynamic(import('../hello-world')) into dynamic(() => import('../hello-world'))\n  // To make sure we don't execute the import without rendering first\n\n  if (dynamicOptions instanceof Promise) {\n    loadableOptions.loader = () => dynamicOptions; // Support for having import as a function, eg: dynamic(() => import('../hello-world'))\n\n  } else if (typeof dynamicOptions === 'function') {\n    loadableOptions.loader = dynamicOptions; // Support for having first argument being options, eg: dynamic({loader: import('../hello-world')})\n  } else if (typeof dynamicOptions === 'object') {\n    loadableOptions = _extends({}, loadableOptions, dynamicOptions);\n  } // Support for passing options, eg: dynamic(import('../hello-world'), {loading: () => <p>Loading something</p>})\n\n\n  loadableOptions = _extends({}, loadableOptions, options); // Error if Fizz rendering is not enabled and `suspense` option is set to true\n\n  if (!process.env.__NEXT_REACT_ROOT && loadableOptions.suspense) {\n    throw new Error(`Invalid suspense option usage in next/dynamic. Read more: https://nextjs.org/docs/messages/invalid-dynamic-suspense`);\n  }\n\n  if (loadableOptions.suspense) {\n    if (process.env.NODE_ENV !== 'production') {\n      /**\n      * TODO: Currently, next/dynamic will opt-in to React.lazy if { suspense: true } is used\n      * React 18 will always resolve the Suspense boundary on the server-side, effectively ignoring the ssr option\n      *\n      * In the future, when React Suspense with third-party libraries is stable, we can implement a custom version of\n      * React.lazy that can suspense on the server-side while only loading the component on the client-side\n      */\n      if (loadableOptions.ssr === false) {\n        console.warn(`\"ssr: false\" is ignored by next/dynamic because you can not enable \"suspense\" while disabling \"ssr\" at the same time. Read more: https://nextjs.org/docs/messages/invalid-dynamic-suspense`);\n      }\n\n      if (loadableOptions.loading != null) {\n        console.warn(`\"loading\" is ignored by next/dynamic because you have enabled \"suspense\". Place your loading element in your suspense boundary's \"fallback\" prop instead. Read more: https://nextjs.org/docs/messages/invalid-dynamic-suspense`);\n      }\n    }\n\n    delete loadableOptions.ssr;\n    delete loadableOptions.loading;\n  } // coming from build/babel/plugins/react-loadable-plugin.js\n\n\n  if (loadableOptions.loadableGenerated) {\n    loadableOptions = _extends({}, loadableOptions, loadableOptions.loadableGenerated);\n    delete loadableOptions.loadableGenerated;\n  } // support for disabling server side rendering, eg: dynamic(import('../hello-world'), {ssr: false}).\n  // skip `ssr` for suspense mode and opt-in React.lazy directly\n\n\n  if (typeof loadableOptions.ssr === 'boolean' && !loadableOptions.suspense) {\n    if (!loadableOptions.ssr) {\n      delete loadableOptions.ssr;\n      return noSSR(loadableFn, loadableOptions);\n    }\n\n    delete loadableOptions.ssr;\n  }\n\n  return loadableFn(loadableOptions);\n}\n\n'client';\nconst isServerSide = typeof window === 'undefined';\n\nfunction noSSR(LoadableInitializer, loadableOptions) {\n  // Removing webpack and modules means react-loadable won't try preloading\n  delete loadableOptions.webpack;\n  delete loadableOptions.modules; // This check is necessary to prevent react-loadable from initializing on the server\n\n  if (!isServerSide) {\n    return LoadableInitializer(loadableOptions);\n  }\n\n  const Loading = loadableOptions.loading; // This will only be rendered on the server side\n\n  return () => /*#__PURE__*/_react.default.createElement(Loading, {\n    error: null,\n    isLoading: true,\n    pastDelay: false,\n    timedOut: false\n  });\n}\n\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}","map":{"version":3,"sources":["../../../shared/lib/dynamic.tsx"],"names":["noSSR","LoadableInitializer","loadableOptions","modules","error","isLoading","pastDelay","timedOut","dynamic","loadableFn","options","loading","process","NODE_ENV","dynamicOptions","Error","console","loadableGenerated","ssr"],"mappings":"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","sourcesContent":["\"client\";\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = dynamic;\nexports.noSSR = noSSR;\nvar _extends = require(\"@swc/helpers/lib/_extends.js\").default;\nvar _interop_require_default = require(\"@swc/helpers/lib/_interop_require_default.js\").default;\nvar _react = _interop_require_default(require(\"react\"));\nvar _loadable = _interop_require_default(require(\"./loadable\"));\nfunction dynamic(dynamicOptions, options) {\n    let loadableFn = _loadable.default;\n    let loadableOptions = (options == null ? void 0 : options.suspense) ? {} : {\n        // A loading component is not required, so we default it\n        loading: ({ error , isLoading , pastDelay  })=>{\n            if (!pastDelay) return null;\n            if (process.env.NODE_ENV === 'development') {\n                if (isLoading) {\n                    return null;\n                }\n                if (error) {\n                    return /*#__PURE__*/ _react.default.createElement(\"p\", null, error.message, /*#__PURE__*/ _react.default.createElement(\"br\", null), error.stack);\n                }\n            }\n            return null;\n        }\n    };\n    // Support for direct import(), eg: dynamic(import('../hello-world'))\n    // Note that this is only kept for the edge case where someone is passing in a promise as first argument\n    // The react-loadable babel plugin will turn dynamic(import('../hello-world')) into dynamic(() => import('../hello-world'))\n    // To make sure we don't execute the import without rendering first\n    if (dynamicOptions instanceof Promise) {\n        loadableOptions.loader = ()=>dynamicOptions;\n    // Support for having import as a function, eg: dynamic(() => import('../hello-world'))\n    } else if (typeof dynamicOptions === 'function') {\n        loadableOptions.loader = dynamicOptions;\n    // Support for having first argument being options, eg: dynamic({loader: import('../hello-world')})\n    } else if (typeof dynamicOptions === 'object') {\n        loadableOptions = _extends({}, loadableOptions, dynamicOptions);\n    }\n    // Support for passing options, eg: dynamic(import('../hello-world'), {loading: () => <p>Loading something</p>})\n    loadableOptions = _extends({}, loadableOptions, options);\n    // Error if Fizz rendering is not enabled and `suspense` option is set to true\n    if (!process.env.__NEXT_REACT_ROOT && loadableOptions.suspense) {\n        throw new Error(`Invalid suspense option usage in next/dynamic. Read more: https://nextjs.org/docs/messages/invalid-dynamic-suspense`);\n    }\n    if (loadableOptions.suspense) {\n        if (process.env.NODE_ENV !== 'production') {\n            /**\n       * TODO: Currently, next/dynamic will opt-in to React.lazy if { suspense: true } is used\n       * React 18 will always resolve the Suspense boundary on the server-side, effectively ignoring the ssr option\n       *\n       * In the future, when React Suspense with third-party libraries is stable, we can implement a custom version of\n       * React.lazy that can suspense on the server-side while only loading the component on the client-side\n       */ if (loadableOptions.ssr === false) {\n                console.warn(`\"ssr: false\" is ignored by next/dynamic because you can not enable \"suspense\" while disabling \"ssr\" at the same time. Read more: https://nextjs.org/docs/messages/invalid-dynamic-suspense`);\n            }\n            if (loadableOptions.loading != null) {\n                console.warn(`\"loading\" is ignored by next/dynamic because you have enabled \"suspense\". Place your loading element in your suspense boundary's \"fallback\" prop instead. Read more: https://nextjs.org/docs/messages/invalid-dynamic-suspense`);\n            }\n        }\n        delete loadableOptions.ssr;\n        delete loadableOptions.loading;\n    }\n    // coming from build/babel/plugins/react-loadable-plugin.js\n    if (loadableOptions.loadableGenerated) {\n        loadableOptions = _extends({}, loadableOptions, loadableOptions.loadableGenerated);\n        delete loadableOptions.loadableGenerated;\n    }\n    // support for disabling server side rendering, eg: dynamic(import('../hello-world'), {ssr: false}).\n    // skip `ssr` for suspense mode and opt-in React.lazy directly\n    if (typeof loadableOptions.ssr === 'boolean' && !loadableOptions.suspense) {\n        if (!loadableOptions.ssr) {\n            delete loadableOptions.ssr;\n            return noSSR(loadableFn, loadableOptions);\n        }\n        delete loadableOptions.ssr;\n    }\n    return loadableFn(loadableOptions);\n}\n'client';\nconst isServerSide = typeof window === 'undefined';\nfunction noSSR(LoadableInitializer, loadableOptions) {\n    // Removing webpack and modules means react-loadable won't try preloading\n    delete loadableOptions.webpack;\n    delete loadableOptions.modules;\n    // This check is necessary to prevent react-loadable from initializing on the server\n    if (!isServerSide) {\n        return LoadableInitializer(loadableOptions);\n    }\n    const Loading = loadableOptions.loading;\n    // This will only be rendered on the server side\n    return ()=>/*#__PURE__*/ _react.default.createElement(Loading, {\n            error: null,\n            isLoading: true,\n            pastDelay: false,\n            timedOut: false\n        });\n}\n\nif ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', { value: true });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}\n\n//# sourceMappingURL=dynamic.js.map"]},"metadata":{},"sourceType":"script"}