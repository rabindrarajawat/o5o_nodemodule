{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\n\nexport const syncNativeInstructionData = struct([u8('instruction')]);\n/**\n * Construct a SyncNative instruction\n *\n * @param account   Native account to sync lamports from\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createSyncNativeInstruction(account) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(syncNativeInstructionData.span);\n  syncNativeInstructionData.encode({\n    instruction: TokenInstruction.SyncNative\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a SyncNative instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeSyncNativeInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== syncNativeInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account\n    },\n    data\n  } = decodeSyncNativeInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.SyncNative) throw new TokenInvalidInstructionTypeError();\n  if (!account) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account\n    },\n    data\n  };\n}\n/**\n * Decode a SyncNative instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeSyncNativeInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account\n    },\n    data: syncNativeInstructionData.decode(data)\n  };\n}","map":{"version":3,"sources":["../../../src/instructions/syncNative.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,EAAiB,EAAjB,QAA2B,uBAA3B;AAEA,SAAS,sBAAT,QAAuC,iBAAvC;AACA,SAAS,gBAAT,QAAiC,iBAAjC;AACA,SACI,gCADJ,EAEI,gCAFJ,EAGI,mCAHJ,EAII,gCAJJ,QAKO,cALP;AAMA,SAAS,gBAAT,QAAiC,YAAjC;AAOA;;AACA,OAAO,MAAM,yBAAyB,GAAG,MAAM,CAA4B,CAAC,EAAE,CAAC,aAAD,CAAH,CAA5B,CAAxC;AAEP;;;;;;;AAOG;;AACH,OAAM,SAAU,2BAAV,CAAsC,OAAtC,EAAsF;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EACxF,MAAM,IAAI,GAAG,CAAC;IAAE,MAAM,EAAE,OAAV;IAAmB,QAAQ,EAAE,KAA7B;IAAoC,UAAU,EAAE;EAAhD,CAAD,CAAb;EAEA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,yBAAyB,CAAC,IAAvC,CAAb;EACA,yBAAyB,CAAC,MAA1B,CAAiC;IAAE,WAAW,EAAE,gBAAgB,CAAC;EAAhC,CAAjC,EAA+E,IAA/E;EAEA,OAAO,IAAI,sBAAJ,CAA2B;IAAE,IAAF;IAAQ,SAAR;IAAmB;EAAnB,CAA3B,CAAP;AACH;AAaD;;;;;;;AAOG;;AACH,OAAM,SAAU,2BAAV,CACF,WADE,EAE0B;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B,IAAI,CAAC,WAAW,CAAC,SAAZ,CAAsB,MAAtB,CAA6B,SAA7B,CAAL,EAA8C,MAAM,IAAI,mCAAJ,EAAN;EAC9C,IAAI,WAAW,CAAC,IAAZ,CAAiB,MAAjB,KAA4B,yBAAyB,CAAC,IAA1D,EAAgE,MAAM,IAAI,gCAAJ,EAAN;EAEhE,MAAM;IACF,IAAI,EAAE;MAAE;IAAF,CADJ;IAEF;EAFE,IAGF,oCAAoC,CAAC,WAAD,CAHxC;EAIA,IAAI,IAAI,CAAC,WAAL,KAAqB,gBAAgB,CAAC,UAA1C,EAAsD,MAAM,IAAI,gCAAJ,EAAN;EACtD,IAAI,CAAC,OAAL,EAAc,MAAM,IAAI,gCAAJ,EAAN,CAVc,CAY5B;;EAEA,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF;IADE,CAFH;IAKH;EALG,CAAP;AAOH;AAaD;;;;;;AAMG;;AACH,OAAM,SAAU,oCAAV,OAImB;EAAA,IAJ4B;IACjD,SADiD;IAEjD,IAAI,EAAE,CAAC,OAAD,CAF2C;IAGjD;EAHiD,CAI5B;EACrB,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF;IADE,CAFH;IAKH,IAAI,EAAE,yBAAyB,CAAC,MAA1B,CAAiC,IAAjC;EALH,CAAP;AAOH","sourceRoot":"","sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const syncNativeInstructionData = struct([u8('instruction')]);\n/**\n * Construct a SyncNative instruction\n *\n * @param account   Native account to sync lamports from\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSyncNativeInstruction(account, programId = TOKEN_PROGRAM_ID) {\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(syncNativeInstructionData.span);\n    syncNativeInstructionData.encode({ instruction: TokenInstruction.SyncNative }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a SyncNative instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSyncNativeInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== syncNativeInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account }, data, } = decodeSyncNativeInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.SyncNative)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data,\n    };\n}\n/**\n * Decode a SyncNative instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSyncNativeInstructionUnchecked({ programId, keys: [account], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data: syncNativeInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=syncNative.js.map"]},"metadata":{},"sourceType":"module"}