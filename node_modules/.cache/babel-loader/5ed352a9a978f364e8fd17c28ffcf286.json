{"ast":null,"code":"import { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, NATIVE_MINT, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { createInitializeAccountInstruction } from '../instructions/initializeAccount.js';\nimport { createSyncNativeInstruction } from '../instructions/syncNative.js';\nimport { ACCOUNT_SIZE, getMinimumBalanceForRentExemptAccount } from '../state/account.js';\nimport { getAssociatedTokenAddress } from '../state/mint.js';\nimport { createAccount } from './createAccount.js';\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\n\nexport async function createWrappedNativeAccount(connection, payer, owner, amount, keypair, confirmOptions) {\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : TOKEN_PROGRAM_ID;\n  let nativeMint = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : NATIVE_MINT;\n  // If the amount provided is explicitly 0 or NaN, just create the account without funding it\n  if (!amount) return await createAccount(connection, payer, nativeMint, owner, keypair, confirmOptions, programId); // If a keypair isn't provided, create the account at the owner's ATA for the native mint and return its address\n\n  if (!keypair) {\n    const associatedToken = await getAssociatedTokenAddress(nativeMint, owner, false, programId, ASSOCIATED_TOKEN_PROGRAM_ID);\n    const transaction = new Transaction().add(createAssociatedTokenAccountInstruction(payer.publicKey, associatedToken, owner, nativeMint, programId, ASSOCIATED_TOKEN_PROGRAM_ID), SystemProgram.transfer({\n      fromPubkey: payer.publicKey,\n      toPubkey: associatedToken,\n      lamports: amount\n    }), createSyncNativeInstruction(associatedToken, programId));\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n    return associatedToken;\n  } // Otherwise, create the account with the provided keypair and return its public key\n\n\n  const lamports = await getMinimumBalanceForRentExemptAccount(connection);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: ACCOUNT_SIZE,\n    lamports,\n    programId\n  }), SystemProgram.transfer({\n    fromPubkey: payer.publicKey,\n    toPubkey: keypair.publicKey,\n    lamports: amount\n  }), createInitializeAccountInstruction(keypair.publicKey, nativeMint, owner, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}","map":{"version":3,"sources":["../../../src/actions/createWrappedNativeAccount.ts"],"names":[],"mappings":"AACA,SAAS,yBAAT,EAAoC,aAApC,EAAmD,WAAnD,QAAsE,iBAAtE;AACA,SAAS,2BAAT,EAAsC,WAAtC,EAAmD,gBAAnD,QAA2E,iBAA3E;AACA,SAAS,uCAAT,QAAwD,2CAAxD;AACA,SAAS,kCAAT,QAAmD,sCAAnD;AACA,SAAS,2BAAT,QAA4C,+BAA5C;AACA,SAAS,YAAT,EAAuB,qCAAvB,QAAoE,qBAApE;AACA,SAAS,yBAAT,QAA0C,kBAA1C;AACA,SAAS,aAAT,QAA8B,oBAA9B;AAEA;;;;;;;;;;;;AAYG;;AACH,OAAO,eAAe,0BAAf,CACH,UADG,EAEH,KAFG,EAGH,KAHG,EAIH,MAJG,EAKH,OALG,EAMH,cANG,EAQqB;EAAA,IADxB,SACwB,uEADZ,gBACY;EAAA,IAAxB,UAAwB,uEAAX,WAAW;EAExB;EACA,IAAI,CAAC,MAAL,EAAa,OAAO,MAAM,aAAa,CAAC,UAAD,EAAa,KAAb,EAAoB,UAApB,EAAgC,KAAhC,EAAuC,OAAvC,EAAgD,cAAhD,EAAgE,SAAhE,CAA1B,CAHW,CAKxB;;EACA,IAAI,CAAC,OAAL,EAAc;IACV,MAAM,eAAe,GAAG,MAAM,yBAAyB,CACnD,UADmD,EAEnD,KAFmD,EAGnD,KAHmD,EAInD,SAJmD,EAKnD,2BALmD,CAAvD;IAQA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,uCAAuC,CACnC,KAAK,CAAC,SAD6B,EAEnC,eAFmC,EAGnC,KAHmC,EAInC,UAJmC,EAKnC,SALmC,EAMnC,2BANmC,CADvB,EAShB,aAAa,CAAC,QAAd,CAAuB;MACnB,UAAU,EAAE,KAAK,CAAC,SADC;MAEnB,QAAQ,EAAE,eAFS;MAGnB,QAAQ,EAAE;IAHS,CAAvB,CATgB,EAchB,2BAA2B,CAAC,eAAD,EAAkB,SAAlB,CAdX,CAApB;IAiBA,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,CAA1B,EAAmC,cAAnC,CAA/B;IAEA,OAAO,eAAP;EACH,CAnCuB,CAqCxB;;;EACA,MAAM,QAAQ,GAAG,MAAM,qCAAqC,CAAC,UAAD,CAA5D;EAEA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,aAAa,CAAC,aAAd,CAA4B;IACxB,UAAU,EAAE,KAAK,CAAC,SADM;IAExB,gBAAgB,EAAE,OAAO,CAAC,SAFF;IAGxB,KAAK,EAAE,YAHiB;IAIxB,QAJwB;IAKxB;EALwB,CAA5B,CADgB,EAQhB,aAAa,CAAC,QAAd,CAAuB;IACnB,UAAU,EAAE,KAAK,CAAC,SADC;IAEnB,QAAQ,EAAE,OAAO,CAAC,SAFC;IAGnB,QAAQ,EAAE;EAHS,CAAvB,CARgB,EAahB,kCAAkC,CAAC,OAAO,CAAC,SAAT,EAAoB,UAApB,EAAgC,KAAhC,EAAuC,SAAvC,CAblB,CAApB;EAgBA,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,EAAQ,OAAR,CAA1B,EAA4C,cAA5C,CAA/B;EAEA,OAAO,OAAO,CAAC,SAAf;AACH","sourceRoot":"","sourcesContent":["import { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, NATIVE_MINT, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { createInitializeAccountInstruction } from '../instructions/initializeAccount.js';\nimport { createSyncNativeInstruction } from '../instructions/syncNative.js';\nimport { ACCOUNT_SIZE, getMinimumBalanceForRentExemptAccount } from '../state/account.js';\nimport { getAssociatedTokenAddress } from '../state/mint.js';\nimport { createAccount } from './createAccount.js';\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\nexport async function createWrappedNativeAccount(connection, payer, owner, amount, keypair, confirmOptions, programId = TOKEN_PROGRAM_ID, nativeMint = NATIVE_MINT) {\n    // If the amount provided is explicitly 0 or NaN, just create the account without funding it\n    if (!amount)\n        return await createAccount(connection, payer, nativeMint, owner, keypair, confirmOptions, programId);\n    // If a keypair isn't provided, create the account at the owner's ATA for the native mint and return its address\n    if (!keypair) {\n        const associatedToken = await getAssociatedTokenAddress(nativeMint, owner, false, programId, ASSOCIATED_TOKEN_PROGRAM_ID);\n        const transaction = new Transaction().add(createAssociatedTokenAccountInstruction(payer.publicKey, associatedToken, owner, nativeMint, programId, ASSOCIATED_TOKEN_PROGRAM_ID), SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: associatedToken,\n            lamports: amount,\n        }), createSyncNativeInstruction(associatedToken, programId));\n        await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n        return associatedToken;\n    }\n    // Otherwise, create the account with the provided keypair and return its public key\n    const lamports = await getMinimumBalanceForRentExemptAccount(connection);\n    const transaction = new Transaction().add(SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: keypair.publicKey,\n        space: ACCOUNT_SIZE,\n        lamports,\n        programId,\n    }), SystemProgram.transfer({\n        fromPubkey: payer.publicKey,\n        toPubkey: keypair.publicKey,\n        lamports: amount,\n    }), createInitializeAccountInstruction(keypair.publicKey, nativeMint, owner, programId));\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n    return keypair.publicKey;\n}\n//# sourceMappingURL=createWrappedNativeAccount.js.map"]},"metadata":{},"sourceType":"module"}