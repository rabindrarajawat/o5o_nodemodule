{"ast":null,"code":"import assert from '../../../utils/assert.mjs';\nimport { amount } from '../../../types/Amount.mjs';\n/** @group Models */\n\n/** @group Model Helpers */\n\nconst isSft = value => typeof value === 'object' && value.model === 'sft';\n/** @group Model Helpers */\n\n\nfunction assertSft(value) {\n  assert(isSft(value), `Expected Sft model`);\n}\n/** @group Model Helpers */\n\n\nconst toSft = (metadata, mint) => {\n  const {\n    address,\n    mintAddress,\n    ...shared\n  } = metadata;\n  assert(mintAddress.equals(mint.address), 'The provided mint does not match the mint address in the metadata');\n  const currency = { ...mint.currency,\n    symbol: metadata.symbol || 'Token'\n  };\n  return { ...shared,\n    model: 'sft',\n    address: mintAddress,\n    metadataAddress: address,\n    mint: { ...mint,\n      currency,\n      supply: amount(mint.supply.basisPoints, currency)\n    }\n  };\n};\n/** @group Models */\n\n/** @group Model Helpers */\n\n\nconst isSftWithToken = value => isSft(value) && 'token' in value;\n/** @group Model Helpers */\n\n\nfunction assertSftWithToken(value) {\n  assert(isSftWithToken(value), `Expected Sft model with token`);\n}\n/** @group Model Helpers */\n\n\nconst toSftWithToken = (metadata, mint, token) => {\n  const sft = toSft(metadata, mint);\n  const {\n    currency\n  } = sft.mint;\n  return { ...sft,\n    token: { ...token,\n      amount: amount(token.amount.basisPoints, currency),\n      delegateAmount: amount(token.delegateAmount.basisPoints, currency)\n    }\n  };\n};\n\nexport { assertSft, assertSftWithToken, isSft, isSftWithToken, toSft, toSftWithToken };","map":{"version":3,"sources":["../../../../../src/plugins/nftModule/models/Sft.ts"],"names":["isSft","value","model","assertSft","assert","toSft","metadata","mint","address","mintAddress","shared","equals","currency","symbol","metadataAddress","supply","amount","basisPoints","isSftWithToken","assertSftWithToken","toSftWithToken","token","sft","delegateAmount"],"mappings":";;AAMA;;AAeA;;AACaA,MAAAA,KAAK,GAAIC,KAAU,IAC9B,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAND,KAAgB,KADlCD;AAGb;;;AACO,SAASG,SAAT,CAAmBF,KAAnB,EAAqD;EAC1DG,MAAM,CAACJ,KAAK,CAACC,KAAD,CAAN,EAAgB,oBAAhB,CAANG;AACF;AAEA;;;MACaC,KAAK,GAAG,CAACC,QAAD,EAAqBC,IAArB,KAAyC;EAC5D,MAAM;IAAEC,OAAF;IAAWC,WAAX;IAAwB,GAAGC;EAA3B,IAAsCJ,QAA5C;EACAF,MAAM,CACJK,WAAW,CAACE,MAAZF,CAAmBF,IAAI,CAACC,OAAxBC,CADI,EAEJ,mEAFI,CAANL;EAKA,MAAMQ,QAAQ,GAAG,EACf,GAAGL,IAAI,CAACK,QADO;IAEfC,MAAM,EAAEP,QAAQ,CAACO,MAATP,IAAmB;EAFZ,CAAjB;EAKA,OAAO,EACL,GAAGI,MADE;IAELR,KAAK,EAAE,KAFF;IAGLM,OAAO,EAAEC,WAHJ;IAILK,eAAe,EAAEN,OAJZ;IAKLD,IAAI,EAAE,EACJ,GAAGA,IADC;MAEJK,QAFI;MAGJG,MAAM,EAAEC,MAAM,CAACT,IAAI,CAACQ,MAALR,CAAYU,WAAb,EAA0BL,QAA1B;IAHV;EALD,CAAP;AAWF,C;AAEA;;AAGA;;;AACaM,MAAAA,cAAc,GAAIjB,KAAU,IACvCD,KAAK,CAACC,KAAD,CAALD,IAAgB,WAAWC,KADhBiB;AAGb;;;AACO,SAASC,kBAAT,CAA4BlB,KAA5B,EAAuE;EAC5EG,MAAM,CAACc,cAAc,CAACjB,KAAD,CAAf,EAAyB,+BAAzB,CAANG;AACF;AAEA;;;AACO,MAAMgB,cAAc,GAAG,CAC5Bd,QAD4B,EAE5BC,IAF4B,EAG5Bc,KAH4B,KAIX;EACjB,MAAMC,GAAG,GAAGjB,KAAK,CAACC,QAAD,EAAWC,IAAX,CAAjB;EACA,MAAM;IAAEK;EAAF,IAAeU,GAAG,CAACf,IAAzB;EACA,OAAO,EACL,GAAGe,GADE;IAELD,KAAK,EAAE,EACL,GAAGA,KADE;MAELL,MAAM,EAAEA,MAAM,CAACK,KAAK,CAACL,MAANK,CAAaJ,WAAd,EAA2BL,QAA3B,CAFT;MAGLW,cAAc,EAAEP,MAAM,CAACK,KAAK,CAACE,cAANF,CAAqBJ,WAAtB,EAAmCL,QAAnC;IAHjB;EAFF,CAAP;AAQF,CAfO","sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport type { Mint, Token } from '../../tokenModule';\nimport type { Metadata } from './Metadata';\nimport { assert } from '@/utils';\nimport { amount, Pda } from '@/types';\n\n/** @group Models */\nexport type Sft = Omit<Metadata, 'model' | 'address' | 'mintAddress'> &\n  Readonly<{\n    model: 'sft';\n\n    /** The mint address of the SFT. */\n    address: PublicKey;\n\n    /** The metadata address of the SFT. */\n    metadataAddress: Pda;\n\n    /** The mint account of the SFT. */\n    mint: Mint;\n  }>;\n\n/** @group Model Helpers */\nexport const isSft = (value: any): value is Sft =>\n  typeof value === 'object' && value.model === 'sft';\n\n/** @group Model Helpers */\nexport function assertSft(value: any): asserts value is Sft {\n  assert(isSft(value), `Expected Sft model`);\n}\n\n/** @group Model Helpers */\nexport const toSft = (metadata: Metadata, mint: Mint): Sft => {\n  const { address, mintAddress, ...shared } = metadata;\n  assert(\n    mintAddress.equals(mint.address),\n    'The provided mint does not match the mint address in the metadata'\n  );\n\n  const currency = {\n    ...mint.currency,\n    symbol: metadata.symbol || 'Token',\n  };\n\n  return {\n    ...shared,\n    model: 'sft',\n    address: mintAddress,\n    metadataAddress: address,\n    mint: {\n      ...mint,\n      currency,\n      supply: amount(mint.supply.basisPoints, currency),\n    },\n  };\n};\n\n/** @group Models */\nexport type SftWithToken = Sft & { token: Token };\n\n/** @group Model Helpers */\nexport const isSftWithToken = (value: any): value is SftWithToken =>\n  isSft(value) && 'token' in value;\n\n/** @group Model Helpers */\nexport function assertSftWithToken(value: any): asserts value is SftWithToken {\n  assert(isSftWithToken(value), `Expected Sft model with token`);\n}\n\n/** @group Model Helpers */\nexport const toSftWithToken = (\n  metadata: Metadata,\n  mint: Mint,\n  token: Token\n): SftWithToken => {\n  const sft = toSft(metadata, mint);\n  const { currency } = sft.mint;\n  return {\n    ...sft,\n    token: {\n      ...token,\n      amount: amount(token.amount.basisPoints, currency),\n      delegateAmount: amount(token.delegateAmount.basisPoints, currency),\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}