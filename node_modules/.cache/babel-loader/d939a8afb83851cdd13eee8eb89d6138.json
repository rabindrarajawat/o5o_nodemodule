{"ast":null,"code":"import { createRevokeCollectionAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'RevokeNftCollectionAuthorityOperation';\n/**\n * Revokes an existing collection authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .revokeCollectionAuthority({ mintAddress, collectionAuthority };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst revokeNftCollectionAuthorityOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst revokeNftCollectionAuthorityOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    return revokeNftCollectionAuthorityBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Revokes an existing collection authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .revokeCollectionAuthority({ mintAddress, collectionAuthority });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst revokeNftCollectionAuthorityBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    mintAddress,\n    collectionAuthority,\n    revokeAuthority = metaplex.identity()\n  } = params;\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs\n  });\n  const collectionAuthorityRecord = metaplex.nfts().pdas().collectionAuthorityRecord({\n    mint: mintAddress,\n    collectionAuthority,\n    programs\n  });\n  const instruction = createRevokeCollectionAuthorityInstruction({\n    collectionAuthorityRecord,\n    delegateAuthority: collectionAuthority,\n    revokeAuthority: revokeAuthority.publicKey,\n    metadata,\n    mint: mintAddress\n  }, tokenMetadataProgram.address); // Temporary fix. The Shank macro wrongfully ask for the delegateAuthority to be a signer.\n  // https://github.com/metaplex-foundation/metaplex-program-library/pull/639\n\n  instruction.keys[1].isSigner = false;\n  return TransactionBuilder.make().setFeePayer(payer) // Revoke the collection authority.\n  .add({\n    instruction,\n    signers: [revokeAuthority],\n    key: params.instructionKey ?? 'revokeCollectionAuthority'\n  });\n};\n\nexport { revokeNftCollectionAuthorityBuilder, revokeNftCollectionAuthorityOperation, revokeNftCollectionAuthorityOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/nftModule/operations/revokeNftCollectionAuthority.ts"],"names":["Key","revokeNftCollectionAuthorityOperation","useOperation","revokeNftCollectionAuthorityOperationHandler","handle","operation","metaplex","scope","revokeNftCollectionAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","collectionAuthority","revokeAuthority","identity","tokenMetadataProgram","getTokenMetadata","metadata","nfts","pdas","mint","collectionAuthorityRecord","instruction","createRevokeCollectionAuthorityInstruction","delegateAuthority","publicKey","address","keys","isSigner","TransactionBuilder","make","setFeePayer","add","signers","key","instructionKey"],"mappings":";;4EAaA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,uCAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,qCAAqC,GAChDC,YAAY,CAAwCF,GAAxC,C;AAEd;AACA;AACA;AACA;;AAoCA;AACA;AACA;AACA;;AACO,MAAMG,4CAAqG,GAChH;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI0C;IAChD,OAAOC,mCAAmC,CACxCF,QADwC,EAExCD,SAAS,CAACI,KAF8B,EAGxCF,KAHwC,CAAnCC,CAILE,cAJKF,CAIUF,QAJVE,EAIoBD,KAAK,CAACI,cAJ1BH,CAAP;EAKF;AAXF,CADK,C,CAeP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaA,MAAAA,mCAAmC,GAAG,UACjDF,QADiD,EAEjDM,MAFiD,EAI1B;EAAA,IADvBC,OACuB,uEADc,EACd;EACvB,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGT,QAAQ,CAACU,GAATV,GAAeW,kBAAfX;EAApB,IAA4DO,OAAlE;EACA,MAAM;IACJK,WADI;IAEJC,mBAFI;IAGJC,eAAe,GAAGd,QAAQ,CAACe,QAATf;EAHd,IAIFM,MAJJ;EAMA,MAAMU,oBAAoB,GAAGhB,QAAQ,CAACQ,QAATR,GAAoBiB,gBAApBjB,CAAqCQ,QAArCR,CAA7B;EACA,MAAMkB,QAAQ,GAAGlB,QAAQ,CAACmB,IAATnB,GAAgBoB,IAAhBpB,GAAuBkB,QAAvBlB,CAAgC;IAC/CqB,IAAI,EAAET,WADyC;IAE/CJ;EAF+C,CAAhCR,CAAjB;EAIA,MAAMsB,yBAAyB,GAAGtB,QAAQ,CACvCmB,IAD+BnB,GAE/BoB,IAF+BpB,GAG/BsB,yBAH+BtB,CAGL;IACzBqB,IAAI,EAAET,WADmB;IAEzBC,mBAFyB;IAGzBL;EAHyB,CAHKR,CAAlC;EASA,MAAMuB,WAAW,GAAGC,0CAA0C,CAC5D;IACEF,yBADF;IAEEG,iBAAiB,EAAEZ,mBAFrB;IAGEC,eAAe,EAAEA,eAAe,CAACY,SAHnC;IAIER,QAJF;IAKEG,IAAI,EAAET;EALR,CAD4D,EAQ5DI,oBAAoB,CAACW,OARuC,CAA9D,CAtBuB,CAiCvB;EACA;;EACAJ,WAAW,CAACK,IAAZL,CAAiB,CAAjBA,EAAoBM,QAApBN,GAA+B,KAA/BA;EAEA,OACEO,kBAAkB,CAACC,IAAnBD,GACGE,WADHF,CACerB,KADfqB,EAGE;EAHFA,CAIGG,GAJHH,CAIO;IACHP,WADG;IAEHW,OAAO,EAAE,CAACpB,eAAD,CAFN;IAGHqB,GAAG,EAAE7B,MAAM,CAAC8B,cAAP9B,IAAyB;EAH3B,CAJPwB,CADF;AAWF,CApDa5B","sourcesContent":["import { createRevokeCollectionAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'RevokeNftCollectionAuthorityOperation' as const;\n\n/**\n * Revokes an existing collection authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .revokeCollectionAuthority({ mintAddress, collectionAuthority };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const revokeNftCollectionAuthorityOperation =\n  useOperation<RevokeNftCollectionAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type RevokeNftCollectionAuthorityOperation = Operation<\n  typeof Key,\n  RevokeNftCollectionAuthorityInput,\n  RevokeNftCollectionAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type RevokeNftCollectionAuthorityInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The address of the collection authority to revoke. */\n  collectionAuthority: PublicKey;\n\n  /**\n   * An authority that can revoke this collection authority.\n   *\n   * This can either be the collection's update authority or the delegated\n   * collection authority itself (i.e. revoking its own rights).\n   */\n  revokeAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type RevokeNftCollectionAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const revokeNftCollectionAuthorityOperationHandler: OperationHandler<RevokeNftCollectionAuthorityOperation> =\n  {\n    handle: async (\n      operation: RevokeNftCollectionAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<RevokeNftCollectionAuthorityOutput> => {\n      return revokeNftCollectionAuthorityBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type RevokeNftCollectionAuthorityBuilderParams = Omit<\n  RevokeNftCollectionAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that revokes the collection authority. */\n  instructionKey?: string;\n};\n\n/**\n * Revokes an existing collection authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .revokeCollectionAuthority({ mintAddress, collectionAuthority });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const revokeNftCollectionAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: RevokeNftCollectionAuthorityBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    collectionAuthority,\n    revokeAuthority = metaplex.identity(),\n  } = params;\n\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs,\n  });\n  const collectionAuthorityRecord = metaplex\n    .nfts()\n    .pdas()\n    .collectionAuthorityRecord({\n      mint: mintAddress,\n      collectionAuthority,\n      programs,\n    });\n\n  const instruction = createRevokeCollectionAuthorityInstruction(\n    {\n      collectionAuthorityRecord,\n      delegateAuthority: collectionAuthority,\n      revokeAuthority: revokeAuthority.publicKey,\n      metadata,\n      mint: mintAddress,\n    },\n    tokenMetadataProgram.address\n  );\n\n  // Temporary fix. The Shank macro wrongfully ask for the delegateAuthority to be a signer.\n  // https://github.com/metaplex-foundation/metaplex-program-library/pull/639\n  instruction.keys[1].isSigner = false;\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Revoke the collection authority.\n      .add({\n        instruction,\n        signers: [revokeAuthority],\n        key: params.instructionKey ?? 'revokeCollectionAuthority',\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}