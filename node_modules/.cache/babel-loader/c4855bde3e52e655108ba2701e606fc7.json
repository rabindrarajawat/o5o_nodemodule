{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFilteredProgramAccounts = exports.getNameOwner = exports.getNameAccountKey = exports.getHashedName = exports.signAndSendTransactionInstructions = exports.Numberu64 = exports.Numberu32 = void 0;\n\nconst assert_1 = __importDefault(require(\"assert\"));\n\nconst crypto_1 = require(\"crypto\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst bindings_1 = require(\"./bindings\");\n\nconst state_1 = require(\"./state\");\n\nclass Numberu32 extends bn_js_1.default {\n  /**\n   * Convert to Buffer representation\n   */\n  toBuffer() {\n    const a = super.toArray().reverse();\n    const b = Buffer.from(a);\n\n    if (b.length === 4) {\n      return b;\n    }\n\n    (0, assert_1.default)(b.length < 4, 'Numberu32 too large');\n    const zeroPad = Buffer.alloc(4);\n    b.copy(zeroPad);\n    return zeroPad;\n  }\n  /**\n   * Construct a Numberu64 from Buffer representation\n   */\n\n\n  static fromBuffer(buffer) {\n    (0, assert_1.default)(buffer.length === 4, `Invalid buffer length: ${buffer.length}`);\n    return new bn_js_1.default([...buffer].reverse().map(i => `00${i.toString(16)}`.slice(-2)).join(''), 16);\n  }\n\n}\n\nexports.Numberu32 = Numberu32;\n\nclass Numberu64 extends bn_js_1.default {\n  /**\n   * Convert to Buffer representation\n   */\n  toBuffer() {\n    const a = super.toArray().reverse();\n    const b = Buffer.from(a);\n\n    if (b.length === 8) {\n      return b;\n    }\n\n    (0, assert_1.default)(b.length < 8, 'Numberu64 too large');\n    const zeroPad = Buffer.alloc(8);\n    b.copy(zeroPad);\n    return zeroPad;\n  }\n  /**\n   * Construct a Numberu64 from Buffer representation\n   */\n\n\n  static fromBuffer(buffer) {\n    (0, assert_1.default)(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n    return new bn_js_1.default([...buffer].reverse().map(i => `00${i.toString(16)}`.slice(-2)).join(''), 16);\n  }\n\n}\n\nexports.Numberu64 = Numberu64;\n\nconst signAndSendTransactionInstructions = async ( // sign and send transaction\nconnection, signers, feePayer, txInstructions) => {\n  const tx = new web3_js_1.Transaction();\n  tx.feePayer = feePayer.publicKey;\n  signers.push(feePayer);\n  tx.add(...txInstructions);\n  return await connection.sendTransaction(tx, signers);\n};\n\nexports.signAndSendTransactionInstructions = signAndSendTransactionInstructions;\n\nasync function getHashedName(name) {\n  const input = bindings_1.HASH_PREFIX + name;\n  const buffer = (0, crypto_1.createHash)('sha256').update(input, 'utf8').digest();\n  return buffer;\n}\n\nexports.getHashedName = getHashedName;\n\nasync function getNameAccountKey(hashed_name, nameClass, nameParent) {\n  const seeds = [hashed_name];\n\n  if (nameClass) {\n    seeds.push(nameClass.toBuffer());\n  } else {\n    seeds.push(Buffer.alloc(32));\n  }\n\n  if (nameParent) {\n    seeds.push(nameParent.toBuffer());\n  } else {\n    seeds.push(Buffer.alloc(32));\n  }\n\n  const [nameAccountKey] = await web3_js_1.PublicKey.findProgramAddress(seeds, bindings_1.NAME_PROGRAM_ID);\n  return nameAccountKey;\n}\n\nexports.getNameAccountKey = getNameAccountKey;\n\nasync function getNameOwner(connection, nameAccountKey) {\n  const nameAccount = await connection.getAccountInfo(nameAccountKey);\n\n  if (!nameAccount) {\n    throw new Error('Unable to find the given account.');\n  }\n\n  return state_1.NameRegistryState.retrieve(connection, nameAccountKey);\n}\n\nexports.getNameOwner = getNameOwner; //Taken from Serum\n\nasync function getFilteredProgramAccounts(connection, programId, filters) {\n  const resp = await connection.getProgramAccounts(programId, {\n    commitment: connection.commitment,\n    filters,\n    encoding: 'base64'\n  });\n  return resp.map(_ref => {\n    let {\n      pubkey,\n      account: {\n        data,\n        executable,\n        owner,\n        lamports\n      }\n    } = _ref;\n    return {\n      publicKey: pubkey,\n      accountInfo: {\n        data: data,\n        executable,\n        owner: owner,\n        lamports\n      }\n    };\n  });\n}\n\nexports.getFilteredProgramAccounts = getFilteredProgramAccounts;","map":{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFilteredProgramAccounts = exports.getNameOwner = exports.getNameAccountKey = exports.getHashedName = exports.signAndSendTransactionInstructions = exports.Numberu64 = exports.Numberu32 = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst crypto_1 = require(\"crypto\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bindings_1 = require(\"./bindings\");\nconst state_1 = require(\"./state\");\nclass Numberu32 extends bn_js_1.default {\n    /**\n     * Convert to Buffer representation\n     */\n    toBuffer() {\n        const a = super.toArray().reverse();\n        const b = Buffer.from(a);\n        if (b.length === 4) {\n            return b;\n        }\n        (0, assert_1.default)(b.length < 4, 'Numberu32 too large');\n        const zeroPad = Buffer.alloc(4);\n        b.copy(zeroPad);\n        return zeroPad;\n    }\n    /**\n     * Construct a Numberu64 from Buffer representation\n     */\n    static fromBuffer(buffer) {\n        (0, assert_1.default)(buffer.length === 4, `Invalid buffer length: ${buffer.length}`);\n        return new bn_js_1.default([...buffer]\n            .reverse()\n            .map((i) => `00${i.toString(16)}`.slice(-2))\n            .join(''), 16);\n    }\n}\nexports.Numberu32 = Numberu32;\nclass Numberu64 extends bn_js_1.default {\n    /**\n     * Convert to Buffer representation\n     */\n    toBuffer() {\n        const a = super.toArray().reverse();\n        const b = Buffer.from(a);\n        if (b.length === 8) {\n            return b;\n        }\n        (0, assert_1.default)(b.length < 8, 'Numberu64 too large');\n        const zeroPad = Buffer.alloc(8);\n        b.copy(zeroPad);\n        return zeroPad;\n    }\n    /**\n     * Construct a Numberu64 from Buffer representation\n     */\n    static fromBuffer(buffer) {\n        (0, assert_1.default)(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n        return new bn_js_1.default([...buffer]\n            .reverse()\n            .map((i) => `00${i.toString(16)}`.slice(-2))\n            .join(''), 16);\n    }\n}\nexports.Numberu64 = Numberu64;\nconst signAndSendTransactionInstructions = async (\n// sign and send transaction\nconnection, signers, feePayer, txInstructions) => {\n    const tx = new web3_js_1.Transaction();\n    tx.feePayer = feePayer.publicKey;\n    signers.push(feePayer);\n    tx.add(...txInstructions);\n    return await connection.sendTransaction(tx, signers);\n};\nexports.signAndSendTransactionInstructions = signAndSendTransactionInstructions;\nasync function getHashedName(name) {\n    const input = bindings_1.HASH_PREFIX + name;\n    const buffer = (0, crypto_1.createHash)('sha256').update(input, 'utf8').digest();\n    return buffer;\n}\nexports.getHashedName = getHashedName;\nasync function getNameAccountKey(hashed_name, nameClass, nameParent) {\n    const seeds = [hashed_name];\n    if (nameClass) {\n        seeds.push(nameClass.toBuffer());\n    }\n    else {\n        seeds.push(Buffer.alloc(32));\n    }\n    if (nameParent) {\n        seeds.push(nameParent.toBuffer());\n    }\n    else {\n        seeds.push(Buffer.alloc(32));\n    }\n    const [nameAccountKey] = await web3_js_1.PublicKey.findProgramAddress(seeds, bindings_1.NAME_PROGRAM_ID);\n    return nameAccountKey;\n}\nexports.getNameAccountKey = getNameAccountKey;\nasync function getNameOwner(connection, nameAccountKey) {\n    const nameAccount = await connection.getAccountInfo(nameAccountKey);\n    if (!nameAccount) {\n        throw new Error('Unable to find the given account.');\n    }\n    return state_1.NameRegistryState.retrieve(connection, nameAccountKey);\n}\nexports.getNameOwner = getNameOwner;\n//Taken from Serum\nasync function getFilteredProgramAccounts(connection, programId, filters) {\n    const resp = await connection.getProgramAccounts(programId, {\n        commitment: connection.commitment,\n        filters,\n        encoding: 'base64',\n    });\n    return resp.map(({ pubkey, account: { data, executable, owner, lamports } }) => ({\n        publicKey: pubkey,\n        accountInfo: {\n            data: data,\n            executable,\n            owner: owner,\n            lamports,\n        },\n    }));\n}\nexports.getFilteredProgramAccounts = getFilteredProgramAccounts;\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}