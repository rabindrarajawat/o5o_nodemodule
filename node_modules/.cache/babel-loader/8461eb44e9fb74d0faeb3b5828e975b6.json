{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** Authority types defined by the program */\n\nexport var AuthorityType;\n\n(function (AuthorityType) {\n  AuthorityType[AuthorityType[\"MintTokens\"] = 0] = \"MintTokens\";\n  AuthorityType[AuthorityType[\"FreezeAccount\"] = 1] = \"FreezeAccount\";\n  AuthorityType[AuthorityType[\"AccountOwner\"] = 2] = \"AccountOwner\";\n  AuthorityType[AuthorityType[\"CloseAccount\"] = 3] = \"CloseAccount\";\n})(AuthorityType || (AuthorityType = {}));\n/** TODO: docs */\n\n\nexport const setAuthorityInstructionData = struct([u8('instruction'), u8('authorityType'), u8('newAuthorityOption'), publicKey('newAuthority')]);\n/**\n * Construct a SetAuthority instruction\n *\n * @param account          Address of the token account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param programId        SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createSetAuthorityInstruction(account, currentAuthority, authorityType, newAuthority) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }], currentAuthority, multiSigners);\n  const data = Buffer.alloc(setAuthorityInstructionData.span);\n  setAuthorityInstructionData.encode({\n    instruction: TokenInstruction.SetAuthority,\n    authorityType: authorityType,\n    newAuthorityOption: newAuthority ? 1 : 0,\n    newAuthority: newAuthority || new PublicKey(0)\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode a SetAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeSetAuthorityInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== setAuthorityInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account: account,\n      currentAuthority: currentAuthority,\n      multiSigners: multiSigners\n    },\n    data: data\n  } = decodeSetAuthorityInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.SetAuthority) throw new TokenInvalidInstructionTypeError();\n  if (!account || !currentAuthority) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      currentAuthority: currentAuthority,\n      multiSigners: multiSigners\n    },\n    data: data\n  };\n}\n/**\n * Decode a SetAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeSetAuthorityInstructionUnchecked(_ref) {\n  let {\n    programId: programId,\n    keys: [account, currentAuthority, ...multiSigners],\n    data: data\n  } = _ref;\n  const {\n    instruction: instruction,\n    authorityType: authorityType,\n    newAuthorityOption: newAuthorityOption,\n    newAuthority: newAuthority\n  } = setAuthorityInstructionData.decode(data);\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      currentAuthority: currentAuthority,\n      multiSigners: multiSigners\n    },\n    data: {\n      instruction: instruction,\n      authorityType: authorityType,\n      newAuthority: newAuthorityOption ? newAuthority : null\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/instructions/setAuthority.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** Authority types defined by the program */\nexport var AuthorityType;\n(function (AuthorityType) {\n    AuthorityType[AuthorityType[\"MintTokens\"] = 0] = \"MintTokens\";\n    AuthorityType[AuthorityType[\"FreezeAccount\"] = 1] = \"FreezeAccount\";\n    AuthorityType[AuthorityType[\"AccountOwner\"] = 2] = \"AccountOwner\";\n    AuthorityType[AuthorityType[\"CloseAccount\"] = 3] = \"CloseAccount\";\n})(AuthorityType || (AuthorityType = {}));\n/** TODO: docs */\nexport const setAuthorityInstructionData = struct([\n    u8('instruction'),\n    u8('authorityType'),\n    u8('newAuthorityOption'),\n    publicKey('newAuthority'),\n]);\n/**\n * Construct a SetAuthority instruction\n *\n * @param account          Address of the token account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param programId        SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSetAuthorityInstruction(account, currentAuthority, authorityType, newAuthority, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], currentAuthority, multiSigners);\n    const data = Buffer.alloc(setAuthorityInstructionData.span);\n    setAuthorityInstructionData.encode({\n        instruction: TokenInstruction.SetAuthority,\n        authorityType,\n        newAuthorityOption: newAuthority ? 1 : 0,\n        newAuthority: newAuthority || new PublicKey(0),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a SetAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSetAuthorityInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== setAuthorityInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, currentAuthority, multiSigners }, data, } = decodeSetAuthorityInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.SetAuthority)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !currentAuthority)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            currentAuthority,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a SetAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSetAuthorityInstructionUnchecked({ programId, keys: [account, currentAuthority, ...multiSigners], data, }) {\n    const { instruction, authorityType, newAuthorityOption, newAuthority } = setAuthorityInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            account,\n            currentAuthority,\n            multiSigners,\n        },\n        data: {\n            instruction,\n            authorityType,\n            newAuthority: newAuthorityOption ? newAuthority : null,\n        },\n    };\n}\n//# sourceMappingURL=setAuthority.js.map"]},"metadata":{},"sourceType":"module"}