{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport _isObject from \"./internal/_isObject.js\";\nimport _has from \"./internal/_has.js\";\nimport _assoc from \"./internal/_assoc.js\";\nimport _modify from \"./internal/_modify.js\";\n/**\n * Creates a shallow clone of the passed object by applying an `fn` function\n * to the value at the given path.\n *\n * The function will not be invoked, and the object will not change\n * if its corresponding path does not exist in the object.\n * All non-primitive properties are copied to the new object by reference.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Object\n * @sig [Idx] -> (v -> v) -> {k: v} -> {k: v}\n * @param {Array} path The path to be modified.\n * @param {Function} fn The function to apply to the path.\n * @param {Object} object The object to be transformed.\n * @return {Object} The transformed object.\n * @example\n *\n *      const person = {name: 'James', address: { zipCode: '90216' }};\n *      R.modifyPath(['address', 'zipCode'], R.reverse, person); //=> {name: 'James', address: { zipCode: '61209' }}\n *\n *      // Can handle arrays too\n *      const person = {name: 'James', addresses: [{ zipCode: '90216' }]};\n *      R.modifyPath(['addresses', 0, 'zipCode'], R.reverse, person); //=> {name: 'James', addresses: [{ zipCode: '61209' }]}\n */\n\nvar modifyPath = /*#__PURE__*/_curry3(function modifyPath(path, fn, object) {\n  if (!_isObject(object) && !_isArray(object) || path.length === 0) {\n    return object;\n  }\n\n  var idx = path[0];\n\n  if (!_has(idx, object)) {\n    return object;\n  }\n\n  if (path.length === 1) {\n    return _modify(idx, fn, object);\n  }\n\n  var val = modifyPath(Array.prototype.slice.call(path, 1), fn, object[idx]);\n\n  if (val === object[idx]) {\n    return object;\n  }\n\n  return _assoc(idx, val, object);\n});\n\nexport default modifyPath;","map":{"version":3,"names":["_curry3","_isArray","_isObject","_has","_assoc","_modify","modifyPath","path","fn","object","length","idx","val","Array","prototype","slice","call"],"sources":["D:/software/o5o BNB/o5o-staking-frontend/node_modules/@civic/solana-gateway-react/node_modules/ramda/es/modifyPath.js"],"sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport _isObject from \"./internal/_isObject.js\";\nimport _has from \"./internal/_has.js\";\nimport _assoc from \"./internal/_assoc.js\";\nimport _modify from \"./internal/_modify.js\";\n/**\n * Creates a shallow clone of the passed object by applying an `fn` function\n * to the value at the given path.\n *\n * The function will not be invoked, and the object will not change\n * if its corresponding path does not exist in the object.\n * All non-primitive properties are copied to the new object by reference.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Object\n * @sig [Idx] -> (v -> v) -> {k: v} -> {k: v}\n * @param {Array} path The path to be modified.\n * @param {Function} fn The function to apply to the path.\n * @param {Object} object The object to be transformed.\n * @return {Object} The transformed object.\n * @example\n *\n *      const person = {name: 'James', address: { zipCode: '90216' }};\n *      R.modifyPath(['address', 'zipCode'], R.reverse, person); //=> {name: 'James', address: { zipCode: '61209' }}\n *\n *      // Can handle arrays too\n *      const person = {name: 'James', addresses: [{ zipCode: '90216' }]};\n *      R.modifyPath(['addresses', 0, 'zipCode'], R.reverse, person); //=> {name: 'James', addresses: [{ zipCode: '61209' }]}\n */\n\nvar modifyPath =\n/*#__PURE__*/\n_curry3(function modifyPath(path, fn, object) {\n  if (!_isObject(object) && !_isArray(object) || path.length === 0) {\n    return object;\n  }\n\n  var idx = path[0];\n\n  if (!_has(idx, object)) {\n    return object;\n  }\n\n  if (path.length === 1) {\n    return _modify(idx, fn, object);\n  }\n\n  var val = modifyPath(Array.prototype.slice.call(path, 1), fn, object[idx]);\n\n  if (val === object[idx]) {\n    return object;\n  }\n\n  return _assoc(idx, val, object);\n});\n\nexport default modifyPath;"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,UAAU,GACd,aACAN,OAAO,CAAC,SAASM,UAAT,CAAoBC,IAApB,EAA0BC,EAA1B,EAA8BC,MAA9B,EAAsC;EAC5C,IAAI,CAACP,SAAS,CAACO,MAAD,CAAV,IAAsB,CAACR,QAAQ,CAACQ,MAAD,CAA/B,IAA2CF,IAAI,CAACG,MAAL,KAAgB,CAA/D,EAAkE;IAChE,OAAOD,MAAP;EACD;;EAED,IAAIE,GAAG,GAAGJ,IAAI,CAAC,CAAD,CAAd;;EAEA,IAAI,CAACJ,IAAI,CAACQ,GAAD,EAAMF,MAAN,CAAT,EAAwB;IACtB,OAAOA,MAAP;EACD;;EAED,IAAIF,IAAI,CAACG,MAAL,KAAgB,CAApB,EAAuB;IACrB,OAAOL,OAAO,CAACM,GAAD,EAAMH,EAAN,EAAUC,MAAV,CAAd;EACD;;EAED,IAAIG,GAAG,GAAGN,UAAU,CAACO,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BT,IAA3B,EAAiC,CAAjC,CAAD,EAAsCC,EAAtC,EAA0CC,MAAM,CAACE,GAAD,CAAhD,CAApB;;EAEA,IAAIC,GAAG,KAAKH,MAAM,CAACE,GAAD,CAAlB,EAAyB;IACvB,OAAOF,MAAP;EACD;;EAED,OAAOL,MAAM,CAACO,GAAD,EAAMC,GAAN,EAAWH,MAAX,CAAb;AACD,CAtBM,CAFP;;AA0BA,eAAeH,UAAf"},"metadata":{},"sourceType":"module"}