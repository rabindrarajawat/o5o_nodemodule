{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.mjs';\nimport BigNumber from 'bignumber.js';\nimport { Keypair } from '@solana/web3.js';\nimport { getBytesFromMetaplexFiles } from '../storageModule/MetaplexFile.mjs';\nimport { AssetUploadFailedError, BundlrWithdrawError, FailedToConnectToBundlrAddressError, FailedToInitializeBundlrError } from '../../errors/BundlrError.mjs';\nimport { isKeypairSigner, isIdentitySigner } from '../../types/Signer.mjs';\nimport { KeypairIdentityDriver } from '../keypairIdentity/KeypairIdentityDriver.mjs';\nimport { lamports } from '../../types/Amount.mjs';\nimport { toBigNumber } from '../../types/BigNumber.mjs';\n/**\n * This method is necessary to import the Bundlr package on both ESM and CJS modules.\n * Without this, we get a different structure on each module:\n * - CJS: { default: [Getter], WebBundlr: [Getter] }\n * - ESM: { default: { default: [Getter], WebBundlr: [Getter] } }\n * This method fixes this by ensure there is not double default in the imported package.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nfunction _removeDoubleDefault(pkg) {\n  if (pkg && typeof pkg === 'object' && 'default' in pkg && 'default' in pkg.default) {\n    return pkg.default;\n  }\n\n  return pkg;\n} /// Size of Bundlr transaction header\n\n\nconst HEADER_SIZE = 2_000; /// Minimum file size for cost calculation\n\nconst MINIMUM_SIZE = 80_000;\n\nclass BundlrStorageDriver {\n  constructor(metaplex) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _defineProperty(this, \"_bundlr\", null);\n\n    this._metaplex = metaplex;\n    this._options = {\n      providerUrl: metaplex.connection.rpcEndpoint,\n      ...options\n    };\n  }\n\n  async getUploadPrice(bytes) {\n    const bundlr = await this.bundlr();\n    const price = await bundlr.getPrice(bytes);\n    return bigNumberToAmount(price.multipliedBy(this._options.priceMultiplier ?? 1.1));\n  }\n\n  async getUploadPriceForFiles(files) {\n    const bytes = files.reduce((sum, file) => {\n      return sum + HEADER_SIZE + Math.max(MINIMUM_SIZE, file.buffer.byteLength);\n    }, 0);\n    return this.getUploadPrice(bytes);\n  }\n\n  async upload(file) {\n    const [uri] = await this.uploadAll([file]);\n    return uri;\n  }\n\n  async uploadAll(files) {\n    const bundlr = await this.bundlr();\n    const amount = await this.getUploadPrice(getBytesFromMetaplexFiles(...files));\n    await this.fund(amount);\n    const promises = files.map(async file => {\n      const {\n        status,\n        data\n      } = await bundlr.uploader.upload(file.buffer, {\n        tags: getMetaplexFileTagsWithContentType(file)\n      });\n\n      if (status >= 300) {\n        throw new AssetUploadFailedError(status);\n      }\n\n      return `https://arweave.net/${data.id}`;\n    });\n    return await Promise.all(promises);\n  }\n\n  async getBalance() {\n    const bundlr = await this.bundlr();\n    const balance = await bundlr.getLoadedBalance();\n    return bigNumberToAmount(balance);\n  }\n\n  async fund(amount) {\n    let skipBalanceCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const bundlr = await this.bundlr();\n    let toFund = amountToBigNumber(amount);\n\n    if (!skipBalanceCheck) {\n      const balance = await bundlr.getLoadedBalance();\n      toFund = toFund.isGreaterThan(balance) ? toFund.minus(balance) : new BigNumber(0);\n    }\n\n    if (toFund.isLessThanOrEqualTo(0)) {\n      return;\n    } // TODO: Catch errors and wrap in BundlrErrors.\n\n\n    await bundlr.fund(toFund);\n  }\n\n  async withdrawAll() {\n    // TODO(loris): Replace with \"withdrawAll\" when available on Bundlr.\n    const bundlr = await this.bundlr();\n    const balance = await bundlr.getLoadedBalance();\n    const minimumBalance = new BigNumber(5000);\n\n    if (balance.isLessThan(minimumBalance)) {\n      return;\n    }\n\n    const balanceToWithdraw = balance.minus(minimumBalance);\n    await this.withdraw(bigNumberToAmount(balanceToWithdraw));\n  }\n\n  async withdraw(amount) {\n    const bundlr = await this.bundlr();\n    const {\n      status\n    } = await bundlr.withdrawBalance(amountToBigNumber(amount));\n\n    if (status >= 300) {\n      throw new BundlrWithdrawError(status);\n    }\n  }\n\n  async bundlr() {\n    if (this._bundlr) {\n      return this._bundlr;\n    }\n\n    return this._bundlr = await this.initBundlr();\n  }\n\n  async initBundlr() {\n    const currency = 'solana';\n    const address = this._options?.address ?? 'https://node1.bundlr.network';\n    const options = {\n      timeout: this._options.timeout,\n      providerUrl: this._options.providerUrl\n    };\n\n    const identity = this._options.identity ?? this._metaplex.identity(); // if in node use node bundlr, else use web bundlr\n    // see: https://github.com/metaplex-foundation/js/issues/202\n\n\n    const isNode = typeof window === 'undefined' || window.process?.hasOwnProperty('type');\n    let bundlr;\n    if (isNode && isKeypairSigner(identity)) bundlr = await this.initNodeBundlr(address, currency, identity, options);else {\n      let identitySigner;\n      if (isIdentitySigner(identity)) identitySigner = identity;else identitySigner = new KeypairIdentityDriver(Keypair.fromSecretKey(identity.secretKey));\n      bundlr = await this.initWebBundlr(address, currency, identitySigner, options);\n    }\n\n    try {\n      // Check for valid bundlr node.\n      await bundlr.utils.getBundlerAddress(currency);\n    } catch (error) {\n      throw new FailedToConnectToBundlrAddressError(address, error);\n    }\n\n    return bundlr;\n  }\n\n  async initNodeBundlr(address, currency, keypair, options) {\n    const bPackage = _removeDoubleDefault(await import('@bundlr-network/client'));\n\n    return new bPackage.default(address, currency, keypair.secretKey, options);\n  }\n\n  async initWebBundlr(address, currency, identity, options) {\n    var _this = this;\n\n    const wallet = {\n      publicKey: identity.publicKey,\n      signMessage: message => identity.signMessage(message),\n      signTransaction: transaction => identity.signTransaction(transaction),\n      signAllTransactions: transactions => identity.signAllTransactions(transactions),\n      sendTransaction: function (transaction, connection) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const {\n          signers = [],\n          ...sendOptions\n        } = options;\n        return _this._metaplex.rpc().sendTransaction(transaction, sendOptions, [identity, ...signers]);\n      }\n    };\n\n    const bPackage = _removeDoubleDefault(await import('@bundlr-network/client'));\n\n    const bundlr = new bPackage.WebBundlr(address, currency, wallet, options);\n\n    try {\n      // Try to initiate bundlr.\n      await bundlr.ready();\n    } catch (error) {\n      throw new FailedToInitializeBundlrError(error);\n    }\n\n    return bundlr;\n  }\n\n}\n\nconst isBundlrStorageDriver = storageDriver => {\n  return 'bundlr' in storageDriver && 'getBalance' in storageDriver && 'fund' in storageDriver && 'withdrawAll' in storageDriver;\n};\n\nconst bigNumberToAmount = bigNumber => {\n  return lamports(toBigNumber(bigNumber.decimalPlaces(0).toString()));\n};\n\nconst amountToBigNumber = amount => {\n  return new BigNumber(amount.basisPoints.toString());\n};\n\nconst getMetaplexFileTagsWithContentType = file => {\n  if (!file.contentType) {\n    return file.tags;\n  }\n\n  return [{\n    name: 'Content-Type',\n    value: file.contentType\n  }, ...file.tags];\n};\n\nexport { BundlrStorageDriver, isBundlrStorageDriver };","map":{"version":3,"sources":["../../../../src/plugins/bundlrStorage/BundlrStorageDriver.ts"],"names":["_removeDoubleDefault","pkg","default","HEADER_SIZE","MINIMUM_SIZE","BundlrStorageDriver","constructor","metaplex","options","_metaplex","_options","providerUrl","connection","rpcEndpoint","getUploadPrice","bytes","bundlr","price","getPrice","bigNumberToAmount","multipliedBy","priceMultiplier","getUploadPriceForFiles","files","reduce","sum","file","Math","max","buffer","byteLength","upload","uri","uploadAll","amount","getBytesFromMetaplexFiles","fund","promises","map","status","data","uploader","tags","getMetaplexFileTagsWithContentType","AssetUploadFailedError","id","Promise","all","getBalance","balance","getLoadedBalance","skipBalanceCheck","toFund","amountToBigNumber","isGreaterThan","minus","BigNumber","isLessThanOrEqualTo","withdrawAll","minimumBalance","isLessThan","balanceToWithdraw","withdraw","withdrawBalance","BundlrWithdrawError","_bundlr","initBundlr","currency","address","timeout","identity","isNode","window","process","hasOwnProperty","isKeypairSigner","initNodeBundlr","identitySigner","isIdentitySigner","KeypairIdentityDriver","Keypair","fromSecretKey","secretKey","initWebBundlr","utils","getBundlerAddress","error","FailedToConnectToBundlrAddressError","keypair","bPackage","wallet","publicKey","signMessage","message","signTransaction","transaction","signAllTransactions","transactions","sendTransaction","signers","sendOptions","rpc","WebBundlr","ready","FailedToInitializeBundlrError","isBundlrStorageDriver","storageDriver","bigNumber","lamports","toBigNumber","decimalPlaces","toString","basisPoints","contentType","name","value"],"mappings":"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","sourcesContent":["import type { default as NodeBundlr, WebBundlr } from '@bundlr-network/client';\nimport BigNumber from 'bignumber.js';\nimport {\n  Connection,\n  Keypair,\n  PublicKey,\n  SendOptions,\n  Signer as Web3Signer,\n  Transaction,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport {\n  getBytesFromMetaplexFiles,\n  MetaplexFile,\n  MetaplexFileTag,\n  StorageDriver,\n} from '../storageModule';\nimport { KeypairIdentityDriver } from '../keypairIdentity';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Amount,\n  IdentitySigner,\n  isIdentitySigner,\n  isKeypairSigner,\n  KeypairSigner,\n  lamports,\n  Signer,\n  toBigNumber,\n} from '@/types';\nimport {\n  AssetUploadFailedError,\n  BundlrWithdrawError,\n  FailedToConnectToBundlrAddressError,\n  FailedToInitializeBundlrError,\n} from '@/errors';\n\n/**\n * This method is necessary to import the Bundlr package on both ESM and CJS modules.\n * Without this, we get a different structure on each module:\n * - CJS: { default: [Getter], WebBundlr: [Getter] }\n * - ESM: { default: { default: [Getter], WebBundlr: [Getter] } }\n * This method fixes this by ensure there is not double default in the imported package.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _removeDoubleDefault(pkg: any) {\n  if (\n    pkg &&\n    typeof pkg === 'object' &&\n    'default' in pkg &&\n    'default' in pkg.default\n  ) {\n    return pkg.default;\n  }\n\n  return pkg;\n}\n\nexport type BundlrOptions = {\n  address?: string;\n  timeout?: number;\n  providerUrl?: string;\n  priceMultiplier?: number;\n  identity?: Signer;\n};\n\nexport type BundlrWalletAdapter = {\n  publicKey: PublicKey | null;\n  signMessage?: (message: Uint8Array) => Promise<Uint8Array>;\n  signTransaction?: (transaction: Transaction) => Promise<Transaction>;\n  signAllTransactions?: (transactions: Transaction[]) => Promise<Transaction[]>;\n  sendTransaction: (\n    transaction: Transaction,\n    connection: Connection,\n    options?: SendOptions & { signers?: Web3Signer[] }\n  ) => Promise<TransactionSignature>;\n};\n\n/// Size of Bundlr transaction header\nconst HEADER_SIZE = 2_000;\n\n/// Minimum file size for cost calculation\nconst MINIMUM_SIZE = 80_000;\n\nexport class BundlrStorageDriver implements StorageDriver {\n  protected _metaplex: Metaplex;\n  protected _bundlr: WebBundlr | NodeBundlr | null = null;\n  protected _options: BundlrOptions;\n\n  constructor(metaplex: Metaplex, options: BundlrOptions = {}) {\n    this._metaplex = metaplex;\n    this._options = {\n      providerUrl: metaplex.connection.rpcEndpoint,\n      ...options,\n    };\n  }\n\n  async getUploadPrice(bytes: number): Promise<Amount> {\n    const bundlr = await this.bundlr();\n    const price = await bundlr.getPrice(bytes);\n\n    return bigNumberToAmount(\n      price.multipliedBy(this._options.priceMultiplier ?? 1.1)\n    );\n  }\n\n  async getUploadPriceForFiles(files: MetaplexFile[]): Promise<Amount> {\n    const bytes: number = files.reduce((sum, file) => {\n      return sum + HEADER_SIZE + Math.max(MINIMUM_SIZE, file.buffer.byteLength);\n    }, 0);\n\n    return this.getUploadPrice(bytes);\n  }\n\n  async upload(file: MetaplexFile): Promise<string> {\n    const [uri] = await this.uploadAll([file]);\n\n    return uri;\n  }\n\n  async uploadAll(files: MetaplexFile[]): Promise<string[]> {\n    const bundlr = await this.bundlr();\n    const amount = await this.getUploadPrice(\n      getBytesFromMetaplexFiles(...files)\n    );\n    await this.fund(amount);\n\n    const promises = files.map(async (file) => {\n      const { status, data } = await bundlr.uploader.upload(file.buffer, {\n        tags: getMetaplexFileTagsWithContentType(file),\n      });\n\n      if (status >= 300) {\n        throw new AssetUploadFailedError(status);\n      }\n\n      return `https://arweave.net/${data.id}`;\n    });\n\n    return await Promise.all(promises);\n  }\n\n  async getBalance(): Promise<Amount> {\n    const bundlr = await this.bundlr();\n    const balance = await bundlr.getLoadedBalance();\n\n    return bigNumberToAmount(balance);\n  }\n\n  async fund(amount: Amount, skipBalanceCheck = false): Promise<void> {\n    const bundlr = await this.bundlr();\n    let toFund = amountToBigNumber(amount);\n\n    if (!skipBalanceCheck) {\n      const balance = await bundlr.getLoadedBalance();\n\n      toFund = toFund.isGreaterThan(balance)\n        ? toFund.minus(balance)\n        : new BigNumber(0);\n    }\n\n    if (toFund.isLessThanOrEqualTo(0)) {\n      return;\n    }\n\n    // TODO: Catch errors and wrap in BundlrErrors.\n    await bundlr.fund(toFund);\n  }\n\n  async withdrawAll(): Promise<void> {\n    // TODO(loris): Replace with \"withdrawAll\" when available on Bundlr.\n    const bundlr = await this.bundlr();\n    const balance = await bundlr.getLoadedBalance();\n    const minimumBalance = new BigNumber(5000);\n\n    if (balance.isLessThan(minimumBalance)) {\n      return;\n    }\n\n    const balanceToWithdraw = balance.minus(minimumBalance);\n    await this.withdraw(bigNumberToAmount(balanceToWithdraw));\n  }\n\n  async withdraw(amount: Amount): Promise<void> {\n    const bundlr = await this.bundlr();\n\n    const { status } = await bundlr.withdrawBalance(amountToBigNumber(amount));\n\n    if (status >= 300) {\n      throw new BundlrWithdrawError(status);\n    }\n  }\n\n  async bundlr(): Promise<WebBundlr | NodeBundlr> {\n    if (this._bundlr) {\n      return this._bundlr;\n    }\n\n    return (this._bundlr = await this.initBundlr());\n  }\n\n  async initBundlr(): Promise<WebBundlr | NodeBundlr> {\n    const currency = 'solana';\n    const address = this._options?.address ?? 'https://node1.bundlr.network';\n    const options = {\n      timeout: this._options.timeout,\n      providerUrl: this._options.providerUrl,\n    };\n\n    const identity: Signer =\n      this._options.identity ?? this._metaplex.identity();\n\n    // if in node use node bundlr, else use web bundlr\n    // see: https://github.com/metaplex-foundation/js/issues/202\n    const isNode =\n      typeof window === 'undefined' || window.process?.hasOwnProperty('type');\n    let bundlr;\n    if (isNode && isKeypairSigner(identity))\n      bundlr = await this.initNodeBundlr(address, currency, identity, options);\n    else {\n      let identitySigner: IdentitySigner;\n      if (isIdentitySigner(identity)) identitySigner = identity;\n      else\n        identitySigner = new KeypairIdentityDriver(\n          Keypair.fromSecretKey((identity as KeypairSigner).secretKey)\n        );\n\n      bundlr = await this.initWebBundlr(\n        address,\n        currency,\n        identitySigner,\n        options\n      );\n    }\n\n    try {\n      // Check for valid bundlr node.\n      await bundlr.utils.getBundlerAddress(currency);\n    } catch (error) {\n      throw new FailedToConnectToBundlrAddressError(address, error as Error);\n    }\n\n    return bundlr;\n  }\n\n  async initNodeBundlr(\n    address: string,\n    currency: string,\n    keypair: KeypairSigner,\n    options: any\n  ): Promise<NodeBundlr> {\n    const bPackage = _removeDoubleDefault(\n      await import('@bundlr-network/client')\n    );\n    return new bPackage.default(address, currency, keypair.secretKey, options);\n  }\n\n  async initWebBundlr(\n    address: string,\n    currency: string,\n    identity: IdentitySigner,\n    options: any\n  ): Promise<WebBundlr> {\n    const wallet: BundlrWalletAdapter = {\n      publicKey: identity.publicKey,\n      signMessage: (message: Uint8Array) => identity.signMessage(message),\n      signTransaction: (transaction: Transaction) =>\n        identity.signTransaction(transaction),\n      signAllTransactions: (transactions: Transaction[]) =>\n        identity.signAllTransactions(transactions),\n      sendTransaction: (\n        transaction: Transaction,\n        connection: Connection,\n        options: SendOptions & { signers?: Web3Signer[] } = {}\n      ): Promise<TransactionSignature> => {\n        const { signers = [], ...sendOptions } = options;\n\n        return this._metaplex\n          .rpc()\n          .sendTransaction(transaction, sendOptions, [identity, ...signers]);\n      },\n    };\n\n    const bPackage = _removeDoubleDefault(\n      await import('@bundlr-network/client')\n    );\n    const bundlr = new bPackage.WebBundlr(address, currency, wallet, options);\n\n    try {\n      // Try to initiate bundlr.\n      await bundlr.ready();\n    } catch (error) {\n      throw new FailedToInitializeBundlrError(error as Error);\n    }\n\n    return bundlr;\n  }\n}\n\nexport const isBundlrStorageDriver = (\n  storageDriver: StorageDriver\n): storageDriver is BundlrStorageDriver => {\n  return (\n    'bundlr' in storageDriver &&\n    'getBalance' in storageDriver &&\n    'fund' in storageDriver &&\n    'withdrawAll' in storageDriver\n  );\n};\n\nconst bigNumberToAmount = (bigNumber: BigNumber): Amount => {\n  return lamports(toBigNumber(bigNumber.decimalPlaces(0).toString()));\n};\n\nconst amountToBigNumber = (amount: Amount): BigNumber => {\n  return new BigNumber(amount.basisPoints.toString());\n};\n\nconst getMetaplexFileTagsWithContentType = (\n  file: MetaplexFile\n): MetaplexFileTag[] => {\n  if (!file.contentType) {\n    return file.tags;\n  }\n\n  return [{ name: 'Content-Type', value: file.contentType }, ...file.tags];\n};\n"]},"metadata":{},"sourceType":"module"}