{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _ReadonlyWalletAccount_address, _ReadonlyWalletAccount_publicKey, _ReadonlyWalletAccount_chains, _ReadonlyWalletAccount_features, _ReadonlyWalletAccount_label, _ReadonlyWalletAccount_icon;\n/**\n * Base implementation of a {@link \"@wallet-standard/base\".WalletAccount} to be used or extended by a\n * {@link \"@wallet-standard/base\".Wallet}.\n *\n * `WalletAccount` properties must be read-only. This class enforces this by making all properties\n * [truly private](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields) and\n * read-only, using getters for access, returning copies instead of references, and calling\n * [Object.freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)\n * on the instance.\n *\n * @group Account\n */\n\n\nexport class ReadonlyWalletAccount {\n  /**\n   * Create and freeze a read-only account.\n   *\n   * @param account Account to copy properties from.\n   */\n  constructor(account) {\n    _ReadonlyWalletAccount_address.set(this, void 0);\n\n    _ReadonlyWalletAccount_publicKey.set(this, void 0);\n\n    _ReadonlyWalletAccount_chains.set(this, void 0);\n\n    _ReadonlyWalletAccount_features.set(this, void 0);\n\n    _ReadonlyWalletAccount_label.set(this, void 0);\n\n    _ReadonlyWalletAccount_icon.set(this, void 0);\n\n    if (new.target === ReadonlyWalletAccount) {\n      Object.freeze(this);\n    }\n\n    __classPrivateFieldSet(this, _ReadonlyWalletAccount_address, account.address, \"f\");\n\n    __classPrivateFieldSet(this, _ReadonlyWalletAccount_publicKey, account.publicKey.slice(), \"f\");\n\n    __classPrivateFieldSet(this, _ReadonlyWalletAccount_chains, account.chains.slice(), \"f\");\n\n    __classPrivateFieldSet(this, _ReadonlyWalletAccount_features, account.features.slice(), \"f\");\n\n    __classPrivateFieldSet(this, _ReadonlyWalletAccount_label, account.label, \"f\");\n\n    __classPrivateFieldSet(this, _ReadonlyWalletAccount_icon, account.icon, \"f\");\n  }\n  /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.address | WalletAccount::address} */\n\n\n  get address() {\n    return __classPrivateFieldGet(this, _ReadonlyWalletAccount_address, \"f\");\n  }\n  /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.publicKey | WalletAccount::publicKey} */\n\n\n  get publicKey() {\n    return __classPrivateFieldGet(this, _ReadonlyWalletAccount_publicKey, \"f\").slice();\n  }\n  /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.chains | WalletAccount::chains} */\n\n\n  get chains() {\n    return __classPrivateFieldGet(this, _ReadonlyWalletAccount_chains, \"f\").slice();\n  }\n  /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.features | WalletAccount::features} */\n\n\n  get features() {\n    return __classPrivateFieldGet(this, _ReadonlyWalletAccount_features, \"f\").slice();\n  }\n  /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.label | WalletAccount::label} */\n\n\n  get label() {\n    return __classPrivateFieldGet(this, _ReadonlyWalletAccount_label, \"f\");\n  }\n  /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.icon | WalletAccount::icon} */\n\n\n  get icon() {\n    return __classPrivateFieldGet(this, _ReadonlyWalletAccount_icon, \"f\");\n  }\n\n}\n_ReadonlyWalletAccount_address = new WeakMap(), _ReadonlyWalletAccount_publicKey = new WeakMap(), _ReadonlyWalletAccount_chains = new WeakMap(), _ReadonlyWalletAccount_features = new WeakMap(), _ReadonlyWalletAccount_label = new WeakMap(), _ReadonlyWalletAccount_icon = new WeakMap();\n/**\n * Efficiently compare {@link Indexed} arrays (e.g. `Array` and `Uint8Array`).\n *\n * @param a An array.\n * @param b Another array.\n *\n * @return `true` if the arrays have the same length and elements, `false` otherwise.\n *\n * @group Util\n */\n\nexport function arraysEqual(a, b) {\n  if (a === b) return true;\n  const length = a.length;\n  if (length !== b.length) return false;\n\n  for (let i = 0; i < length; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n\n  return true;\n}\n/**\n * Efficiently compare byte arrays, using {@link arraysEqual}.\n *\n * @param a A byte array.\n * @param b Another byte array.\n *\n * @return `true` if the byte arrays have the same length and bytes, `false` otherwise.\n *\n * @group Util\n */\n\nexport function bytesEqual(a, b) {\n  return arraysEqual(a, b);\n}\n/**\n * Efficiently concatenate byte arrays without modifying them.\n *\n * @param first  A byte array.\n * @param others Additional byte arrays.\n *\n * @return New byte array containing the concatenation of all the byte arrays.\n *\n * @group Util\n */\n\nexport function concatBytes(first) {\n  for (var _len = arguments.length, others = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    others[_key - 1] = arguments[_key];\n  }\n\n  const length = others.reduce((length, bytes) => length + bytes.length, first.length);\n  const bytes = new Uint8Array(length);\n  bytes.set(first, 0);\n\n  for (const other of others) {\n    bytes.set(other, bytes.length);\n  }\n\n  return bytes;\n}\n/**\n * Create a new object with a subset of fields from a source object.\n *\n * @param source Object to pick fields from.\n * @param keys   Names of fields to pick.\n *\n * @return New object with only the picked fields.\n *\n * @group Util\n */\n\nexport function pick(source) {\n  const picked = {};\n\n  for (var _len2 = arguments.length, keys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    keys[_key2 - 1] = arguments[_key2];\n  }\n\n  for (const key of keys) {\n    picked[key] = source[key];\n  }\n\n  return picked;\n}\n/**\n * Call a callback function, catch an error if it throws, and log the error without rethrowing.\n *\n * @param callback Function to call.\n *\n * @group Util\n */\n\nexport function guard(callback) {\n  try {\n    callback();\n  } catch (error) {\n    console.error(error);\n  }\n}","map":{"version":3,"sources":["../../src/util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ReadonlyWalletAccount_address, _ReadonlyWalletAccount_publicKey, _ReadonlyWalletAccount_chains, _ReadonlyWalletAccount_features, _ReadonlyWalletAccount_label, _ReadonlyWalletAccount_icon;\n/**\n * Base implementation of a {@link \"@wallet-standard/base\".WalletAccount} to be used or extended by a\n * {@link \"@wallet-standard/base\".Wallet}.\n *\n * `WalletAccount` properties must be read-only. This class enforces this by making all properties\n * [truly private](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields) and\n * read-only, using getters for access, returning copies instead of references, and calling\n * [Object.freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)\n * on the instance.\n *\n * @group Account\n */\nexport class ReadonlyWalletAccount {\n    /**\n     * Create and freeze a read-only account.\n     *\n     * @param account Account to copy properties from.\n     */\n    constructor(account) {\n        _ReadonlyWalletAccount_address.set(this, void 0);\n        _ReadonlyWalletAccount_publicKey.set(this, void 0);\n        _ReadonlyWalletAccount_chains.set(this, void 0);\n        _ReadonlyWalletAccount_features.set(this, void 0);\n        _ReadonlyWalletAccount_label.set(this, void 0);\n        _ReadonlyWalletAccount_icon.set(this, void 0);\n        if (new.target === ReadonlyWalletAccount) {\n            Object.freeze(this);\n        }\n        __classPrivateFieldSet(this, _ReadonlyWalletAccount_address, account.address, \"f\");\n        __classPrivateFieldSet(this, _ReadonlyWalletAccount_publicKey, account.publicKey.slice(), \"f\");\n        __classPrivateFieldSet(this, _ReadonlyWalletAccount_chains, account.chains.slice(), \"f\");\n        __classPrivateFieldSet(this, _ReadonlyWalletAccount_features, account.features.slice(), \"f\");\n        __classPrivateFieldSet(this, _ReadonlyWalletAccount_label, account.label, \"f\");\n        __classPrivateFieldSet(this, _ReadonlyWalletAccount_icon, account.icon, \"f\");\n    }\n    /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.address | WalletAccount::address} */\n    get address() {\n        return __classPrivateFieldGet(this, _ReadonlyWalletAccount_address, \"f\");\n    }\n    /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.publicKey | WalletAccount::publicKey} */\n    get publicKey() {\n        return __classPrivateFieldGet(this, _ReadonlyWalletAccount_publicKey, \"f\").slice();\n    }\n    /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.chains | WalletAccount::chains} */\n    get chains() {\n        return __classPrivateFieldGet(this, _ReadonlyWalletAccount_chains, \"f\").slice();\n    }\n    /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.features | WalletAccount::features} */\n    get features() {\n        return __classPrivateFieldGet(this, _ReadonlyWalletAccount_features, \"f\").slice();\n    }\n    /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.label | WalletAccount::label} */\n    get label() {\n        return __classPrivateFieldGet(this, _ReadonlyWalletAccount_label, \"f\");\n    }\n    /** Implementation of {@link \"@wallet-standard/base\".WalletAccount.icon | WalletAccount::icon} */\n    get icon() {\n        return __classPrivateFieldGet(this, _ReadonlyWalletAccount_icon, \"f\");\n    }\n}\n_ReadonlyWalletAccount_address = new WeakMap(), _ReadonlyWalletAccount_publicKey = new WeakMap(), _ReadonlyWalletAccount_chains = new WeakMap(), _ReadonlyWalletAccount_features = new WeakMap(), _ReadonlyWalletAccount_label = new WeakMap(), _ReadonlyWalletAccount_icon = new WeakMap();\n/**\n * Efficiently compare {@link Indexed} arrays (e.g. `Array` and `Uint8Array`).\n *\n * @param a An array.\n * @param b Another array.\n *\n * @return `true` if the arrays have the same length and elements, `false` otherwise.\n *\n * @group Util\n */\nexport function arraysEqual(a, b) {\n    if (a === b)\n        return true;\n    const length = a.length;\n    if (length !== b.length)\n        return false;\n    for (let i = 0; i < length; i++) {\n        if (a[i] !== b[i])\n            return false;\n    }\n    return true;\n}\n/**\n * Efficiently compare byte arrays, using {@link arraysEqual}.\n *\n * @param a A byte array.\n * @param b Another byte array.\n *\n * @return `true` if the byte arrays have the same length and bytes, `false` otherwise.\n *\n * @group Util\n */\nexport function bytesEqual(a, b) {\n    return arraysEqual(a, b);\n}\n/**\n * Efficiently concatenate byte arrays without modifying them.\n *\n * @param first  A byte array.\n * @param others Additional byte arrays.\n *\n * @return New byte array containing the concatenation of all the byte arrays.\n *\n * @group Util\n */\nexport function concatBytes(first, ...others) {\n    const length = others.reduce((length, bytes) => length + bytes.length, first.length);\n    const bytes = new Uint8Array(length);\n    bytes.set(first, 0);\n    for (const other of others) {\n        bytes.set(other, bytes.length);\n    }\n    return bytes;\n}\n/**\n * Create a new object with a subset of fields from a source object.\n *\n * @param source Object to pick fields from.\n * @param keys   Names of fields to pick.\n *\n * @return New object with only the picked fields.\n *\n * @group Util\n */\nexport function pick(source, ...keys) {\n    const picked = {};\n    for (const key of keys) {\n        picked[key] = source[key];\n    }\n    return picked;\n}\n/**\n * Call a callback function, catch an error if it throws, and log the error without rethrowing.\n *\n * @param callback Function to call.\n *\n * @group Util\n */\nexport function guard(callback) {\n    try {\n        callback();\n    }\n    catch (error) {\n        console.error(error);\n    }\n}\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}