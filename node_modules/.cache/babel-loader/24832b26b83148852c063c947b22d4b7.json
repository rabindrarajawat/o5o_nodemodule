{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.mjs';\nimport { MetaplexError } from '../../errors/MetaplexError.mjs';\nimport { formatAmount } from '../../types/Amount.mjs';\n/** @group Errors */\n\nclass AuctionHouseError extends MetaplexError {\n  constructor(message, cause) {\n    super(message, 'plugin', 'Auction House', cause);\n\n    _defineProperty(this, \"name\", 'AuctionHouseError');\n  }\n\n}\n/** @group Errors */\n\n\nclass TreasuryDestinationOwnerRequiredError extends AuctionHouseError {\n  constructor() {\n    const message = 'You are trying to update an Auction House which uses a custom token as a treasury. ' + 'You have not provided the \"treasuryWithdrawalDestinationOwner\" because you do not wish to change it. ' + 'However, the Auction House account does not keep track of that information so we cannot prefill that for you. ' + 'Thus, if you wish to keep the same treasury withdrawal, you must provide it explicilty. ' + 'Please provide the current \"treasuryWithdrawalDestinationOwner\" parameter so you can update the other fields.' + 'Note that we keep that parameter optional because no Associate Token Account is needed for Auction Houses ' + 'whose treasury is the native SOL.';\n    super(message);\n\n    _defineProperty(this, \"name\", 'TreasuryDestinationOwnerRequiredError');\n  }\n\n}\n/** @group Errors */\n\n\nclass AuctioneerAuthorityRequiredError extends AuctionHouseError {\n  constructor() {\n    const message = 'You are trying to use or fetch an Auction House which delegates to an Auctioneer authority ' + 'but you have not provided the required \"auctioneerAuthority\" parameter. ' + 'Please provide the \"auctioneerAuthority\" parameter so the SDK can figure out which Auctioneer instance to interact with. ' + 'Note that we keep that parameter optional because no Auctioneer Authority is needed for Auction Houses ' + 'that use native Auction House behavior.';\n    super(message);\n\n    _defineProperty(this, \"name\", 'AuctioneerAuthorityRequiredError');\n  }\n\n}\n/** @group Errors */\n\n\nclass AuctioneerPartialSaleNotSupportedError extends AuctionHouseError {\n  constructor() {\n    const message = 'You are trying to execute a partial sale, but partial orders are not supported in Auctioneer. ' + 'Any Partial Buys must be executed against a sale listed through the Auction House Sale.';\n    super(message);\n\n    _defineProperty(this, \"name\", 'AuctioneerPartialSaleNotSupportedError');\n  }\n\n}\n/** @group Errors */\n\n\nclass BidAndListingHaveDifferentAuctionHousesError extends AuctionHouseError {\n  constructor() {\n    const message = 'You are trying to use a Bid and a Listing from different Auction Houses. ' + 'Please provide both Bid and Listing from the same Auction House. ' + 'They should have the same \"auctionHouse.address\".';\n    super(message);\n\n    _defineProperty(this, \"name\", 'BidAndListingHaveDifferentAuctionHousesError');\n  }\n\n}\n/** @group Errors */\n\n\nclass BidAndListingHaveDifferentMintsError extends AuctionHouseError {\n  constructor() {\n    const message = 'You are trying to execute a sale using a Bid and a Listing that have different mint addresses. ' + 'Please provide a Bid and a Listing on the same asset in order to execute the sale. ' + 'They should have the same \"asset.address\".';\n    super(message);\n\n    _defineProperty(this, \"name\", 'BidAndListingHaveDifferentMintsError');\n  }\n\n}\n/** @group Errors */\n\n\nclass CanceledBidIsNotAllowedError extends AuctionHouseError {\n  constructor() {\n    const message = 'You are trying to execute a sale using a canceled Bid. ' + 'Please provide a Bid that is not cancelled in order to execute the sale.';\n    super(message);\n\n    _defineProperty(this, \"name\", 'CanceledBidIsNotAllowedError');\n  }\n\n}\n/** @group Errors */\n\n\nclass CanceledListingIsNotAllowedError extends AuctionHouseError {\n  constructor() {\n    const message = 'You are trying to execute a sale using a canceled Listing. ' + 'Please provide a Listing that is not cancelld in order to execute the sale.';\n    super(message);\n\n    _defineProperty(this, \"name\", 'CanceledListingIsNotAllowedError');\n  }\n\n}\n/** @group Errors */\n\n\nclass CreateListingRequiresSignerError extends AuctionHouseError {\n  constructor() {\n    const message = 'You are trying to create a listing without providing a signer. ' + 'Either a seller or authority must be a Signer.';\n    super(message);\n\n    _defineProperty(this, \"name\", 'CreateListingRequiresSignerError');\n  }\n\n}\n/** @group Errors */\n\n\nclass WithdrawFromBuyerAccountRequiresSignerError extends AuctionHouseError {\n  constructor() {\n    const message = 'You are trying to withdraw from buyer account without providing a signer. ' + 'Either a buyer or authority must be a Signer.';\n    super(message);\n\n    _defineProperty(this, \"name\", 'WithdrawFromBuyerAccountRequiresSignerError');\n  }\n\n}\n/** @group Errors */\n\n\nclass PartialPriceMismatchError extends AuctionHouseError {\n  constructor(expected, actual) {\n    const message = 'The calculated partial price does not equal the partial price provided. ' + `Expected to receive ${formatAmount(expected)} per SFT ` + `but provided ${formatAmount(actual)} per SFT. ` + 'The token price must equal the price it has in the listing. ' + 'If executing a partial sale, ' + 'divide the total price by the number of total tokens on sale and multiply it by the number of tokens you want to buy.';\n    super(message);\n\n    _defineProperty(this, \"name\", 'PartialPriceMismatchError');\n  }\n\n}\n/** @group Errors */\n\n\nclass FindAllSupportsOnlyThreeFiltersMaxError extends AuctionHouseError {\n  constructor() {\n    const message = 'Solana filter allows only to provide four custom filters, ' + 'one of the filters is internal so it is only possible to provide 3 custom filters. ' + 'Please provide less filters to the find all query.';\n    super(message);\n\n    _defineProperty(this, \"name\", 'FindAllSupportsOnlyThreeFiltersMaxError');\n  }\n\n}\n\nexport { AuctionHouseError, AuctioneerAuthorityRequiredError, AuctioneerPartialSaleNotSupportedError, BidAndListingHaveDifferentAuctionHousesError, BidAndListingHaveDifferentMintsError, CanceledBidIsNotAllowedError, CanceledListingIsNotAllowedError, CreateListingRequiresSignerError, FindAllSupportsOnlyThreeFiltersMaxError, PartialPriceMismatchError, TreasuryDestinationOwnerRequiredError, WithdrawFromBuyerAccountRequiresSignerError };","map":{"version":3,"sources":["../../../../src/plugins/auctionHouseModule/errors.ts"],"names":["AuctionHouseError","MetaplexError","constructor","message","cause","TreasuryDestinationOwnerRequiredError","AuctioneerAuthorityRequiredError","AuctioneerPartialSaleNotSupportedError","BidAndListingHaveDifferentAuctionHousesError","BidAndListingHaveDifferentMintsError","CanceledBidIsNotAllowedError","CanceledListingIsNotAllowedError","CreateListingRequiresSignerError","WithdrawFromBuyerAccountRequiresSignerError","PartialPriceMismatchError","expected","actual","formatAmount","FindAllSupportsOnlyThreeFiltersMaxError"],"mappings":"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","sourcesContent":["import { MetaplexError } from '@/errors';\nimport { Amount, formatAmount } from '@/types';\n\n/** @group Errors */\nexport class AuctionHouseError extends MetaplexError {\n  readonly name: string = 'AuctionHouseError';\n  constructor(message: string, cause?: Error) {\n    super(message, 'plugin', 'Auction House', cause);\n  }\n}\n\n/** @group Errors */\nexport class TreasuryDestinationOwnerRequiredError extends AuctionHouseError {\n  readonly name: string = 'TreasuryDestinationOwnerRequiredError';\n  constructor() {\n    const message =\n      'You are trying to update an Auction House which uses a custom token as a treasury. ' +\n      'You have not provided the \"treasuryWithdrawalDestinationOwner\" because you do not wish to change it. ' +\n      'However, the Auction House account does not keep track of that information so we cannot prefill that for you. ' +\n      'Thus, if you wish to keep the same treasury withdrawal, you must provide it explicilty. ' +\n      'Please provide the current \"treasuryWithdrawalDestinationOwner\" parameter so you can update the other fields.' +\n      'Note that we keep that parameter optional because no Associate Token Account is needed for Auction Houses ' +\n      'whose treasury is the native SOL.';\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class AuctioneerAuthorityRequiredError extends AuctionHouseError {\n  readonly name: string = 'AuctioneerAuthorityRequiredError';\n  constructor() {\n    const message =\n      'You are trying to use or fetch an Auction House which delegates to an Auctioneer authority ' +\n      'but you have not provided the required \"auctioneerAuthority\" parameter. ' +\n      'Please provide the \"auctioneerAuthority\" parameter so the SDK can figure out which Auctioneer instance to interact with. ' +\n      'Note that we keep that parameter optional because no Auctioneer Authority is needed for Auction Houses ' +\n      'that use native Auction House behavior.';\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class AuctioneerPartialSaleNotSupportedError extends AuctionHouseError {\n  readonly name: string = 'AuctioneerPartialSaleNotSupportedError';\n  constructor() {\n    const message =\n      'You are trying to execute a partial sale, but partial orders are not supported in Auctioneer. ' +\n      'Any Partial Buys must be executed against a sale listed through the Auction House Sale.';\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class BidAndListingHaveDifferentAuctionHousesError extends AuctionHouseError {\n  readonly name: string = 'BidAndListingHaveDifferentAuctionHousesError';\n  constructor() {\n    const message =\n      'You are trying to use a Bid and a Listing from different Auction Houses. ' +\n      'Please provide both Bid and Listing from the same Auction House. ' +\n      'They should have the same \"auctionHouse.address\".';\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class BidAndListingHaveDifferentMintsError extends AuctionHouseError {\n  readonly name: string = 'BidAndListingHaveDifferentMintsError';\n  constructor() {\n    const message =\n      'You are trying to execute a sale using a Bid and a Listing that have different mint addresses. ' +\n      'Please provide a Bid and a Listing on the same asset in order to execute the sale. ' +\n      'They should have the same \"asset.address\".';\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class CanceledBidIsNotAllowedError extends AuctionHouseError {\n  readonly name: string = 'CanceledBidIsNotAllowedError';\n  constructor() {\n    const message =\n      'You are trying to execute a sale using a canceled Bid. ' +\n      'Please provide a Bid that is not cancelled in order to execute the sale.';\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class CanceledListingIsNotAllowedError extends AuctionHouseError {\n  readonly name: string = 'CanceledListingIsNotAllowedError';\n  constructor() {\n    const message =\n      'You are trying to execute a sale using a canceled Listing. ' +\n      'Please provide a Listing that is not cancelld in order to execute the sale.';\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class CreateListingRequiresSignerError extends AuctionHouseError {\n  readonly name: string = 'CreateListingRequiresSignerError';\n  constructor() {\n    const message =\n      'You are trying to create a listing without providing a signer. ' +\n      'Either a seller or authority must be a Signer.';\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class WithdrawFromBuyerAccountRequiresSignerError extends AuctionHouseError {\n  readonly name: string = 'WithdrawFromBuyerAccountRequiresSignerError';\n  constructor() {\n    const message =\n      'You are trying to withdraw from buyer account without providing a signer. ' +\n      'Either a buyer or authority must be a Signer.';\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class PartialPriceMismatchError extends AuctionHouseError {\n  readonly name: string = 'PartialPriceMismatchError';\n  constructor(expected: Amount, actual: Amount) {\n    const message =\n      'The calculated partial price does not equal the partial price provided. ' +\n      `Expected to receive ${formatAmount(expected)} per SFT ` +\n      `but provided ${formatAmount(actual)} per SFT. ` +\n      'The token price must equal the price it has in the listing. ' +\n      'If executing a partial sale, ' +\n      'divide the total price by the number of total tokens on sale and multiply it by the number of tokens you want to buy.';\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class FindAllSupportsOnlyThreeFiltersMaxError extends AuctionHouseError {\n  readonly name: string = 'FindAllSupportsOnlyThreeFiltersMaxError';\n  constructor() {\n    const message =\n      'Solana filter allows only to provide four custom filters, ' +\n      'one of the filters is internal so it is only possible to provide 3 custom filters. ' +\n      'Please provide less filters to the find all query.';\n    super(message);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}