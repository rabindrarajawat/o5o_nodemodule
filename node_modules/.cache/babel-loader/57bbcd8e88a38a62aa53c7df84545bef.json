{"ast":null,"code":"import BN from 'bn.js';\nimport assert from '../utils/assert.mjs';\n\nconst toDateTime = value => {\n  if (typeof value === 'string' || isDateObject(value)) {\n    const date = new Date(value);\n    const timestamp = Math.floor(date.getTime() / 1000);\n    return new BN(timestamp);\n  }\n\n  return new BN(value);\n};\n\nconst now = () => toDateTime(new Date(Date.now()));\n\nconst toOptionDateTime = value => {\n  return value === null ? null : toDateTime(value);\n};\n\nconst isDateTime = value => {\n  return value?.__opaque__ === 'DateTime';\n};\n\nfunction assertDateTime(value) {\n  assert(isDateTime(value), 'Expected DateTime type');\n}\n\nconst isDateObject = value => {\n  return Object.prototype.toString.call(value) === '[object Date]';\n};\n\nconst formatDateTime = function (value) {\n  let locales = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric'\n  };\n  const date = new Date(value.toNumber() * 1000);\n  return date.toLocaleDateString(locales, options);\n};\n\nexport { assertDateTime, formatDateTime, isDateTime, now, toDateTime, toOptionDateTime };","map":{"version":3,"sources":["../../../src/types/DateTime.ts"],"names":["toDateTime","value","isDateObject","date","Date","timestamp","Math","floor","getTime","BN","now","toOptionDateTime","isDateTime","__opaque__","assertDateTime","assert","Object","prototype","toString","call","formatDateTime","locales","options","month","day","year","hour","minute","toNumber","toLocaleDateString"],"mappings":";;;AAQaA,MAAAA,UAAU,GAAIC,KAAqB,IAAe;EAC7D,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BC,YAAY,CAACD,KAAD,CAA7C,EAAsD;IACpD,MAAME,IAAI,GAAG,IAAIC,IAAJ,CAASH,KAAT,CAAb;IACA,MAAMI,SAAS,GAAGC,IAAI,CAACC,KAALD,CAAWH,IAAI,CAACK,OAALL,KAAiB,IAA5BG,CAAlB;IACA,OAAO,IAAIG,EAAJ,CAAOJ,SAAP,CAAP;EACF;;EAEA,OAAO,IAAII,EAAJ,CAAOR,KAAP,CAAP;AACF,CARaD;;AAUAU,MAAAA,GAAG,GAAG,MAAgBV,UAAU,CAAC,IAAII,IAAJ,CAASA,IAAI,CAACM,GAALN,EAAT,CAAD,CAAhCM;;AAEAC,MAAAA,gBAAgB,GAC3BV,KAA6B,IACR;EACrB,OAAOA,KAAK,KAAK,IAAVA,GAAiB,IAAjBA,GAAwBD,UAAU,CAACC,KAAD,CAAzC;AACF,CAJaU;;AAMAC,MAAAA,UAAU,GAAIX,KAAU,IAAwB;EAC3D,OAAOA,KAAK,EAAEY,UAAPZ,KAAsB,UAA7B;AACF,CAFaW;;AAIN,SAASE,cAAT,CAAwBb,KAAxB,EAA+D;EACpEc,MAAM,CAACH,UAAU,CAACX,KAAD,CAAX,EAAoB,wBAApB,CAANc;AACF;;AAEA,MAAMb,YAAY,GAAID,KAAU,IAAoB;EAClD,OAAOe,MAAM,CAACC,SAAPD,CAAiBE,QAAjBF,CAA0BG,IAA1BH,CAA+Bf,KAA/Be,MAA0C,eAAjD;AACD,CAFD;;AAIaI,MAAAA,cAAc,GAAG,UAC5BnB,KAD4B,EAYjB;EAAA,IATXoB,OASW,uEATqB,OASrB;EAAA,IAPXC,OAOW,uEAP2B;IACpCC,KAAK,EAAE,OAD6B;IAEpCC,GAAG,EAAE,SAF+B;IAGpCC,IAAI,EAAE,SAH8B;IAIpCC,IAAI,EAAE,SAJ8B;IAKpCC,MAAM,EAAE;EAL4B,CAO3B;EACX,MAAMxB,IAAI,GAAG,IAAIC,IAAJ,CAASH,KAAK,CAAC2B,QAAN3B,KAAmB,IAA5B,CAAb;EAEA,OAAOE,IAAI,CAAC0B,kBAAL1B,CAAwBkB,OAAxBlB,EAAiCmB,OAAjCnB,CAAP;AACF,CAhBaiB","sourcesContent":["import BN from 'bn.js';\nimport { BigNumberValues } from './BigNumber';\nimport { assert, Opaque, Option } from '@/utils';\n\nexport type DateTimeString = string;\nexport type DateTimeValues = DateTimeString | BigNumberValues | Date;\nexport type DateTime = Opaque<BN, 'DateTime'>;\n\nexport const toDateTime = (value: DateTimeValues): DateTime => {\n  if (typeof value === 'string' || isDateObject(value)) {\n    const date = new Date(value);\n    const timestamp = Math.floor(date.getTime() / 1000);\n    return new BN(timestamp) as DateTime;\n  }\n\n  return new BN(value) as DateTime;\n};\n\nexport const now = (): DateTime => toDateTime(new Date(Date.now()));\n\nexport const toOptionDateTime = (\n  value: Option<DateTimeValues>\n): Option<DateTime> => {\n  return value === null ? null : toDateTime(value);\n};\n\nexport const isDateTime = (value: any): value is DateTime => {\n  return value?.__opaque__ === 'DateTime';\n};\n\nexport function assertDateTime(value: any): asserts value is DateTime {\n  assert(isDateTime(value), 'Expected DateTime type');\n}\n\nconst isDateObject = (value: any): value is Date => {\n  return Object.prototype.toString.call(value) === '[object Date]';\n};\n\nexport const formatDateTime = (\n  value: DateTime,\n  // @ts-ignore\n  locales: Intl.LocalesArgument = 'en-US',\n  // @ts-ignore\n  options: Intl.DateTimeFormatOptions = {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n  }\n): string => {\n  const date = new Date(value.toNumber() * 1000);\n\n  return date.toLocaleDateString(locales, options);\n};\n"]},"metadata":{},"sourceType":"module"}