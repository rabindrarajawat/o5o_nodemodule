{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\n\nexport const mintToInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct a MintTo instruction\n *\n * @param mint         Public key of the mint\n * @param destination  Address of the token account to mint to\n * @param authority    The mint authority\n * @param amount       Amount to mint\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createMintToInstruction(mint, destination, authority, amount) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(mintToInstructionData.span);\n  mintToInstructionData.encode({\n    instruction: TokenInstruction.MintTo,\n    amount: BigInt(amount)\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode a MintTo instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeMintToInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== mintToInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint: mint,\n      destination: destination,\n      authority: authority,\n      multiSigners: multiSigners\n    },\n    data: data\n  } = decodeMintToInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.MintTo) throw new TokenInvalidInstructionTypeError();\n  if (!mint || !destination || !authority) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId: programId,\n    keys: {\n      mint: mint,\n      destination: destination,\n      authority: authority,\n      multiSigners: multiSigners\n    },\n    data: data\n  };\n}\n/**\n * Decode a MintTo instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeMintToInstructionUnchecked(_ref) {\n  let {\n    programId: programId,\n    keys: [mint, destination, authority, ...multiSigners],\n    data: data\n  } = _ref;\n  return {\n    programId: programId,\n    keys: {\n      mint: mint,\n      destination: destination,\n      authority: authority,\n      multiSigners: multiSigners\n    },\n    data: mintToInstructionData.decode(data)\n  };\n}","map":{"version":3,"sources":["../../../src/instructions/mintTo.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const mintToInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct a MintTo instruction\n *\n * @param mint         Public key of the mint\n * @param destination  Address of the token account to mint to\n * @param authority    The mint authority\n * @param amount       Amount to mint\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createMintToInstruction(mint, destination, authority, amount, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], authority, multiSigners);\n    const data = Buffer.alloc(mintToInstructionData.span);\n    mintToInstructionData.encode({\n        instruction: TokenInstruction.MintTo,\n        amount: BigInt(amount),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a MintTo instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeMintToInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== mintToInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint, destination, authority, multiSigners }, data, } = decodeMintToInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.MintTo)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint || !destination || !authority)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a MintTo instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeMintToInstructionUnchecked({ programId, keys: [mint, destination, authority, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: mintToInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=mintTo.js.map"]},"metadata":{},"sourceType":"module"}