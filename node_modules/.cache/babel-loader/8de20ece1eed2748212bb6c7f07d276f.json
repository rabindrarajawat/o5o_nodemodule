{"ast":null,"code":"// /* eslint-disable array-callback-return */\n// /* eslint-disable no-lone-blocks */\n// import { web3 } from \"@project-serum/anchor\";\n// import { AnchorWallet, useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\n// import { WalletMultiButton, } from \"@solana/wallet-adapter-react-ui\";\n// import axios from \"axios\";\n// import { useEffect, useRef, useState } from \"react\";\n// import toast from \"react-hot-toast\";\n// import { BACKEND_URL, GLOBAL_AUTHORITY_SEED, NEXT_PUBLIC_SOLANA_NETWORK, NEXT_PUBLIC_STAKE_CONTRACT_ID, REWARD_TOKEN, USER_POOL_SEED } from '../constant/env';\n// import * as anchor from \"@project-serum/anchor\";\n// import { ConfirmOptions, Connection, Keypair, PublicKey, Transaction } from \"@solana/web3.js\";\n// import { STAKE_CONTRACT_IDL } from \"../constant/contract\";\n// import { sendTransactions } from \"../helpers/sol/connection\";\n// import * as splToken from \"@solana/spl-token\";\n// import Loader from \"../components/loader/Loader\";\n// import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n// import { REWARD_TOKEN_DECIMALS } from './../constant/env';\n// import Sidebar from \"../components/views/Sidebar\";\n// import Navbar from \"../components/views/Navbar\";\n// const Admin = () => {\n// \tconst rewardMint = new PublicKey(REWARD_TOKEN);\n// \tconst { wallet } = useWallet();\n// \tconst anchorWallet = useAnchorWallet();\n// \tconst solInputRef = useRef<HTMLInputElement>(null);\n// \tconst connection = new anchor.web3.Connection(\n// \t\tNEXT_PUBLIC_SOLANA_NETWORK == \"devnet\"\n// \t\t\t? \"https://api.devnet.solana.com\"\n// \t\t\t: \"https://metaplex.mainnet.rpcpool.com\"\n// \t);\n// \tconst [showLoader, setShowLoader] = useState(false);\n// \tconst [globalData, setGlobalData] = useState<any>();\n// \tconst getTokenWallet = async (\n// \t\twallet: anchor.web3.PublicKey,\n// \t\tmint: anchor.web3.PublicKey\n// \t) => {\n// \t\treturn (\n// \t\t\tawait anchor.web3.PublicKey.findProgramAddress(\n// \t\t\t\t[wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n// \t\t\t\tASSOCIATED_TOKEN_PROGRAM_ID\n// \t\t\t)\n// \t\t)[0];\n// \t};\n// \tconst getGlobalData = async (anchorWallet: AnchorWallet) => {\n// \t\tconst programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID!);\n// \t\tconst idl = STAKE_CONTRACT_IDL as anchor.Idl;\n// \t\tconst confirmOption: ConfirmOptions = {\n// \t\t\tcommitment: \"finalized\",\n// \t\t\tpreflightCommitment: \"finalized\",\n// \t\t\tskipPreflight: false,\n// \t\t};\n// \t\tlet provider = new anchor.Provider(connection, anchorWallet, confirmOption);\n// \t\tlet program = new anchor.Program(idl, programId, provider);\n// \t\tconst [globalAuthority] = await PublicKey.findProgramAddress(\n// \t\t\t[Buffer.from(GLOBAL_AUTHORITY_SEED)],\n// \t\t\tprogram.programId\n// \t\t);\n// \t\tconsole.log(globalAuthority.toString())\n// \t\tconst globalAuthorityInfo = await program.account.globalPool.fetch(globalAuthority);\n// \t\tconsole.log(\"globalAuthorityInfo\", globalAuthorityInfo)\n// \t\treturn globalAuthorityInfo;\n// \t}\n// \tuseEffect(() => {\n// \t\ttry {\n// \t\t\tif (anchorWallet) {\n// \t\t\t\tsetShowLoader(true);\n// \t\t\t\tgetGlobalData(anchorWallet).then((res) => {\n// \t\t\t\t\tsetGlobalData(res);\n// \t\t\t\t\tsetShowLoader(false);\n// \t\t\t\t}).catch(() => {\n// \t\t\t\t\tsetShowLoader(false);\n// \t\t\t\t})\n// \t\t\t}\n// \t\t} catch (error) {\n// \t\t\tconsole.log(error);\n// \t\t}\n// \t}, [anchorWallet]);\n// \tconst sendTransaction = async (\n// \t\ttransaction: Transaction,\n// \t\tsigners: Keypair[],\n// \t\twallet: AnchorWallet\n// \t) => {\n// \t\ttry {\n// \t\t\ttransaction.feePayer = wallet.publicKey;\n// \t\t\ttransaction.recentBlockhash = (\n// \t\t\t\tawait connection.getRecentBlockhash(\"max\")\n// \t\t\t).blockhash;\n// \t\t\tawait transaction.setSigners(\n// \t\t\t\twallet.publicKey,\n// \t\t\t\t...signers.map((s) => s.publicKey)\n// \t\t\t);\n// \t\t\tif (signers.length != 0) await transaction.partialSign(...signers);\n// \t\t\tconst signedTransaction = await wallet.signTransaction(transaction);\n// \t\t\tlet hash = await connection.sendRawTransaction(\n// \t\t\t\tawait signedTransaction.serialize()\n// \t\t\t);\n// \t\t\tawait connection.confirmTransaction(hash);\n// \t\t\ttoast.success(\"Transaction succeed.\");\n// \t\t} catch (err) {\n// \t\t\tconsole.log('error', err)\n// \t\t\ttoast.error(\"Transaction failed. Please try again.\");\n// \t\t}\n// \t};\n// \tasync function withFindOrInitAssociatedTokenAccount(\n// \t\ttransaction: Transaction,\n// \t\tconnection: Connection,\n// \t\tmint: PublicKey,\n// \t\towner: PublicKey,\n// \t\tpayer: PublicKey,\n// \t\tallowOwnerOffCurve: boolean\n// \t) {\n// \t\tconst associatedAddress = await splToken.Token.getAssociatedTokenAddress(\n// \t\t\tsplToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n// \t\t\tsplToken.TOKEN_PROGRAM_ID,\n// \t\t\tmint,\n// \t\t\towner,\n// \t\t\tallowOwnerOffCurve\n// \t\t);\n// \t\tconst account = await connection.getAccountInfo(associatedAddress);\n// \t\tif (!account) {\n// \t\t\ttransaction.add(\n// \t\t\t\tsplToken.Token.createAssociatedTokenAccountInstruction(\n// \t\t\t\t\tsplToken.ASSOCIATED_TOKEN_PROGRAM_ID,\n// \t\t\t\t\tsplToken.TOKEN_PROGRAM_ID,\n// \t\t\t\t\tmint,\n// \t\t\t\t\tassociatedAddress,\n// \t\t\t\t\towner,\n// \t\t\t\t\tpayer\n// \t\t\t\t)\n// \t\t\t);\n// \t\t}\n// \t\treturn associatedAddress;\n// \t}\n// \tconst onAllocateReward = async () => {\n// \t\ttry {\n// \t\t\tif (anchorWallet) {\n// \t\t\t\tconst signersMatrix: any[] = [];\n// \t\t\t\tconst instructionsMatrix: any[] = [];\n// \t\t\t\tconst programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID!);\n// \t\t\t\tconst idl = STAKE_CONTRACT_IDL as anchor.Idl;\n// \t\t\t\tconst confirmOption: ConfirmOptions = {\n// \t\t\t\t\tcommitment: \"finalized\",\n// \t\t\t\t\tpreflightCommitment: \"finalized\",\n// \t\t\t\t\tskipPreflight: false,\n// \t\t\t\t};\n// \t\t\t\tlet provider = new anchor.Provider(connection, anchorWallet, confirmOption);\n// \t\t\t\tlet program = new anchor.Program(idl, programId, provider);\n// \t\t\t\tconst [globalAuthority] = await PublicKey.findProgramAddress(\n// \t\t\t\t\t[Buffer.from(GLOBAL_AUTHORITY_SEED)],\n// \t\t\t\t\tprogram.programId\n// \t\t\t\t);\n// \t\t\t\tconsole.log(globalAuthority.toString())\n// \t\t\t\tconst globalAuthorityInfo = await program.account.globalPool.fetch(globalAuthority);\n// \t\t\t\tconsole.log(\"globalAuthorityInfo\", globalAuthorityInfo)\n// \t\t\t\t// if (allocated_month == current_month && allocated_year == current_year) {\n// \t\t\t\t// \ttoast.error(\"You already allocate reward to users\");\n// \t\t\t\t// \treturn\n// \t\t\t\t// }\n// \t\t\t\tlet keypair = anchor.web3.Keypair.generate();\n// \t\t\t\tlet signers = [keypair];\n// \t\t\t\tlet instructions = [];\n// \t\t\t\tinstructions.push(\n// \t\t\t\t\tprogram.instruction.initDurationPoint({\n// \t\t\t\t\t\taccounts: {\n// \t\t\t\t\t\t\tglobalAuthority: globalAuthority\n// \t\t\t\t\t\t},\n// \t\t\t\t\t})\n// \t\t\t\t);\n// \t\t\t\tsignersMatrix.push(signers);\n// \t\t\t\tinstructionsMatrix.push(instructions);\n// \t\t\t\tconst users = (await axios.get(`${BACKEND_URL}/user/getUsers`)).data.users;\n// \t\t\t\t// const users = await User.find().sort({ x: 1 });\n// \t\t\t\tconsole.log('users', users)\n// \t\t\t\tconst signersMatrix2 = [];\n// \t\t\t\tconst instructionsMatrix2 = [];\n// \t\t\t\tfor (let i = 0; i < users.length; i++) {\n// \t\t\t\t\tlet [userPool] = await PublicKey.findProgramAddress(\n// \t\t\t\t\t\t[Buffer.from(USER_POOL_SEED), new PublicKey(users[i].wallet).toBuffer()],\n// \t\t\t\t\t\tprogram.programId\n// \t\t\t\t\t);\n// \t\t\t\t\tlet userPoolInfo = null;\n// \t\t\t\t\ttry {\n// \t\t\t\t\t\tuserPoolInfo = await program.account.userPool.fetch(userPool);\n// \t\t\t\t\t} catch { }\n// \t\t\t\t\tconsole.log('userPoolInfo', userPoolInfo)\n// \t\t\t\t\tif (userPoolInfo) {\n// \t\t\t\t\t\tlet keypair1 = anchor.web3.Keypair.generate();\n// \t\t\t\t\t\tlet signers1 = [keypair1];\n// \t\t\t\t\t\tlet instructions1 = [];\n// \t\t\t\t\t\tconsole.log('instructions push')\n// \t\t\t\t\t\tinstructions1.push(\n// \t\t\t\t\t\t\tprogram.instruction.calcDurationBonus({\n// \t\t\t\t\t\t\t\taccounts: {\n// \t\t\t\t\t\t\t\t\tglobalAuthority: globalAuthority,\n// \t\t\t\t\t\t\t\t\tuserPool: userPool,\n// \t\t\t\t\t\t\t\t},\n// \t\t\t\t\t\t\t})\n// \t\t\t\t\t\t);\n// \t\t\t\t\t\tsignersMatrix.push(signers1);\n// \t\t\t\t\t\tinstructionsMatrix.push(instructions1);\n// \t\t\t\t\t\tlet keypair2 = anchor.web3.Keypair.generate();\n// \t\t\t\t\t\tlet signers2 = [keypair2];\n// \t\t\t\t\t\tlet instructions2: any[] = [];\n// \t\t\t\t\t\tconsole.log('instructions push')\n// \t\t\t\t\t\tinstructions2.push(\n// \t\t\t\t\t\t\tprogram.instruction.calcDailyReward({\n// \t\t\t\t\t\t\t\taccounts: {\n// \t\t\t\t\t\t\t\t\tglobalAuthority: globalAuthority,\n// \t\t\t\t\t\t\t\t\tuserPool: userPool,\n// \t\t\t\t\t\t\t\t},\n// \t\t\t\t\t\t\t})\n// \t\t\t\t\t\t);\n// \t\t\t\t\t\tsignersMatrix2.push(signers2);\n// \t\t\t\t\t\tinstructionsMatrix2.push(instructions2);\n// \t\t\t\t\t}\n// \t\t\t\t}\n// \t\t\t\tlet keypair3 = anchor.web3.Keypair.generate();\n// \t\t\t\tlet signers3 = [keypair3];\n// \t\t\t\tlet instructions3 = [];\n// \t\t\t\tinstructions3.push(\n// \t\t\t\t\tprogram.instruction.initDurationPoint({\n// \t\t\t\t\t\taccounts: {\n// \t\t\t\t\t\t\tglobalAuthority: globalAuthority\n// \t\t\t\t\t\t},\n// \t\t\t\t\t})\n// \t\t\t\t);\n// \t\t\t\tsignersMatrix2.push(signers3);\n// \t\t\t\tinstructionsMatrix2.push(instructions3);\n// \t\t\t\tconsole.log('instructionsMatrix', [...instructionsMatrix, ...instructionsMatrix2]);\n// \t\t\t\tconsole.log('signersMatrix', [...signersMatrix, ...signersMatrix2]);\n// \t\t\t\tawait sendTransactions(\n// \t\t\t\t\tconnection,\n// \t\t\t\t\tanchorWallet,\n// \t\t\t\t\t[...instructionsMatrix, ...instructionsMatrix2],\n// \t\t\t\t\t[...signersMatrix, ...signersMatrix2],\n// \t\t\t\t);\n// \t\t\t\ttoast.success(\"The reward is allocated to users\")\n// \t\t\t\t// await sendTransaction(transaction, [], anchorWallet);\n// \t\t\t}\n// \t\t}\n// \t\tcatch (e) {\n// \t\t\tconsole.error(e)\n// \t\t}\n// \t}\n// \tconst onDepositToken = async () => {\n// \t\tconsole.log(\"test\", solInputRef.current?.value)\n// \t\tif (!solInputRef.current?.value || Number(solInputRef.current?.value) <= 0) {\n// \t\t\ttoast.error(\"Input sol amount, please.\");\n// \t\t\treturn;\n// \t\t}\n// \t\ttry {\n// \t\t\tif (anchorWallet) {\n// \t\t\t\tsetShowLoader(true);\n// \t\t\t\tconst programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID!);\n// \t\t\t\tconst idl = STAKE_CONTRACT_IDL as anchor.Idl;\n// \t\t\t\tconst confirmOption: ConfirmOptions = {\n// \t\t\t\t\tcommitment: \"finalized\",\n// \t\t\t\t\tpreflightCommitment: \"finalized\",\n// \t\t\t\t\tskipPreflight: false,\n// \t\t\t\t};\n// \t\t\t\tlet provider = new anchor.Provider(connection, anchorWallet, confirmOption);\n// \t\t\t\tlet program = new anchor.Program(idl, programId, provider);\n// \t\t\t\tconst [globalAuthority] = await PublicKey.findProgramAddress(\n// \t\t\t\t\t[Buffer.from(GLOBAL_AUTHORITY_SEED)],\n// \t\t\t\t\tprogram.programId\n// \t\t\t\t);\n// \t\t\t\tvar myToken = new Token(\n// \t\t\t\t\tconnection,\n// \t\t\t\t\trewardMint,\n// \t\t\t\t\tTOKEN_PROGRAM_ID,\n// \t\t\t\t\twallet as any\n// \t\t\t\t);\n// \t\t\t\tlet sourceRewardAccount = await getTokenWallet(anchorWallet.publicKey, rewardMint);\n// \t\t\t\tconsole.log('source', sourceRewardAccount.toString());\n// \t\t\t\tconsole.log('global', globalAuthority.toString());\n// \t\t\t\tlet srcAccInfo = await myToken.getAccountInfo(sourceRewardAccount);\n// \t\t\t\tif (!srcAccInfo) {\n// \t\t\t\t\treturn;\n// \t\t\t\t}\n// \t\t\t\tlet transaction = new Transaction();\n// \t\t\t\tlet destRewardAccount = await withFindOrInitAssociatedTokenAccount(\n// \t\t\t\t\ttransaction,\n// \t\t\t\t\tprovider.connection,\n// \t\t\t\t\trewardMint,\n// \t\t\t\t\tglobalAuthority,\n// \t\t\t\t\tanchorWallet.publicKey,\n// \t\t\t\t\ttrue\n// \t\t\t\t);\n// \t\t\t\tconsole.log('dest', destRewardAccount.toString());\n// \t\t\t\tconsole.log('lamports for sol', web3.LAMPORTS_PER_SOL);\n// \t\t\t\tlet signers: Keypair[] = [];\n// \t\t\t\ttransaction.add(\n// \t\t\t\t\tawait program.instruction.depositToken(new anchor.BN(REWARD_TOKEN_DECIMALS * Number(solInputRef.current?.value)), {\n// \t\t\t\t\t\taccounts: {\n// \t\t\t\t\t\t\tglobalAuthority: globalAuthority,\n// \t\t\t\t\t\t\towner: anchorWallet.publicKey,\n// \t\t\t\t\t\t\tsourceAccount: sourceRewardAccount,\n// \t\t\t\t\t\t\tdestAccount: destRewardAccount,\n// \t\t\t\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n// \t\t\t\t\t\t},\n// \t\t\t\t\t})\n// \t\t\t\t);\n// \t\t\t\tawait sendTransaction(transaction, signers, anchorWallet);\n// \t\t\t\tsetShowLoader(false);\n// \t\t\t}\n// \t\t}\n// \t\tcatch (e) {\n// \t\t\tconsole.error(e)\n// \t\t\tsetShowLoader(false);\n// \t\t}\n// \t}\n// \tconst onWithdrawToken = async () => {\n// \t\tconsole.log(\"test\", solInputRef.current?.value)\n// \t\tif (!solInputRef.current?.value || Number(solInputRef.current?.value) <= 0) {\n// \t\t\ttoast.error(\"Input sol amount, please.\");\n// \t\t\treturn;\n// \t\t}\n// \t\ttry {\n// \t\t\tif (anchorWallet) {\n// \t\t\t\tsetShowLoader(true);\n// \t\t\t\tconst programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID!);\n// \t\t\t\tconst idl = STAKE_CONTRACT_IDL as anchor.Idl;\n// \t\t\t\tconst confirmOption: ConfirmOptions = {\n// \t\t\t\t\tcommitment: \"finalized\",\n// \t\t\t\t\tpreflightCommitment: \"finalized\",\n// \t\t\t\t\tskipPreflight: false,\n// \t\t\t\t};\n// \t\t\t\tlet provider = new anchor.Provider(connection, anchorWallet, confirmOption);\n// \t\t\t\tlet program = new anchor.Program(idl, programId, provider);\n// \t\t\t\tconst [globalAuthority, globalBump] = await PublicKey.findProgramAddress(\n// \t\t\t\t\t[Buffer.from(GLOBAL_AUTHORITY_SEED)],\n// \t\t\t\t\tprogram.programId\n// \t\t\t\t);\n// \t\t\t\tvar myToken = new Token(\n// \t\t\t\t\tconnection,\n// \t\t\t\t\trewardMint,\n// \t\t\t\t\tTOKEN_PROGRAM_ID,\n// \t\t\t\t\twallet as any\n// \t\t\t\t);\n// \t\t\t\tlet sourceRewardAccount = await getTokenWallet(globalAuthority, rewardMint);\n// \t\t\t\tlet srcAccInfo = await myToken.getAccountInfo(sourceRewardAccount);\n// \t\t\t\tif (!srcAccInfo) {\n// \t\t\t\t\treturn;\n// \t\t\t\t}\n// \t\t\t\tlet transaction = new Transaction();\n// \t\t\t\tlet destRewardAccount = await withFindOrInitAssociatedTokenAccount(\n// \t\t\t\t\ttransaction,\n// \t\t\t\t\tprovider.connection,\n// \t\t\t\t\trewardMint,\n// \t\t\t\t\tanchorWallet.publicKey,\n// \t\t\t\t\tanchorWallet.publicKey,\n// \t\t\t\t\ttrue\n// \t\t\t\t);\n// \t\t\t\tconsole.log('src', sourceRewardAccount.toString());\n// \t\t\t\tconsole.log('dest', destRewardAccount.toString());\n// \t\t\t\tconsole.log('lamports for sol', web3.LAMPORTS_PER_SOL);\n// \t\t\t\tlet signers: Keypair[] = [];\n// \t\t\t\ttransaction.add(\n// \t\t\t\t\tawait program.instruction.withdrawToken(new anchor.BN(REWARD_TOKEN_DECIMALS * Number(solInputRef.current?.value)), {\n// \t\t\t\t\t\taccounts: {\n// \t\t\t\t\t\t\tglobalAuthority: globalAuthority,\n// \t\t\t\t\t\t\towner: anchorWallet.publicKey,\n// \t\t\t\t\t\t\tsourceAccount: sourceRewardAccount,\n// \t\t\t\t\t\t\tdestAccount: destRewardAccount,\n// \t\t\t\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n// \t\t\t\t\t\t},\n// \t\t\t\t\t})\n// \t\t\t\t);\n// \t\t\t\tawait sendTransaction(transaction, signers, anchorWallet);\n// \t\t\t\tsetShowLoader(false);\n// \t\t\t}\n// \t\t}\n// \t\tcatch (e) {\n// \t\t\tconsole.error(e)\n// \t\t\tsetShowLoader(false);\n// \t\t}\n// \t}\n// \tconst [minSidebar, setMinSiderBar] = useState(false);\n// \treturn (\n// \t\t<div className=\"flex h-full-screen\">\n// \t\t\t{(showLoader) && <Loader text={\"Loading\"} />}\n// \t\t\t<Sidebar minSidebar={minSidebar} setMinSiderBar={setMinSiderBar} activeLink=\"admin\" />\n// \t\t\t<div className=\"w-full h-full\">\n// \t\t\t\t<Navbar setMinSiderBar={setMinSiderBar} minSidebar={minSidebar}  globalData={undefined}/>\n// \t\t\t\t<div className=\"text-center\">\n// \t\t\t\t\t<h1 className=\"text-4xl mt-5\">Admin</h1>\n// \t\t\t\t\t<div>\n// \t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\n// \t\t\t\t\t\t\t<span>Total Staked NFTs : {globalData ? globalData.stakedCount : 0}</span>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\n// \t\t\t\t\t\t\t<span>durationPoint : {globalData ? globalData.durationPoint.toNumber() : 0}</span>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\n// \t\t\t\t\t\t\t<span>rarityPoint : {globalData ? globalData.rarityPoint.toNumber() : 0}</span>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\n// \t\t\t\t\t\t\t<span>accountVerifyPoint : {globalData ? globalData.accountVerifyPoint.toNumber() : 0}</span>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\n// \t\t\t\t\t\t\t<span>Available Token : {globalData ? Math.floor(globalData.availableTokenAmount.toNumber()/REWARD_TOKEN_DECIMALS * 100) / 100 : 0}</span>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\n// \t\t\t\t\t\t\t<span>Allocated Token : {globalData ? Math.floor(globalData.allocatedTokenAmount.toNumber()/REWARD_TOKEN_DECIMALS * 100) / 100 : 0}</span>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\n// \t\t\t\t\t\t\t<span>Claimed Token : {globalData ? Math.floor(globalData.claimedTokenAmount.toNumber()/REWARD_TOKEN_DECIMALS * 100) / 100  : 0}</span>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\n// \t\t\t\t\t\t\t<input ref={solInputRef} type=\"number\" className=\"py-3 px-3 rounded-2xl sm:w-1/4 w-full outline-none bg-LightPurple uppercase\" placeholder=\"Input Token Amount\" />\n// \t\t\t\t\t\t\t<button onClick={onDepositToken} className=\"sm:ml-5 ml-2 mt-2 sm:mt-0 bg-gradient-to-r from-primary to-secondary py-3 px-8 rounded-2xl cursor-pointer\">\n// \t\t\t\t\t\t\t\tDeposit\n// \t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t\t<button onClick={onWithdrawToken} className=\"sm:ml-5 ml-2 mt-2 sm:mt-0 bg-gradient-to-r from-primary to-secondary py-3 px-8 rounded-2xl cursor-pointer\">\n// \t\t\t\t\t\t\t\tWithdraw\n// \t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t\t<button onClick={onAllocateReward} className=\"sm:ml-5 ml-2 mt-2 sm:mt-0 bg-gradient-to-r from-primary to-secondary py-3 px-8 rounded-2xl cursor-pointer mr-5\">\n// \t\t\t\t\t\t\t\tAllocate Rewards\n// \t\t\t\t\t\t\t</button>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t</div>\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// };\n// export default Admin;","map":{"version":3,"names":[],"sources":["D:/software/o5o BNB/o5o-staking-frontend/src/pages/Admin.tsx"],"sourcesContent":["// /* eslint-disable array-callback-return */\r\n// /* eslint-disable no-lone-blocks */\r\n// import { web3 } from \"@project-serum/anchor\";\r\n// import { AnchorWallet, useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\r\n// import { WalletMultiButton, } from \"@solana/wallet-adapter-react-ui\";\r\n// import axios from \"axios\";\r\n// import { useEffect, useRef, useState } from \"react\";\r\n// import toast from \"react-hot-toast\";\r\n// import { BACKEND_URL, GLOBAL_AUTHORITY_SEED, NEXT_PUBLIC_SOLANA_NETWORK, NEXT_PUBLIC_STAKE_CONTRACT_ID, REWARD_TOKEN, USER_POOL_SEED } from '../constant/env';\r\n// import * as anchor from \"@project-serum/anchor\";\r\n// import { ConfirmOptions, Connection, Keypair, PublicKey, Transaction } from \"@solana/web3.js\";\r\n// import { STAKE_CONTRACT_IDL } from \"../constant/contract\";\r\n// import { sendTransactions } from \"../helpers/sol/connection\";\r\n// import * as splToken from \"@solana/spl-token\";\r\n// import Loader from \"../components/loader/Loader\";\r\n// import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n// import { REWARD_TOKEN_DECIMALS } from './../constant/env';\r\n// import Sidebar from \"../components/views/Sidebar\";\r\n// import Navbar from \"../components/views/Navbar\";\r\n\r\n\r\n// const Admin = () => {\r\n\r\n// \tconst rewardMint = new PublicKey(REWARD_TOKEN);\r\n\r\n// \tconst { wallet } = useWallet();\r\n\r\n// \tconst anchorWallet = useAnchorWallet();\r\n\r\n// \tconst solInputRef = useRef<HTMLInputElement>(null);\r\n\r\n// \tconst connection = new anchor.web3.Connection(\r\n// \t\tNEXT_PUBLIC_SOLANA_NETWORK == \"devnet\"\r\n// \t\t\t? \"https://api.devnet.solana.com\"\r\n// \t\t\t: \"https://metaplex.mainnet.rpcpool.com\"\r\n// \t);\r\n\r\n// \tconst [showLoader, setShowLoader] = useState(false);\r\n// \tconst [globalData, setGlobalData] = useState<any>();\r\n\r\n// \tconst getTokenWallet = async (\r\n// \t\twallet: anchor.web3.PublicKey,\r\n// \t\tmint: anchor.web3.PublicKey\r\n// \t) => {\r\n// \t\treturn (\r\n// \t\t\tawait anchor.web3.PublicKey.findProgramAddress(\r\n// \t\t\t\t[wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n// \t\t\t\tASSOCIATED_TOKEN_PROGRAM_ID\r\n// \t\t\t)\r\n// \t\t)[0];\r\n// \t};\r\n\r\n// \tconst getGlobalData = async (anchorWallet: AnchorWallet) => {\r\n// \t\tconst programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID!);\r\n// \t\tconst idl = STAKE_CONTRACT_IDL as anchor.Idl;\r\n\r\n// \t\tconst confirmOption: ConfirmOptions = {\r\n// \t\t\tcommitment: \"finalized\",\r\n// \t\t\tpreflightCommitment: \"finalized\",\r\n// \t\t\tskipPreflight: false,\r\n// \t\t};\r\n// \t\tlet provider = new anchor.Provider(connection, anchorWallet, confirmOption);\r\n// \t\tlet program = new anchor.Program(idl, programId, provider);\r\n\r\n// \t\tconst [globalAuthority] = await PublicKey.findProgramAddress(\r\n// \t\t\t[Buffer.from(GLOBAL_AUTHORITY_SEED)],\r\n// \t\t\tprogram.programId\r\n// \t\t);\r\n\r\n// \t\tconsole.log(globalAuthority.toString())\r\n\r\n// \t\tconst globalAuthorityInfo = await program.account.globalPool.fetch(globalAuthority);\r\n\r\n// \t\tconsole.log(\"globalAuthorityInfo\", globalAuthorityInfo)\r\n\r\n// \t\treturn globalAuthorityInfo;\r\n// \t}\r\n\r\n// \tuseEffect(() => {\r\n// \t\ttry {\r\n// \t\t\tif (anchorWallet) {\r\n// \t\t\t\tsetShowLoader(true);\r\n// \t\t\t\tgetGlobalData(anchorWallet).then((res) => {\r\n// \t\t\t\t\tsetGlobalData(res);\r\n// \t\t\t\t\tsetShowLoader(false);\r\n// \t\t\t\t}).catch(() => {\r\n// \t\t\t\t\tsetShowLoader(false);\r\n// \t\t\t\t})\r\n// \t\t\t}\r\n// \t\t} catch (error) {\r\n// \t\t\tconsole.log(error);\r\n// \t\t}\r\n// \t}, [anchorWallet]);\r\n\r\n// \tconst sendTransaction = async (\r\n// \t\ttransaction: Transaction,\r\n// \t\tsigners: Keypair[],\r\n// \t\twallet: AnchorWallet\r\n// \t) => {\r\n// \t\ttry {\r\n// \t\t\ttransaction.feePayer = wallet.publicKey;\r\n// \t\t\ttransaction.recentBlockhash = (\r\n// \t\t\t\tawait connection.getRecentBlockhash(\"max\")\r\n// \t\t\t).blockhash;\r\n// \t\t\tawait transaction.setSigners(\r\n// \t\t\t\twallet.publicKey,\r\n// \t\t\t\t...signers.map((s) => s.publicKey)\r\n// \t\t\t);\r\n// \t\t\tif (signers.length != 0) await transaction.partialSign(...signers);\r\n// \t\t\tconst signedTransaction = await wallet.signTransaction(transaction);\r\n// \t\t\tlet hash = await connection.sendRawTransaction(\r\n// \t\t\t\tawait signedTransaction.serialize()\r\n// \t\t\t);\r\n// \t\t\tawait connection.confirmTransaction(hash);\r\n// \t\t\ttoast.success(\"Transaction succeed.\");\r\n// \t\t} catch (err) {\r\n// \t\t\tconsole.log('error', err)\r\n// \t\t\ttoast.error(\"Transaction failed. Please try again.\");\r\n// \t\t}\r\n// \t};\r\n\r\n// \tasync function withFindOrInitAssociatedTokenAccount(\r\n// \t\ttransaction: Transaction,\r\n// \t\tconnection: Connection,\r\n// \t\tmint: PublicKey,\r\n// \t\towner: PublicKey,\r\n// \t\tpayer: PublicKey,\r\n// \t\tallowOwnerOffCurve: boolean\r\n// \t) {\r\n// \t\tconst associatedAddress = await splToken.Token.getAssociatedTokenAddress(\r\n// \t\t\tsplToken.ASSOCIATED_TOKEN_PROGRAM_ID,\r\n// \t\t\tsplToken.TOKEN_PROGRAM_ID,\r\n// \t\t\tmint,\r\n// \t\t\towner,\r\n// \t\t\tallowOwnerOffCurve\r\n// \t\t);\r\n// \t\tconst account = await connection.getAccountInfo(associatedAddress);\r\n// \t\tif (!account) {\r\n// \t\t\ttransaction.add(\r\n// \t\t\t\tsplToken.Token.createAssociatedTokenAccountInstruction(\r\n// \t\t\t\t\tsplToken.ASSOCIATED_TOKEN_PROGRAM_ID,\r\n// \t\t\t\t\tsplToken.TOKEN_PROGRAM_ID,\r\n// \t\t\t\t\tmint,\r\n// \t\t\t\t\tassociatedAddress,\r\n// \t\t\t\t\towner,\r\n// \t\t\t\t\tpayer\r\n// \t\t\t\t)\r\n// \t\t\t);\r\n// \t\t}\r\n// \t\treturn associatedAddress;\r\n// \t}\r\n\r\n// \tconst onAllocateReward = async () => {\r\n// \t\ttry {\r\n// \t\t\tif (anchorWallet) {\r\n// \t\t\t\tconst signersMatrix: any[] = [];\r\n// \t\t\t\tconst instructionsMatrix: any[] = [];\r\n\r\n// \t\t\t\tconst programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID!);\r\n// \t\t\t\tconst idl = STAKE_CONTRACT_IDL as anchor.Idl;\r\n\r\n// \t\t\t\tconst confirmOption: ConfirmOptions = {\r\n// \t\t\t\t\tcommitment: \"finalized\",\r\n// \t\t\t\t\tpreflightCommitment: \"finalized\",\r\n// \t\t\t\t\tskipPreflight: false,\r\n// \t\t\t\t};\r\n// \t\t\t\tlet provider = new anchor.Provider(connection, anchorWallet, confirmOption);\r\n// \t\t\t\tlet program = new anchor.Program(idl, programId, provider);\r\n\r\n// \t\t\t\tconst [globalAuthority] = await PublicKey.findProgramAddress(\r\n// \t\t\t\t\t[Buffer.from(GLOBAL_AUTHORITY_SEED)],\r\n// \t\t\t\t\tprogram.programId\r\n// \t\t\t\t);\r\n\r\n// \t\t\t\tconsole.log(globalAuthority.toString())\r\n\r\n// \t\t\t\tconst globalAuthorityInfo = await program.account.globalPool.fetch(globalAuthority);\r\n\r\n// \t\t\t\tconsole.log(\"globalAuthorityInfo\", globalAuthorityInfo)\r\n// \t\t\t\t// if (allocated_month == current_month && allocated_year == current_year) {\r\n// \t\t\t\t// \ttoast.error(\"You already allocate reward to users\");\r\n// \t\t\t\t// \treturn\r\n// \t\t\t\t// }\r\n\r\n// \t\t\t\tlet keypair = anchor.web3.Keypair.generate();\r\n// \t\t\t\tlet signers = [keypair];\r\n// \t\t\t\tlet instructions = [];\r\n// \t\t\t\tinstructions.push(\r\n// \t\t\t\t\tprogram.instruction.initDurationPoint({\r\n// \t\t\t\t\t\taccounts: {\r\n// \t\t\t\t\t\t\tglobalAuthority: globalAuthority\r\n// \t\t\t\t\t\t},\r\n// \t\t\t\t\t})\r\n// \t\t\t\t);\r\n// \t\t\t\tsignersMatrix.push(signers);\r\n// \t\t\t\tinstructionsMatrix.push(instructions);\r\n\r\n// \t\t\t\tconst users = (await axios.get(`${BACKEND_URL}/user/getUsers`)).data.users;\r\n// \t\t\t\t// const users = await User.find().sort({ x: 1 });\r\n// \t\t\t\tconsole.log('users', users)\r\n\r\n// \t\t\t\tconst signersMatrix2 = [];\r\n// \t\t\t\tconst instructionsMatrix2 = [];\r\n\r\n// \t\t\t\tfor (let i = 0; i < users.length; i++) {\r\n// \t\t\t\t\tlet [userPool] = await PublicKey.findProgramAddress(\r\n// \t\t\t\t\t\t[Buffer.from(USER_POOL_SEED), new PublicKey(users[i].wallet).toBuffer()],\r\n// \t\t\t\t\t\tprogram.programId\r\n// \t\t\t\t\t);\r\n// \t\t\t\t\tlet userPoolInfo = null;\r\n// \t\t\t\t\ttry {\r\n// \t\t\t\t\t\tuserPoolInfo = await program.account.userPool.fetch(userPool);\r\n// \t\t\t\t\t} catch { }\r\n\r\n// \t\t\t\t\tconsole.log('userPoolInfo', userPoolInfo)\r\n\r\n// \t\t\t\t\tif (userPoolInfo) {\r\n// \t\t\t\t\t\tlet keypair1 = anchor.web3.Keypair.generate();\r\n// \t\t\t\t\t\tlet signers1 = [keypair1];\r\n// \t\t\t\t\t\tlet instructions1 = [];\r\n\r\n// \t\t\t\t\t\tconsole.log('instructions push')\r\n// \t\t\t\t\t\tinstructions1.push(\r\n// \t\t\t\t\t\t\tprogram.instruction.calcDurationBonus({\r\n// \t\t\t\t\t\t\t\taccounts: {\r\n// \t\t\t\t\t\t\t\t\tglobalAuthority: globalAuthority,\r\n// \t\t\t\t\t\t\t\t\tuserPool: userPool,\r\n// \t\t\t\t\t\t\t\t},\r\n// \t\t\t\t\t\t\t})\r\n// \t\t\t\t\t\t);\r\n\r\n// \t\t\t\t\t\tsignersMatrix.push(signers1);\r\n// \t\t\t\t\t\tinstructionsMatrix.push(instructions1);\r\n\r\n// \t\t\t\t\t\tlet keypair2 = anchor.web3.Keypair.generate();\r\n// \t\t\t\t\t\tlet signers2 = [keypair2];\r\n// \t\t\t\t\t\tlet instructions2: any[] = [];\r\n\r\n// \t\t\t\t\t\tconsole.log('instructions push')\r\n// \t\t\t\t\t\tinstructions2.push(\r\n// \t\t\t\t\t\t\tprogram.instruction.calcDailyReward({\r\n// \t\t\t\t\t\t\t\taccounts: {\r\n// \t\t\t\t\t\t\t\t\tglobalAuthority: globalAuthority,\r\n// \t\t\t\t\t\t\t\t\tuserPool: userPool,\r\n// \t\t\t\t\t\t\t\t},\r\n// \t\t\t\t\t\t\t})\r\n// \t\t\t\t\t\t);\r\n\r\n// \t\t\t\t\t\tsignersMatrix2.push(signers2);\r\n// \t\t\t\t\t\tinstructionsMatrix2.push(instructions2);\r\n// \t\t\t\t\t}\r\n// \t\t\t\t}\r\n\r\n\r\n// \t\t\t\tlet keypair3 = anchor.web3.Keypair.generate();\r\n// \t\t\t\tlet signers3 = [keypair3];\r\n// \t\t\t\tlet instructions3 = [];\r\n// \t\t\t\tinstructions3.push(\r\n// \t\t\t\t\tprogram.instruction.initDurationPoint({\r\n// \t\t\t\t\t\taccounts: {\r\n// \t\t\t\t\t\t\tglobalAuthority: globalAuthority\r\n// \t\t\t\t\t\t},\r\n// \t\t\t\t\t})\r\n// \t\t\t\t);\r\n// \t\t\t\tsignersMatrix2.push(signers3);\r\n// \t\t\t\tinstructionsMatrix2.push(instructions3);\r\n\r\n// \t\t\t\tconsole.log('instructionsMatrix', [...instructionsMatrix, ...instructionsMatrix2]);\r\n// \t\t\t\tconsole.log('signersMatrix', [...signersMatrix, ...signersMatrix2]);\r\n// \t\t\t\tawait sendTransactions(\r\n// \t\t\t\t\tconnection,\r\n// \t\t\t\t\tanchorWallet,\r\n// \t\t\t\t\t[...instructionsMatrix, ...instructionsMatrix2],\r\n// \t\t\t\t\t[...signersMatrix, ...signersMatrix2],\r\n// \t\t\t\t);\r\n\r\n// \t\t\t\ttoast.success(\"The reward is allocated to users\")\r\n// \t\t\t\t// await sendTransaction(transaction, [], anchorWallet);\r\n// \t\t\t}\r\n// \t\t}\r\n// \t\tcatch (e) {\r\n// \t\t\tconsole.error(e)\r\n// \t\t}\r\n// \t}\r\n\r\n// \tconst onDepositToken = async () => {\r\n// \t\tconsole.log(\"test\", solInputRef.current?.value)\r\n// \t\tif (!solInputRef.current?.value || Number(solInputRef.current?.value) <= 0) {\r\n// \t\t\ttoast.error(\"Input sol amount, please.\");\r\n// \t\t\treturn;\r\n// \t\t}\r\n\r\n// \t\ttry {\r\n// \t\t\tif (anchorWallet) {\r\n// \t\t\t\tsetShowLoader(true);\r\n// \t\t\t\tconst programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID!);\r\n// \t\t\t\tconst idl = STAKE_CONTRACT_IDL as anchor.Idl;\r\n\r\n// \t\t\t\tconst confirmOption: ConfirmOptions = {\r\n// \t\t\t\t\tcommitment: \"finalized\",\r\n// \t\t\t\t\tpreflightCommitment: \"finalized\",\r\n// \t\t\t\t\tskipPreflight: false,\r\n// \t\t\t\t};\r\n// \t\t\t\tlet provider = new anchor.Provider(connection, anchorWallet, confirmOption);\r\n// \t\t\t\tlet program = new anchor.Program(idl, programId, provider);\r\n\r\n// \t\t\t\tconst [globalAuthority] = await PublicKey.findProgramAddress(\r\n// \t\t\t\t\t[Buffer.from(GLOBAL_AUTHORITY_SEED)],\r\n// \t\t\t\t\tprogram.programId\r\n// \t\t\t\t);\r\n\r\n// \t\t\t\tvar myToken = new Token(\r\n// \t\t\t\t\tconnection,\r\n// \t\t\t\t\trewardMint,\r\n// \t\t\t\t\tTOKEN_PROGRAM_ID,\r\n// \t\t\t\t\twallet as any\r\n// \t\t\t\t);\r\n// \t\t\t\tlet sourceRewardAccount = await getTokenWallet(anchorWallet.publicKey, rewardMint);\r\n// \t\t\t\tconsole.log('source', sourceRewardAccount.toString());\r\n// \t\t\t\tconsole.log('global', globalAuthority.toString());\r\n// \t\t\t\tlet srcAccInfo = await myToken.getAccountInfo(sourceRewardAccount);\r\n// \t\t\t\tif (!srcAccInfo) {\r\n// \t\t\t\t\treturn;\r\n// \t\t\t\t}\r\n\r\n// \t\t\t\tlet transaction = new Transaction();\r\n\r\n// \t\t\t\tlet destRewardAccount = await withFindOrInitAssociatedTokenAccount(\r\n// \t\t\t\t\ttransaction,\r\n// \t\t\t\t\tprovider.connection,\r\n// \t\t\t\t\trewardMint,\r\n// \t\t\t\t\tglobalAuthority,\r\n// \t\t\t\t\tanchorWallet.publicKey,\r\n// \t\t\t\t\ttrue\r\n// \t\t\t\t);\r\n\r\n// \t\t\t\tconsole.log('dest', destRewardAccount.toString());\r\n// \t\t\t\tconsole.log('lamports for sol', web3.LAMPORTS_PER_SOL);\r\n\r\n\r\n// \t\t\t\tlet signers: Keypair[] = [];\r\n// \t\t\t\ttransaction.add(\r\n// \t\t\t\t\tawait program.instruction.depositToken(new anchor.BN(REWARD_TOKEN_DECIMALS * Number(solInputRef.current?.value)), {\r\n// \t\t\t\t\t\taccounts: {\r\n// \t\t\t\t\t\t\tglobalAuthority: globalAuthority,\r\n// \t\t\t\t\t\t\towner: anchorWallet.publicKey,\r\n// \t\t\t\t\t\t\tsourceAccount: sourceRewardAccount,\r\n// \t\t\t\t\t\t\tdestAccount: destRewardAccount,\r\n// \t\t\t\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\r\n// \t\t\t\t\t\t},\r\n// \t\t\t\t\t})\r\n// \t\t\t\t);\r\n\r\n// \t\t\t\tawait sendTransaction(transaction, signers, anchorWallet);\r\n// \t\t\t\tsetShowLoader(false);\r\n// \t\t\t}\r\n// \t\t}\r\n// \t\tcatch (e) {\r\n// \t\t\tconsole.error(e)\r\n// \t\t\tsetShowLoader(false);\r\n// \t\t}\r\n// \t}\r\n\r\n// \tconst onWithdrawToken = async () => {\r\n// \t\tconsole.log(\"test\", solInputRef.current?.value)\r\n// \t\tif (!solInputRef.current?.value || Number(solInputRef.current?.value) <= 0) {\r\n// \t\t\ttoast.error(\"Input sol amount, please.\");\r\n// \t\t\treturn;\r\n// \t\t}\r\n\r\n// \t\ttry {\r\n// \t\t\tif (anchorWallet) {\r\n// \t\t\t\tsetShowLoader(true);\r\n// \t\t\t\tconst programId = new PublicKey(NEXT_PUBLIC_STAKE_CONTRACT_ID!);\r\n// \t\t\t\tconst idl = STAKE_CONTRACT_IDL as anchor.Idl;\r\n\r\n// \t\t\t\tconst confirmOption: ConfirmOptions = {\r\n// \t\t\t\t\tcommitment: \"finalized\",\r\n// \t\t\t\t\tpreflightCommitment: \"finalized\",\r\n// \t\t\t\t\tskipPreflight: false,\r\n// \t\t\t\t};\r\n// \t\t\t\tlet provider = new anchor.Provider(connection, anchorWallet, confirmOption);\r\n// \t\t\t\tlet program = new anchor.Program(idl, programId, provider);\r\n\r\n// \t\t\t\tconst [globalAuthority, globalBump] = await PublicKey.findProgramAddress(\r\n// \t\t\t\t\t[Buffer.from(GLOBAL_AUTHORITY_SEED)],\r\n// \t\t\t\t\tprogram.programId\r\n// \t\t\t\t);\r\n\r\n// \t\t\t\tvar myToken = new Token(\r\n// \t\t\t\t\tconnection,\r\n// \t\t\t\t\trewardMint,\r\n// \t\t\t\t\tTOKEN_PROGRAM_ID,\r\n// \t\t\t\t\twallet as any\r\n// \t\t\t\t);\r\n// \t\t\t\tlet sourceRewardAccount = await getTokenWallet(globalAuthority, rewardMint);\r\n// \t\t\t\tlet srcAccInfo = await myToken.getAccountInfo(sourceRewardAccount);\r\n// \t\t\t\tif (!srcAccInfo) {\r\n// \t\t\t\t\treturn;\r\n// \t\t\t\t}\r\n\r\n// \t\t\t\tlet transaction = new Transaction();\r\n\r\n// \t\t\t\tlet destRewardAccount = await withFindOrInitAssociatedTokenAccount(\r\n// \t\t\t\t\ttransaction,\r\n// \t\t\t\t\tprovider.connection,\r\n// \t\t\t\t\trewardMint,\r\n// \t\t\t\t\tanchorWallet.publicKey,\r\n// \t\t\t\t\tanchorWallet.publicKey,\r\n// \t\t\t\t\ttrue\r\n// \t\t\t\t);\r\n\r\n// \t\t\t\tconsole.log('src', sourceRewardAccount.toString());\r\n// \t\t\t\tconsole.log('dest', destRewardAccount.toString());\r\n// \t\t\t\tconsole.log('lamports for sol', web3.LAMPORTS_PER_SOL);\r\n\r\n// \t\t\t\tlet signers: Keypair[] = [];\r\n// \t\t\t\ttransaction.add(\r\n// \t\t\t\t\tawait program.instruction.withdrawToken(new anchor.BN(REWARD_TOKEN_DECIMALS * Number(solInputRef.current?.value)), {\r\n// \t\t\t\t\t\taccounts: {\r\n// \t\t\t\t\t\t\tglobalAuthority: globalAuthority,\r\n// \t\t\t\t\t\t\towner: anchorWallet.publicKey,\r\n// \t\t\t\t\t\t\tsourceAccount: sourceRewardAccount,\r\n// \t\t\t\t\t\t\tdestAccount: destRewardAccount,\r\n// \t\t\t\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\r\n// \t\t\t\t\t\t},\r\n// \t\t\t\t\t})\r\n// \t\t\t\t);\r\n\r\n// \t\t\t\tawait sendTransaction(transaction, signers, anchorWallet);\r\n// \t\t\t\tsetShowLoader(false);\r\n// \t\t\t}\r\n// \t\t}\r\n// \t\tcatch (e) {\r\n// \t\t\tconsole.error(e)\r\n// \t\t\tsetShowLoader(false);\r\n// \t\t}\r\n// \t}\r\n// \tconst [minSidebar, setMinSiderBar] = useState(false);\r\n\t\r\n// \treturn (\r\n// \t\t<div className=\"flex h-full-screen\">\r\n// \t\t\t{(showLoader) && <Loader text={\"Loading\"} />}\r\n// \t\t\t<Sidebar minSidebar={minSidebar} setMinSiderBar={setMinSiderBar} activeLink=\"admin\" />\r\n// \t\t\t<div className=\"w-full h-full\">\r\n// \t\t\t\t<Navbar setMinSiderBar={setMinSiderBar} minSidebar={minSidebar}  globalData={undefined}/>\r\n// \t\t\t\t<div className=\"text-center\">\r\n// \t\t\t\t\t<h1 className=\"text-4xl mt-5\">Admin</h1>\r\n// \t\t\t\t\t<div>\r\n// \t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\r\n// \t\t\t\t\t\t\t<span>Total Staked NFTs : {globalData ? globalData.stakedCount : 0}</span>\r\n// \t\t\t\t\t\t</div>\r\n// \t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\r\n// \t\t\t\t\t\t\t<span>durationPoint : {globalData ? globalData.durationPoint.toNumber() : 0}</span>\r\n// \t\t\t\t\t\t</div>\r\n// \t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\r\n// \t\t\t\t\t\t\t<span>rarityPoint : {globalData ? globalData.rarityPoint.toNumber() : 0}</span>\r\n// \t\t\t\t\t\t</div>\r\n// \t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\r\n// \t\t\t\t\t\t\t<span>accountVerifyPoint : {globalData ? globalData.accountVerifyPoint.toNumber() : 0}</span>\r\n// \t\t\t\t\t\t</div>\r\n// \t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\r\n// \t\t\t\t\t\t\t<span>Available Token : {globalData ? Math.floor(globalData.availableTokenAmount.toNumber()/REWARD_TOKEN_DECIMALS * 100) / 100 : 0}</span>\r\n// \t\t\t\t\t\t</div>\r\n// \t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\r\n// \t\t\t\t\t\t\t<span>Allocated Token : {globalData ? Math.floor(globalData.allocatedTokenAmount.toNumber()/REWARD_TOKEN_DECIMALS * 100) / 100 : 0}</span>\r\n// \t\t\t\t\t\t</div>\r\n// \t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\r\n// \t\t\t\t\t\t\t<span>Claimed Token : {globalData ? Math.floor(globalData.claimedTokenAmount.toNumber()/REWARD_TOKEN_DECIMALS * 100) / 100  : 0}</span>\r\n// \t\t\t\t\t\t</div>\r\n// \t\t\t\t\t\t<div className=\"flex items-center ml-5 py-5\">\r\n// \t\t\t\t\t\t\t<input ref={solInputRef} type=\"number\" className=\"py-3 px-3 rounded-2xl sm:w-1/4 w-full outline-none bg-LightPurple uppercase\" placeholder=\"Input Token Amount\" />\r\n// \t\t\t\t\t\t\t<button onClick={onDepositToken} className=\"sm:ml-5 ml-2 mt-2 sm:mt-0 bg-gradient-to-r from-primary to-secondary py-3 px-8 rounded-2xl cursor-pointer\">\r\n// \t\t\t\t\t\t\t\tDeposit\r\n// \t\t\t\t\t\t\t</button>\r\n// \t\t\t\t\t\t\t<button onClick={onWithdrawToken} className=\"sm:ml-5 ml-2 mt-2 sm:mt-0 bg-gradient-to-r from-primary to-secondary py-3 px-8 rounded-2xl cursor-pointer\">\r\n// \t\t\t\t\t\t\t\tWithdraw\r\n// \t\t\t\t\t\t\t</button>\r\n// \t\t\t\t\t\t\t<button onClick={onAllocateReward} className=\"sm:ml-5 ml-2 mt-2 sm:mt-0 bg-gradient-to-r from-primary to-secondary py-3 px-8 rounded-2xl cursor-pointer mr-5\">\r\n// \t\t\t\t\t\t\t\tAllocate Rewards\r\n// \t\t\t\t\t\t\t</button>\r\n// \t\t\t\t\t\t</div>\r\n// \t\t\t\t\t</div>\r\n// \t\t\t\t</div>\r\n// \t\t\t</div>\r\n// \t\t</div>\r\n// \t);\r\n// };\r\n\r\n// export default Admin;\r\n"],"mappings},"metadata":{},"sourceType":"module"}