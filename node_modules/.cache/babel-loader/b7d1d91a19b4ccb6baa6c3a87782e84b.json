{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidMintError, TokenInvalidOwnerError } from '../errors.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { getAccount } from '../state/account.js';\nimport { getAssociatedTokenAddress } from '../state/mint.js';\n/**\n * Retrieve the associated token account, or create it if it doesn't exist\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint associated with the account to set or verify\n * @param owner                    Owner of the account to set or verify\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param commitment               Desired level of commitment for querying the state\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\n\nexport async function getOrCreateAssociatedTokenAccount(connection, payer, mint, owner) {\n  let allowOwnerOffCurve = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  let commitment = arguments.length > 5 ? arguments[5] : undefined;\n  let confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : TOKEN_PROGRAM_ID;\n  let associatedTokenProgramId = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : ASSOCIATED_TOKEN_PROGRAM_ID;\n  const associatedToken = await getAssociatedTokenAddress(mint, owner, allowOwnerOffCurve, programId, associatedTokenProgramId); // This is the optimal logic, considering TX fee, client-side computation, RPC roundtrips and guaranteed idempotent.\n  // Sadly we can't do this atomically.\n\n  let account;\n\n  try {\n    account = await getAccount(connection, associatedToken, commitment, programId);\n  } catch (error) {\n    // TokenAccountNotFoundError can be possible if the associated address has already received some lamports,\n    // becoming a system account. Assuming program derived addressing is safe, this is the only case for the\n    // TokenInvalidAccountOwnerError in this code path.\n    if (error instanceof TokenAccountNotFoundError || error instanceof TokenInvalidAccountOwnerError) {\n      // As this isn't atomic, it's possible others can create associated accounts meanwhile.\n      try {\n        const transaction = new Transaction().add(createAssociatedTokenAccountInstruction(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n        await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n      } catch (error) {// Ignore all errors; for now there is no API-compatible way to selectively ignore the expected\n        // instruction error if the associated account exists already.\n      } // Now this should always succeed\n\n\n      account = await getAccount(connection, associatedToken, commitment, programId);\n    } else {\n      throw error;\n    }\n  }\n\n  if (!account.mint.equals(mint)) throw new TokenInvalidMintError();\n  if (!account.owner.equals(owner)) throw new TokenInvalidOwnerError();\n  return account;\n}","map":{"version":3,"sources":["../../../src/actions/getOrCreateAssociatedTokenAccount.ts"],"names":[],"mappings":"AACA,SAAS,yBAAT,EAAoC,WAApC,QAAuD,iBAAvD;AACA,SAAS,2BAAT,EAAsC,gBAAtC,QAA8D,iBAA9D;AACA,SACI,yBADJ,EAEI,6BAFJ,EAGI,qBAHJ,EAII,sBAJJ,QAKO,cALP;AAMA,SAAS,uCAAT,QAAwD,2CAAxD;AAEA,SAAS,UAAT,QAA2B,qBAA3B;AACA,SAAS,yBAAT,QAA0C,kBAA1C;AAEA;;;;;;;;;;;;;;AAcG;;AACH,OAAO,eAAe,iCAAf,CACH,UADG,EAEH,KAFG,EAGH,IAHG,EAIH,KAJG,EASmD;EAAA,IAJtD,kBAIsD,uEAJjC,KAIiC;EAAA,IAHtD,UAGsD;EAAA,IAFtD,cAEsD;EAAA,IADtD,SACsD,uEAD1C,gBAC0C;EAAA,IAAtD,wBAAsD,uEAA3B,2BAA2B;EAEtD,MAAM,eAAe,GAAG,MAAM,yBAAyB,CACnD,IADmD,EAEnD,KAFmD,EAGnD,kBAHmD,EAInD,SAJmD,EAKnD,wBALmD,CAAvD,CAFsD,CAUtD;EACA;;EACA,IAAI,OAAJ;;EACA,IAAI;IACA,OAAO,GAAG,MAAM,UAAU,CAAC,UAAD,EAAa,eAAb,EAA8B,UAA9B,EAA0C,SAA1C,CAA1B;EACH,CAFD,CAEE,OAAO,KAAP,EAAuB;IACrB;IACA;IACA;IACA,IAAI,KAAK,YAAY,yBAAjB,IAA8C,KAAK,YAAY,6BAAnE,EAAkG;MAC9F;MACA,IAAI;QACA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,uCAAuC,CACnC,KAAK,CAAC,SAD6B,EAEnC,eAFmC,EAGnC,KAHmC,EAInC,IAJmC,EAKnC,SALmC,EAMnC,wBANmC,CADvB,CAApB;QAWA,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,CAA1B,EAAmC,cAAnC,CAA/B;MACH,CAbD,CAaE,OAAO,KAAP,EAAuB,CACrB;QACA;MACH,CAlB6F,CAoB9F;;;MACA,OAAO,GAAG,MAAM,UAAU,CAAC,UAAD,EAAa,eAAb,EAA8B,UAA9B,EAA0C,SAA1C,CAA1B;IACH,CAtBD,MAsBO;MACH,MAAM,KAAN;IACH;EACJ;;EAED,IAAI,CAAC,OAAO,CAAC,IAAR,CAAa,MAAb,CAAoB,IAApB,CAAL,EAAgC,MAAM,IAAI,qBAAJ,EAAN;EAChC,IAAI,CAAC,OAAO,CAAC,KAAR,CAAc,MAAd,CAAqB,KAArB,CAAL,EAAkC,MAAM,IAAI,sBAAJ,EAAN;EAElC,OAAO,OAAP;AACH","sourceRoot":"","sourcesContent":["import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidMintError, TokenInvalidOwnerError, } from '../errors.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { getAccount } from '../state/account.js';\nimport { getAssociatedTokenAddress } from '../state/mint.js';\n/**\n * Retrieve the associated token account, or create it if it doesn't exist\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint associated with the account to set or verify\n * @param owner                    Owner of the account to set or verify\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param commitment               Desired level of commitment for querying the state\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\nexport async function getOrCreateAssociatedTokenAccount(connection, payer, mint, owner, allowOwnerOffCurve = false, commitment, confirmOptions, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    const associatedToken = await getAssociatedTokenAddress(mint, owner, allowOwnerOffCurve, programId, associatedTokenProgramId);\n    // This is the optimal logic, considering TX fee, client-side computation, RPC roundtrips and guaranteed idempotent.\n    // Sadly we can't do this atomically.\n    let account;\n    try {\n        account = await getAccount(connection, associatedToken, commitment, programId);\n    }\n    catch (error) {\n        // TokenAccountNotFoundError can be possible if the associated address has already received some lamports,\n        // becoming a system account. Assuming program derived addressing is safe, this is the only case for the\n        // TokenInvalidAccountOwnerError in this code path.\n        if (error instanceof TokenAccountNotFoundError || error instanceof TokenInvalidAccountOwnerError) {\n            // As this isn't atomic, it's possible others can create associated accounts meanwhile.\n            try {\n                const transaction = new Transaction().add(createAssociatedTokenAccountInstruction(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n                await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n            }\n            catch (error) {\n                // Ignore all errors; for now there is no API-compatible way to selectively ignore the expected\n                // instruction error if the associated account exists already.\n            }\n            // Now this should always succeed\n            account = await getAccount(connection, associatedToken, commitment, programId);\n        }\n        else {\n            throw error;\n        }\n    }\n    if (!account.mint.equals(mint))\n        throw new TokenInvalidMintError();\n    if (!account.owner.equals(owner))\n        throw new TokenInvalidOwnerError();\n    return account;\n}\n//# sourceMappingURL=getOrCreateAssociatedTokenAccount.js.map"]},"metadata":{},"sourceType":"module"}