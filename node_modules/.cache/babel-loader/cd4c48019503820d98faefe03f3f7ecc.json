{"ast":null,"code":"import { SolanaMobileWalletAdapterWalletName } from '@solana-mobile/wallet-adapter-mobile';\nimport { WalletReadyState } from '@solana/wallet-adapter-base';\nexport var Environment;\n\n(function (Environment) {\n  Environment[Environment[\"DESKTOP_WEB\"] = 0] = \"DESKTOP_WEB\";\n  Environment[Environment[\"MOBILE_WEB\"] = 1] = \"MOBILE_WEB\";\n})(Environment || (Environment = {}));\n\nfunction isWebView(userAgentString) {\n  return /(WebView|Version\\/.+(Chrome)\\/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)|; wv\\).+(Chrome)\\/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+))/i.test(userAgentString);\n}\n\nexport default function getEnvironment(_ref) {\n  let {\n    adapters: adapters,\n    userAgentString: userAgentString\n  } = _ref;\n\n  if (adapters.some(adapter => adapter.name !== SolanaMobileWalletAdapterWalletName && adapter.readyState === WalletReadyState.Installed)) {\n    /**\n     * There are only two ways a browser extension adapter should be able to reach `Installed` status:\n     *\n     *     1. Its browser extension is installed.\n     *     2. The app is running on a mobile wallet's in-app browser.\n     *\n     * In either case, we consider the environment to be desktop-like.\n     */\n    return Environment.DESKTOP_WEB;\n  }\n\n  if (userAgentString && // Step 1: Check whether we're on a platform that supports MWA at all.\n  /android/i.test(userAgentString) && // Step 2: Determine that we are *not* running in a WebView.\n  !isWebView(userAgentString)) {\n    return Environment.MOBILE_WEB;\n  } else {\n    return Environment.DESKTOP_WEB;\n  }\n}","map":{"version":3,"sources":["../../src/getEnvironment.ts"],"names":[],"mappings":"AAAA,SAAS,mCAAT,QAAoD,sCAApD;AACA,SAAuB,gBAAvB,QAA+C,6BAA/C;AAEA,OAAA,IAAY,WAAZ;;AAAA,CAAA,UAAY,WAAZ,EAAuB;EACnB,WAAA,CAAA,WAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;EACA,WAAA,CAAA,WAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;AACH,CAHD,EAAY,WAAW,KAAX,WAAW,GAAA,EAAA,CAAvB;;AAUA,SAAS,SAAT,CAAmB,eAAnB,EAA0C;EACtC,OAAO,0GAA0G,IAA1G,CACH,eADG,CAAP;AAGH;;AAED,eAAc,SAAU,cAAV,OAA8D;EAAA,IAArC;IAAE,QAAQ,EAAR,QAAF;IAAY,eAAe,EAAf;EAAZ,CAAqC;;EACxE,IACI,QAAQ,CAAC,IAAT,CACK,OAAD,IACI,OAAO,CAAC,IAAR,KAAiB,mCAAjB,IACA,OAAO,CAAC,UAAR,KAAuB,gBAAgB,CAAC,SAHhD,CADJ,EAME;IACE;;;;;;;AAOG;IACH,OAAO,WAAW,CAAC,WAAnB;EACH;;EACD,IACI,eAAe,IACf;EACA,WAAW,IAAX,CAAgB,eAAhB,CAFA,IAGA;EACA,CAAC,SAAS,CAAC,eAAD,CALd,EAME;IACE,OAAO,WAAW,CAAC,UAAnB;EACH,CARD,MAQO;IACH,OAAO,WAAW,CAAC,WAAnB;EACH;AACJ","sourceRoot":"","sourcesContent":["import { SolanaMobileWalletAdapterWalletName } from '@solana-mobile/wallet-adapter-mobile';\nimport { WalletReadyState } from '@solana/wallet-adapter-base';\nexport var Environment;\n(function (Environment) {\n    Environment[Environment[\"DESKTOP_WEB\"] = 0] = \"DESKTOP_WEB\";\n    Environment[Environment[\"MOBILE_WEB\"] = 1] = \"MOBILE_WEB\";\n})(Environment || (Environment = {}));\nfunction isWebView(userAgentString) {\n    return /(WebView|Version\\/.+(Chrome)\\/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)|; wv\\).+(Chrome)\\/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+))/i.test(userAgentString);\n}\nexport default function getEnvironment({ adapters, userAgentString }) {\n    if (adapters.some((adapter) => adapter.name !== SolanaMobileWalletAdapterWalletName &&\n        adapter.readyState === WalletReadyState.Installed)) {\n        /**\n         * There are only two ways a browser extension adapter should be able to reach `Installed` status:\n         *\n         *     1. Its browser extension is installed.\n         *     2. The app is running on a mobile wallet's in-app browser.\n         *\n         * In either case, we consider the environment to be desktop-like.\n         */\n        return Environment.DESKTOP_WEB;\n    }\n    if (userAgentString &&\n        // Step 1: Check whether we're on a platform that supports MWA at all.\n        /android/i.test(userAgentString) &&\n        // Step 2: Determine that we are *not* running in a WebView.\n        !isWebView(userAgentString)) {\n        return Environment.MOBILE_WEB;\n    }\n    else {\n        return Environment.DESKTOP_WEB;\n    }\n}\n//# sourceMappingURL=getEnvironment.js.map"]},"metadata":{},"sourceType":"module"}