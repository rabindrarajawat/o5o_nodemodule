{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createMintToInstruction } from '../instructions/mintTo.js';\nimport { getSigners } from './internal.js';\n/**\n * Mint tokens to an account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param destination    Address of the account to mint to\n * @param authority      Minting authority\n * @param amount         Amount to mint\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function mintTo(connection, payer, mint, destination, authority, amount) {\n  let multiSigners = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n  let confirmOptions = arguments.length > 7 ? arguments[7] : undefined;\n  let programId = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : TOKEN_PROGRAM_ID;\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(createMintToInstruction(mint, destination, authorityPublicKey, amount, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"sources":["../../../src/actions/mintTo.ts"],"names":[],"mappings":"AACA,SAAS,yBAAT,EAAoC,WAApC,QAAuD,iBAAvD;AACA,SAAS,gBAAT,QAAiC,iBAAjC;AACA,SAAS,uBAAT,QAAwC,2BAAxC;AACA,SAAS,UAAT,QAA2B,eAA3B;AAEA;;;;;;;;;;;;;;AAcG;;AACH,OAAO,eAAe,MAAf,CACH,UADG,EAEH,KAFG,EAGH,IAHG,EAIH,WAJG,EAKH,SALG,EAMH,MANG,EASyB;EAAA,IAF5B,YAE4B,uEAFH,EAEG;EAAA,IAD5B,cAC4B;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B,MAAM,CAAC,kBAAD,EAAqB,OAArB,IAAgC,UAAU,CAAC,SAAD,EAAY,YAAZ,CAAhD;EAEA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,uBAAuB,CAAC,IAAD,EAAO,WAAP,EAAoB,kBAApB,EAAwC,MAAxC,EAAgD,YAAhD,EAA8D,SAA9D,CADP,CAApB;EAIA,OAAO,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,EAAQ,GAAG,OAAX,CAA1B,EAA+C,cAA/C,CAAtC;AACH","sourceRoot":"","sourcesContent":["import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createMintToInstruction } from '../instructions/mintTo.js';\nimport { getSigners } from './internal.js';\n/**\n * Mint tokens to an account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param destination    Address of the account to mint to\n * @param authority      Minting authority\n * @param amount         Amount to mint\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function mintTo(connection, payer, mint, destination, authority, amount, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n    const transaction = new Transaction().add(createMintToInstruction(mint, destination, authorityPublicKey, amount, multiSigners, programId));\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n//# sourceMappingURL=mintTo.js.map"]},"metadata":{},"sourceType":"module"}