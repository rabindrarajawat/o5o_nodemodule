{"ast":null,"code":"import { createCancelInstruction, createAuctioneerCancelInstruction, createCancelListingReceiptInstruction } from '@metaplex-foundation/mpl-auction-house';\nimport { SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport { AUCTIONEER_PRICE } from '../constants.mjs';\nimport { AuctioneerAuthorityRequiredError } from '../errors.mjs';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs';\nimport { isSigner } from '../../../types/Signer.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'CancelListingOperation';\n/**\n * Cancels the user's listing in the given auction house.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .cancelListing({ auctionHouse, listing };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst cancelListingOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst cancelListingOperationHandler = {\n  handle: async (operation, metaplex, scope) => cancelListingBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions)\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Cancels the user's listing in the given auction house.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .cancelListing({ auctionHouse, listing });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst cancelListingBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    auctionHouse,\n    auctioneerAuthority,\n    listing\n  } = params; // Data.\n\n  const {\n    asset,\n    sellerAddress,\n    receiptAddress,\n    tradeStateAddress,\n    price,\n    tokens\n  } = listing;\n  const {\n    address: auctionHouseAddress,\n    authorityAddress,\n    feeAccountAddress,\n    hasAuctioneer\n  } = auctionHouse;\n\n  if (hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  const buyerPrice = hasAuctioneer ? AUCTIONEER_PRICE : price.basisPoints;\n  const accounts = {\n    wallet: sellerAddress,\n    tokenAccount: asset.token.address,\n    tokenMint: asset.address,\n    authority: authorityAddress,\n    auctionHouse: auctionHouseAddress,\n    auctionHouseFeeAccount: feeAccountAddress,\n    tradeState: tradeStateAddress\n  }; // Args.\n\n  const args = {\n    buyerPrice,\n    tokenSize: tokens.basisPoints\n  }; // Cancel Listing Instruction.\n\n  let cancelListingInstruction = createCancelInstruction(accounts, args);\n\n  if (auctioneerAuthority) {\n    cancelListingInstruction = createAuctioneerCancelInstruction({ ...accounts,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n        auctionHouse: auctionHouseAddress,\n        auctioneerAuthority: auctioneerAuthority.publicKey,\n        programs\n      })\n    }, args);\n  } // Signers.\n\n\n  const cancelSigners = [auctioneerAuthority].filter(isSigner);\n  return TransactionBuilder.make().setFeePayer(payer) // Cancel Listing.\n  .add({\n    instruction: cancelListingInstruction,\n    signers: cancelSigners,\n    key: params.instructionKey ?? 'cancelListing'\n  }) // Cancel Listing Receipt.\n  .when(Boolean(receiptAddress), builder => builder.add({\n    instruction: createCancelListingReceiptInstruction({\n      receipt: receiptAddress,\n      instruction: SYSVAR_INSTRUCTIONS_PUBKEY\n    }),\n    signers: [],\n    key: 'cancelListingReceipt'\n  }));\n};\n\nexport { cancelListingBuilder, cancelListingOperation, cancelListingOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/operations/cancelListing.ts"],"names":["Key","cancelListingOperation","useOperation","cancelListingOperationHandler","handle","operation","metaplex","scope","cancelListingBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","auctionHouse","auctioneerAuthority","listing","asset","sellerAddress","receiptAddress","tradeStateAddress","price","tokens","address","auctionHouseAddress","authorityAddress","feeAccountAddress","hasAuctioneer","AuctioneerAuthorityRequiredError","buyerPrice","AUCTIONEER_PRICE","basisPoints","accounts","wallet","tokenAccount","token","tokenMint","authority","auctionHouseFeeAccount","tradeState","args","tokenSize","cancelListingInstruction","createCancelInstruction","createAuctioneerCancelInstruction","publicKey","ahAuctioneerPda","pdas","auctioneer","cancelSigners","filter","isSigner","TransactionBuilder","make","setFeePayer","add","instruction","signers","key","instructionKey","when","Boolean","builder","createCancelListingReceiptInstruction","receipt","SYSVAR_INSTRUCTIONS_PUBKEY"],"mappings":"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","sourcesContent":["import {\n  CancelInstructionAccounts,\n  createAuctioneerCancelInstruction,\n  createCancelInstruction,\n  createCancelListingReceiptInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AUCTIONEER_PRICE } from '../constants';\nimport { AuctioneerAuthorityRequiredError } from '../errors';\nimport { AuctionHouse, Listing } from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  isSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Pda,\n  Signer,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CancelListingOperation' as const;\n\n/**\n * Cancels the user's listing in the given auction house.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .cancelListing({ auctionHouse, listing };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const cancelListingOperation = useOperation<CancelListingOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CancelListingOperation = Operation<\n  typeof Key,\n  CancelListingInput,\n  CancelListingOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CancelListingInput = {\n  /** The Auction House in which to cancel Bid. */\n  auctionHouse: Pick<\n    AuctionHouse,\n    'address' | 'authorityAddress' | 'feeAccountAddress' | 'hasAuctioneer'\n  >;\n\n  /**\n   * The Listing to cancel.\n   * We only need a subset of the `Listing` model but we\n   * need enough information regarding its settings to know how\n   * to cancel it.\n   *\n   * This includes, its asset, seller address, price, receipt address etc.\n   */\n  listing: Pick<\n    Listing,\n    | 'asset'\n    | 'price'\n    | 'receiptAddress'\n    | 'sellerAddress'\n    | 'tokens'\n    | 'tradeStateAddress'\n  >;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CancelListingOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const cancelListingOperationHandler: OperationHandler<CancelListingOperation> =\n  {\n    handle: async (\n      operation: CancelListingOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) =>\n      cancelListingBuilder(metaplex, operation.input, scope).sendAndConfirm(\n        metaplex,\n        scope.confirmOptions\n      ),\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CancelListingBuilderParams = Omit<\n  CancelListingInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CancelListingBuilderContext = Omit<CancelListingOutput, 'response'>;\n\n/**\n * Cancels the user's listing in the given auction house.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .cancelListing({ auctionHouse, listing });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const cancelListingBuilder = (\n  metaplex: Metaplex,\n  params: CancelListingBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<CancelListingBuilderContext> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { auctionHouse, auctioneerAuthority, listing } = params;\n\n  // Data.\n  const {\n    asset,\n    sellerAddress,\n    receiptAddress,\n    tradeStateAddress,\n    price,\n    tokens,\n  } = listing;\n  const {\n    address: auctionHouseAddress,\n    authorityAddress,\n    feeAccountAddress,\n    hasAuctioneer,\n  } = auctionHouse;\n\n  if (hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  const buyerPrice = hasAuctioneer ? AUCTIONEER_PRICE : price.basisPoints;\n\n  const accounts: CancelInstructionAccounts = {\n    wallet: sellerAddress,\n    tokenAccount: asset.token.address,\n    tokenMint: asset.address,\n    authority: authorityAddress,\n    auctionHouse: auctionHouseAddress,\n    auctionHouseFeeAccount: feeAccountAddress,\n    tradeState: tradeStateAddress,\n  };\n\n  // Args.\n  const args = {\n    buyerPrice,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Cancel Listing Instruction.\n  let cancelListingInstruction = createCancelInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    cancelListingInstruction = createAuctioneerCancelInstruction(\n      {\n        ...accounts,\n        auctioneerAuthority: auctioneerAuthority.publicKey,\n        ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n          auctionHouse: auctionHouseAddress,\n          auctioneerAuthority: auctioneerAuthority.publicKey,\n          programs,\n        }),\n      },\n      args\n    );\n  }\n\n  // Signers.\n  const cancelSigners = [auctioneerAuthority].filter(isSigner);\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Cancel Listing.\n      .add({\n        instruction: cancelListingInstruction,\n        signers: cancelSigners,\n        key: params.instructionKey ?? 'cancelListing',\n      })\n\n      // Cancel Listing Receipt.\n      .when(Boolean(receiptAddress), (builder) =>\n        builder.add({\n          instruction: createCancelListingReceiptInstruction({\n            receipt: receiptAddress as Pda,\n            instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n          }),\n          signers: [],\n          key: 'cancelListingReceipt',\n        })\n      )\n  );\n};\n"]},"metadata":{},"sourceType":"module"}