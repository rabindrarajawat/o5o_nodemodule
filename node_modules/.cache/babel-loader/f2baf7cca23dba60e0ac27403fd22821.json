{"ast":null,"code":"import { toMetadataAccount } from '../accounts.mjs';\nimport { useOperation } from '../../../types/Operation.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftByMetadataOperation';\n/**\n * Finds an NFT or an SFT by its metadata address.\n *\n * ```ts\n * const nft = await metaplex\n *   .nfts()\n *   .findByMetadata({ metadata };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst findNftByMetadataOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst findNftByMetadataOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const metadata = toMetadataAccount(await metaplex.rpc().getAccount(operation.input.metadata));\n    scope.throwIfCanceled();\n    return metaplex.nfts().findByMint({ ...operation.input,\n      mintAddress: metadata.data.mint\n    }, scope);\n  }\n};\nexport { findNftByMetadataOperation, findNftByMetadataOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/nftModule/operations/findNftByMetadata.ts"],"names":["Key","findNftByMetadataOperation","useOperation","findNftByMetadataOperationHandler","handle","operation","metaplex","scope","metadata","toMetadataAccount","rpc","getAccount","input","throwIfCanceled","nfts","findByMint","mintAddress","data","mint"],"mappings":";6DAWA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,4BAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,0BAA0B,GACrCC,YAAY,CAA6BF,GAA7B,C;AAEd;AACA;AACA;AACA;;AAuDA;AACA;AACA;AACA;;AACO,MAAMG,iCAA+E,GAC1F;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI+B;IACrC,MAAMC,QAAQ,GAAGC,iBAAiB,CAChC,MAAMH,QAAQ,CAACI,GAATJ,GAAeK,UAAfL,CAA0BD,SAAS,CAACO,KAAVP,CAAgBG,QAA1CF,CAD0B,CAAlC;IAGAC,KAAK,CAACM,eAANN;IAEA,OAAOD,QAAQ,CACZQ,IADIR,GAEJS,UAFIT,CAGH,EAAE,GAAGD,SAAS,CAACO,KAAf;MAAsBI,WAAW,EAAER,QAAQ,CAACS,IAATT,CAAcU;IAAjD,CAHGZ,EAIHC,KAJGD,CAAP;EAMF;AAjBF,CADK","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { toMetadataAccount } from '../accounts';\nimport { Nft, NftWithToken, Sft, SftWithToken } from '../models';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftByMetadataOperation' as const;\n\n/**\n * Finds an NFT or an SFT by its metadata address.\n *\n * ```ts\n * const nft = await metaplex\n *   .nfts()\n *   .findByMetadata({ metadata };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findNftByMetadataOperation =\n  useOperation<FindNftByMetadataOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindNftByMetadataOperation = Operation<\n  typeof Key,\n  FindNftByMetadataInput,\n  FindNftByMetadataOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindNftByMetadataInput = {\n  /** The address of the metadata account. */\n  metadata: PublicKey;\n\n  /**\n   * The explicit token account to fetch with the NFT or SFT.\n   *\n   * If provided, and if that address is valid, the NFT or SFT returned\n   * will be of the type `NftWithToken` or `SftWithToken` respectively.\n   *\n   * Alternatively, you may use the `tokenOwner` parameter to fetch the\n   * associated token account.\n   *\n   * @defaultValue Defaults to not fetching the token account.\n   */\n  tokenAddress?: PublicKey;\n\n  /**\n   * The associated token account to fetch with the NFT or SFT.\n   *\n   * If provided, and if that account exists, the NFT or SFT returned\n   * will be of the type `NftWithToken` or `SftWithToken` respectively.\n   *\n   * Alternatively, you may use the `tokenAddress` parameter to fetch the\n   * token account at an explicit address.\n   *\n   * @defaultValue Defaults to not fetching the associated token account.\n   */\n  tokenOwner?: PublicKey;\n\n  /**\n   * Whether or not we should fetch the JSON Metadata for the NFT or SFT.\n   *\n   * @defaultValue `true`\n   */\n  loadJsonMetadata?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindNftByMetadataOutput = Nft | Sft | NftWithToken | SftWithToken;\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findNftByMetadataOperationHandler: OperationHandler<FindNftByMetadataOperation> =\n  {\n    handle: async (\n      operation: FindNftByMetadataOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindNftByMetadataOutput> => {\n      const metadata = toMetadataAccount(\n        await metaplex.rpc().getAccount(operation.input.metadata)\n      );\n      scope.throwIfCanceled();\n\n      return metaplex\n        .nfts()\n        .findByMint(\n          { ...operation.input, mintAddress: metadata.data.mint },\n          scope\n        );\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}