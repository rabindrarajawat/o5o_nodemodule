{"ast":null,"code":"import { toSft, isSftWithToken, toSftWithToken } from './Sft.mjs';\nimport assert from '../../../utils/assert.mjs';\n/** @group Model Helpers */\n\nconst isNft = value => typeof value === 'object' && value.model === 'nft';\n/** @group Model Helpers */\n\n\nfunction assertNft(value) {\n  assert(isNft(value), `Expected Nft model`);\n}\n/** @group Model Helpers */\n\n\nconst toNft = (metadata, mint, edition) => ({ ...toSft(metadata, mint),\n  model: 'nft',\n  edition\n});\n/** @group Models */\n\n/** @group Model Helpers */\n\n\nconst isNftWithToken = value => isNft(value) && 'token' in value;\n/** @group Model Helpers */\n\n\nfunction assertNftWithToken(value) {\n  assert(isNftWithToken(value), `Expected Nft model with token`);\n}\n/** @group Model Helpers */\n\n\nfunction assertNftOrSftWithToken(value) {\n  assert(isNftWithToken(value) || isSftWithToken(value), `Expected Nft or Sft model with token`);\n}\n/** @group Model Helpers */\n\n\nconst toNftWithToken = (metadata, mint, edition, token) => ({ ...toSftWithToken(metadata, mint, token),\n  model: 'nft',\n  edition\n});\n\nexport { assertNft, assertNftOrSftWithToken, assertNftWithToken, isNft, isNftWithToken, toNft, toNftWithToken };","map":{"version":3,"sources":["../../../../../src/plugins/nftModule/models/Nft.ts"],"names":["isNft","value","model","assertNft","assert","toNft","metadata","mint","edition","toSft","isNftWithToken","assertNftWithToken","assertNftOrSftWithToken","isSftWithToken","toNftWithToken","token","toSftWithToken"],"mappings":";;AAmCA;;AACaA,MAAAA,KAAK,GAAIC,KAAU,IAC9B,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAND,KAAgB,KADlCD;AAGb;;;AACO,SAASG,SAAT,CAAmBF,KAAnB,EAAqD;EAC1DG,MAAM,CAACJ,KAAK,CAACC,KAAD,CAAN,EAAgB,oBAAhB,CAANG;AACF;AAEA;;;AACO,MAAMC,KAAK,GAAG,CACnBC,QADmB,EAEnBC,IAFmB,EAGnBC,OAHmB,MAIV,EACT,GAAGC,KAAK,CAACH,QAAD,EAAWC,IAAX,CADC;EAETL,KAAK,EAAE,KAFE;EAGTM;AAHS,CAJU,CAAd;AAUP;;AAGA;;;AACaE,MAAAA,cAAc,GAAIT,KAAU,IACvCD,KAAK,CAACC,KAAD,CAALD,IAAgB,WAAWC,KADhBS;AAGb;;;AACO,SAASC,kBAAT,CAA4BV,KAA5B,EAAuE;EAC5EG,MAAM,CAACM,cAAc,CAACT,KAAD,CAAf,EAAyB,+BAAzB,CAANG;AACF;AAEA;;;AACO,SAASQ,uBAAT,CACLX,KADK,EAEyC;EAC9CG,MAAM,CACJM,cAAc,CAACT,KAAD,CAAdS,IAAyBG,cAAc,CAACZ,KAAD,CADnC,EAEH,sCAFG,CAANG;AAIF;AAEA;;;AACO,MAAMU,cAAc,GAAG,CAC5BR,QAD4B,EAE5BC,IAF4B,EAG5BC,OAH4B,EAI5BO,KAJ4B,MAKV,EAClB,GAAGC,cAAc,CAACV,QAAD,EAAWC,IAAX,EAAiBQ,KAAjB,CADC;EAElBb,KAAK,EAAE,KAFW;EAGlBM;AAHkB,CALU,CAAvB","sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport type { Mint, Token } from '../../tokenModule';\nimport type { Metadata } from './Metadata';\nimport type { NftEdition } from './NftEdition';\nimport { isSftWithToken, SftWithToken, toSft, toSftWithToken } from './Sft';\nimport { assert } from '@/utils';\nimport type { Pda } from '@/types';\n\n/**\n * This model captures all the relevant information about an NFT\n * in the Solana blockchain. That includes the NFT's metadata account,\n * its mint account, its edition account and its off-chain JSON metadata.\n *\n * @group Models\n */\nexport type Nft = Omit<Metadata, 'model' | 'address' | 'mintAddress'> & {\n  /** A model identifier to distinguish models in the SDK. */\n  readonly model: 'nft';\n\n  /** The mint address of the NFT. */\n  readonly address: PublicKey;\n\n  /** The metadata address of the NFT. */\n  readonly metadataAddress: Pda;\n\n  /** The mint account of the NFT. */\n  readonly mint: Mint;\n\n  /**\n   * Defines whether the NFT is an original edition or a\n   * printed edition and provides additional information accordingly.\n   */\n  readonly edition: NftEdition;\n};\n\n/** @group Model Helpers */\nexport const isNft = (value: any): value is Nft =>\n  typeof value === 'object' && value.model === 'nft';\n\n/** @group Model Helpers */\nexport function assertNft(value: any): asserts value is Nft {\n  assert(isNft(value), `Expected Nft model`);\n}\n\n/** @group Model Helpers */\nexport const toNft = (\n  metadata: Metadata,\n  mint: Mint,\n  edition: NftEdition\n): Nft => ({\n  ...toSft(metadata, mint),\n  model: 'nft',\n  edition,\n});\n\n/** @group Models */\nexport type NftWithToken = Nft & { token: Token };\n\n/** @group Model Helpers */\nexport const isNftWithToken = (value: any): value is NftWithToken =>\n  isNft(value) && 'token' in value;\n\n/** @group Model Helpers */\nexport function assertNftWithToken(value: any): asserts value is NftWithToken {\n  assert(isNftWithToken(value), `Expected Nft model with token`);\n}\n\n/** @group Model Helpers */\nexport function assertNftOrSftWithToken(\n  value: any\n): asserts value is NftWithToken | SftWithToken {\n  assert(\n    isNftWithToken(value) || isSftWithToken(value),\n    `Expected Nft or Sft model with token`\n  );\n}\n\n/** @group Model Helpers */\nexport const toNftWithToken = (\n  metadata: Metadata,\n  mint: Mint,\n  edition: NftEdition,\n  token: Token\n): NftWithToken => ({\n  ...toSftWithToken(metadata, mint, token),\n  model: 'nft',\n  edition,\n});\n"]},"metadata":{},"sourceType":"module"}