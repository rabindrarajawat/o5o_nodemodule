{"ast":null,"code":"var _jsxFileName = \"D:\\\\software\\\\o5o BNB\\\\o5o-staking-frontend\\\\src\\\\pages\\\\Mint.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport Sidebar from \"../components/views/Sidebar\";\nimport Navbar from \"../components/views/Navbar\";\nimport Bears from \"../components/assets/bears.svg\";\nimport useWalletNfts from \"../hooks/use-wallet-nfts\";\nimport styled from \"styled-components\";\nimport { Container, Snackbar } from \"@mui/material\";\nimport Alert from \"@mui/lab/Alert\";\nimport { Connection } from \"@solana/web3.js\";\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport { awaitTransactionSignatureConfirmation, createAccountsForMint, getCandyMachineState, getCollectionPDA, mintOneToken } from \"../candy-machine-new\";\nimport { getAtaForMint, toDate } from \"../utils\";\nimport { MintButton } from \"../MintButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: #fff;\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\nconst MintContainer = styled.div`\n  background:#fff;\n`; // add your owns styles here\n\nconst Mint = props => {\n  _s();\n\n  const [minSidebar, setMinSiderBar] = useState(false);\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [increaseValue, setIncreaseValue] = useState(1);\n  const {\n    isLoadingWalletNfts: isLoadingWalletNfts,\n    walletSlimeNfts: walletSlimeNfts,\n    setWalletSlimeNfts: setWalletSlimeNfts,\n    getWalletSlimeNfts: getWalletSlimeNfts\n  } = useWalletNfts();\n  const [candyMachine, setCandyMachine] = useState();\n  const [alertState, setAlertState] = useState({\n    open: false,\n    message: \"\",\n    severity: undefined\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState();\n  const [itemsRemaining, setItemsRemaining] = useState();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState();\n  const rpcUrl = props.rpcHost;\n  const anchorWallet = useAnchorWallet();\n  const {\n    connect: connect,\n    connected: connected,\n    publicKey: publicKey,\n    wallet: wallet\n  } = useWallet();\n  const cluster = props.network;\n\n  const increament = async () => {\n    if (walletSlimeNfts.length >= increaseValue + 1) {\n      setIncreaseValue(increaseValue + 1);\n      console.log(\"increament called!: \", increaseValue + 1);\n    }\n  };\n\n  const decreament = () => {\n    if (increaseValue > 1) {\n      setIncreaseValue(increaseValue - 1);\n      console.log(\"decreament called!: \", increaseValue - 1);\n    }\n  };\n\n  const refreshCandyMachineState = useCallback(async function () {\n    let commitment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"confirmed\";\n\n    if (!publicKey) {\n      return;\n    }\n\n    if (props.error !== undefined) {\n      setAlertState({\n        open: true,\n        message: props.error,\n        severity: \"error\",\n        hideDuration: null\n      });\n      return;\n    }\n\n    const connection = new Connection(props.rpcHost, commitment);\n\n    if (props.candyMachineId) {\n      try {\n        var _cndy$state$endSettin, _cndy$state$endSettin2, _cndy$state$whitelist, _cndy$state$whitelist2, _cndy$state$gatekeepe;\n\n        const cndy = await getCandyMachineState(anchorWallet, props.candyMachineId, connection);\n        console.log(\"Candy machine state: \", cndy);\n        let active = cndy !== null && cndy !== void 0 && cndy.state.goLiveDate ? (cndy === null || cndy === void 0 ? void 0 : cndy.state.goLiveDate.toNumber()) < new Date().getTime() / 1000 : false;\n        let presale = false; // duplication of state to make sure we have the right values!\n\n        let isWLUser = false;\n        let userPrice = cndy.state.price; // whitelist mint?\n\n        if (cndy !== null && cndy !== void 0 && cndy.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (cndy.state.whitelistMintSettings.presale && (!cndy.state.goLiveDate || cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)) {\n            presale = true;\n          } // is there a discount?\n\n\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n            userPrice = cndy.state.whitelistMintSettings.discountPrice;\n          } else {\n            setDiscountPrice(undefined); // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          } // retrieves the whitelist token\n\n\n          const mint = new anchor.web3.PublicKey(cndy.state.whitelistMintSettings.mint);\n          const token = (await getAtaForMint(mint, publicKey))[0];\n\n          try {\n            const balance = await connection.getTokenAccountBalance(token);\n            isWLUser = parseInt(balance.value.amount) > 0; // only whitelist the user if the balance > 0\n\n            setIsWhitelistUser(isWLUser);\n\n            if (cndy.state.isWhitelistOnly) {\n              active = isWLUser && (presale || active);\n            }\n          } catch (e) {\n            setIsWhitelistUser(false); // no whitelist user, no mint\n\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n\n            console.log(\"There was a problem fetching whitelist token balance\");\n            console.log(e);\n          }\n        }\n\n        userPrice = isWLUser ? userPrice : cndy.state.price;\n\n        if (cndy !== null && cndy !== void 0 && cndy.state.tokenMint) {\n          // retrieves the SPL token\n          const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n          const token = (await getAtaForMint(mint, publicKey))[0];\n\n          try {\n            const balance = await connection.getTokenAccountBalance(token);\n            const valid = new anchor.BN(balance.value.amount).gte(userPrice); // only allow user to mint if token balance >  the user if the balance > 0\n\n            setIsValidBalance(valid);\n            active = active && valid;\n          } catch (e) {\n            setIsValidBalance(false);\n            active = false; // no whitelist user, no mint\n\n            console.log(\"There was a problem fetching SPL token balance\");\n            console.log(e);\n          }\n        } else {\n          const balance = new anchor.BN(await connection.getBalance(publicKey));\n          const valid = balance.gte(userPrice);\n          setIsValidBalance(valid);\n          active = active && valid;\n        } // datetime to stop the mint?\n\n\n        if (cndy !== null && cndy !== void 0 && (_cndy$state$endSettin = cndy.state.endSettings) !== null && _cndy$state$endSettin !== void 0 && _cndy$state$endSettin.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n\n          if (cndy.state.endSettings.number.toNumber() < new Date().getTime() / 1000) {\n            active = false;\n          }\n        } // amount to stop the mint?\n\n\n        if (cndy !== null && cndy !== void 0 && (_cndy$state$endSettin2 = cndy.state.endSettings) !== null && _cndy$state$endSettin2 !== void 0 && _cndy$state$endSettin2.endSettingType.amount) {\n          const limit = Math.min(cndy.state.endSettings.number.toNumber(), cndy.state.itemsAvailable);\n\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n        const collectionPDAAccount = await connection.getAccountInfo(collectionPDA);\n        setIsActive(cndy.state.isActive = active);\n        setIsPresale(cndy.state.isPresale = presale);\n        setCandyMachine(cndy);\n        const txnEstimate = 892 + (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) + (cndy.state.tokenMint ? 66 : 0) + (cndy.state.whitelistMintSettings ? 34 : 0) + ((_cndy$state$whitelist = cndy.state.whitelistMintSettings) !== null && _cndy$state$whitelist !== void 0 && (_cndy$state$whitelist2 = _cndy$state$whitelist.mode) !== null && _cndy$state$whitelist2 !== void 0 && _cndy$state$whitelist2.burnEveryTime ? 34 : 0) + (cndy.state.gatekeeper ? 33 : 0) + ((_cndy$state$gatekeepe = cndy.state.gatekeeper) !== null && _cndy$state$gatekeepe !== void 0 && _cndy$state$gatekeepe.expireOnUse ? 66 : 0);\n        setNeedTxnSplit(txnEstimate > 1230);\n      } catch (e) {\n        if (e instanceof Error) {\n          if (e.message === `Account does not exist ${props.candyMachineId}`) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value wrong in your .env file, or you are using the wrong RPC!`,\n              severity: \"error\",\n              hideDuration: null\n            });\n          } else if (e.message.startsWith(\"failed to get info about account\")) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n              severity: \"error\",\n              hideDuration: null\n            });\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: `${e}`,\n            severity: \"error\",\n            hideDuration: null\n          });\n        }\n\n        console.log(e);\n      }\n    } else {\n      setAlertState({\n        open: true,\n        message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n        severity: \"error\",\n        hideDuration: null\n      });\n    }\n  }, [anchorWallet, props.candyMachineId, props.error, props.rpcHost]);\n\n  const onMint = async function () {\n    let beforeTransactions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let afterTransactions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    try {\n      for (let cnt = 0; cnt < 2; cnt++) {\n        setIsUserMinting(true);\n\n        if (connected && candyMachine !== null && candyMachine !== void 0 && candyMachine.program && publicKey) {\n          var _setupMint;\n\n          let setupMint;\n\n          if (needTxnSplit && setupTxn === undefined) {\n            setAlertState({\n              open: true,\n              message: \"Please sign account setup transaction\",\n              severity: \"info\"\n            });\n            setupMint = await createAccountsForMint(candyMachine, publicKey);\n            let status = {\n              err: true\n            };\n\n            if (setupMint.transaction) {\n              status = await awaitTransactionSignatureConfirmation(setupMint.transaction, props.txTimeout, props.connection, true);\n            }\n\n            if (status && !status.err) {\n              setSetupTxn(setupMint);\n              setAlertState({\n                open: true,\n                message: \"Setup transaction succeeded! Please sign minting transaction\",\n                severity: \"info\"\n              });\n            } else {\n              setAlertState({\n                open: true,\n                message: \"Mint failed! Please try again!\",\n                severity: \"error\"\n              });\n              setIsUserMinting(false);\n              return;\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: \"Please sign minting transaction\",\n              severity: \"info\"\n            });\n          }\n\n          const mintResult = await mintOneToken(candyMachine, publicKey, walletSlimeNfts[cnt], beforeTransactions, afterTransactions, (_setupMint = setupMint) !== null && _setupMint !== void 0 ? _setupMint : setupTxn);\n          let status = {\n            err: true\n          };\n          let metadataStatus = null;\n\n          if (mintResult) {\n            status = await awaitTransactionSignatureConfirmation(mintResult.mintTxId, props.txTimeout, props.connection, true);\n            metadataStatus = await candyMachine.program.provider.connection.getAccountInfo(mintResult.metadataKey, \"processed\");\n            console.log(\"Metadata status: \", !!metadataStatus);\n          } //await getWalletSlimeNfts();\n\n\n          if (status && !status.err && metadataStatus) {\n            // manual update since the refresh might not detect\n            // the change immediately\n            const remaining = itemsRemaining - 1;\n            setItemsRemaining(remaining);\n            setIsActive(candyMachine.state.isActive = remaining > 0);\n            candyMachine.state.isSoldOut = remaining === 0;\n            setSetupTxn(undefined);\n            setAlertState({\n              open: true,\n              message: \"Congratulations! Mint succeeded!\",\n              severity: \"success\",\n              hideDuration: 7000\n            });\n            await getWalletSlimeNfts();\n            refreshCandyMachineState(\"processed\");\n          } else if (status && !status.err) {\n            setAlertState({\n              open: true,\n              message: \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\n              severity: \"error\",\n              hideDuration: 8000\n            });\n            refreshCandyMachineState();\n          } else {\n            setAlertState({\n              open: true,\n              message: \"Mint failed! Please try again!\",\n              severity: \"error\"\n            });\n            refreshCandyMachineState();\n          }\n        }\n      }\n    } catch (error) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message: message,\n        severity: \"error\"\n      }); // updates the candy machine state to reflect the latest\n      // information on chain\n\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (isPresale && candyMachine.state.goLiveDate && candyMachine.state.goLiveDate.toNumber() <= new Date().getTime() / 1000) {\n      setIsPresale(candyMachine.state.isPresale = false);\n    }\n\n    setIsActive(candyMachine.state.isActive = active);\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [anchorWallet, props.candyMachineId, props.connection, refreshCandyMachineState]);\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex h-full-screen\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      minSidebar: minSidebar,\n      setMinSiderBar: setMinSiderBar,\n      activeLink: \"mint\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        setMinSiderBar: setMinSiderBar,\n        minSidebar: minSidebar,\n        globalData: undefined\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-4xl mt-5\",\n          children: \"Mint the O5O NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Burn the Slimes to get them out of the Hood\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Bears,\n          className: \"w-1/3 h-1/3 mx-auto my-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n          className: \"mx-auto mt-5\",\n          width: \"380px\",\n          height: \"auto\",\n          controls: true,\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: \"https://arweave.net/hsEgWxtOEg5sUAP-sEJpL2HlDTivICsgLc6opMN3Qi0?ext=mp4\",\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Select number of SLIMES to burn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"SLIMES in Wallet \", walletSlimeNfts.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center mt-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mr-4 p-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"border-2 px-5 py-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: decreament,\n                className: \"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-full text-sm p-2.5 text-center inline-flex items-center mr-5 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\",\n                children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                  \"aria-hidden\": \"true\",\n                  className: \"w-4 h-4\",\n                  fill: \"currentColor\",\n                  viewBox: \"0 0 20 20\",\n                  xmlns: \"http://www.w3.org/2000/svg\",\n                  children: /*#__PURE__*/_jsxDEV(\"path\", {\n                    fillRule: \"evenodd\",\n                    d: \"M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z\",\n                    clipRule: \"evenodd\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 511,\n                    columnNumber: 129\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 511,\n                  columnNumber: 10\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"sr-only\",\n                  children: \"Icon description\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 512,\n                  columnNumber: 10\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: increaseValue\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 514,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: increament,\n                className: \"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-full text-sm p-2.5 text-center inline-flex items-center ml-5 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\",\n                children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                  \"aria-hidden\": \"true\",\n                  className: \"w-4 h-4\",\n                  fill: \"currentColor\",\n                  viewBox: \"0 0 20 20\",\n                  xmlns: \"http://www.w3.org/2000/svg\",\n                  children: /*#__PURE__*/_jsxDEV(\"path\", {\n                    fillRule: \"evenodd\",\n                    d: \"M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z\",\n                    clipRule: \"evenodd\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 516,\n                    columnNumber: 129\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 516,\n                  columnNumber: 10\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"sr-only\",\n                  children: \"Icon description\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 517,\n                  columnNumber: 10\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 515,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-sm\",\n              children: [\"Max \", walletSlimeNfts.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 520,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-1\",\n            children: /*#__PURE__*/_jsxDEV(MintButton, {\n              candyMachine: candyMachine,\n              isMinting: isUserMinting,\n              setIsMinting: val => setIsUserMinting(val),\n              onMint: onMint,\n              isActive: isActive || isPresale && isWhitelistUser && isValidBalance\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-sm\",\n          children: \"Have fun enjoy the instant reveal after mint\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        style: {\n          marginTop: 100\n        },\n        children: /*#__PURE__*/_jsxDEV(Snackbar, {\n          open: alertState.open,\n          autoHideDuration: alertState.hideDuration === undefined ? 6000 : alertState.hideDuration,\n          onClose: () => setAlertState({ ...alertState,\n            open: false\n          }),\n          children: /*#__PURE__*/_jsxDEV(Alert, {\n            onClose: () => setAlertState({ ...alertState,\n              open: false\n            }),\n            severity: alertState.severity,\n            children: alertState.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 717,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 494,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Mint, \"E4kiRDTRVdpb4BID74BX76LdZRE=\", false, function () {\n  return [useWalletNfts, useAnchorWallet, useWallet];\n});\n\n_c = Mint;\n\nconst getCountdownDate = candyMachine => {\n  var _candyMachine$state$e;\n\n  if (candyMachine.state.isActive && (_candyMachine$state$e = candyMachine.state.endSettings) !== null && _candyMachine$state$e !== void 0 && _candyMachine$state$e.endSettingType.date) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(candyMachine.state.goLiveDate ? candyMachine.state.goLiveDate : candyMachine.state.isPresale ? new anchor.BN(new Date().getTime() / 1000) : undefined);\n};\n\nexport default Mint;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mint\");","map":{"version":3,"names":["useCallback","useEffect","useState","anchor","Sidebar","Navbar","useWalletNfts","styled","Container","Snackbar","Alert","Connection","useAnchorWallet","useWallet","WalletDialogButton","awaitTransactionSignatureConfirmation","createAccountsForMint","getCandyMachineState","getCollectionPDA","mintOneToken","getAtaForMint","toDate","MintButton","ConnectButton","MintContainer","div","Mint","props","minSidebar","setMinSiderBar","isUserMinting","setIsUserMinting","increaseValue","setIncreaseValue","isLoadingWalletNfts","walletSlimeNfts","setWalletSlimeNfts","getWalletSlimeNfts","candyMachine","setCandyMachine","alertState","setAlertState","open","message","severity","undefined","isActive","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","isPresale","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","anchorWallet","connect","connected","publicKey","wallet","cluster","network","increament","length","console","log","decreament","refreshCandyMachineState","commitment","error","hideDuration","connection","candyMachineId","cndy","active","state","goLiveDate","toNumber","Date","getTime","presale","isWLUser","userPrice","price","whitelistMintSettings","isWhitelistOnly","mint","web3","PublicKey","token","balance","getTokenAccountBalance","parseInt","value","amount","e","tokenMint","valid","BN","gte","getBalance","endSettings","endSettingType","date","number","limit","Math","min","itemsAvailable","itemsRedeemed","isSoldOut","collectionPDA","collectionPDAAccount","getAccountInfo","txnEstimate","retainAuthority","mode","burnEveryTime","gatekeeper","expireOnUse","Error","startsWith","onMint","beforeTransactions","afterTransactions","cnt","program","setupMint","status","err","transaction","txTimeout","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","msg","indexOf","code","window","location","reload","toggleMintButton","now","loop","setTimeout","Bears","val","marginTop","getCountdownDate"],"sources":["D:/software/o5o BNB/o5o-staking-frontend/src/pages/Mint.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport Sidebar from \"../components/views/Sidebar\";\r\nimport Navbar from \"../components/views/Navbar\";\r\nimport Bears from '../components/assets/bears.svg'\r\nimport useWalletNfts from \"../hooks/use-wallet-nfts\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { Container, Snackbar } from \"@mui/material\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Alert from \"@mui/lab/Alert\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport {\r\n  Commitment,\r\n  Connection,\r\n  PublicKey,\r\n  Transaction,\r\n} from \"@solana/web3.js\";\r\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CANDY_MACHINE_PROGRAM,\r\n  CandyMachineAccount,\r\n  createAccountsForMint,\r\n  getCandyMachineState,\r\n  getCollectionPDA,\r\n  mintOneToken,\r\n  SetupState,\r\n} from \"../candy-machine-new\";\r\nimport { AlertState, formatNumber, getAtaForMint, toDate } from \"../utils\";\r\nimport { MintCountdown } from \"../MintCountdown\";\r\nimport { MintButton } from \"../MintButton\";\r\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport { SolanaMobileWalletAdapterWalletName } from \"@solana-mobile/wallet-adapter-mobile\";\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: #fff;\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MintContainer = styled.div`\r\n  background:#fff;\r\n`; // add your owns styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n  network: WalletAdapterNetwork;\r\n  error?: string;\r\n}\r\n\r\nconst Mint = (props: HomeProps) => {\r\n  const [minSidebar, setMinSiderBar] = useState(false);\r\n  const [isUserMinting, setIsUserMinting] = useState(false);\r\n  const [increaseValue, setIncreaseValue] = useState(1);\r\n\tconst { isLoadingWalletNfts, walletSlimeNfts, setWalletSlimeNfts, getWalletSlimeNfts } = useWalletNfts();\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [endDate, setEndDate] = useState<Date>();\r\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\r\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\r\n  const [isPresale, setIsPresale] = useState(false);\r\n  const [isValidBalance, setIsValidBalance] = useState(false);\r\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\r\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\r\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\r\n\r\n  const rpcUrl = props.rpcHost;\r\n  const anchorWallet = useAnchorWallet();\r\n  const { connect, connected, publicKey, wallet } = useWallet();\r\n  const cluster = props.network;\r\n\r\n  const increament = async() => {\r\n\t\tif(walletSlimeNfts.length >= increaseValue+1){\r\n\t\t\tsetIncreaseValue(increaseValue+1);\t\t\t\r\n\t\t\tconsole.log(\"increament called!: \", increaseValue+1);\r\n\t\t}\r\n\t}\r\n\tconst decreament = () => {\r\n\t\tif(increaseValue > 1){\r\n\t\t\tsetIncreaseValue(increaseValue-1);\r\n\t\t\tconsole.log(\"decreament called!: \", increaseValue-1);\r\n\t\t}\r\n\t}\r\n  const refreshCandyMachineState = useCallback(\r\n    async (commitment: Commitment = \"confirmed\") => {\r\n      if (!publicKey) {\r\n        return;\r\n      }\r\n      if (props.error !== undefined) {\r\n        setAlertState({\r\n          open: true,\r\n          message: props.error,\r\n          severity: \"error\",\r\n          hideDuration: null,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const connection = new Connection(props.rpcHost, commitment);\r\n\r\n      if (props.candyMachineId) {\r\n        try {\r\n          const cndy = await getCandyMachineState(\r\n            anchorWallet as anchor.Wallet,\r\n            props.candyMachineId,\r\n            connection\r\n          );\r\n          console.log(\"Candy machine state: \", cndy);\r\n          let active = cndy?.state.goLiveDate\r\n            ? cndy?.state.goLiveDate.toNumber() < new Date().getTime() / 1000\r\n            : false;\r\n          let presale = false;\r\n\r\n          // duplication of state to make sure we have the right values!\r\n          let isWLUser = false;\r\n          let userPrice = cndy.state.price;\r\n\r\n          // whitelist mint?\r\n          if (cndy?.state.whitelistMintSettings) {\r\n            // is it a presale mint?\r\n            if (\r\n              cndy.state.whitelistMintSettings.presale &&\r\n              (!cndy.state.goLiveDate ||\r\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\r\n            ) {\r\n              presale = true;\r\n            }\r\n            // is there a discount?\r\n            if (cndy.state.whitelistMintSettings.discountPrice) {\r\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\r\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\r\n            } else {\r\n              setDiscountPrice(undefined);\r\n              // when presale=false and discountPrice=null, mint is restricted\r\n              // to whitelist users only\r\n              if (!cndy.state.whitelistMintSettings.presale) {\r\n                cndy.state.isWhitelistOnly = true;\r\n              }\r\n            }\r\n            // retrieves the whitelist token\r\n            const mint = new anchor.web3.PublicKey(\r\n              cndy.state.whitelistMintSettings.mint\r\n            );\r\n            const token = (await getAtaForMint(mint, publicKey))[0];\r\n\r\n            try {\r\n              const balance = await connection.getTokenAccountBalance(token);\r\n              isWLUser = parseInt(balance.value.amount) > 0;\r\n              // only whitelist the user if the balance > 0\r\n              setIsWhitelistUser(isWLUser);\r\n\r\n              if (cndy.state.isWhitelistOnly) {\r\n                active = isWLUser && (presale || active);\r\n              }\r\n            } catch (e) {\r\n              setIsWhitelistUser(false);\r\n              // no whitelist user, no mint\r\n              if (cndy.state.isWhitelistOnly) {\r\n                active = false;\r\n              }\r\n              console.log(\r\n                \"There was a problem fetching whitelist token balance\"\r\n              );\r\n              console.log(e);\r\n            }\r\n          }\r\n          userPrice = isWLUser ? userPrice : cndy.state.price;\r\n\r\n          if (cndy?.state.tokenMint) {\r\n            // retrieves the SPL token\r\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\r\n            const token = (await getAtaForMint(mint, publicKey))[0];\r\n            try {\r\n              const balance = await connection.getTokenAccountBalance(token);\r\n\r\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\r\n\r\n              // only allow user to mint if token balance >  the user if the balance > 0\r\n              setIsValidBalance(valid);\r\n              active = active && valid;\r\n            } catch (e) {\r\n              setIsValidBalance(false);\r\n              active = false;\r\n              // no whitelist user, no mint\r\n              console.log(\"There was a problem fetching SPL token balance\");\r\n              console.log(e);\r\n            }\r\n          } else {\r\n            const balance = new anchor.BN(\r\n              await connection.getBalance(publicKey)\r\n            );\r\n            const valid = balance.gte(userPrice);\r\n            setIsValidBalance(valid);\r\n            active = active && valid;\r\n          }\r\n\r\n          // datetime to stop the mint?\r\n          if (cndy?.state.endSettings?.endSettingType.date) {\r\n            setEndDate(toDate(cndy.state.endSettings.number));\r\n            if (\r\n              cndy.state.endSettings.number.toNumber() <\r\n              new Date().getTime() / 1000\r\n            ) {\r\n              active = false;\r\n            }\r\n          }\r\n          // amount to stop the mint?\r\n          if (cndy?.state.endSettings?.endSettingType.amount) {\r\n            const limit = Math.min(\r\n              cndy.state.endSettings.number.toNumber(),\r\n              cndy.state.itemsAvailable\r\n            );\r\n            if (cndy.state.itemsRedeemed < limit) {\r\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n            } else {\r\n              setItemsRemaining(0);\r\n              cndy.state.isSoldOut = true;\r\n            }\r\n          } else {\r\n            setItemsRemaining(cndy.state.itemsRemaining);\r\n          }\r\n\r\n          if (cndy.state.isSoldOut) {\r\n            active = false;\r\n          }\r\n\r\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\r\n          const collectionPDAAccount = await connection.getAccountInfo(\r\n            collectionPDA\r\n          );\r\n\r\n          setIsActive((cndy.state.isActive = active));\r\n          setIsPresale((cndy.state.isPresale = presale));\r\n          setCandyMachine(cndy);\r\n\r\n          const txnEstimate =\r\n            892 +\r\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\r\n            (cndy.state.tokenMint ? 66 : 0) +\r\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\r\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\r\n            (cndy.state.gatekeeper ? 33 : 0) +\r\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\r\n\r\n          setNeedTxnSplit(txnEstimate > 1230);\r\n        } catch (e) {\r\n          if (e instanceof Error) {\r\n            if (\r\n              e.message === `Account does not exist ${props.candyMachineId}`\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value wrong in your .env file, or you are using the wrong RPC!`,\r\n                severity: \"error\",\r\n                hideDuration: null,\r\n              });\r\n            } else if (\r\n              e.message.startsWith(\"failed to get info about account\")\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\r\n                severity: \"error\",\r\n                hideDuration: null,\r\n              });\r\n            }\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: `${e}`,\r\n              severity: \"error\",\r\n              hideDuration: null,\r\n            });\r\n          }\r\n          console.log(e);\r\n        }\r\n      } else {\r\n        setAlertState({\r\n          open: true,\r\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\r\n          severity: \"error\",\r\n          hideDuration: null,\r\n        });\r\n      }\r\n    },\r\n    [anchorWallet, props.candyMachineId, props.error, props.rpcHost]\r\n  );\r\n\r\n  const onMint = async (\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = []\r\n  ) => {\r\n    try {\r\n      for(let cnt=0;cnt<2;cnt++){\r\n      setIsUserMinting(true);\r\n      if (connected && candyMachine?.program && publicKey) {\r\n        let setupMint: SetupState | undefined;\r\n        if (needTxnSplit && setupTxn === undefined) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Please sign account setup transaction\",\r\n            severity: \"info\",\r\n          });\r\n          setupMint = await createAccountsForMint(candyMachine, publicKey);\r\n          let status: any = { err: true };\r\n          if (setupMint.transaction) {\r\n            status = await awaitTransactionSignatureConfirmation(\r\n              setupMint.transaction,\r\n              props.txTimeout,\r\n              props.connection,\r\n              true\r\n            );\r\n          }\r\n          if (status && !status.err) {\r\n            setSetupTxn(setupMint);\r\n            setAlertState({\r\n              open: true,\r\n              message:\r\n                \"Setup transaction succeeded! Please sign minting transaction\",\r\n              severity: \"info\",\r\n            });\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: \"Mint failed! Please try again!\",\r\n              severity: \"error\",\r\n            });\r\n            setIsUserMinting(false);\r\n            return;\r\n          }\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Please sign minting transaction\",\r\n            severity: \"info\",\r\n          });\r\n        }\r\n\r\n          const mintResult = await mintOneToken(\r\n            candyMachine,\r\n            publicKey,\r\n            walletSlimeNfts[cnt],\r\n            beforeTransactions,\r\n            afterTransactions,\r\n            setupMint ?? setupTxn\r\n          );\r\n\r\n          let status: any = { err: true };\r\n          let metadataStatus = null;\r\n          if (mintResult) {\r\n            status = await awaitTransactionSignatureConfirmation(\r\n              mintResult.mintTxId,\r\n              props.txTimeout,\r\n              props.connection,\r\n              true\r\n            );\r\n\r\n            metadataStatus =\r\n              await candyMachine.program.provider.connection.getAccountInfo(\r\n                mintResult.metadataKey,\r\n                \"processed\"\r\n              );\r\n            console.log(\"Metadata status: \", !!metadataStatus);\r\n          }\r\n          //await getWalletSlimeNfts();\r\n          if (status && !status.err && metadataStatus) {\r\n            // manual update since the refresh might not detect\r\n            // the change immediately\r\n            const remaining = itemsRemaining! - 1;\r\n            setItemsRemaining(remaining);\r\n            setIsActive((candyMachine.state.isActive = remaining > 0));\r\n            candyMachine.state.isSoldOut = remaining === 0;\r\n            setSetupTxn(undefined);\r\n            setAlertState({\r\n              open: true,\r\n              message: \"Congratulations! Mint succeeded!\",\r\n              severity: \"success\",\r\n              hideDuration: 7000,\r\n            });\r\n            await getWalletSlimeNfts();\r\n            refreshCandyMachineState(\"processed\");\r\n          } else if (status && !status.err) {\r\n            setAlertState({\r\n              open: true,\r\n              message:\r\n                \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\r\n              severity: \"error\",\r\n              hideDuration: 8000,\r\n            });\r\n            refreshCandyMachineState();\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: \"Mint failed! Please try again!\",\r\n              severity: \"error\",\r\n            });\r\n            refreshCandyMachineState();\r\n          }\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = \"Transaction timeout! Please try again.\";\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n          window.location.reload();\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n      // updates the candy machine state to reflect the latest\r\n      // information on chain\r\n      refreshCandyMachineState();\r\n    } finally {\r\n      setIsUserMinting(false);\r\n    }\r\n  };\r\n\r\n  const toggleMintButton = () => {\r\n    let active = !isActive || isPresale;\r\n\r\n    if (active) {\r\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\r\n        active = false;\r\n      }\r\n      if (endDate && Date.now() >= endDate.getTime()) {\r\n        active = false;\r\n      }\r\n    }\r\n\r\n    if (\r\n      isPresale &&\r\n      candyMachine!.state.goLiveDate &&\r\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\r\n    ) {\r\n      setIsPresale((candyMachine!.state.isPresale = false));\r\n    }\r\n\r\n    setIsActive((candyMachine!.state.isActive = active));\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshCandyMachineState();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    refreshCandyMachineState,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    (function loop() {\r\n      setTimeout(() => {\r\n        refreshCandyMachineState();\r\n        loop();\r\n      }, 20000);\r\n    })();\r\n  }, [refreshCandyMachineState]);\r\n\r\n  return (\r\n    <div className=\"flex h-full-screen\">\r\n\t\t\t<Sidebar minSidebar={minSidebar} setMinSiderBar={setMinSiderBar} activeLink=\"mint\" />\r\n      <div className=\"w-full h-full\">\r\n\t\t\t\t<Navbar setMinSiderBar={setMinSiderBar} minSidebar={minSidebar}  globalData={undefined}/>\r\n        <div className=\"text-center\">\r\n\t\t\t\t\t<h1 className=\"text-4xl mt-5\">Mint the O5O NFT</h1>\r\n\t\t\t\t\t<h3>Burn the Slimes to get them out of the Hood</h3>\r\n\t\t\t\t\t<img src={Bears} className=\"w-1/3 h-1/3 mx-auto my-4\"></img>\r\n          <video className=\"mx-auto mt-5\" width=\"380px\" height=\"auto\" controls>\r\n\t\t\t\t\t  <source src=\"https://arweave.net/hsEgWxtOEg5sUAP-sEJpL2HlDTivICsgLc6opMN3Qi0?ext=mp4\" type=\"video/mp4\"/>\r\n\t\t\t\t\t</video>\r\n\t\t\t\t\t<h3>Select number of SLIMES to burn</h3>\r\n\t\t\t\t\t<h5>SLIMES in Wallet {walletSlimeNfts.length}</h5>\r\n\t\t\t\t\t<div className=\"flex justify-center mt-3\">\r\n\t\t\t\t\t\t<div className=\"mr-4 p-1\">\r\n\t\t\t\t\t\t\t<div className=\"border-2 px-5 py-2\">\r\n\t\t\t\t\t\t\t\t<button type=\"button\" onClick={decreament} className=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-full text-sm p-2.5 text-center inline-flex items-center mr-5 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\">\r\n\t\t\t\t\t\t\t\t\t<svg aria-hidden=\"true\" className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fillRule=\"evenodd\" d=\"M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z\" clipRule=\"evenodd\"></path></svg>\r\n\t\t\t\t\t\t\t\t\t<span className=\"sr-only\">Icon description</span>\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t<span>{increaseValue}</span>\r\n\t\t\t\t\t\t\t\t<button type=\"button\" onClick={increament} className=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-full text-sm p-2.5 text-center inline-flex items-center ml-5 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\">\r\n\t\t\t\t\t\t\t\t\t<svg aria-hidden=\"true\" className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fillRule=\"evenodd\" d=\"M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z\" clipRule=\"evenodd\"></path></svg>\r\n\t\t\t\t\t\t\t\t\t<span className=\"sr-only\">Icon description</span>\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<h3 className=\"text-sm\">Max {walletSlimeNfts.length}</h3>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"p-1\">\r\n\t\t\t\t\t\t\t{/* <button type=\"button\" className=\"h-14 inline-block px-6 py-0 bg-black text-white font-medium text-xs leading-tight uppercase rounded shadow-lg focus:shadow-lg focus:outline-none focus:ring-0 active:bg-blue-800 active:shadow-lg transition duration-150 ease-in-out\">Mint</button> */}\r\n              <MintButton\r\n                        candyMachine={candyMachine}\r\n                        isMinting={isUserMinting}\r\n                        setIsMinting={(val) => setIsUserMinting(val)}\r\n                        onMint={onMint}\r\n                        isActive={\r\n                          isActive ||\r\n                          (isPresale && isWhitelistUser && isValidBalance)\r\n                        }\r\n                      />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<h3 className=\"text-sm\">Have fun enjoy the instant reveal after mint</h3>\r\n\t\t\t\t</div>\r\n        <Container style={{ marginTop: 100 }}>\r\n          {/* <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\r\n            <Paper\r\n              style={{\r\n                padding: 24,\r\n                paddingBottom: 10,\r\n                backgroundColor: \"#fff\",\r\n                borderRadius: 0,\r\n              }}\r\n            >\r\n              {!connected ? (\r\n                <ConnectButton\r\n                  onClick={(e) => {\r\n                    if (\r\n                      wallet?.adapter.name === SolanaMobileWalletAdapterWalletName\r\n                    ) {\r\n                      connect();\r\n                      e.preventDefault();\r\n                    }\r\n                  }}\r\n                >\r\n                  Connect Wallet\r\n                </ConnectButton>\r\n              ) : (\r\n                <>\r\n                  {candyMachine && (\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justifyContent=\"center\"\r\n                      wrap=\"nowrap\"\r\n                    >\r\n                      <Grid item xs={3}>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\">\r\n                          Remaining\r\n                        </Typography>\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textPrimary\"\r\n                          style={{\r\n                            fontWeight: \"bold\",\r\n                          }}\r\n                        >\r\n                          {`${itemsRemaining}`}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item xs={4}>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\">\r\n                          {isWhitelistUser && discountPrice\r\n                            ? \"Discount Price\"\r\n                            : \"Price\"}\r\n                        </Typography>\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textPrimary\"\r\n                          style={{ fontWeight: \"bold\" }}\r\n                        >\r\n                          {isWhitelistUser && discountPrice\r\n                            ? `◎ ${formatNumber.asNumber(discountPrice)}`\r\n                            : `◎ ${formatNumber.asNumber(\r\n                                candyMachine.state.price\r\n                              )}`}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item xs={5}>\r\n                        {isActive && endDate && Date.now() < endDate.getTime() ? (\r\n                          <>\r\n                            <MintCountdown\r\n                              key=\"endSettings\"\r\n                              date={getCountdownDate(candyMachine)}\r\n                              style={{ justifyContent: \"flex-end\" }}\r\n                              status=\"COMPLETED\"\r\n                              onComplete={toggleMintButton}\r\n                            />\r\n                            <Typography\r\n                              variant=\"caption\"\r\n                              align=\"center\"\r\n                              display=\"block\"\r\n                              style={{ fontWeight: \"bold\" }}\r\n                            >\r\n                              TO END OF MINT\r\n                            </Typography>\r\n                          </>\r\n                        ) : (\r\n                          <>\r\n                            <MintCountdown\r\n                              key=\"goLive\"\r\n                              date={getCountdownDate(candyMachine)}\r\n                              style={{ justifyContent: \"flex-end\" }}\r\n                              status={\r\n                                candyMachine?.state?.isSoldOut ||\r\n                                (endDate && Date.now() > endDate.getTime())\r\n                                  ? \"COMPLETED\"\r\n                                  : isPresale\r\n                                  ? \"PRESALE\"\r\n                                  : \"LIVE\"\r\n                              }\r\n                              onComplete={toggleMintButton}\r\n                            />\r\n                            {isPresale &&\r\n                              candyMachine.state.goLiveDate &&\r\n                              candyMachine.state.goLiveDate.toNumber() >\r\n                                new Date().getTime() / 1000 && (\r\n                                <Typography\r\n                                  variant=\"caption\"\r\n                                  align=\"center\"\r\n                                  display=\"block\"\r\n                                  style={{ fontWeight: \"bold\" }}\r\n                                >\r\n                                  UNTIL PUBLIC MINT\r\n                                </Typography>\r\n                              )}\r\n                          </>\r\n                        )}\r\n                      </Grid>\r\n                    </Grid>\r\n                  )}\r\n                  <MintContainer>\r\n                    {candyMachine?.state.isActive &&\r\n                    candyMachine?.state.gatekeeper &&\r\n                    publicKey &&\r\n                    anchorWallet?.signTransaction ? (\r\n                      <GatewayProvider\r\n                        wallet={{\r\n                          publicKey:\r\n                            publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                          signTransaction: anchorWallet.signTransaction,\r\n                        }}\r\n                        gatekeeperNetwork={\r\n                          candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                        }\r\n                        clusterUrl={rpcUrl}\r\n                        cluster={cluster}\r\n                        options={{ autoShowModal: false }}\r\n                      >\r\n                        <MintButton\r\n                          candyMachine={candyMachine}\r\n                          isMinting={isUserMinting}\r\n                          setIsMinting={(val) => setIsUserMinting(val)}\r\n                          onMint={onMint}\r\n                          isActive={\r\n                            isActive ||\r\n                            (isPresale && isWhitelistUser && isValidBalance)\r\n                          }\r\n                        />\r\n                      </GatewayProvider>\r\n                    ) : (\r\n                      <MintButton\r\n                        candyMachine={candyMachine}\r\n                        isMinting={isUserMinting}\r\n                        setIsMinting={(val) => setIsUserMinting(val)}\r\n                        onMint={onMint}\r\n                        isActive={\r\n                          isActive ||\r\n                          (isPresale && isWhitelistUser && isValidBalance)\r\n                        }\r\n                      />\r\n                    )}\r\n                  </MintContainer>\r\n                </>\r\n              )}\r\n              <Typography\r\n                variant=\"caption\"\r\n                align=\"center\"\r\n                display=\"block\"\r\n                style={{ marginTop: 7, color: \"grey\" }}\r\n              >\r\n                \r\n              </Typography>\r\n            </Paper>\r\n          </Container> */}\r\n\r\n          <Snackbar\r\n            open={alertState.open}\r\n            autoHideDuration={\r\n              alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\r\n            }\r\n            onClose={() => setAlertState({ ...alertState, open: false })}\r\n          >\r\n            <Alert\r\n              onClose={() => setAlertState({ ...alertState, open: false })}\r\n              severity={alertState.severity}\r\n            >\r\n              {alertState.message}\r\n            </Alert>\r\n          </Snackbar>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getCountdownDate = (\r\n  candyMachine: CandyMachineAccount\r\n): Date | undefined => {\r\n  if (\r\n    candyMachine.state.isActive &&\r\n    candyMachine.state.endSettings?.endSettingType.date\r\n  ) {\r\n    return toDate(candyMachine.state.endSettings.number);\r\n  }\r\n\r\n  return toDate(\r\n    candyMachine.state.goLiveDate\r\n      ? candyMachine.state.goLiveDate\r\n      : candyMachine.state.isPresale\r\n      ? new anchor.BN(new Date().getTime() / 1000)\r\n      : undefined\r\n  );\r\n};\r\n\r\nexport default Mint;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}