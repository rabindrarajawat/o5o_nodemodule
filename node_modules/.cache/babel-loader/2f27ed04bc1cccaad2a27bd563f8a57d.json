{"ast":null,"code":"// import { Connection, PublicKey } from \"@solana/web3.js\";\n// import * as anchor from \"@project-serum/anchor\";\n// import { web3 } from \"@project-serum/anchor\";\n// import {\n//   Token,\n//   TOKEN_PROGRAM_ID,\n//   ASSOCIATED_TOKEN_PROGRAM_ID,\n// } from \"@solana/spl-token\";\n// import { useWallet } from '@solana/wallet-adapter-react';\n// import { useEffect, useState } from 'react';\n// const useNFTransfer = () =>{\n//   const wallet = useWallet();\n//   useEffect(() => {\n// \t}, [wallet]);\n//   const doNFTTransfer = async (mint: string, to: string) => {\n//     const from = wallet;\n//     let connection = new Connection(\"https://api.devnet.solana.com\");\n//     const mintPublicKey = new web3.PublicKey(mint);// Mint is the Mint address found in the NFT metadata\n//     const ownerPublicKey = from.publicKey;\n//     const destPublicKey = new web3.PublicKey(\"MY_APPS_WALLET_ADDRESS\");\n//     const mintToken = new Token(\n//       connection,\n//       mintPublicKey,\n//       TOKEN_PROGRAM_ID,\n//       from\n//     );\n//     // GET SOURCE ASSOCIATED ACCOUNT\n//     const associatedSourceTokenAddr = await Token.getAssociatedTokenAddress(\n//       mintToken.associatedProgramId,\n//       mintToken.programId,\n//       mintPublicKey,\n//       ownerPublicKey\n//     );\n//     // GET DESTINATION ASSOCIATED ACCOUNT\n//     const associatedDestinationTokenAddr = await Token.getAssociatedTokenAddress(\n//       mintToken.associatedProgramId,\n//       mintToken.programId,\n//       mintPublicKey,\n//       destPublicKey\n//     );\n//     const receiverAccount = await connection.getAccountInfo(\n//       associatedDestinationTokenAddr\n//     );\n//     const instructions = [];\n//     if (receiverAccount === null) {\n//       console.log(\"receiver account is null!\");\n//       instructions.push(\n//         Token.createAssociatedTokenAccountInstruction(\n//           mintToken.associatedProgramId,\n//           mintToken.programId,\n//           mintPublicKey,\n//           associatedDestinationTokenAddr,\n//           destPublicKey,\n//           ownerPublicKey\n//         )\n//       );\n//     }\n//     instructions.push(\n//       Token.createTransferInstruction(\n//         TOKEN_PROGRAM_ID,\n//         associatedSourceTokenAddr,\n//         associatedDestinationTokenAddr,\n//         ownerPublicKey,\n//         [],\n//         1\n//       )\n//     );\n//     // This transaction is sending the tokens\n//     let transaction = null;\n//     for (let i = 0; i < instructions.length; i++) {\n//       transaction = new web3.Transaction().add(instructions[i]);\n//     }\n//     if (transaction) {\n//       let response = await from.signTransaction(transaction);\n//       console.log(\"response: \", response);\n//     } else {\n//       console.log(\"Transaction error: transaction data is null\");\n//     }\n//   };\n// }\n// export default useNFTransfer;","map":{"version":3,"names":[],"sources":["D:/software/o5o BNB/o5o-staking-frontend/src/hooks/use-nft-mint-burn.ts"],"sourcesContent":["// import { Connection, PublicKey } from \"@solana/web3.js\";\r\n// import * as anchor from \"@project-serum/anchor\";\r\n// import { web3 } from \"@project-serum/anchor\";\r\n// import {\r\n//   Token,\r\n//   TOKEN_PROGRAM_ID,\r\n//   ASSOCIATED_TOKEN_PROGRAM_ID,\r\n// } from \"@solana/spl-token\";\r\n// import { useWallet } from '@solana/wallet-adapter-react';\r\n// import { useEffect, useState } from 'react';\r\n\r\n// const useNFTransfer = () =>{\r\n//   const wallet = useWallet();\r\n//   useEffect(() => {\r\n\t\t\r\n// \t}, [wallet]);\r\n\r\n//   const doNFTTransfer = async (mint: string, to: string) => {\r\n//     const from = wallet;\r\n//     let connection = new Connection(\"https://api.devnet.solana.com\");\r\n\r\n//     const mintPublicKey = new web3.PublicKey(mint);// Mint is the Mint address found in the NFT metadata\r\n//     const ownerPublicKey = from.publicKey;\r\n//     const destPublicKey = new web3.PublicKey(\"MY_APPS_WALLET_ADDRESS\");\r\n\r\n//     const mintToken = new Token(\r\n//       connection,\r\n//       mintPublicKey,\r\n//       TOKEN_PROGRAM_ID,\r\n//       from\r\n//     );\r\n\r\n//     // GET SOURCE ASSOCIATED ACCOUNT\r\n//     const associatedSourceTokenAddr = await Token.getAssociatedTokenAddress(\r\n//       mintToken.associatedProgramId,\r\n//       mintToken.programId,\r\n//       mintPublicKey,\r\n//       ownerPublicKey\r\n//     );\r\n\r\n//     // GET DESTINATION ASSOCIATED ACCOUNT\r\n//     const associatedDestinationTokenAddr = await Token.getAssociatedTokenAddress(\r\n//       mintToken.associatedProgramId,\r\n//       mintToken.programId,\r\n//       mintPublicKey,\r\n//       destPublicKey\r\n//     );\r\n\r\n//     const receiverAccount = await connection.getAccountInfo(\r\n//       associatedDestinationTokenAddr\r\n//     );\r\n\r\n//     const instructions = [];\r\n\r\n//     if (receiverAccount === null) {\r\n//       console.log(\"receiver account is null!\");\r\n//       instructions.push(\r\n//         Token.createAssociatedTokenAccountInstruction(\r\n//           mintToken.associatedProgramId,\r\n//           mintToken.programId,\r\n//           mintPublicKey,\r\n//           associatedDestinationTokenAddr,\r\n//           destPublicKey,\r\n//           ownerPublicKey\r\n//         )\r\n//       );\r\n//     }\r\n\r\n//     instructions.push(\r\n//       Token.createTransferInstruction(\r\n//         TOKEN_PROGRAM_ID,\r\n//         associatedSourceTokenAddr,\r\n//         associatedDestinationTokenAddr,\r\n//         ownerPublicKey,\r\n//         [],\r\n//         1\r\n//       )\r\n//     );\r\n\r\n//     // This transaction is sending the tokens\r\n//     let transaction = null;\r\n//     for (let i = 0; i < instructions.length; i++) {\r\n//       transaction = new web3.Transaction().add(instructions[i]);\r\n//     }\r\n\r\n//     if (transaction) {\r\n//       let response = await from.signTransaction(transaction);\r\n\r\n//       console.log(\"response: \", response);\r\n//     } else {\r\n//       console.log(\"Transaction error: transaction data is null\");\r\n//     }\r\n//   };\r\n\r\n// }\r\n\r\n// export default useNFTransfer;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA"},"metadata":{},"sourceType":"module"}