{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var DefaultAccountStateInstruction;\n\n(function (DefaultAccountStateInstruction) {\n  DefaultAccountStateInstruction[DefaultAccountStateInstruction[\"Initialize\"] = 0] = \"Initialize\";\n  DefaultAccountStateInstruction[DefaultAccountStateInstruction[\"Update\"] = 1] = \"Update\";\n})(DefaultAccountStateInstruction || (DefaultAccountStateInstruction = {}));\n/** TODO: docs */\n\n\nexport const defaultAccountStateInstructionData = struct([u8('instruction'), u8('defaultAccountStateInstruction'), u8('accountState')]);\n/**\n * Construct an InitializeDefaultAccountState instruction\n *\n * @param mint         Mint to initialize\n * @param accountState Default account state to set on all new accounts\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createInitializeDefaultAccountStateInstruction(mint, accountState) {\n  let programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : TOKEN_2022_PROGRAM_ID;\n\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(defaultAccountStateInstructionData.span);\n  defaultAccountStateInstructionData.encode({\n    instruction: TokenInstruction.DefaultAccountStateExtension,\n    defaultAccountStateInstruction: DefaultAccountStateInstruction.Initialize,\n    accountState\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Construct an UpdateDefaultAccountState instruction\n *\n * @param mint         Mint to update\n * @param accountState    Default account state to set on all accounts\n * @param freezeAuthority       The mint's freeze authority\n * @param signers         The signer account(s) for a multisig\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createUpdateDefaultAccountStateInstruction(mint, accountState, freezeAuthority) {\n  let multiSigners = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_2022_PROGRAM_ID;\n\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  keys.push({\n    pubkey: freezeAuthority,\n    isSigner: !multiSigners.length,\n    isWritable: false\n  });\n\n  for (const signer of multiSigners) {\n    keys.push({\n      pubkey: signer.publicKey,\n      isSigner: true,\n      isWritable: false\n    });\n  }\n\n  const data = Buffer.alloc(defaultAccountStateInstructionData.span);\n  defaultAccountStateInstructionData.encode({\n    instruction: TokenInstruction.DefaultAccountStateExtension,\n    defaultAccountStateInstruction: DefaultAccountStateInstruction.Update,\n    accountState\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}","map":{"version":3,"sources":["../../../../src/extensions/defaultAccountState/instructions.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,EAAiB,EAAjB,QAA2B,uBAA3B;AAEA,SAAS,sBAAT,QAAuC,iBAAvC;AACA,SAAS,yBAAT,EAAoC,qBAApC,QAAiE,oBAAjE;AACA,SAAS,gCAAT,QAAiD,iBAAjD;AACA,SAAS,gBAAT,QAAiC,6BAAjC;AAGA,OAAA,IAAY,8BAAZ;;AAAA,CAAA,UAAY,8BAAZ,EAA0C;EACtC,8BAAA,CAAA,8BAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;EACA,8BAAA,CAAA,8BAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACH,CAHD,EAAY,8BAA8B,KAA9B,8BAA8B,GAAA,EAAA,CAA1C;AAYA;;;AACA,OAAO,MAAM,kCAAkC,GAAG,MAAM,CAAqC,CACzF,EAAE,CAAC,aAAD,CADuF,EAEzF,EAAE,CAAC,gCAAD,CAFuF,EAGzF,EAAE,CAAC,cAAD,CAHuF,CAArC,CAAjD;AAMP;;;;;;;;AAQG;;AACH,OAAM,SAAU,8CAAV,CACF,IADE,EAEF,YAFE,EAG+B;EAAA,IAAjC,SAAiC,uEAArB,qBAAqB;;EAEjC,IAAI,CAAC,yBAAyB,CAAC,SAAD,CAA9B,EAA2C;IACvC,MAAM,IAAI,gCAAJ,EAAN;EACH;;EACD,MAAM,IAAI,GAAG,CAAC;IAAE,MAAM,EAAE,IAAV;IAAgB,QAAQ,EAAE,KAA1B;IAAiC,UAAU,EAAE;EAA7C,CAAD,CAAb;EACA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,kCAAkC,CAAC,IAAhD,CAAb;EACA,kCAAkC,CAAC,MAAnC,CACI;IACI,WAAW,EAAE,gBAAgB,CAAC,4BADlC;IAEI,8BAA8B,EAAE,8BAA8B,CAAC,UAFnE;IAGI;EAHJ,CADJ,EAMI,IANJ;EASA,OAAO,IAAI,sBAAJ,CAA2B;IAAE,IAAF;IAAQ,SAAR;IAAmB;EAAnB,CAA3B,CAAP;AACH;AAED;;;;;;;;;;AAUG;;AACH,OAAM,SAAU,0CAAV,CACF,IADE,EAEF,YAFE,EAGF,eAHE,EAK+B;EAAA,IADjC,YACiC,uEADR,EACQ;EAAA,IAAjC,SAAiC,uEAArB,qBAAqB;;EAEjC,IAAI,CAAC,yBAAyB,CAAC,SAAD,CAA9B,EAA2C;IACvC,MAAM,IAAI,gCAAJ,EAAN;EACH;;EACD,MAAM,IAAI,GAAG,CAAC;IAAE,MAAM,EAAE,IAAV;IAAgB,QAAQ,EAAE,KAA1B;IAAiC,UAAU,EAAE;EAA7C,CAAD,CAAb;EACA,IAAI,CAAC,IAAL,CAAU;IAAE,MAAM,EAAE,eAAV;IAA2B,QAAQ,EAAE,CAAC,YAAY,CAAC,MAAnD;IAA2D,UAAU,EAAE;EAAvE,CAAV;;EACA,KAAK,MAAM,MAAX,IAAqB,YAArB,EAAmC;IAC/B,IAAI,CAAC,IAAL,CAAU;MAAE,MAAM,EAAE,MAAM,CAAC,SAAjB;MAA4B,QAAQ,EAAE,IAAtC;MAA4C,UAAU,EAAE;IAAxD,CAAV;EACH;;EAED,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,kCAAkC,CAAC,IAAhD,CAAb;EACA,kCAAkC,CAAC,MAAnC,CACI;IACI,WAAW,EAAE,gBAAgB,CAAC,4BADlC;IAEI,8BAA8B,EAAE,8BAA8B,CAAC,MAFnE;IAGI;EAHJ,CADJ,EAMI,IANJ;EASA,OAAO,IAAI,sBAAJ,CAA2B;IAAE,IAAF;IAAQ,SAAR;IAAmB;EAAnB,CAA3B,CAAP;AACH","sourceRoot":"","sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var DefaultAccountStateInstruction;\n(function (DefaultAccountStateInstruction) {\n    DefaultAccountStateInstruction[DefaultAccountStateInstruction[\"Initialize\"] = 0] = \"Initialize\";\n    DefaultAccountStateInstruction[DefaultAccountStateInstruction[\"Update\"] = 1] = \"Update\";\n})(DefaultAccountStateInstruction || (DefaultAccountStateInstruction = {}));\n/** TODO: docs */\nexport const defaultAccountStateInstructionData = struct([\n    u8('instruction'),\n    u8('defaultAccountStateInstruction'),\n    u8('accountState'),\n]);\n/**\n * Construct an InitializeDefaultAccountState instruction\n *\n * @param mint         Mint to initialize\n * @param accountState Default account state to set on all new accounts\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeDefaultAccountStateInstruction(mint, accountState, programId = TOKEN_2022_PROGRAM_ID) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(defaultAccountStateInstructionData.span);\n    defaultAccountStateInstructionData.encode({\n        instruction: TokenInstruction.DefaultAccountStateExtension,\n        defaultAccountStateInstruction: DefaultAccountStateInstruction.Initialize,\n        accountState,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Construct an UpdateDefaultAccountState instruction\n *\n * @param mint         Mint to update\n * @param accountState    Default account state to set on all accounts\n * @param freezeAuthority       The mint's freeze authority\n * @param signers         The signer account(s) for a multisig\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUpdateDefaultAccountStateInstruction(mint, accountState, freezeAuthority, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    keys.push({ pubkey: freezeAuthority, isSigner: !multiSigners.length, isWritable: false });\n    for (const signer of multiSigners) {\n        keys.push({ pubkey: signer.publicKey, isSigner: true, isWritable: false });\n    }\n    const data = Buffer.alloc(defaultAccountStateInstructionData.span);\n    defaultAccountStateInstructionData.encode({\n        instruction: TokenInstruction.DefaultAccountStateExtension,\n        defaultAccountStateInstruction: DefaultAccountStateInstruction.Update,\n        accountState,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n//# sourceMappingURL=instructions.js.map"]},"metadata":{},"sourceType":"module"}