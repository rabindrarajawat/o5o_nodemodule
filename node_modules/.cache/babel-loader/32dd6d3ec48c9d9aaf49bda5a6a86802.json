{"ast":null,"code":"import { Pda } from '../../types/Pda.mjs';\n/**\n * This client allows you to build PDAs related to the Token module.\n *\n * @see {@link TokenClient}\n * @group Module Pdas\n */\n\nclass TokenPdasClient {\n  constructor(metaplex) {\n    this.metaplex = metaplex;\n  }\n  /** Finds the address of the Associated Token Account. */\n\n\n  associatedTokenAccount(_ref) {\n    let {\n      mint,\n      owner,\n      programs\n    } = _ref;\n    const tokenProgram = this.metaplex.programs().getToken(programs);\n    const associatedTokenProgram = this.metaplex.programs().getAssociatedToken(programs);\n    return Pda.find(associatedTokenProgram.address, [owner.toBuffer(), tokenProgram.address.toBuffer(), mint.toBuffer()]);\n  }\n\n}\n\nexport { TokenPdasClient };","map":{"version":3,"sources":["../../../../src/plugins/tokenModule/TokenPdasClient.ts"],"names":["TokenPdasClient","constructor","metaplex","associatedTokenAccount","mint","owner","programs","tokenProgram","getToken","associatedTokenProgram","getAssociatedToken","Pda","find","address","toBuffer"],"mappings":";AAGA;AACA;AACA;AACA;AACA;AACA;;AACO,MAAMA,eAAN,CAAsB;EAC3BC,WAAW,CAAoBC,QAApB,EAAwC;IAApBA,KAAAA,QAAAA,GAAAA,QAAAA;EAAqB;EAEpD;;;EACAC,sBAAsB,OAWd;IAAA,IAXe;MACrBC,IADqB;MAErBC,KAFqB;MAGrBC;IAHqB,CAWf;IACN,MAAMC,YAAY,GAAG,KAAKL,QAAL,CAAcI,QAAd,GAAyBE,QAAzB,CAAkCF,QAAlC,CAArB;IACA,MAAMG,sBAAsB,GAAG,KAAKP,QAAL,CAC5BI,QAD4B,GAE5BI,kBAF4B,CAETJ,QAFS,CAA/B;IAGA,OAAOK,GAAG,CAACC,IAAJD,CAASF,sBAAsB,CAACI,OAAhCF,EAAyC,CAC9CN,KAAK,CAACS,QAANT,EAD8C,EAE9CE,YAAY,CAACM,OAAbN,CAAqBO,QAArBP,EAF8C,EAG9CH,IAAI,CAACU,QAALV,EAH8C,CAAzCO,CAAP;EAKF;;AAzB2B","sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport { Pda, Program, PublicKey } from '@/types';\n\n/**\n * This client allows you to build PDAs related to the Token module.\n *\n * @see {@link TokenClient}\n * @group Module Pdas\n */\nexport class TokenPdasClient {\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  /** Finds the address of the Associated Token Account. */\n  associatedTokenAccount({\n    mint,\n    owner,\n    programs,\n  }: {\n    /** The address of the mint account. */\n    mint: PublicKey;\n    /** The address of the owner account. */\n    owner: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const tokenProgram = this.metaplex.programs().getToken(programs);\n    const associatedTokenProgram = this.metaplex\n      .programs()\n      .getAssociatedToken(programs);\n    return Pda.find(associatedTokenProgram.address, [\n      owner.toBuffer(),\n      tokenProgram.address.toBuffer(),\n      mint.toBuffer(),\n    ]);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}