{"ast":null,"code":"import { createAddConfigLinesInstruction } from '@metaplex-foundation/mpl-candy-machine';\nimport { assertNotFull, assertCanAdd, assertAllConfigLineConstraints } from '../asserts.mjs';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'InsertItemsToCandyMachineV2Operation';\n/**\n * Insert items into an existing Candy Machine.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .insertItems({\n *     candyMachine,\n *     items: [\n *       { name: 'My NFT #1', uri: 'https://example.com/nft1' },\n *       { name: 'My NFT #2', uri: 'https://example.com/nft2' },\n *       { name: 'My NFT #3', uri: 'https://example.com/nft3' },\n *     ],\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst insertItemsToCandyMachineV2Operation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst InsertItemsToCandyMachineV2OperationHandler = {\n  async handle(operation, metaplex, scope) {\n    return insertItemsToCandyMachineV2Builder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Insert items into an existing Candy Machine.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .candyMachines()\n *   .builders()\n *   .insertItems({ candyMachine, items });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst insertItemsToCandyMachineV2Builder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const authority = params.authority ?? metaplex.identity();\n  const index = params.index ?? params.candyMachine.itemsLoaded;\n  const {\n    items\n  } = params;\n  assertNotFull(params.candyMachine, index);\n  assertCanAdd(params.candyMachine, index, items.length);\n  assertAllConfigLineConstraints(items);\n  return TransactionBuilder.make().setFeePayer(payer).add({\n    instruction: createAddConfigLinesInstruction({\n      candyMachine: params.candyMachine.address,\n      authority: authority.publicKey\n    }, {\n      index: index.toNumber(),\n      configLines: items\n    }),\n    signers: [authority],\n    key: params.instructionKey ?? 'insertItems'\n  });\n};\n\nexport { InsertItemsToCandyMachineV2OperationHandler, insertItemsToCandyMachineV2Builder, insertItemsToCandyMachineV2Operation };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineV2Module/operations/insertItemsToCandyMachineV2.ts"],"names":["Key","insertItemsToCandyMachineV2Operation","useOperation","InsertItemsToCandyMachineV2OperationHandler","handle","operation","metaplex","scope","insertItemsToCandyMachineV2Builder","input","sendAndConfirm","confirmOptions","params","options","payer","rpc","getDefaultFeePayer","authority","identity","index","candyMachine","itemsLoaded","items","assertNotFull","assertCanAdd","length","assertAllConfigLineConstraints","TransactionBuilder","make","setFeePayer","add","instruction","createAddConfigLinesInstruction","address","publicKey","toNumber","configLines","signers","key","instructionKey"],"mappings":";;;4EAmBA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,sCAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,oCAAoC,GAC/CC,YAAY,CAAuCF,GAAvC,C;AAEd;AACA;AACA;AACA;;AAyDA;AACA;AACA;AACA;;AACO,MAAMG,2CAAmG,GAC9G;EACE,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAI8C;IAC5C,OAAOC,kCAAkC,CACvCF,QADuC,EAEvCD,SAAS,CAACI,KAF6B,EAGvCF,KAHuC,CAAlCC,CAILE,cAJKF,CAIUF,QAJVE,EAIoBD,KAAK,CAACI,cAJ1BH,CAAP;EAKF;;AAXF,CADK,C,CAeP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaA,MAAAA,kCAAkC,GAAG,UAChDF,QADgD,EAEhDM,MAFgD,EAIzB;EAAA,IADvBC,OACuB,uEADc,EACd;EACvB,MAAM;IAAEC,KAAK,GAAGR,QAAQ,CAACS,GAATT,GAAeU,kBAAfV;EAAV,IAAkDO,OAAxD;EACA,MAAMI,SAAS,GAAGL,MAAM,CAACK,SAAPL,IAAoBN,QAAQ,CAACY,QAATZ,EAAtC;EACA,MAAMa,KAAK,GAAGP,MAAM,CAACO,KAAPP,IAAgBA,MAAM,CAACQ,YAAPR,CAAoBS,WAAlD;EACA,MAAM;IAAEC;EAAF,IAAYV,MAAlB;EACAW,aAAa,CAACX,MAAM,CAACQ,YAAR,EAAsBD,KAAtB,CAAbI;EACAC,YAAY,CAACZ,MAAM,CAACQ,YAAR,EAAsBD,KAAtB,EAA6BG,KAAK,CAACG,MAAnC,CAAZD;EACAE,8BAA8B,CAACJ,KAAD,CAA9BI;EAEA,OAAOC,kBAAkB,CAACC,IAAnBD,GACJE,WADIF,CACQb,KADRa,EAEJG,GAFIH,CAEA;IACHI,WAAW,EAAEC,+BAA+B,CAC1C;MACEZ,YAAY,EAAER,MAAM,CAACQ,YAAPR,CAAoBqB,OADpC;MAEEhB,SAAS,EAAEA,SAAS,CAACiB;IAFvB,CAD0C,EAK1C;MAAEf,KAAK,EAAEA,KAAK,CAACgB,QAANhB,EAAT;MAA2BiB,WAAW,EAAEd;IAAxC,CAL0C,CADzC;IAQHe,OAAO,EAAE,CAACpB,SAAD,CARN;IASHqB,GAAG,EAAE1B,MAAM,CAAC2B,cAAP3B,IAAyB;EAT3B,CAFAe,CAAP;AAaF,CA1BanB","sourcesContent":["import { createAddConfigLinesInstruction } from '@metaplex-foundation/mpl-candy-machine';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  assertAllConfigLineConstraints,\n  assertCanAdd,\n  assertNotFull,\n} from '../asserts';\nimport { CandyMachineV2, CandyMachineV2Item } from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  BigNumber,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'InsertItemsToCandyMachineV2Operation' as const;\n\n/**\n * Insert items into an existing Candy Machine.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .insertItems({\n *     candyMachine,\n *     items: [\n *       { name: 'My NFT #1', uri: 'https://example.com/nft1' },\n *       { name: 'My NFT #2', uri: 'https://example.com/nft2' },\n *       { name: 'My NFT #3', uri: 'https://example.com/nft3' },\n *     ],\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const insertItemsToCandyMachineV2Operation =\n  useOperation<InsertItemsToCandyMachineV2Operation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type InsertItemsToCandyMachineV2Operation = Operation<\n  typeof Key,\n  InsertItemsToCandyMachineV2Input,\n  InsertItemsToCandyMachineV2Output\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type InsertItemsToCandyMachineV2Input = {\n  /**\n   * The Candy Machine to insert items into.\n   *\n   * We only need a subset of the `CandyMachine` model.\n   * We need its address and the number of items loaded and to be loaded\n   * so we can check if the operation is valid.\n   */\n  candyMachine: Pick<\n    CandyMachineV2,\n    'itemsAvailable' | 'itemsLoaded' | 'address'\n  >;\n\n  /**\n   * The Signer authorized to update the candy machine.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /**\n   * The items to insert into the candy machine.\n   */\n  items: CandyMachineV2Item[];\n\n  /**\n   * The index we should use to insert the new items. This refers to the\n   * index of the first item to insert and the others will follow after it.\n   *\n   * By defaults, this uses the `itemsLoaded` property so items are simply\n   * appended to the current items.\n   *\n   * @defaultValue `candyMachine.itemsLoaded`\n   */\n  index?: BigNumber;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type InsertItemsToCandyMachineV2Output = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const InsertItemsToCandyMachineV2OperationHandler: OperationHandler<InsertItemsToCandyMachineV2Operation> =\n  {\n    async handle(\n      operation: InsertItemsToCandyMachineV2Operation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<InsertItemsToCandyMachineV2Output> {\n      return insertItemsToCandyMachineV2Builder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type InsertItemsToCandyMachineV2BuilderParams = Omit<\n  InsertItemsToCandyMachineV2Input,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * Insert items into an existing Candy Machine.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .candyMachines()\n *   .builders()\n *   .insertItems({ candyMachine, items });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const insertItemsToCandyMachineV2Builder = (\n  metaplex: Metaplex,\n  params: InsertItemsToCandyMachineV2BuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const authority = params.authority ?? metaplex.identity();\n  const index = params.index ?? params.candyMachine.itemsLoaded;\n  const { items } = params;\n  assertNotFull(params.candyMachine, index);\n  assertCanAdd(params.candyMachine, index, items.length);\n  assertAllConfigLineConstraints(items);\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createAddConfigLinesInstruction(\n        {\n          candyMachine: params.candyMachine.address,\n          authority: authority.publicKey,\n        },\n        { index: index.toNumber(), configLines: items }\n      ),\n      signers: [authority],\n      key: params.instructionKey ?? 'insertItems',\n    });\n};\n"]},"metadata":{},"sourceType":"module"}