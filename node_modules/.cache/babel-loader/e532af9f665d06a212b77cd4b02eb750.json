{"ast":null,"code":"import { createUpdateAuctionHouseInstruction, createDelegateAuctioneerInstruction, createUpdateAuctioneerInstruction } from '@metaplex-foundation/mpl-auction-house';\nimport isEqual from 'lodash.isequal';\nimport { AUCTIONEER_ALL_SCOPES } from '../constants.mjs';\nimport { TreasuryDestinationOwnerRequiredError } from '../errors.mjs';\nimport { assertAuctioneerAuctionHouse } from '../models/AuctionHouse.mjs';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { NoInstructionsToSendError } from '../../../errors/SdkError.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateAuctionHouseOperation';\n/**\n * Updates an existing Auction House.\n *\n * ```ts\n * await metaplex\n *   .autionHouse()\n *   .update({\n *     auctionHouse,\n *     canChangeSalePrice: true, // Updates the canChangeSalePrice only.\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst updateAuctionHouseOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst updateAuctionHouseOperationHandler = {\n  async handle(operation, metaplex, scope) {\n    const {\n      auctionHouse,\n      auctioneerAuthority\n    } = operation.input;\n    const builder = updateAuctionHouseBuilder(metaplex, operation.input, scope);\n\n    if (builder.isEmpty()) {\n      throw new NoInstructionsToSendError(Key);\n    }\n\n    const output = await builder.sendAndConfirm(metaplex, scope.confirmOptions);\n    const currentAuctioneerAuthority = auctionHouse.hasAuctioneer ? auctionHouse.auctioneer.authority : undefined;\n    const updatedAuctionHouse = await metaplex.auctionHouse().findByAddress({\n      address: auctionHouse.address,\n      auctioneerAuthority: auctioneerAuthority ?? currentAuctioneerAuthority\n    }, scope);\n    return { ...output,\n      auctionHouse: updatedAuctionHouse\n    };\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Updates an existing Auction House.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .updateAuctionHouse({ auctionHouse, canChangeSalePrice: true })\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst updateAuctionHouseBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const authority = params.authority ?? metaplex.identity();\n  const {\n    auctionHouse\n  } = params;\n  let treasuryWithdrawalDestinationOwner;\n  let treasuryWithdrawalDestination;\n\n  if (auctionHouse.isNative) {\n    treasuryWithdrawalDestinationOwner = params.treasuryWithdrawalDestinationOwner ?? auctionHouse.treasuryWithdrawalDestinationAddress;\n    treasuryWithdrawalDestination = treasuryWithdrawalDestinationOwner;\n  } else if (params.treasuryWithdrawalDestinationOwner) {\n    treasuryWithdrawalDestinationOwner = params.treasuryWithdrawalDestinationOwner;\n    treasuryWithdrawalDestination = metaplex.tokens().pdas().associatedTokenAccount({\n      mint: auctionHouse.treasuryMint.address,\n      owner: treasuryWithdrawalDestinationOwner,\n      programs\n    });\n  } else {\n    throw new TreasuryDestinationOwnerRequiredError();\n  }\n\n  const originalData = {\n    authority: auctionHouse.authorityAddress,\n    feeWithdrawalDestination: auctionHouse.feeWithdrawalDestinationAddress,\n    treasuryWithdrawalDestination: auctionHouse.treasuryWithdrawalDestinationAddress,\n    sellerFeeBasisPoints: auctionHouse.sellerFeeBasisPoints,\n    requiresSignOff: auctionHouse.requiresSignOff,\n    canChangeSalePrice: auctionHouse.canChangeSalePrice\n  };\n  const updatedData = {\n    authority: params.newAuthority ?? originalData.authority,\n    feeWithdrawalDestination: params.feeWithdrawalDestination ?? originalData.feeWithdrawalDestination,\n    treasuryWithdrawalDestination,\n    sellerFeeBasisPoints: params.sellerFeeBasisPoints ?? originalData.sellerFeeBasisPoints,\n    requiresSignOff: params.requiresSignOff ?? originalData.requiresSignOff,\n    canChangeSalePrice: params.canChangeSalePrice ?? originalData.canChangeSalePrice\n  };\n  const shouldSendUpdateInstruction = !isEqual(originalData, updatedData);\n  const shouldAddAuctioneerAuthority = !auctionHouse.hasAuctioneer && !!params.auctioneerAuthority;\n  const shouldUpdateAuctioneerAuthority = auctionHouse.hasAuctioneer && !!params.auctioneerAuthority && !params.auctioneerAuthority.equals(auctionHouse.auctioneer.authority);\n  const shouldUpdateAuctioneerScopes = auctionHouse.hasAuctioneer && !!params.auctioneerScopes && !isEqual(params.auctioneerScopes.sort(), auctionHouse.scopes.sort());\n  const shouldDelegateAuctioneer = shouldAddAuctioneerAuthority;\n  const shouldUpdateAuctioneer = shouldUpdateAuctioneerAuthority || shouldUpdateAuctioneerScopes;\n  return TransactionBuilder.make().setFeePayer(payer) // Update the Auction House data.\n  .when(shouldSendUpdateInstruction, builder => builder.add({\n    instruction: createUpdateAuctionHouseInstruction({\n      treasuryMint: auctionHouse.treasuryMint.address,\n      payer: payer.publicKey,\n      authority: authority.publicKey,\n      newAuthority: updatedData.authority,\n      feeWithdrawalDestination: updatedData.feeWithdrawalDestination,\n      treasuryWithdrawalDestination,\n      treasuryWithdrawalDestinationOwner,\n      auctionHouse: auctionHouse.address\n    }, {\n      sellerFeeBasisPoints: params.sellerFeeBasisPoints ?? null,\n      requiresSignOff: params.requiresSignOff ?? null,\n      canChangeSalePrice: params.canChangeSalePrice ?? null\n    }),\n    signers: [payer, authority],\n    key: params.instructionKey ?? 'updateAuctionHouse'\n  })) // Attach a new Auctioneer instance to the Auction House.\n  .when(shouldDelegateAuctioneer, builder => {\n    const auctioneerAuthority = params.auctioneerAuthority;\n    const defaultScopes = auctionHouse.hasAuctioneer ? auctionHouse.scopes : AUCTIONEER_ALL_SCOPES;\n    return builder.add({\n      instruction: createDelegateAuctioneerInstruction({\n        auctionHouse: auctionHouse.address,\n        authority: authority.publicKey,\n        auctioneerAuthority,\n        ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n          auctionHouse: auctionHouse.address,\n          auctioneerAuthority,\n          programs\n        })\n      }, {\n        scopes: params.auctioneerScopes ?? defaultScopes\n      }),\n      signers: [authority],\n      key: params.delegateAuctioneerInstructionKey ?? 'delegateAuctioneer'\n    });\n  }) // Update the Auctioneer authority and/or scopes of the Auction House.\n  .when(shouldUpdateAuctioneer, builder => {\n    assertAuctioneerAuctionHouse(auctionHouse);\n    const auctioneerAuthority = params.auctioneerAuthority ?? auctionHouse.auctioneer.authority;\n    return builder.add({\n      instruction: createUpdateAuctioneerInstruction({\n        auctionHouse: auctionHouse.address,\n        authority: authority.publicKey,\n        auctioneerAuthority,\n        ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n          auctionHouse: auctionHouse.address,\n          auctioneerAuthority,\n          programs\n        })\n      }, {\n        scopes: params.auctioneerScopes ?? auctionHouse.scopes\n      }),\n      signers: [authority],\n      key: params.updateAuctioneerInstructionKey ?? 'updateAuctioneer'\n    });\n  });\n};\n\nexport { updateAuctionHouseBuilder, updateAuctionHouseOperation, updateAuctionHouseOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/operations/updateAuctionHouse.ts"],"names":["Key","updateAuctionHouseOperation","useOperation","updateAuctionHouseOperationHandler","handle","operation","metaplex","scope","auctionHouse","auctioneerAuthority","input","builder","updateAuctionHouseBuilder","isEmpty","NoInstructionsToSendError","output","sendAndConfirm","confirmOptions","currentAuctioneerAuthority","hasAuctioneer","auctioneer","authority","undefined","updatedAuctionHouse","findByAddress","address","params","options","programs","payer","rpc","getDefaultFeePayer","identity","treasuryWithdrawalDestinationOwner","treasuryWithdrawalDestination","isNative","treasuryWithdrawalDestinationAddress","tokens","pdas","associatedTokenAccount","mint","treasuryMint","owner","TreasuryDestinationOwnerRequiredError","originalData","authorityAddress","feeWithdrawalDestination","feeWithdrawalDestinationAddress","sellerFeeBasisPoints","requiresSignOff","canChangeSalePrice","updatedData","newAuthority","shouldSendUpdateInstruction","isEqual","shouldAddAuctioneerAuthority","shouldUpdateAuctioneerAuthority","equals","shouldUpdateAuctioneerScopes","auctioneerScopes","sort","scopes","shouldDelegateAuctioneer","shouldUpdateAuctioneer","TransactionBuilder","make","setFeePayer","when","add","instruction","createUpdateAuctionHouseInstruction","publicKey","signers","key","instructionKey","defaultScopes","AUCTIONEER_ALL_SCOPES","createDelegateAuctioneerInstruction","ahAuctioneerPda","delegateAuctioneerInstructionKey","assertAuctioneerAuctionHouse","createUpdateAuctioneerInstruction","updateAuctioneerInstructionKey"],"mappings":"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","sourcesContent":["import {\n  AuthorityScope,\n  createDelegateAuctioneerInstruction,\n  createUpdateAuctioneerInstruction,\n  createUpdateAuctionHouseInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { PublicKey } from '@solana/web3.js';\nimport isEqual from 'lodash.isequal';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AUCTIONEER_ALL_SCOPES } from '../constants';\nimport { TreasuryDestinationOwnerRequiredError } from '../errors';\nimport {\n  assertAuctioneerAuctionHouse,\n  AuctionHouse,\n} from '../models/AuctionHouse';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\nimport { NoInstructionsToSendError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateAuctionHouseOperation' as const;\n\n/**\n * Updates an existing Auction House.\n *\n * ```ts\n * await metaplex\n *   .autionHouse()\n *   .update({\n *     auctionHouse,\n *     canChangeSalePrice: true, // Updates the canChangeSalePrice only.\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const updateAuctionHouseOperation =\n  useOperation<UpdateAuctionHouseOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UpdateAuctionHouseOperation = Operation<\n  typeof Key,\n  UpdateAuctionHouseInput,\n  UpdateAuctionHouseOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UpdateAuctionHouseInput = {\n  /**\n   * The Auction House model.\n   * We need the full model in order to compare the current data with\n   * the provided data to update. For instance, if you only want to\n   * update the `feeWithdrawalDestination`, we need to send an instruction that updates\n   * the data whilst keeping all other properties the same.\n   */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * The Auction House authority.\n   *\n   * @defaultValue `auctionHouse.authority`\n   */\n  authority?: Signer;\n\n  /**\n   * The share of the sale the auction house takes on all NFTs as a fee.\n   *\n   * @defaultValue `auctionHouse.requiresSignOff`\n   */\n  sellerFeeBasisPoints?: number | null;\n\n  /**\n   * This allows the centralised authority to gate which NFT can be listed, bought and sold.\n   *\n   * @defaultValue `auctionHouse.requiresSignOff`\n   */\n  requiresSignOff?: boolean | null;\n\n  /**\n   * Is intended to be used with the Auction House that requires sign off.\n   * If the seller intentionally lists their NFT for a price of 0, a new FreeSellerTradeState is made.\n   * The Auction House can then change the price to match a matching Bid that is greater than 0.\n   *\n   * @defaultValue `auctionHouse.canChangeSalePrice`\n   */\n  canChangeSalePrice?: boolean | null;\n\n  /**\n   * The new Auction House authority if you want to change it.\n   *\n   * @defaultValue `auctionHouse.authority`\n   */\n  newAuthority?: PublicKey;\n\n  /**\n   * The account that is marked as a destination of withdrawal from the fee account.\n   *\n   * @defaultValue `auctionHouse.feeWithdrawalDestination`\n   */\n  feeWithdrawalDestination?: PublicKey;\n\n  /**\n   * The account that is marked as the owner of treasury withdrawal destination.\n   *\n   * @defaultValue `auctionHouse.treasuryWithdrawalDestinationAddress`\n   */\n  treasuryWithdrawalDestinationOwner?: PublicKey;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House is going to have Auctioneer enabled.\n   *\n   * Provide it if you want to delegate Auctioneer on the Auction House that doesn't have Auctioneer enabled.\n   *\n   * @defaultValue `auctionHouse.auctioneerAuthority`\n   */\n  auctioneerAuthority?: PublicKey;\n\n  /**\n   * The list of scopes available to the user in the Auction House.\n   * For example Bid, List, Execute Sale.\n   *\n   * Only takes place when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue `auctionHouse.scopes`\n   */\n  auctioneerScopes?: AuthorityScope[];\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UpdateAuctionHouseOutput = {\n  /** The updated Auction House model. */\n  auctionHouse: AuctionHouse;\n\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const updateAuctionHouseOperationHandler: OperationHandler<UpdateAuctionHouseOperation> =\n  {\n    async handle(\n      operation: UpdateAuctionHouseOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) {\n      const { auctionHouse, auctioneerAuthority } = operation.input;\n      const builder = updateAuctionHouseBuilder(\n        metaplex,\n        operation.input,\n        scope\n      );\n\n      if (builder.isEmpty()) {\n        throw new NoInstructionsToSendError(Key);\n      }\n\n      const output = await builder.sendAndConfirm(\n        metaplex,\n        scope.confirmOptions\n      );\n\n      const currentAuctioneerAuthority = auctionHouse.hasAuctioneer\n        ? auctionHouse.auctioneer.authority\n        : undefined;\n      const updatedAuctionHouse = await metaplex.auctionHouse().findByAddress(\n        {\n          address: auctionHouse.address,\n          auctioneerAuthority:\n            auctioneerAuthority ?? currentAuctioneerAuthority,\n        },\n        scope\n      );\n\n      return { ...output, auctionHouse: updatedAuctionHouse };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UpdateAuctionHouseBuilderParams = Omit<\n  UpdateAuctionHouseInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n  delegateAuctioneerInstructionKey?: string;\n  updateAuctioneerInstructionKey?: string;\n};\n\n/**\n * Updates an existing Auction House.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .updateAuctionHouse({ auctionHouse, canChangeSalePrice: true })\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const updateAuctionHouseBuilder = (\n  metaplex: Metaplex,\n  params: UpdateAuctionHouseBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const authority = params.authority ?? metaplex.identity();\n  const { auctionHouse } = params;\n\n  let treasuryWithdrawalDestinationOwner: PublicKey;\n  let treasuryWithdrawalDestination: PublicKey;\n  if (auctionHouse.isNative) {\n    treasuryWithdrawalDestinationOwner =\n      params.treasuryWithdrawalDestinationOwner ??\n      auctionHouse.treasuryWithdrawalDestinationAddress;\n    treasuryWithdrawalDestination = treasuryWithdrawalDestinationOwner;\n  } else if (params.treasuryWithdrawalDestinationOwner) {\n    treasuryWithdrawalDestinationOwner =\n      params.treasuryWithdrawalDestinationOwner;\n    treasuryWithdrawalDestination = metaplex\n      .tokens()\n      .pdas()\n      .associatedTokenAccount({\n        mint: auctionHouse.treasuryMint.address,\n        owner: treasuryWithdrawalDestinationOwner,\n        programs,\n      });\n  } else {\n    throw new TreasuryDestinationOwnerRequiredError();\n  }\n\n  const originalData = {\n    authority: auctionHouse.authorityAddress,\n    feeWithdrawalDestination: auctionHouse.feeWithdrawalDestinationAddress,\n    treasuryWithdrawalDestination:\n      auctionHouse.treasuryWithdrawalDestinationAddress,\n    sellerFeeBasisPoints: auctionHouse.sellerFeeBasisPoints,\n    requiresSignOff: auctionHouse.requiresSignOff,\n    canChangeSalePrice: auctionHouse.canChangeSalePrice,\n  };\n  const updatedData = {\n    authority: params.newAuthority ?? originalData.authority,\n    feeWithdrawalDestination:\n      params.feeWithdrawalDestination ?? originalData.feeWithdrawalDestination,\n    treasuryWithdrawalDestination,\n    sellerFeeBasisPoints:\n      params.sellerFeeBasisPoints ?? originalData.sellerFeeBasisPoints,\n    requiresSignOff: params.requiresSignOff ?? originalData.requiresSignOff,\n    canChangeSalePrice:\n      params.canChangeSalePrice ?? originalData.canChangeSalePrice,\n  };\n\n  const shouldSendUpdateInstruction = !isEqual(originalData, updatedData);\n  const shouldAddAuctioneerAuthority =\n    !auctionHouse.hasAuctioneer && !!params.auctioneerAuthority;\n  const shouldUpdateAuctioneerAuthority =\n    auctionHouse.hasAuctioneer &&\n    !!params.auctioneerAuthority &&\n    !params.auctioneerAuthority.equals(auctionHouse.auctioneer.authority);\n  const shouldUpdateAuctioneerScopes =\n    auctionHouse.hasAuctioneer &&\n    !!params.auctioneerScopes &&\n    !isEqual(params.auctioneerScopes.sort(), auctionHouse.scopes.sort());\n  const shouldDelegateAuctioneer = shouldAddAuctioneerAuthority;\n  const shouldUpdateAuctioneer =\n    shouldUpdateAuctioneerAuthority || shouldUpdateAuctioneerScopes;\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Update the Auction House data.\n      .when(shouldSendUpdateInstruction, (builder) =>\n        builder.add({\n          instruction: createUpdateAuctionHouseInstruction(\n            {\n              treasuryMint: auctionHouse.treasuryMint.address,\n              payer: payer.publicKey,\n              authority: authority.publicKey,\n              newAuthority: updatedData.authority,\n              feeWithdrawalDestination: updatedData.feeWithdrawalDestination,\n              treasuryWithdrawalDestination,\n              treasuryWithdrawalDestinationOwner,\n              auctionHouse: auctionHouse.address,\n            },\n            {\n              sellerFeeBasisPoints: params.sellerFeeBasisPoints ?? null,\n              requiresSignOff: params.requiresSignOff ?? null,\n              canChangeSalePrice: params.canChangeSalePrice ?? null,\n            }\n          ),\n          signers: [payer, authority],\n          key: params.instructionKey ?? 'updateAuctionHouse',\n        })\n      )\n\n      // Attach a new Auctioneer instance to the Auction House.\n      .when(shouldDelegateAuctioneer, (builder) => {\n        const auctioneerAuthority = params.auctioneerAuthority as PublicKey;\n        const defaultScopes = auctionHouse.hasAuctioneer\n          ? auctionHouse.scopes\n          : AUCTIONEER_ALL_SCOPES;\n        return builder.add({\n          instruction: createDelegateAuctioneerInstruction(\n            {\n              auctionHouse: auctionHouse.address,\n              authority: authority.publicKey,\n              auctioneerAuthority,\n              ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n                auctionHouse: auctionHouse.address,\n                auctioneerAuthority,\n                programs,\n              }),\n            },\n            { scopes: params.auctioneerScopes ?? defaultScopes }\n          ),\n          signers: [authority],\n          key: params.delegateAuctioneerInstructionKey ?? 'delegateAuctioneer',\n        });\n      })\n\n      // Update the Auctioneer authority and/or scopes of the Auction House.\n      .when(shouldUpdateAuctioneer, (builder) => {\n        assertAuctioneerAuctionHouse(auctionHouse);\n        const auctioneerAuthority =\n          params.auctioneerAuthority ?? auctionHouse.auctioneer.authority;\n        return builder.add({\n          instruction: createUpdateAuctioneerInstruction(\n            {\n              auctionHouse: auctionHouse.address,\n              authority: authority.publicKey,\n              auctioneerAuthority,\n              ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n                auctionHouse: auctionHouse.address,\n                auctioneerAuthority,\n                programs,\n              }),\n            },\n            {\n              scopes: params.auctioneerScopes ?? auctionHouse.scopes,\n            }\n          ),\n          signers: [authority],\n          key: params.updateAuctioneerInstructionKey ?? 'updateAuctioneer',\n        });\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}