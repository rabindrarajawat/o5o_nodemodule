{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeSyncNativeInstructionUnchecked = exports.decodeSyncNativeInstruction = exports.createSyncNativeInstruction = exports.syncNativeInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\n\n\nexports.syncNativeInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct a SyncNative instruction\n *\n * @param account   Native account to sync lamports from\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createSyncNativeInstruction(account) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(exports.syncNativeInstructionData.span);\n  exports.syncNativeInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.SyncNative\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createSyncNativeInstruction = createSyncNativeInstruction;\n/**\n * Decode a SyncNative instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeSyncNativeInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.syncNativeInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account\n    },\n    data\n  } = decodeSyncNativeInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.SyncNative) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account) throw new errors_js_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account\n    },\n    data\n  };\n}\n\nexports.decodeSyncNativeInstruction = decodeSyncNativeInstruction;\n/**\n * Decode a SyncNative instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeSyncNativeInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account\n    },\n    data: exports.syncNativeInstructionData.decode(data)\n  };\n}\n\nexports.decodeSyncNativeInstructionUnchecked = decodeSyncNativeInstructionUnchecked;","map":{"version":3,"sources":["../../../src/instructions/syncNative.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAMA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAOA;;;AACa,OAAA,CAAA,yBAAA,GAA4B,CAAA,GAAA,eAAA,CAAA,MAAA,EAAkC,CAAC,CAAA,GAAA,eAAA,CAAA,EAAA,EAAG,aAAH,CAAD,CAAlC,CAA5B;AAEb;;;;;;;AAOG;;AACH,SAAgB,2BAAhB,CAA4C,OAA5C,EAA4F;EAAA,IAA5B,SAA4B,uEAAhB,cAAA,CAAA,gBAAgB;EACxF,MAAM,IAAI,GAAG,CAAC;IAAE,MAAM,EAAE,OAAV;IAAmB,QAAQ,EAAE,KAA7B;IAAoC,UAAU,EAAE;EAAhD,CAAD,CAAb;EAEA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,OAAA,CAAA,yBAAA,CAA0B,IAAvC,CAAb;EACA,OAAA,CAAA,yBAAA,CAA0B,MAA1B,CAAiC;IAAE,WAAW,EAAE,UAAA,CAAA,gBAAA,CAAiB;EAAhC,CAAjC,EAA+E,IAA/E;EAEA,OAAO,IAAI,SAAA,CAAA,sBAAJ,CAA2B;IAAE,IAAF;IAAQ,SAAR;IAAmB;EAAnB,CAA3B,CAAP;AACH;;AAPD,OAAA,CAAA,2BAAA,GAAA,2BAAA;AAoBA;;;;;;;AAOG;;AACH,SAAgB,2BAAhB,CACI,WADJ,EAEgC;EAAA,IAA5B,SAA4B,uEAAhB,cAAA,CAAA,gBAAgB;EAE5B,IAAI,CAAC,WAAW,CAAC,SAAZ,CAAsB,MAAtB,CAA6B,SAA7B,CAAL,EAA8C,MAAM,IAAI,WAAA,CAAA,mCAAJ,EAAN;EAC9C,IAAI,WAAW,CAAC,IAAZ,CAAiB,MAAjB,KAA4B,OAAA,CAAA,yBAAA,CAA0B,IAA1D,EAAgE,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN;EAEhE,MAAM;IACF,IAAI,EAAE;MAAE;IAAF,CADJ;IAEF;EAFE,IAGF,oCAAoC,CAAC,WAAD,CAHxC;EAIA,IAAI,IAAI,CAAC,WAAL,KAAqB,UAAA,CAAA,gBAAA,CAAiB,UAA1C,EAAsD,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN;EACtD,IAAI,CAAC,OAAL,EAAc,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN,CAVc,CAY5B;;EAEA,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF;IADE,CAFH;IAKH;EALG,CAAP;AAOH;;AAvBD,OAAA,CAAA,2BAAA,GAAA,2BAAA;AAoCA;;;;;;AAMG;;AACH,SAAgB,oCAAhB,OAIyB;EAAA,IAJ4B;IACjD,SADiD;IAEjD,IAAI,EAAE,CAAC,OAAD,CAF2C;IAGjD;EAHiD,CAI5B;EACrB,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF;IADE,CAFH;IAKH,IAAI,EAAE,OAAA,CAAA,yBAAA,CAA0B,MAA1B,CAAiC,IAAjC;EALH,CAAP;AAOH;;AAZD,OAAA,CAAA,oCAAA,GAAA,oCAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeSyncNativeInstructionUnchecked = exports.decodeSyncNativeInstruction = exports.createSyncNativeInstruction = exports.syncNativeInstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.syncNativeInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct a SyncNative instruction\n *\n * @param account   Native account to sync lamports from\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createSyncNativeInstruction(account, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(exports.syncNativeInstructionData.span);\n    exports.syncNativeInstructionData.encode({ instruction: types_js_1.TokenInstruction.SyncNative }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createSyncNativeInstruction = createSyncNativeInstruction;\n/**\n * Decode a SyncNative instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeSyncNativeInstruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.syncNativeInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { account }, data, } = decodeSyncNativeInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.SyncNative)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!account)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data,\n    };\n}\nexports.decodeSyncNativeInstruction = decodeSyncNativeInstruction;\n/**\n * Decode a SyncNative instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeSyncNativeInstructionUnchecked({ programId, keys: [account], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data: exports.syncNativeInstructionData.decode(data),\n    };\n}\nexports.decodeSyncNativeInstructionUnchecked = decodeSyncNativeInstructionUnchecked;\n//# sourceMappingURL=syncNative.js.map"]},"metadata":{},"sourceType":"script"}