{"ast":null,"code":"import { createRevokeUseAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'RevokeNftUseAuthorityOperation';\n/**\n * Revokes an existing use authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .revokeUseAuthority({ mintAddress, user };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst revokeNftUseAuthorityOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst revokeNftUseAuthorityOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    return revokeNftUseAuthorityBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Revokes an existing use authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .revokeUseAuthority({ mintAddress, user });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst revokeNftUseAuthorityBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    mintAddress,\n    user,\n    owner = metaplex.identity()\n  } = params; // Programs.\n\n  const systemProgram = metaplex.programs().getSystem(programs);\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs); // PDAs.\n\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs\n  });\n  const useAuthorityRecord = metaplex.nfts().pdas().useAuthorityRecord({\n    mint: mintAddress,\n    useAuthority: user,\n    programs\n  });\n  const ownerTokenAddress = params.ownerTokenAddress ?? metaplex.tokens().pdas().associatedTokenAccount({\n    mint: mintAddress,\n    owner: owner.publicKey,\n    programs\n  });\n  return TransactionBuilder.make().setFeePayer(payer) // Revoke the use authority.\n  .add({\n    instruction: createRevokeUseAuthorityInstruction({\n      useAuthorityRecord,\n      owner: owner.publicKey,\n      user,\n      ownerTokenAccount: ownerTokenAddress,\n      mint: mintAddress,\n      metadata,\n      tokenProgram: tokenProgram.address,\n      systemProgram: systemProgram.address\n    }, tokenMetadataProgram.address),\n    signers: [owner],\n    key: params.instructionKey ?? 'revokeUseAuthority'\n  });\n};\n\nexport { revokeNftUseAuthorityBuilder, revokeNftUseAuthorityOperation, revokeNftUseAuthorityOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/nftModule/operations/revokeNftUseAuthority.ts"],"names":["Key","revokeNftUseAuthorityOperation","useOperation","revokeNftUseAuthorityOperationHandler","handle","operation","metaplex","scope","revokeNftUseAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","user","owner","identity","systemProgram","getSystem","tokenProgram","getToken","tokenMetadataProgram","getTokenMetadata","metadata","nfts","pdas","mint","useAuthorityRecord","useAuthority","ownerTokenAddress","tokens","associatedTokenAccount","publicKey","TransactionBuilder","make","setFeePayer","add","instruction","createRevokeUseAuthorityInstruction","ownerTokenAccount","address","signers","key","instructionKey"],"mappings":";;4EAaA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,gCAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,8BAA8B,GACzCC,YAAY,CAAiCF,GAAjC,C;AAEd;AACA;AACA;AACA;;AA4CA;AACA;AACA;AACA;;AACO,MAAMG,qCAAuF,GAClG;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAImC;IACzC,OAAOC,4BAA4B,CACjCF,QADiC,EAEjCD,SAAS,CAACI,KAFuB,EAGjCF,KAHiC,CAA5BC,CAILE,cAJKF,CAIUF,QAJVE,EAIoBD,KAAK,CAACI,cAJ1BH,CAAP;EAKF;AAXF,CADK,C,CAeP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaA,MAAAA,4BAA4B,GAAG,UAC1CF,QAD0C,EAE1CM,MAF0C,EAInB;EAAA,IADvBC,OACuB,uEADc,EACd;EACvB,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGT,QAAQ,CAACU,GAATV,GAAeW,kBAAfX;EAApB,IAA4DO,OAAlE;EACA,MAAM;IAAEK,WAAF;IAAeC,IAAf;IAAqBC,KAAK,GAAGd,QAAQ,CAACe,QAATf;EAA7B,IAAqDM,MAA3D,CAFuB,CAIvB;;EACA,MAAMU,aAAa,GAAGhB,QAAQ,CAACQ,QAATR,GAAoBiB,SAApBjB,CAA8BQ,QAA9BR,CAAtB;EACA,MAAMkB,YAAY,GAAGlB,QAAQ,CAACQ,QAATR,GAAoBmB,QAApBnB,CAA6BQ,QAA7BR,CAArB;EACA,MAAMoB,oBAAoB,GAAGpB,QAAQ,CAACQ,QAATR,GAAoBqB,gBAApBrB,CAAqCQ,QAArCR,CAA7B,CAPuB,CASvB;;EACA,MAAMsB,QAAQ,GAAGtB,QAAQ,CAACuB,IAATvB,GAAgBwB,IAAhBxB,GAAuBsB,QAAvBtB,CAAgC;IAC/CyB,IAAI,EAAEb,WADyC;IAE/CJ;EAF+C,CAAhCR,CAAjB;EAIA,MAAM0B,kBAAkB,GAAG1B,QAAQ,CAACuB,IAATvB,GAAgBwB,IAAhBxB,GAAuB0B,kBAAvB1B,CAA0C;IACnEyB,IAAI,EAAEb,WAD6D;IAEnEe,YAAY,EAAEd,IAFqD;IAGnEL;EAHmE,CAA1CR,CAA3B;EAKA,MAAM4B,iBAAiB,GACrBtB,MAAM,CAACsB,iBAAPtB,IACAN,QAAQ,CAAC6B,MAAT7B,GAAkBwB,IAAlBxB,GAAyB8B,sBAAzB9B,CAAgD;IAC9CyB,IAAI,EAAEb,WADwC;IAE9CE,KAAK,EAAEA,KAAK,CAACiB,SAFiC;IAG9CvB;EAH8C,CAAhDR,CAFF;EAQA,OACEgC,kBAAkB,CAACC,IAAnBD,GACGE,WADHF,CACevB,KADfuB,EAGE;EAHFA,CAIGG,GAJHH,CAIO;IACHI,WAAW,EAAEC,mCAAmC,CAC9C;MACEX,kBADF;MAEEZ,KAAK,EAAEA,KAAK,CAACiB,SAFf;MAGElB,IAHF;MAIEyB,iBAAiB,EAAEV,iBAJrB;MAKEH,IAAI,EAAEb,WALR;MAMEU,QANF;MAOEJ,YAAY,EAAEA,YAAY,CAACqB,OAP7B;MAQEvB,aAAa,EAAEA,aAAa,CAACuB;IAR/B,CAD8C,EAW9CnB,oBAAoB,CAACmB,OAXyB,CAD7C;IAcHC,OAAO,EAAE,CAAC1B,KAAD,CAdN;IAeH2B,GAAG,EAAEnC,MAAM,CAACoC,cAAPpC,IAAyB;EAf3B,CAJP0B,CADF;AAuBF,CAtDa9B","sourcesContent":["import { createRevokeUseAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'RevokeNftUseAuthorityOperation' as const;\n\n/**\n * Revokes an existing use authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .revokeUseAuthority({ mintAddress, user };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const revokeNftUseAuthorityOperation =\n  useOperation<RevokeNftUseAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type RevokeNftUseAuthorityOperation = Operation<\n  typeof Key,\n  RevokeNftUseAuthorityInput,\n  RevokeNftUseAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type RevokeNftUseAuthorityInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The address of the use authority to revoke. */\n  user: PublicKey;\n\n  /**\n   * The owner of the NFT or SFT as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  owner?: Signer;\n\n  /**\n   * The address of the token account linking the mint account\n   * with the owner account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `owner` parameters.\n   */\n  ownerTokenAddress?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type RevokeNftUseAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const revokeNftUseAuthorityOperationHandler: OperationHandler<RevokeNftUseAuthorityOperation> =\n  {\n    handle: async (\n      operation: RevokeNftUseAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<RevokeNftUseAuthorityOutput> => {\n      return revokeNftUseAuthorityBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type RevokeNftUseAuthorityBuilderParams = Omit<\n  RevokeNftUseAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that revokes the use authority. */\n  instructionKey?: string;\n};\n\n/**\n * Revokes an existing use authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .revokeUseAuthority({ mintAddress, user });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const revokeNftUseAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: RevokeNftUseAuthorityBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { mintAddress, user, owner = metaplex.identity() } = params;\n\n  // Programs.\n  const systemProgram = metaplex.programs().getSystem(programs);\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  // PDAs.\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs,\n  });\n  const useAuthorityRecord = metaplex.nfts().pdas().useAuthorityRecord({\n    mint: mintAddress,\n    useAuthority: user,\n    programs,\n  });\n  const ownerTokenAddress =\n    params.ownerTokenAddress ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: owner.publicKey,\n      programs,\n    });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Revoke the use authority.\n      .add({\n        instruction: createRevokeUseAuthorityInstruction(\n          {\n            useAuthorityRecord,\n            owner: owner.publicKey,\n            user,\n            ownerTokenAccount: ownerTokenAddress,\n            mint: mintAddress,\n            metadata,\n            tokenProgram: tokenProgram.address,\n            systemProgram: systemProgram.address,\n          },\n          tokenMetadataProgram.address\n        ),\n        signers: [owner],\n        key: params.instructionKey ?? 'revokeUseAuthority',\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}