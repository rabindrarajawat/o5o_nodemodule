{"ast":null,"code":"import { toPurchaseReceiptAccount } from '../accounts.mjs';\nimport { toLazyPurchase } from '../models/Purchase.mjs';\nimport { useOperation } from '../../../types/Operation.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindPurchaseByReceiptOperation';\n/**\n * Finds a Purchase by its receipt address.\n *\n * ```ts\n * const nft = await metaplex\n *   .auctionHouse()\n *   .findPurchaseByReceipt({ receiptAddress, auctionHouse };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst findPurchaseByReceiptOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst findPurchaseByReceiptOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const {\n      receiptAddress,\n      auctionHouse\n    } = operation.input;\n    const account = toPurchaseReceiptAccount(await metaplex.rpc().getAccount(receiptAddress, scope.commitment));\n    scope.throwIfCanceled();\n    const lazyPurchase = toLazyPurchase(account, auctionHouse);\n    return metaplex.auctionHouse().loadPurchase({\n      lazyPurchase,\n      ...operation.input\n    }, scope);\n  }\n};\nexport { findPurchaseByReceiptOperation, findPurchaseByReceiptOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/operations/findPurchaseByReceipt.ts"],"names":["Key","findPurchaseByReceiptOperation","useOperation","findPurchaseByReceiptOperationHandler","handle","operation","metaplex","scope","receiptAddress","auctionHouse","input","account","toPurchaseReceiptAccount","rpc","getAccount","commitment","throwIfCanceled","lazyPurchase","toLazyPurchase","loadPurchase"],"mappings":";;6DAWA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,gCAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,8BAA8B,GACzCC,YAAY,CAAiCF,GAAjC,C;AAEd;AACA;AACA;AACA;;AA8BA;AACA;AACA;AACA;;AACO,MAAMG,qCAAuF,GAClG;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MAAEC,cAAF;MAAkBC;IAAlB,IAAmCJ,SAAS,CAACK,KAAnD;IAEA,MAAMC,OAAO,GAAGC,wBAAwB,CACtC,MAAMN,QAAQ,CAACO,GAATP,GAAeQ,UAAfR,CAA0BE,cAA1BF,EAA0CC,KAAK,CAACQ,UAAhDT,CADgC,CAAxC;IAGAC,KAAK,CAACS,eAANT;IAEA,MAAMU,YAAY,GAAGC,cAAc,CAACP,OAAD,EAAUF,YAAV,CAAnC;IACA,OAAOH,QAAQ,CACZG,YADIH,GAEJa,YAFIb,CAES;MAAEW,YAAF;MAAgB,GAAGZ,SAAS,CAACK;IAA7B,CAFTJ,EAE+CC,KAF/CD,CAAP;EAGF;AAjBF,CADK","sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { toPurchaseReceiptAccount } from '../accounts';\nimport { AuctionHouse, Purchase, toLazyPurchase } from '../models';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindPurchaseByReceiptOperation' as const;\n\n/**\n * Finds a Purchase by its receipt address.\n *\n * ```ts\n * const nft = await metaplex\n *   .auctionHouse()\n *   .findPurchaseByReceipt({ receiptAddress, auctionHouse };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findPurchaseByReceiptOperation =\n  useOperation<FindPurchaseByReceiptOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindPurchaseByReceiptOperation = Operation<\n  typeof Key,\n  FindPurchaseByReceiptInput,\n  Purchase\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindPurchaseByReceiptInput = {\n  /**\n   * The address of the purchase receipt account.\n   * This is the account that stores information about this purchase.\n   * The Purchase model is built on top of this account.\n   */\n  receiptAddress: PublicKey;\n\n  /** A model of the Auction House related to this purchase. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * Whether or not we should fetch the JSON Metadata for the NFT or SFT.\n   *\n   * @defaultValue `true`\n   */\n  loadJsonMetadata?: boolean;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findPurchaseByReceiptOperationHandler: OperationHandler<FindPurchaseByReceiptOperation> =\n  {\n    handle: async (\n      operation: FindPurchaseByReceiptOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) => {\n      const { receiptAddress, auctionHouse } = operation.input;\n\n      const account = toPurchaseReceiptAccount(\n        await metaplex.rpc().getAccount(receiptAddress, scope.commitment)\n      );\n      scope.throwIfCanceled();\n\n      const lazyPurchase = toLazyPurchase(account, auctionHouse);\n      return metaplex\n        .auctionHouse()\n        .loadPurchase({ lazyPurchase, ...operation.input }, scope);\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}