{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, TokenUnsupportedInstructionError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\n\nexport const initializeMintCloseAuthorityInstructionData = struct([u8('instruction'), u8('closeAuthorityOption'), publicKey('closeAuthority')]);\n/**\n * Construct an InitializeMintCloseAuthority instruction\n *\n * @param mint            Token mint account\n * @param closeAuthority  Optional authority that can close the mint\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createInitializeMintCloseAuthorityInstruction(mint, closeAuthority, programId) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(initializeMintCloseAuthorityInstructionData.span);\n  initializeMintCloseAuthorityInstructionData.encode({\n    instruction: TokenInstruction.InitializeMintCloseAuthority,\n    closeAuthorityOption: closeAuthority ? 1 : 0,\n    closeAuthority: closeAuthority || new PublicKey(0)\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode an InitializeMintCloseAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeInitializeMintCloseAuthorityInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeMintCloseAuthorityInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint\n    },\n    data\n  } = decodeInitializeMintCloseAuthorityInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.InitializeMintCloseAuthority) throw new TokenInvalidInstructionTypeError();\n  if (!mint) throw new TokenInvalidInstructionKeysError();\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data\n  };\n}\n/**\n * Decode an InitializeMintCloseAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeInitializeMintCloseAuthorityInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [mint],\n    data\n  } = _ref;\n  const {\n    instruction,\n    closeAuthorityOption,\n    closeAuthority\n  } = initializeMintCloseAuthorityInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data: {\n      instruction,\n      closeAuthority: closeAuthorityOption ? closeAuthority : null\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/instructions/initializeMintCloseAuthority.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,EAAiB,EAAjB,QAA2B,uBAA3B;AACA,SAAS,SAAT,QAA0B,6BAA1B;AAEA,SAAS,SAAT,EAAoB,sBAApB,QAAkD,iBAAlD;AACA,SAAS,yBAAT,QAA0C,iBAA1C;AACA,SACI,gCADJ,EAEI,gCAFJ,EAGI,mCAHJ,EAII,gCAJJ,EAKI,gCALJ,QAMO,cANP;AAOA,SAAS,gBAAT,QAAiC,YAAjC;AASA;;AACA,OAAO,MAAM,2CAA2C,GAAG,MAAM,CAA8C,CAC3G,EAAE,CAAC,aAAD,CADyG,EAE3G,EAAE,CAAC,sBAAD,CAFyG,EAG3G,SAAS,CAAC,gBAAD,CAHkG,CAA9C,CAA1D;AAMP;;;;;;;;AAQG;;AACH,OAAM,SAAU,6CAAV,CACF,IADE,EAEF,cAFE,EAGF,SAHE,EAGkB;EAEpB,IAAI,CAAC,yBAAyB,CAAC,SAAD,CAA9B,EAA2C;IACvC,MAAM,IAAI,gCAAJ,EAAN;EACH;;EACD,MAAM,IAAI,GAAG,CAAC;IAAE,MAAM,EAAE,IAAV;IAAgB,QAAQ,EAAE,KAA1B;IAAiC,UAAU,EAAE;EAA7C,CAAD,CAAb;EAEA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,2CAA2C,CAAC,IAAzD,CAAb;EACA,2CAA2C,CAAC,MAA5C,CACI;IACI,WAAW,EAAE,gBAAgB,CAAC,4BADlC;IAEI,oBAAoB,EAAE,cAAc,GAAG,CAAH,GAAO,CAF/C;IAGI,cAAc,EAAE,cAAc,IAAI,IAAI,SAAJ,CAAc,CAAd;EAHtC,CADJ,EAMI,IANJ;EASA,OAAO,IAAI,sBAAJ,CAA2B;IAAE,IAAF;IAAQ,SAAR;IAAmB;EAAnB,CAA3B,CAAP;AACH;AAcD;;;;;;;AAOG;;AACH,OAAM,SAAU,6CAAV,CACF,WADE,EAEF,SAFE,EAEkB;EAEpB,IAAI,CAAC,WAAW,CAAC,SAAZ,CAAsB,MAAtB,CAA6B,SAA7B,CAAL,EAA8C,MAAM,IAAI,mCAAJ,EAAN;EAC9C,IAAI,WAAW,CAAC,IAAZ,CAAiB,MAAjB,KAA4B,2CAA2C,CAAC,IAA5E,EACI,MAAM,IAAI,gCAAJ,EAAN;EAEJ,MAAM;IACF,IAAI,EAAE;MAAE;IAAF,CADJ;IAEF;EAFE,IAGF,sDAAsD,CAAC,WAAD,CAH1D;EAIA,IAAI,IAAI,CAAC,WAAL,KAAqB,gBAAgB,CAAC,4BAA1C,EACI,MAAM,IAAI,gCAAJ,EAAN;EACJ,IAAI,CAAC,IAAL,EAAW,MAAM,IAAI,gCAAJ,EAAN;EAEX,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF;IADE,CAFH;IAKH;EALG,CAAP;AAOH;AAcD;;;;;;AAMG;;AACH,OAAM,SAAU,sDAAV,OAImB;EAAA,IAJ8C;IACnE,SADmE;IAEnE,IAAI,EAAE,CAAC,IAAD,CAF6D;IAGnE;EAHmE,CAI9C;EACrB,MAAM;IAAE,WAAF;IAAe,oBAAf;IAAqC;EAArC,IACF,2CAA2C,CAAC,MAA5C,CAAmD,IAAnD,CADJ;EAGA,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF;IADE,CAFH;IAKH,IAAI,EAAE;MACF,WADE;MAEF,cAAc,EAAE,oBAAoB,GAAG,cAAH,GAAoB;IAFtD;EALH,CAAP;AAUH","sourceRoot":"","sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, TokenUnsupportedInstructionError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const initializeMintCloseAuthorityInstructionData = struct([\n    u8('instruction'),\n    u8('closeAuthorityOption'),\n    publicKey('closeAuthority'),\n]);\n/**\n * Construct an InitializeMintCloseAuthority instruction\n *\n * @param mint            Token mint account\n * @param closeAuthority  Optional authority that can close the mint\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMintCloseAuthorityInstruction(mint, closeAuthority, programId) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(initializeMintCloseAuthorityInstructionData.span);\n    initializeMintCloseAuthorityInstructionData.encode({\n        instruction: TokenInstruction.InitializeMintCloseAuthority,\n        closeAuthorityOption: closeAuthority ? 1 : 0,\n        closeAuthority: closeAuthority || new PublicKey(0),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeMintCloseAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMintCloseAuthorityInstruction(instruction, programId) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMintCloseAuthorityInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint }, data, } = decodeInitializeMintCloseAuthorityInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMintCloseAuthority)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeMintCloseAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMintCloseAuthorityInstructionUnchecked({ programId, keys: [mint], data, }) {\n    const { instruction, closeAuthorityOption, closeAuthority } = initializeMintCloseAuthorityInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: {\n            instruction,\n            closeAuthority: closeAuthorityOption ? closeAuthority : null,\n        },\n    };\n}\n//# sourceMappingURL=initializeMintCloseAuthority.js.map"]},"metadata":{},"sourceType":"module"}