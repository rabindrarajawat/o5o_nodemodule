{"ast":null,"code":"import { CandyGuard } from '@metaplex-foundation/mpl-candy-guard';\nimport { GpaBuilder } from '../../../utils/GpaBuilder.mjs';\nimport { toCandyGuard } from '../models/CandyGuard.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindCandyGuardsByAuthorityOperation';\n/**\n * Find all Candy Guards matching by a given authority.\n *\n * ```ts\n * const candyGuards = await metaplex\n *   .candyMachines()\n *   .findAllCandyGuardsByAuthority({ authority: new PublicKey('...') });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst findCandyGuardsByAuthorityOperation = _findCandyGuardsByAuthorityOperation; // eslint-disable-next-line @typescript-eslint/naming-convention\n\nfunction _findCandyGuardsByAuthorityOperation(input) {\n  return {\n    key: Key,\n    input\n  };\n}\n\n_findCandyGuardsByAuthorityOperation.key = Key;\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst findCandyGuardsByAuthorityOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const {\n      authority\n    } = operation.input;\n    const {\n      programs,\n      commitment\n    } = scope;\n    const candyGuardProgram = metaplex.programs().getCandyGuard(programs);\n    const query = CandyGuard.gpaBuilder(candyGuardProgram.address).addFilter('authority', authority);\n    const gpaBuilder = new GpaBuilder(metaplex, candyGuardProgram.address);\n    gpaBuilder.mergeConfig({ ...query.config,\n      commitment\n    });\n    return gpaBuilder.getAndMap(account => toCandyGuard(account, metaplex));\n  }\n};\nexport { findCandyGuardsByAuthorityOperation, findCandyGuardsByAuthorityOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineModule/operations/findCandyGuardsByAuthority.ts"],"names":["Key","findCandyGuardsByAuthorityOperation","_findCandyGuardsByAuthorityOperation","input","key","findCandyGuardsByAuthorityOperationHandler","handle","operation","metaplex","scope","authority","programs","commitment","candyGuardProgram","getCandyGuard","query","MplCandyGuard","gpaBuilder","address","addFilter","GpaBuilder","mergeConfig","config","getAndMap","account","toCandyGuard"],"mappings":";;yDAQA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,qCAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,MAAMC,mCAAmC,GAC9CC,oCADK,C,CAEP;;AACA,SAASA,oCAAT,CAGEC,KAHF,EAI0C;EACxC,OAAO;IAAEC,GAAG,EAAEJ,GAAP;IAAYG;EAAZ,CAAP;AACF;;AACAD,oCAAoC,CAACE,GAArCF,GAA2CF,GAA3CE;AAEA;AACA;AACA;AACA;;AAcA;AACA;AACA;AACA;;AACO,MAAMG,0CAAiG,GAC5G;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MAAEC;IAAF,IAAgBH,SAAS,CAACJ,KAAhC;IACA,MAAM;MAAEQ,QAAF;MAAYC;IAAZ,IAA2BH,KAAjC;IACA,MAAMI,iBAAiB,GAAGL,QAAQ,CAACG,QAATH,GAAoBM,aAApBN,CAAkCG,QAAlCH,CAA1B;IACA,MAAMO,KAAK,GAAGC,UAAa,CAACC,UAAdD,CACZH,iBAAiB,CAACK,OADNF,EAEZG,SAFYH,CAEF,WAFEA,EAEWN,SAFXM,CAAd;IAIA,MAAMC,UAAU,GAAG,IAAIG,UAAJ,CAAeZ,QAAf,EAAyBK,iBAAiB,CAACK,OAA3C,CAAnB;IACAD,UAAU,CAACI,WAAXJ,CAAuB,EAAE,GAAGF,KAAK,CAACO,MAAX;MAAmBV;IAAnB,CAAvBK;IAEA,OAAOA,UAAU,CAACM,SAAXN,CAAsBO,OAAO,IAAKC,YAAY,CAACD,OAAD,EAAUhB,QAAV,CAA9CS,CAAP;EACF;AAjBF,CADK","sourcesContent":["import { CandyGuard as MplCandyGuard } from '@metaplex-foundation/mpl-candy-guard';\nimport { PublicKey } from '@solana/web3.js';\nimport { CandyGuardsSettings, DefaultCandyGuardSettings } from '../guards';\nimport { CandyGuard, toCandyGuard } from '../models';\nimport { GpaBuilder } from '@/utils';\nimport { Operation, OperationHandler, OperationScope } from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindCandyGuardsByAuthorityOperation' as const;\n\n/**\n * Find all Candy Guards matching by a given authority.\n *\n * ```ts\n * const candyGuards = await metaplex\n *   .candyMachines()\n *   .findAllCandyGuardsByAuthority({ authority: new PublicKey('...') });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findCandyGuardsByAuthorityOperation =\n  _findCandyGuardsByAuthorityOperation;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _findCandyGuardsByAuthorityOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  input: FindCandyGuardsByAuthorityInput\n): FindCandyGuardsByAuthorityOperation<T> {\n  return { key: Key, input };\n}\n_findCandyGuardsByAuthorityOperation.key = Key;\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindCandyGuardsByAuthorityOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = Operation<typeof Key, FindCandyGuardsByAuthorityInput, CandyGuard<T>[]>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindCandyGuardsByAuthorityInput = {\n  /** The authority to filter Candy Guards by. */\n  authority: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findCandyGuardsByAuthorityOperationHandler: OperationHandler<FindCandyGuardsByAuthorityOperation> =\n  {\n    handle: async <T extends CandyGuardsSettings = DefaultCandyGuardSettings>(\n      operation: FindCandyGuardsByAuthorityOperation<T>,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) => {\n      const { authority } = operation.input;\n      const { programs, commitment } = scope;\n      const candyGuardProgram = metaplex.programs().getCandyGuard(programs);\n      const query = MplCandyGuard.gpaBuilder(\n        candyGuardProgram.address\n      ).addFilter('authority', authority);\n\n      const gpaBuilder = new GpaBuilder(metaplex, candyGuardProgram.address);\n      gpaBuilder.mergeConfig({ ...query.config, commitment });\n\n      return gpaBuilder.getAndMap((account) => toCandyGuard(account, metaplex));\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}