{"ast":null,"code":"import { useOperation } from '../../../types/Operation.mjs';\nimport { assertNftOrSftWithToken } from '../../nftModule/models/Nft.mjs';\nimport { amount } from '../../../types/Amount.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'LoadListingOperation';\n/**\n * Transforms a `LazyListing` model into a `Listing` model.\n *\n * ```ts\n * const listing = await metaplex\n *   .auctionHouse()\n *   .loadListing({ lazyListing };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst loadListingOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst loadListingOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const {\n      lazyListing,\n      loadJsonMetadata = true\n    } = operation.input;\n    const asset = await metaplex.nfts().findByMetadata({\n      metadata: lazyListing.metadataAddress,\n      tokenOwner: lazyListing.sellerAddress,\n      loadJsonMetadata\n    }, scope);\n    assertNftOrSftWithToken(asset);\n    return { ...lazyListing,\n      model: 'listing',\n      lazy: false,\n      asset,\n      tokens: amount(lazyListing.tokens, asset.mint.currency)\n    };\n  }\n};\nexport { loadListingOperation, loadListingOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/operations/loadListing.ts"],"names":["Key","loadListingOperation","useOperation","loadListingOperationHandler","handle","operation","metaplex","scope","lazyListing","loadJsonMetadata","input","asset","nfts","findByMetadata","metadata","metadataAddress","tokenOwner","sellerAddress","assertNftOrSftWithToken","model","lazy","tokens","amount","mint","currency"],"mappings":";;oDAWA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,sBAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,oBAAoB,GAAGC,YAAY,CAAuBF,GAAvB,C;AAEhD;AACA;AACA;AACA;;AAuBA;AACA;AACA;AACA;;AACO,MAAMG,2BAAmE,GAC9E;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MAAEC,WAAF;MAAeC,gBAAgB,GAAG;IAAlC,IAA2CJ,SAAS,CAACK,KAA3D;IACA,MAAMC,KAAK,GAAG,MAAML,QAAQ,CAACM,IAATN,GAAgBO,cAAhBP,CAClB;MACEQ,QAAQ,EAAEN,WAAW,CAACO,eADxB;MAEEC,UAAU,EAAER,WAAW,CAACS,aAF1B;MAGER;IAHF,CADkBH,EAMlBC,KANkBD,CAApB;IAQAY,uBAAuB,CAACP,KAAD,CAAvBO;IAEA,OAAO,EACL,GAAGV,WADE;MAELW,KAAK,EAAE,SAFF;MAGLC,IAAI,EAAE,KAHD;MAILT,KAJK;MAKLU,MAAM,EAAEC,MAAM,CAACd,WAAW,CAACa,MAAb,EAAqBV,KAAK,CAACY,IAANZ,CAAWa,QAAhC;IALT,CAAP;EAOF;AAxBF,CADK","sourcesContent":["import { assertNftOrSftWithToken } from '../../nftModule';\nimport { LazyListing, Listing } from '../models/Listing';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  amount,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'LoadListingOperation' as const;\n\n/**\n * Transforms a `LazyListing` model into a `Listing` model.\n *\n * ```ts\n * const listing = await metaplex\n *   .auctionHouse()\n *   .loadListing({ lazyListing };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const loadListingOperation = useOperation<LoadListingOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type LoadListingOperation = Operation<\n  typeof Key,\n  LoadListingInput,\n  Listing\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type LoadListingInput = {\n  /** The `LazyListing` model to transform into the `Listing`.  */\n  lazyListing: LazyListing;\n\n  /**\n   * Whether or not we should fetch the JSON Metadata for the NFT or SFT.\n   *\n   * @defaultValue `true`\n   */\n  loadJsonMetadata?: boolean;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const loadListingOperationHandler: OperationHandler<LoadListingOperation> =\n  {\n    handle: async (\n      operation: LoadListingOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) => {\n      const { lazyListing, loadJsonMetadata = true } = operation.input;\n      const asset = await metaplex.nfts().findByMetadata(\n        {\n          metadata: lazyListing.metadataAddress,\n          tokenOwner: lazyListing.sellerAddress,\n          loadJsonMetadata,\n        },\n        scope\n      );\n      assertNftOrSftWithToken(asset);\n\n      return {\n        ...lazyListing,\n        model: 'listing',\n        lazy: false,\n        asset,\n        tokens: amount(lazyListing.tokens, asset.mint.currency),\n      };\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}