{"ast":null,"code":"import { PublicKey } from '@solana/web3.js';\nimport { GpaBuilder } from '../../../utils/GpaBuilder.mjs'; // TODO: copied from auction house SDK\n// SDK should either provide a GPA builder or expose this discriminator\n\nconst purchaseReceiptDiscriminator = [79, 127, 222, 137, 154, 131, 150, 134];\nconst PUBLIC_KEY_LENGTH = PublicKey.default.toBytes().byteLength;\nconst BOOKKEEPER = purchaseReceiptDiscriminator.length;\nconst BUYER = BOOKKEEPER + PUBLIC_KEY_LENGTH;\nconst SELLER = BUYER + PUBLIC_KEY_LENGTH;\nconst AUCTION_HOUSE = SELLER + PUBLIC_KEY_LENGTH;\nconst METADATA = AUCTION_HOUSE + PUBLIC_KEY_LENGTH;\n\nclass PurchaseReceiptGpaBuilder extends GpaBuilder {\n  whereDiscriminator(discrimator) {\n    return this.where(0, Buffer.from(discrimator));\n  }\n\n  purchaseReceiptAccounts() {\n    return this.whereDiscriminator(purchaseReceiptDiscriminator);\n  }\n\n  whereAuctionHouse(auctionHouseAddress) {\n    return this.purchaseReceiptAccounts().where(AUCTION_HOUSE, auctionHouseAddress);\n  }\n\n  whereBuyer(buyerAddress) {\n    return this.where(BUYER, buyerAddress);\n  }\n\n  whereSeller(sellerAddress) {\n    return this.where(SELLER, sellerAddress);\n  }\n\n  whereMetadata(metadataAddress) {\n    return this.where(METADATA, metadataAddress);\n  }\n\n}\n\nexport { PurchaseReceiptGpaBuilder };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/gpaBuilders/PurchaseReceiptGpaBuilder.ts"],"names":["purchaseReceiptDiscriminator","PUBLIC_KEY_LENGTH","PublicKey","default","toBytes","byteLength","BOOKKEEPER","length","BUYER","SELLER","AUCTION_HOUSE","METADATA","PurchaseReceiptGpaBuilder","GpaBuilder","whereDiscriminator","discrimator","where","Buffer","from","purchaseReceiptAccounts","whereAuctionHouse","auctionHouseAddress","whereBuyer","buyerAddress","whereSeller","sellerAddress","whereMetadata","metadataAddress"],"mappings":";4DAaA;AACA;;AACA,MAAMA,4BAAkD,GAAG,CACzD,EADyD,EACrD,GADqD,EAChD,GADgD,EAC3C,GAD2C,EACtC,GADsC,EACjC,GADiC,EAC5B,GAD4B,EACvB,GADuB,CAA3D;AAIA,MAAMC,iBAAiB,GAAGC,SAAS,CAACC,OAAVD,CAAkBE,OAAlBF,GAA4BG,UAAtD;AAEA,MAAMC,UAAU,GAAGN,4BAA4B,CAACO,MAAhD;AACA,MAAMC,KAAK,GAAGF,UAAU,GAAGL,iBAA3B;AACA,MAAMQ,MAAM,GAAGD,KAAK,GAAGP,iBAAvB;AACA,MAAMS,aAAa,GAAGD,MAAM,GAAGR,iBAA/B;AACA,MAAMU,QAAQ,GAAGD,aAAa,GAAGT,iBAAjC;;AAEO,MAAMW,yBAAN,SAAwCC,UAAxC,CAAmD;EACxDC,kBAAkB,CAACC,WAAD,EAAoC;IACpD,OAAO,KAAKC,KAAL,CAAW,CAAX,EAAcC,MAAM,CAACC,IAAPD,CAAYF,WAAZE,CAAd,CAAP;EACF;;EAEAE,uBAAuB,GAAG;IACxB,OAAO,KAAKL,kBAAL,CAAwBd,4BAAxB,CAAP;EACF;;EAEAoB,iBAAiB,CAACC,mBAAD,EAAiC;IAChD,OAAO,KAAKF,uBAAL,GAA+BH,KAA/B,CACLN,aADK,EAELW,mBAFK,CAAP;EAIF;;EAEAC,UAAU,CAACC,YAAD,EAA0B;IAClC,OAAO,KAAKP,KAAL,CAAWR,KAAX,EAAkBe,YAAlB,CAAP;EACF;;EAEAC,WAAW,CAACC,aAAD,EAA2B;IACpC,OAAO,KAAKT,KAAL,CAAWP,MAAX,EAAmBgB,aAAnB,CAAP;EACF;;EAEAC,aAAa,CAACC,eAAD,EAA6B;IACxC,OAAO,KAAKX,KAAL,CAAWL,QAAX,EAAqBgB,eAArB,CAAP;EACF;;AA1BwD","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { GpaBuilder } from '@/utils';\n\ntype AccountDiscriminator = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number\n];\n// TODO: copied from auction house SDK\n// SDK should either provide a GPA builder or expose this discriminator\nconst purchaseReceiptDiscriminator: AccountDiscriminator = [\n  79, 127, 222, 137, 154, 131, 150, 134,\n];\n\nconst PUBLIC_KEY_LENGTH = PublicKey.default.toBytes().byteLength;\n\nconst BOOKKEEPER = purchaseReceiptDiscriminator.length;\nconst BUYER = BOOKKEEPER + PUBLIC_KEY_LENGTH;\nconst SELLER = BUYER + PUBLIC_KEY_LENGTH;\nconst AUCTION_HOUSE = SELLER + PUBLIC_KEY_LENGTH;\nconst METADATA = AUCTION_HOUSE + PUBLIC_KEY_LENGTH;\n\nexport class PurchaseReceiptGpaBuilder extends GpaBuilder {\n  whereDiscriminator(discrimator: AccountDiscriminator) {\n    return this.where(0, Buffer.from(discrimator));\n  }\n\n  purchaseReceiptAccounts() {\n    return this.whereDiscriminator(purchaseReceiptDiscriminator);\n  }\n\n  whereAuctionHouse(auctionHouseAddress: PublicKey) {\n    return this.purchaseReceiptAccounts().where(\n      AUCTION_HOUSE,\n      auctionHouseAddress\n    );\n  }\n\n  whereBuyer(buyerAddress: PublicKey) {\n    return this.where(BUYER, buyerAddress);\n  }\n\n  whereSeller(sellerAddress: PublicKey) {\n    return this.where(SELLER, sellerAddress);\n  }\n\n  whereMetadata(metadataAddress: PublicKey) {\n    return this.where(METADATA, metadataAddress);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}