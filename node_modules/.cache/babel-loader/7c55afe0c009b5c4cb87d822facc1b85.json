{"ast":null,"code":"import { createWithdrawFundsInstruction } from '@metaplex-foundation/mpl-candy-machine';\nimport { findCandyMachineV2CollectionPda } from '../pdas.mjs';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'DeleteCandyMachineV2Operation';\n/**\n * Deletes an existing Candy Machine.\n *\n * ```ts\n * await metaplex.candyMachinesV2().delete({ candyMachine });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst deleteCandyMachineV2Operation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst deleteCandyMachineV2OperationHandler = {\n  async handle(operation, metaplex, scope) {\n    return deleteCandyMachineV2Builder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Deletes an existing Candy Machine.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .candyMachinesV2()\n *   .builders()\n *   .delete({\n *     candyMachine: { address, collectionMintAddress },\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst deleteCandyMachineV2Builder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const authority = params.authority ?? metaplex.identity();\n  const {\n    candyMachine\n  } = params;\n  const deleteInstruction = createWithdrawFundsInstruction({\n    candyMachine: candyMachine.address,\n    authority: authority.publicKey\n  });\n\n  if (candyMachine.collectionMintAddress) {\n    const collectionPda = findCandyMachineV2CollectionPda(candyMachine.address);\n    deleteInstruction.keys.push({\n      pubkey: collectionPda,\n      isWritable: true,\n      isSigner: false\n    });\n  }\n\n  return TransactionBuilder.make().setFeePayer(payer).add({\n    instruction: deleteInstruction,\n    signers: [authority],\n    key: params.instructionKey ?? 'withdrawFunds'\n  });\n};\n\nexport { deleteCandyMachineV2Builder, deleteCandyMachineV2Operation, deleteCandyMachineV2OperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineV2Module/operations/deleteCandyMachineV2.ts"],"names":["Key","deleteCandyMachineV2Operation","useOperation","deleteCandyMachineV2OperationHandler","handle","operation","metaplex","scope","deleteCandyMachineV2Builder","input","sendAndConfirm","confirmOptions","params","options","payer","rpc","getDefaultFeePayer","authority","identity","candyMachine","deleteInstruction","createWithdrawFundsInstruction","address","publicKey","collectionMintAddress","collectionPda","findCandyMachineV2CollectionPda","keys","push","pubkey","isWritable","isSigner","TransactionBuilder","make","setFeePayer","add","instruction","signers","key","instructionKey"],"mappings":";;;4EAcA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,+BAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,6BAA6B,GACxCC,YAAY,CAAgCF,GAAhC,C;AAEd;AACA;AACA;AACA;;AAwCA;AACA;AACA;AACA;;AACO,MAAMG,oCAAqF,GAChG;EACE,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAIuC;IACrC,OAAOC,2BAA2B,CAChCF,QADgC,EAEhCD,SAAS,CAACI,KAFsB,EAGhCF,KAHgC,CAA3BC,CAILE,cAJKF,CAIUF,QAJVE,EAIoBD,KAAK,CAACI,cAJ1BH,CAAP;EAKF;;AAXF,CADK,C,CAeP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaA,MAAAA,2BAA2B,GAAG,UACzCF,QADyC,EAEzCM,MAFyC,EAIlB;EAAA,IADvBC,OACuB,uEADc,EACd;EACvB,MAAM;IAAEC,KAAK,GAAGR,QAAQ,CAACS,GAATT,GAAeU,kBAAfV;EAAV,IAAkDO,OAAxD;EACA,MAAMI,SAAS,GAAGL,MAAM,CAACK,SAAPL,IAAoBN,QAAQ,CAACY,QAATZ,EAAtC;EACA,MAAM;IAAEa;EAAF,IAAmBP,MAAzB;EAEA,MAAMQ,iBAAiB,GAAGC,8BAA8B,CAAC;IACvDF,YAAY,EAAEA,YAAY,CAACG,OAD4B;IAEvDL,SAAS,EAAEA,SAAS,CAACM;EAFkC,CAAD,CAAxD;;EAKA,IAAIJ,YAAY,CAACK,qBAAjB,EAAwC;IACtC,MAAMC,aAAa,GAAGC,+BAA+B,CAACP,YAAY,CAACG,OAAd,CAArD;IACAF,iBAAiB,CAACO,IAAlBP,CAAuBQ,IAAvBR,CAA4B;MAC1BS,MAAM,EAAEJ,aADkB;MAE1BK,UAAU,EAAE,IAFc;MAG1BC,QAAQ,EAAE;IAHgB,CAA5BX;EAKF;;EAEA,OAAOY,kBAAkB,CAACC,IAAnBD,GACJE,WADIF,CACQlB,KADRkB,EAEJG,GAFIH,CAEA;IACHI,WAAW,EAAEhB,iBADV;IAEHiB,OAAO,EAAE,CAACpB,SAAD,CAFN;IAGHqB,GAAG,EAAE1B,MAAM,CAAC2B,cAAP3B,IAAyB;EAH3B,CAFAoB,CAAP;AAOF,CA9BaxB","sourcesContent":["import { createWithdrawFundsInstruction } from '@metaplex-foundation/mpl-candy-machine';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { CandyMachineV2 } from '../models/CandyMachineV2';\nimport { findCandyMachineV2CollectionPda } from '../pdas';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'DeleteCandyMachineV2Operation' as const;\n\n/**\n * Deletes an existing Candy Machine.\n *\n * ```ts\n * await metaplex.candyMachinesV2().delete({ candyMachine });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const deleteCandyMachineV2Operation =\n  useOperation<DeleteCandyMachineV2Operation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type DeleteCandyMachineV2Operation = Operation<\n  typeof Key,\n  DeleteCandyMachineV2Input,\n  DeleteCandyMachineV2Output\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type DeleteCandyMachineV2Input = {\n  /**\n   * The Candy Machine to delete.\n   * We need the address of the Candy Machine as well as the address\n   * of the potential collection since we will need to delete the PDA account\n   * that links the Candy Machine to the collection.\n   *\n   * If the Candy Machine does not have a collection, simply set\n   * `collectionMintAddress` to `null`.\n   */\n  candyMachine: Pick<CandyMachineV2, 'address' | 'collectionMintAddress'>;\n\n  /**\n   * The Signer authorized to update the candy machine.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type DeleteCandyMachineV2Output = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const deleteCandyMachineV2OperationHandler: OperationHandler<DeleteCandyMachineV2Operation> =\n  {\n    async handle(\n      operation: DeleteCandyMachineV2Operation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<DeleteCandyMachineV2Output> {\n      return deleteCandyMachineV2Builder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type DeleteCandyMachineV2BuilderParams = Omit<\n  DeleteCandyMachineV2Input,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that deletes the Candy Machine. */\n  instructionKey?: string;\n};\n\n/**\n * Deletes an existing Candy Machine.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .candyMachinesV2()\n *   .builders()\n *   .delete({\n *     candyMachine: { address, collectionMintAddress },\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const deleteCandyMachineV2Builder = (\n  metaplex: Metaplex,\n  params: DeleteCandyMachineV2BuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const authority = params.authority ?? metaplex.identity();\n  const { candyMachine } = params;\n\n  const deleteInstruction = createWithdrawFundsInstruction({\n    candyMachine: candyMachine.address,\n    authority: authority.publicKey,\n  });\n\n  if (candyMachine.collectionMintAddress) {\n    const collectionPda = findCandyMachineV2CollectionPda(candyMachine.address);\n    deleteInstruction.keys.push({\n      pubkey: collectionPda,\n      isWritable: true,\n      isSigner: false,\n    });\n  }\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: deleteInstruction,\n      signers: [authority],\n      key: params.instructionKey ?? 'withdrawFunds',\n    });\n};\n"]},"metadata":{},"sourceType":"module"}