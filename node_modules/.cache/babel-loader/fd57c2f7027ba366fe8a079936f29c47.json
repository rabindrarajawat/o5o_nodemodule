{"ast":null,"code":"import { createWithdrawFromTreasuryInstruction } from '@metaplex-foundation/mpl-auction-house';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'WithdrawFromTreasuryAccountOperation';\n/**\n * Transfers funds from Auction House Treasury Wallet to the Treasury Withdrawal Destination Wallet set on an Auction House creation.\n * By default Treasury Withdrawal Destination Wallet is set to `metaplex.identity()`.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .withdrawFromTreasuryAccount({ auctionHouse, amount };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst withdrawFromTreasuryAccountOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst withdrawFromTreasuryAccountOperationHandler = {\n  handle: async (operation, metaplex, scope) => withdrawFromTreasuryAccountBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions)\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Transfers funds from Auction House Treasury Wallet to the Treasury Withdrawal Destination Wallet set on an Auction House creation.\n * By default Treasury Withdrawal Destination Wallet is set to `metaplex.identity()`.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .withdrawFromTreasuryAccount({ auctionHouse, amount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst withdrawFromTreasuryAccountBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // Data.\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    auctionHouse,\n    amount,\n    instructionKey,\n    authority = metaplex.identity()\n  } = params; // Accounts.\n\n  const auctionHouseTreasury = metaplex.auctionHouse().pdas().treasury({\n    auctionHouse: auctionHouse.address,\n    programs\n  });\n  const accounts = {\n    treasuryMint: auctionHouse.treasuryMint.address,\n    authority: auctionHouse.authorityAddress,\n    treasuryWithdrawalDestination: auctionHouse.treasuryWithdrawalDestinationAddress,\n    auctionHouseTreasury,\n    auctionHouse: auctionHouse.address\n  }; // Withdraw From Treasury Instruction.\n\n  const withdrawFromTreasuryInstruction = createWithdrawFromTreasuryInstruction(accounts, {\n    amount: amount.basisPoints\n  }); // Signers.\n\n  return TransactionBuilder.make().setFeePayer(payer) // Withdraw From Treasury.\n  .add({\n    instruction: withdrawFromTreasuryInstruction,\n    signers: [authority],\n    key: instructionKey ?? 'withdrawFromTreasuryAccount'\n  });\n};\n\nexport { withdrawFromTreasuryAccountBuilder, withdrawFromTreasuryAccountOperation, withdrawFromTreasuryAccountOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/operations/withdrawFromTreasuryAccount.ts"],"names":["Key","withdrawFromTreasuryAccountOperation","useOperation","withdrawFromTreasuryAccountOperationHandler","handle","operation","metaplex","scope","withdrawFromTreasuryAccountBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","auctionHouse","amount","instructionKey","authority","identity","auctionHouseTreasury","pdas","treasury","address","accounts","treasuryMint","authorityAddress","treasuryWithdrawalDestination","treasuryWithdrawalDestinationAddress","withdrawFromTreasuryInstruction","createWithdrawFromTreasuryInstruction","basisPoints","TransactionBuilder","make","setFeePayer","add","instruction","signers","key"],"mappings":";;4EAkBA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,sCAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,oCAAoC,GAC/CC,YAAY,CAAuCF,GAAvC,C;AAEd;AACA;AACA;AACA;;AAgDA;AACA;AACA;AACA;;AACO,MAAMG,2CAAmG,GAC9G;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAKNC,kCAAkC,CAChCF,QADgC,EAEhCD,SAAS,CAACI,KAFsB,EAGhCF,KAHgC,CAAlCC,CAIEE,cAJFF,CAIiBF,QAJjBE,EAI2BD,KAAK,CAACI,cAJjCH;AANJ,CADK,C,CAcP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaA,MAAAA,kCAAkC,GAAG,UAChDF,QADgD,EAEhDM,MAFgD,EAIkB;EAAA,IADlEC,OACkE,uEAD7B,EAC6B;EAClE;EACA,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGT,QAAQ,CAACU,GAATV,GAAeW,kBAAfX;EAApB,IAA4DO,OAAlE;EACA,MAAM;IACJK,YADI;IAEJC,MAFI;IAGJC,cAHI;IAIJC,SAAS,GAAGf,QAAQ,CAACgB,QAAThB;EAJR,IAKFM,MALJ,CAHkE,CAUlE;;EACA,MAAMW,oBAAoB,GAAGjB,QAAQ,CAACY,YAATZ,GAAwBkB,IAAxBlB,GAA+BmB,QAA/BnB,CAAwC;IACnEY,YAAY,EAAEA,YAAY,CAACQ,OADwC;IAEnEZ;EAFmE,CAAxCR,CAA7B;EAKA,MAAMqB,QAAiD,GAAG;IACxDC,YAAY,EAAEV,YAAY,CAACU,YAAbV,CAA0BQ,OADgB;IAExDL,SAAS,EAAEH,YAAY,CAACW,gBAFgC;IAGxDC,6BAA6B,EAC3BZ,YAAY,CAACa,oCAJyC;IAKxDR,oBALwD;IAMxDL,YAAY,EAAEA,YAAY,CAACQ;EAN6B,CAA1D,CAhBkE,CAyBlE;;EACA,MAAMM,+BAA+B,GAAGC,qCAAqC,CAC3EN,QAD2E,EAE3E;IAAER,MAAM,EAAEA,MAAM,CAACe;EAAjB,CAF2E,CAA7E,CA1BkE,CA+BlE;;EACA,OACEC,kBAAkB,CAACC,IAAnBD,GACGE,WADHF,CACepB,KADfoB,EAGE;EAHFA,CAIGG,GAJHH,CAIO;IACHI,WAAW,EAAEP,+BADV;IAEHQ,OAAO,EAAE,CAACnB,SAAD,CAFN;IAGHoB,GAAG,EAAErB,cAAc,IAAI;EAHpB,CAJPe,CADF;AAWF,CA/Ca3B","sourcesContent":["import {\n  createWithdrawFromTreasuryInstruction,\n  WithdrawFromTreasuryInstructionAccounts,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AuctionHouse } from '../models';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'WithdrawFromTreasuryAccountOperation' as const;\n\n/**\n * Transfers funds from Auction House Treasury Wallet to the Treasury Withdrawal Destination Wallet set on an Auction House creation.\n * By default Treasury Withdrawal Destination Wallet is set to `metaplex.identity()`.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .withdrawFromTreasuryAccount({ auctionHouse, amount };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const withdrawFromTreasuryAccountOperation =\n  useOperation<WithdrawFromTreasuryAccountOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type WithdrawFromTreasuryAccountOperation = Operation<\n  typeof Key,\n  WithdrawFromTreasuryAccountInput,\n  WithdrawFromTreasuryAccountOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\n\nexport type WithdrawFromTreasuryAccountInput = {\n  /**\n   * The Auction House from which to transfer funds from the treasury wallet to the treasury withdrawal destination wallet.\n   * `treasuryWithdrawalDestinationAddress` is set on Auction House creation, but you can also change it via the `update` operation.\n   */\n  auctionHouse: Pick<\n    AuctionHouse,\n    | 'treasuryMint'\n    | 'authorityAddress'\n    | 'treasuryWithdrawalDestinationAddress'\n    | 'address'\n  >;\n\n  /**\n   * The Auction House authority.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /**\n   * Amount of funds to withdraw.\n   * This can either be in SOL or in the SPL token used by the Auction House as a currency.\n   */\n  amount: SolAmount | SplTokenAmount;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type WithdrawFromTreasuryAccountOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const withdrawFromTreasuryAccountOperationHandler: OperationHandler<WithdrawFromTreasuryAccountOperation> =\n  {\n    handle: async (\n      operation: WithdrawFromTreasuryAccountOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) =>\n      withdrawFromTreasuryAccountBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions),\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type WithdrawFromTreasuryAccountBuilderParams = Omit<\n  WithdrawFromTreasuryAccountInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type WithdrawFromTreasuryAccountBuilderContext = Omit<\n  WithdrawFromTreasuryAccountOutput,\n  'response'\n>;\n\n/**\n * Transfers funds from Auction House Treasury Wallet to the Treasury Withdrawal Destination Wallet set on an Auction House creation.\n * By default Treasury Withdrawal Destination Wallet is set to `metaplex.identity()`.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .withdrawFromTreasuryAccount({ auctionHouse, amount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const withdrawFromTreasuryAccountBuilder = (\n  metaplex: Metaplex,\n  params: WithdrawFromTreasuryAccountBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<WithdrawFromTreasuryAccountBuilderContext> => {\n  // Data.\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    auctionHouse,\n    amount,\n    instructionKey,\n    authority = metaplex.identity(),\n  } = params;\n\n  // Accounts.\n  const auctionHouseTreasury = metaplex.auctionHouse().pdas().treasury({\n    auctionHouse: auctionHouse.address,\n    programs,\n  });\n\n  const accounts: WithdrawFromTreasuryInstructionAccounts = {\n    treasuryMint: auctionHouse.treasuryMint.address,\n    authority: auctionHouse.authorityAddress,\n    treasuryWithdrawalDestination:\n      auctionHouse.treasuryWithdrawalDestinationAddress,\n    auctionHouseTreasury,\n    auctionHouse: auctionHouse.address,\n  };\n\n  // Withdraw From Treasury Instruction.\n  const withdrawFromTreasuryInstruction = createWithdrawFromTreasuryInstruction(\n    accounts,\n    { amount: amount.basisPoints }\n  );\n\n  // Signers.\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Withdraw From Treasury.\n      .add({\n        instruction: withdrawFromTreasuryInstruction,\n        signers: [authority],\n        key: instructionKey ?? 'withdrawFromTreasuryAccount',\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}