{"ast":null,"code":"const isSigner = input => {\n  return typeof input === 'object' && 'publicKey' in input && ('secretKey' in input || 'signTransaction' in input);\n};\n\nconst isKeypairSigner = input => {\n  return isSigner(input) && 'secretKey' in input && input.secretKey != null;\n};\n\nconst isIdentitySigner = input => {\n  return isSigner(input) && !isKeypairSigner(input);\n};\n\nconst getSignerHistogram = signers => signers.reduce((signers, signer) => {\n  const duplicateIndex = signers.all.findIndex(_ref => {\n    let {\n      publicKey\n    } = _ref;\n    return publicKey.equals(signer.publicKey);\n  });\n  const duplicate = signers.all[duplicateIndex] ?? null;\n  const duplicateIsIdentity = duplicate ? isIdentitySigner(duplicate) : false;\n  const signerIsIdentity = isIdentitySigner(signer);\n\n  if (!duplicate) {\n    signers.all.push(signer);\n\n    if (signerIsIdentity) {\n      signers.identities.push(signer);\n    } else {\n      signers.keypairs.push(signer);\n    }\n  } else if (duplicateIsIdentity && !signerIsIdentity) {\n    // Prefer keypair than identity signer as it requires less user interactions.\n    const duplicateIdentitiesIndex = signers.identities.findIndex(_ref2 => {\n      let {\n        publicKey\n      } = _ref2;\n      return publicKey.equals(signer.publicKey);\n    });\n    signers.all.splice(duplicateIndex, 1);\n    signers.identities.splice(duplicateIdentitiesIndex, 1);\n    signers.all.push(signer);\n    signers.keypairs.push(signer);\n  }\n\n  return signers;\n}, {\n  all: [],\n  keypairs: [],\n  identities: []\n});\n\nexport { getSignerHistogram, isIdentitySigner, isKeypairSigner, isSigner };","map":{"version":3,"sources":["../../../src/types/Signer.ts"],"names":["isSigner","input","isKeypairSigner","secretKey","isIdentitySigner","getSignerHistogram","signers","reduce","signer","duplicateIndex","all","findIndex","publicKey","equals","duplicate","duplicateIsIdentity","signerIsIdentity","push","identities","keypairs","duplicateIdentitiesIndex","splice"],"mappings":"AAgBaA,MAAAA,QAAQ,GAAIC,KAAU,IAAsB;EACvD,OACE,OAAOA,KAAP,KAAiB,QAAjB,IACA,eAAeA,KADf,KAEC,eAAeA,KAAf,IAAwB,qBAAqBA,KAF9C,CADF;AAKF,CANaD;;AAQAE,MAAAA,eAAe,GAAID,KAAU,IAA6B;EACrE,OAAOD,QAAQ,CAACC,KAAD,CAARD,IAAmB,eAAeC,KAAlCD,IAA2CC,KAAK,CAACE,SAANF,IAAmB,IAArE;AACF,CAFaC;;AAIAE,MAAAA,gBAAgB,GAAIH,KAAU,IAA8B;EACvE,OAAOD,QAAQ,CAACC,KAAD,CAARD,IAAmB,CAACE,eAAe,CAACD,KAAD,CAA1C;AACF,CAFaG;;AAUAC,MAAAA,kBAAkB,GAAIC,OAAiB,IAClDA,OAAO,CAACC,MAARD,CACE,CAACA,OAAD,EAA2BE,MAA3B,KAA8C;EAC5C,MAAMC,cAAc,GAAGH,OAAO,CAACI,GAARJ,CAAYK,SAAZL,CAAsB;IAAA,IAAC;MAAEM;IAAF,CAAD;IAAA,OAC3CA,SAAS,CAACC,MAAVD,CAAiBJ,MAAM,CAACI,SAAxBA,CAD2C;EAAA,CAAtBN,CAAvB;EAGA,MAAMQ,SAAS,GAAGR,OAAO,CAACI,GAARJ,CAAYG,cAAZH,KAA+B,IAAjD;EACA,MAAMS,mBAAmB,GAAGD,SAAS,GACjCV,gBAAgB,CAACU,SAAD,CADiB,GAEjC,KAFJ;EAGA,MAAME,gBAAgB,GAAGZ,gBAAgB,CAACI,MAAD,CAAzC;;EAEA,IAAI,CAACM,SAAL,EAAgB;IACdR,OAAO,CAACI,GAARJ,CAAYW,IAAZX,CAAiBE,MAAjBF;;IACA,IAAIU,gBAAJ,EAAsB;MACpBV,OAAO,CAACY,UAARZ,CAAmBW,IAAnBX,CAAwBE,MAAxBF;IACD,CAFD,MAEO;MACLA,OAAO,CAACa,QAARb,CAAiBW,IAAjBX,CAAsBE,MAAtBF;IACF;EACD,CAPD,MAOO,IAAIS,mBAAmB,IAAI,CAACC,gBAA5B,EAA8C;IACnD;IACA,MAAMI,wBAAwB,GAAGd,OAAO,CAACY,UAARZ,CAAmBK,SAAnBL,CAC/B;MAAA,IAAC;QAAEM;MAAF,CAAD;MAAA,OAAmBA,SAAS,CAACC,MAAVD,CAAiBJ,MAAM,CAACI,SAAxBA,CAAnB;IAAA,CAD+BN,CAAjC;IAGAA,OAAO,CAACI,GAARJ,CAAYe,MAAZf,CAAmBG,cAAnBH,EAAmC,CAAnCA;IACAA,OAAO,CAACY,UAARZ,CAAmBe,MAAnBf,CAA0Bc,wBAA1Bd,EAAoD,CAApDA;IACAA,OAAO,CAACI,GAARJ,CAAYW,IAAZX,CAAiBE,MAAjBF;IACAA,OAAO,CAACa,QAARb,CAAiBW,IAAjBX,CAAsBE,MAAtBF;EACF;;EAEA,OAAOA,OAAP;AACD,CA9BHA,EA+BE;EAAEI,GAAG,EAAE,EAAP;EAAWS,QAAQ,EAAE,EAArB;EAAyBD,UAAU,EAAE;AAArC,CA/BFZ,CADWD","sourcesContent":["import { PublicKey, Transaction } from '@solana/web3.js';\n\nexport type Signer = KeypairSigner | IdentitySigner;\n\nexport type KeypairSigner = {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n};\n\nexport type IdentitySigner = {\n  publicKey: PublicKey;\n  signMessage(message: Uint8Array): Promise<Uint8Array>;\n  signTransaction(transaction: Transaction): Promise<Transaction>;\n  signAllTransactions(transactions: Transaction[]): Promise<Transaction[]>;\n};\n\nexport const isSigner = (input: any): input is Signer => {\n  return (\n    typeof input === 'object' &&\n    'publicKey' in input &&\n    ('secretKey' in input || 'signTransaction' in input)\n  );\n};\n\nexport const isKeypairSigner = (input: any): input is KeypairSigner => {\n  return isSigner(input) && 'secretKey' in input && input.secretKey != null;\n};\n\nexport const isIdentitySigner = (input: any): input is IdentitySigner => {\n  return isSigner(input) && !isKeypairSigner(input);\n};\n\nexport type SignerHistogram = {\n  all: Signer[];\n  keypairs: KeypairSigner[];\n  identities: IdentitySigner[];\n};\n\nexport const getSignerHistogram = (signers: Signer[]) =>\n  signers.reduce(\n    (signers: SignerHistogram, signer: Signer) => {\n      const duplicateIndex = signers.all.findIndex(({ publicKey }) =>\n        publicKey.equals(signer.publicKey)\n      );\n      const duplicate = signers.all[duplicateIndex] ?? null;\n      const duplicateIsIdentity = duplicate\n        ? isIdentitySigner(duplicate)\n        : false;\n      const signerIsIdentity = isIdentitySigner(signer);\n\n      if (!duplicate) {\n        signers.all.push(signer);\n        if (signerIsIdentity) {\n          signers.identities.push(signer);\n        } else {\n          signers.keypairs.push(signer);\n        }\n      } else if (duplicateIsIdentity && !signerIsIdentity) {\n        // Prefer keypair than identity signer as it requires less user interactions.\n        const duplicateIdentitiesIndex = signers.identities.findIndex(\n          ({ publicKey }) => publicKey.equals(signer.publicKey)\n        );\n        signers.all.splice(duplicateIndex, 1);\n        signers.identities.splice(duplicateIdentitiesIndex, 1);\n        signers.all.push(signer);\n        signers.keypairs.push(signer);\n      }\n\n      return signers;\n    },\n    { all: [], keypairs: [], identities: [] }\n  );\n"]},"metadata":{},"sourceType":"module"}