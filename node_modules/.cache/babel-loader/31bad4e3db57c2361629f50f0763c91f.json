{"ast":null,"code":"import { toMintAccount } from '../accounts.mjs';\nimport { toMint } from '../models/Mint.mjs';\nimport { useOperation } from '../../../types/Operation.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindMintByAddressOperation';\n/**\n * Finds a mint account by its address.\n *\n * ```ts\n * const mint = await metaplex.tokens().findMintByAddress({ address });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst findMintByAddressOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst findMintByAddressOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const {\n      commitment\n    } = scope;\n    const {\n      address\n    } = operation.input;\n    const account = toMintAccount(await metaplex.rpc().getAccount(address, commitment));\n    return toMint(account);\n  }\n};\nexport { findMintByAddressOperation, findMintByAddressOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/tokenModule/operations/findMintByAddress.ts"],"names":["Key","findMintByAddressOperation","useOperation","findMintByAddressOperationHandler","handle","operation","metaplex","scope","commitment","address","input","account","toMintAccount","rpc","getAccount","toMint"],"mappings":";;6DAWA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,4BAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,0BAA0B,GACrCC,YAAY,CAA6BF,GAA7B,C;AAEd;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;;AACO,MAAMG,iCAA+E,GAC1F;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MAAEC;IAAF,IAAiBD,KAAvB;IACA,MAAM;MAAEE;IAAF,IAAcJ,SAAS,CAACK,KAA9B;IAEA,MAAMC,OAAO,GAAGC,aAAa,CAC3B,MAAMN,QAAQ,CAACO,GAATP,GAAeQ,UAAfR,CAA0BG,OAA1BH,EAAmCE,UAAnCF,CADqB,CAA7B;IAIA,OAAOS,MAAM,CAACJ,OAAD,CAAb;EACF;AAdF,CADK","sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { toMintAccount } from '../accounts';\nimport { Mint, toMint } from '../models/Mint';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindMintByAddressOperation' as const;\n\n/**\n * Finds a mint account by its address.\n *\n * ```ts\n * const mint = await metaplex.tokens().findMintByAddress({ address });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findMintByAddressOperation =\n  useOperation<FindMintByAddressOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindMintByAddressOperation = Operation<\n  typeof Key,\n  FindMintByAddressInput,\n  Mint\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindMintByAddressInput = {\n  /** The address of the mint account. */\n  address: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findMintByAddressOperationHandler: OperationHandler<FindMintByAddressOperation> =\n  {\n    handle: async (\n      operation: FindMintByAddressOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) => {\n      const { commitment } = scope;\n      const { address } = operation.input;\n\n      const account = toMintAccount(\n        await metaplex.rpc().getAccount(address, commitment)\n      );\n\n      return toMint(account);\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}