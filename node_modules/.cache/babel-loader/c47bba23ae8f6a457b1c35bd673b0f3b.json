{"ast":null,"code":"import { MINT_SIZE, createInitializeMintInstruction } from '@solana/spl-token';\nimport { Keypair } from '@solana/web3.js';\nimport { useOperation, makeConfirmOptionsFinalizedOnMainnet } from '../../../types/Operation.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateMintOperation';\n/**\n * Creates a new mint account.\n *\n * ```ts\n * const { mint } = await metaplex.tokens().createMint();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst createMintOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst createMintOperationHandler = {\n  async handle(operation, metaplex, scope) {\n    const builder = await createMintBuilder(metaplex, operation.input, scope);\n    scope.throwIfCanceled();\n    const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);\n    const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n    scope.throwIfCanceled();\n    const mint = await metaplex.tokens().findMintByAddress({\n      address: output.mintSigner.publicKey\n    }, scope);\n    return { ...output,\n      mint\n    };\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Creates a new mint account.\n *\n * ```ts\n * const transactionBuilder = await metaplex.tokens().builders().createMint();\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst createMintBuilder = async function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    decimals = 0,\n    mint = Keypair.generate(),\n    mintAuthority = metaplex.identity().publicKey,\n    freezeAuthority = mintAuthority\n  } = params;\n  const tokenProgram = metaplex.programs().getToken(programs);\n  return TransactionBuilder.make().setFeePayer(payer).setContext({\n    mintSigner: mint\n  }) // Create an empty account for the mint.\n  .add(await metaplex.system().builders().createAccount({\n    newAccount: mint,\n    space: MINT_SIZE,\n    program: tokenProgram.address,\n    instructionKey: params.createAccountInstructionKey ?? 'createAccount'\n  }, {\n    payer,\n    programs\n  })) // Initialize the mint.\n  .add({\n    instruction: createInitializeMintInstruction(mint.publicKey, decimals, mintAuthority, freezeAuthority, tokenProgram.address),\n    signers: [mint],\n    key: params.initializeMintInstructionKey ?? 'initializeMint'\n  });\n};\n\nexport { createMintBuilder, createMintOperation, createMintOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/tokenModule/operations/createMint.ts"],"names":["Key","createMintOperation","useOperation","createMintOperationHandler","handle","operation","metaplex","scope","builder","createMintBuilder","input","throwIfCanceled","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","mint","tokens","findMintByAddress","address","mintSigner","publicKey","params","options","programs","payer","rpc","getDefaultFeePayer","decimals","Keypair","generate","mintAuthority","identity","freezeAuthority","tokenProgram","getToken","TransactionBuilder","make","setFeePayer","setContext","add","system","builders","createAccount","newAccount","space","MINT_SIZE","program","instructionKey","createAccountInstructionKey","instruction","createInitializeMintInstruction","signers","key","initializeMintInstructionKey"],"mappings":";;;4EAeA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,qBAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,mBAAmB,GAAGC,YAAY,CAAsBF,GAAtB,C;AAE/C;AACA;AACA;AACA;;AA8DA;AACA;AACA;AACA;;AACO,MAAMG,0BAAiE,GAC5E;EACE,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAI6B;IAC3B,MAAMC,OAAO,GAAG,MAAMC,iBAAiB,CAACH,QAAD,EAAWD,SAAS,CAACK,KAArB,EAA4BH,KAA5B,CAAvC;IACAA,KAAK,CAACI,eAANJ;IAEA,MAAMK,cAAc,GAAGC,oCAAoC,CACzDP,QADyD,EAEzDC,KAAK,CAACK,cAFmD,CAA3D;IAIA,MAAME,MAAM,GAAG,MAAMN,OAAO,CAACO,cAARP,CAAuBF,QAAvBE,EAAiCI,cAAjCJ,CAArB;IACAD,KAAK,CAACI,eAANJ;IAEA,MAAMS,IAAI,GAAG,MAAMV,QAAQ,CACxBW,MADgBX,GAEhBY,iBAFgBZ,CAEE;MAAEa,OAAO,EAAEL,MAAM,CAACM,UAAPN,CAAkBO;IAA7B,CAFFf,EAE4CC,KAF5CD,CAAnB;IAIA,OAAO,EAAE,GAAGQ,MAAL;MAAaE;IAAb,CAAP;EACF;;AArBF,CADK,C,CAyBP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaP,MAAAA,iBAAiB,GAAG,gBAC/BH,QAD+B,EAE/BgB,MAF+B,EAI2B;EAAA,IAD1DC,OAC0D,uEADrB,EACqB;EAC1D,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGnB,QAAQ,CAACoB,GAATpB,GAAeqB,kBAAfrB;EAApB,IAA4DiB,OAAlE;EACA,MAAM;IACJK,QAAQ,GAAG,CADP;IAEJZ,IAAI,GAAGa,OAAO,CAACC,QAARD,EAFH;IAGJE,aAAa,GAAGzB,QAAQ,CAAC0B,QAAT1B,GAAoBe,SAHhC;IAIJY,eAAe,GAAGF;EAJd,IAKFT,MALJ;EAOA,MAAMY,YAAY,GAAG5B,QAAQ,CAACkB,QAATlB,GAAoB6B,QAApB7B,CAA6BkB,QAA7BlB,CAArB;EAEA,OACE8B,kBAAkB,CAACC,IAAnBD,GACGE,WADHF,CACeX,KADfW,EAEGG,UAFHH,CAEc;IAAEhB,UAAU,EAAEJ;EAAd,CAFdoB,EAIE;EAJFA,CAKGI,GALHJ,CAMI,MAAM9B,QAAQ,CACXmC,MADGnC,GAEHoC,QAFGpC,GAGHqC,aAHGrC,CAIF;IACEsC,UAAU,EAAE5B,IADd;IAEE6B,KAAK,EAAEC,SAFT;IAGEC,OAAO,EAAEb,YAAY,CAACf,OAHxB;IAIE6B,cAAc,EACZ1B,MAAM,CAAC2B,2BAAP3B,IAAsC;EAL1C,CAJEhB,EAWF;IAAEmB,KAAF;IAASD;EAAT,CAXElB,CANV8B,EAqBE;EArBFA,CAsBGI,GAtBHJ,CAsBO;IACHc,WAAW,EAAEC,+BAA+B,CAC1CnC,IAAI,CAACK,SADqC,EAE1CO,QAF0C,EAG1CG,aAH0C,EAI1CE,eAJ0C,EAK1CC,YAAY,CAACf,OAL6B,CADzC;IAQHiC,OAAO,EAAE,CAACpC,IAAD,CARN;IASHqC,GAAG,EAAE/B,MAAM,CAACgC,4BAAPhC,IAAuC;EATzC,CAtBPc,CADF;AAmCF,CAlDa3B","sourcesContent":["import { createInitializeMintInstruction, MINT_SIZE } from '@solana/spl-token';\nimport { Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Mint } from '../models/Mint';\nimport { Option, TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  makeConfirmOptionsFinalizedOnMainnet,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateMintOperation' as const;\n\n/**\n * Creates a new mint account.\n *\n * ```ts\n * const { mint } = await metaplex.tokens().createMint();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createMintOperation = useOperation<CreateMintOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateMintOperation = Operation<\n  typeof Key,\n  CreateMintInput,\n  CreateMintOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateMintInput = {\n  /**\n   * The number of decimal points used to define token amounts.\n   *\n   * @defaultValue `0`\n   */\n  decimals?: number;\n\n  /**\n   * The address of the new mint account as a Signer.\n   *\n   * @defaultValue `Keypair.generate()`\n   */\n  mint?: Signer;\n\n  /**\n   * The address of the authority that is allowed\n   * to mint new tokens to token accounts.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  mintAuthority?: PublicKey;\n\n  /**\n   * The address of the authority that is allowed\n   * to freeze token accounts.\n   *\n   * @defaultValue Defaults to using the same value as the\n   * `mintAuthority` parameter.\n   */\n  freezeAuthority?: Option<PublicKey>;\n};\n\n/**\n * Create a new Mint account from the provided input\n * and returns the newly created `Mint` model.\n *\n * @group Operations\n * @category Outputs\n */\nexport type CreateMintOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n\n  /** The mint account as a Signer. */\n  mintSigner: Signer;\n\n  /** The created mint account. */\n  mint: Mint;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createMintOperationHandler: OperationHandler<CreateMintOperation> =\n  {\n    async handle(\n      operation: CreateMintOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<CreateMintOutput> {\n      const builder = await createMintBuilder(metaplex, operation.input, scope);\n      scope.throwIfCanceled();\n\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      const mint = await metaplex\n        .tokens()\n        .findMintByAddress({ address: output.mintSigner.publicKey }, scope);\n\n      return { ...output, mint };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateMintBuilderParams = Omit<\n  CreateMintInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that creates the account. */\n  createAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the mint account. */\n  initializeMintInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateMintBuilderContext = Omit<\n  CreateMintOutput,\n  'response' | 'mint'\n>;\n\n/**\n * Creates a new mint account.\n *\n * ```ts\n * const transactionBuilder = await metaplex.tokens().builders().createMint();\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createMintBuilder = async (\n  metaplex: Metaplex,\n  params: CreateMintBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<CreateMintBuilderContext>> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    decimals = 0,\n    mint = Keypair.generate(),\n    mintAuthority = metaplex.identity().publicKey,\n    freezeAuthority = mintAuthority,\n  } = params;\n\n  const tokenProgram = metaplex.programs().getToken(programs);\n\n  return (\n    TransactionBuilder.make<CreateMintBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({ mintSigner: mint })\n\n      // Create an empty account for the mint.\n      .add(\n        await metaplex\n          .system()\n          .builders()\n          .createAccount(\n            {\n              newAccount: mint,\n              space: MINT_SIZE,\n              program: tokenProgram.address,\n              instructionKey:\n                params.createAccountInstructionKey ?? 'createAccount',\n            },\n            { payer, programs }\n          )\n      )\n\n      // Initialize the mint.\n      .add({\n        instruction: createInitializeMintInstruction(\n          mint.publicKey,\n          decimals,\n          mintAuthority,\n          freezeAuthority,\n          tokenProgram.address\n        ),\n        signers: [mint],\n        key: params.initializeMintInstructionKey ?? 'initializeMint',\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}