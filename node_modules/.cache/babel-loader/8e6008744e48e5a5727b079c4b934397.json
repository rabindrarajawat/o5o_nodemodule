{"ast":null,"code":"import { createRevokeInstruction } from '@solana/spl-token';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { isSigner } from '../../../types/Signer.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'RevokeTokenDelegateAuthorityOperation';\n/**\n * Revokes the current delegate authority for a token account.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .revokeDelegateAuthority({ mintAddress };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst revokeTokenDelegateAuthorityOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst revokeTokenDelegateAuthorityOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    return revokeTokenDelegateAuthorityBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Revokes the current delegate authority for a token account.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .builders()\n *   .revokeDelegateAuthority({ mintAddress });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst revokeTokenDelegateAuthorityBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    mintAddress,\n    owner = metaplex.identity(),\n    tokenAddress,\n    multiSigners = []\n  } = params;\n  const [ownerPublicKey, signers] = isSigner(owner) ? [owner.publicKey, [owner]] : [owner, multiSigners];\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenAccount = tokenAddress ?? metaplex.tokens().pdas().associatedTokenAccount({\n    mint: mintAddress,\n    owner: ownerPublicKey,\n    programs\n  });\n  return TransactionBuilder.make().setFeePayer(payer).add({\n    instruction: createRevokeInstruction(tokenAccount, ownerPublicKey, multiSigners, tokenProgram.address),\n    signers,\n    key: params.instructionKey ?? 'revokeDelegateAuthority'\n  });\n};\n\nexport { revokeTokenDelegateAuthorityBuilder, revokeTokenDelegateAuthorityOperation, revokeTokenDelegateAuthorityOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/tokenModule/operations/revokeTokenDelegateAuthority.ts"],"names":["Key","revokeTokenDelegateAuthorityOperation","useOperation","revokeTokenDelegateAuthorityOperationHandler","handle","operation","metaplex","scope","revokeTokenDelegateAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","owner","identity","tokenAddress","multiSigners","ownerPublicKey","signers","isSigner","publicKey","tokenProgram","getToken","tokenAccount","tokens","pdas","associatedTokenAccount","mint","TransactionBuilder","make","setFeePayer","add","instruction","createRevokeInstruction","address","key","instructionKey"],"mappings":";;;4EAeA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,uCAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,qCAAqC,GAChDC,YAAY,CAAwCF,GAAxC,C;AAEd;AACA;AACA;AACA;;AAiDA;AACA;AACA;AACA;;AACO,MAAMG,4CAAqG,GAChH;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI0C;IAChD,OAAOC,mCAAmC,CACxCF,QADwC,EAExCD,SAAS,CAACI,KAF8B,EAGxCF,KAHwC,CAAnCC,CAILE,cAJKF,CAIUF,QAJVE,EAIoBD,KAAK,CAACI,cAJ1BH,CAAP;EAKF;AAXF,CADK,C,CAeP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaA,MAAAA,mCAAmC,GAAG,UACjDF,QADiD,EAEjDM,MAFiD,EAI1B;EAAA,IADvBC,OACuB,uEADc,EACd;EACvB,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGT,QAAQ,CAACU,GAATV,GAAeW,kBAAfX;EAApB,IAA4DO,OAAlE;EACA,MAAM;IACJK,WADI;IAEJC,KAAK,GAAGb,QAAQ,CAACc,QAATd,EAFJ;IAGJe,YAHI;IAIJC,YAAY,GAAG;EAJX,IAKFV,MALJ;EAOA,MAAM,CAACW,cAAD,EAAiBC,OAAjB,IAA4BC,QAAQ,CAACN,KAAD,CAARM,GAC9B,CAACN,KAAK,CAACO,SAAP,EAAkB,CAACP,KAAD,CAAlB,CAD8BM,GAE9B,CAACN,KAAD,EAAQG,YAAR,CAFJ;EAIA,MAAMK,YAAY,GAAGrB,QAAQ,CAACQ,QAATR,GAAoBsB,QAApBtB,CAA6BQ,QAA7BR,CAArB;EACA,MAAMuB,YAAY,GAChBR,YAAY,IACZf,QAAQ,CAACwB,MAATxB,GAAkByB,IAAlBzB,GAAyB0B,sBAAzB1B,CAAgD;IAC9C2B,IAAI,EAAEf,WADwC;IAE9CC,KAAK,EAAEI,cAFuC;IAG9CT;EAH8C,CAAhDR,CAFF;EAQA,OAAO4B,kBAAkB,CAACC,IAAnBD,GACJE,WADIF,CACQnB,KADRmB,EAEJG,GAFIH,CAEA;IACHI,WAAW,EAAEC,uBAAuB,CAClCV,YADkC,EAElCN,cAFkC,EAGlCD,YAHkC,EAIlCK,YAAY,CAACa,OAJqB,CADjC;IAOHhB,OAPG;IAQHiB,GAAG,EAAE7B,MAAM,CAAC8B,cAAP9B,IAAyB;EAR3B,CAFAsB,CAAP;AAYF,CAtCa1B","sourcesContent":["import { createRevokeInstruction } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'RevokeTokenDelegateAuthorityOperation' as const;\n\n/**\n * Revokes the current delegate authority for a token account.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .revokeDelegateAuthority({ mintAddress };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const revokeTokenDelegateAuthorityOperation =\n  useOperation<RevokeTokenDelegateAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type RevokeTokenDelegateAuthorityOperation = Operation<\n  typeof Key,\n  RevokeTokenDelegateAuthorityInput,\n  RevokeTokenDelegateAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type RevokeTokenDelegateAuthorityInput = {\n  mintAddress: PublicKey;\n\n  /**\n   * The owner of the token account as a Signer.\n   *\n   * This may be provided as a PublicKey if and only if\n   * the `multiSigners` parameter is provided.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  owner?: Signer | PublicKey;\n\n  /**\n   * The address of the token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `owner` parameters.\n   */\n  tokenAddress?: PublicKey;\n\n  /**\n   * The signing accounts to use if the token owner is a multisig.\n   *\n   * @defaultValue `[]`\n   */\n  multiSigners?: KeypairSigner[];\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type RevokeTokenDelegateAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const revokeTokenDelegateAuthorityOperationHandler: OperationHandler<RevokeTokenDelegateAuthorityOperation> =\n  {\n    handle: async (\n      operation: RevokeTokenDelegateAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<RevokeTokenDelegateAuthorityOutput> => {\n      return revokeTokenDelegateAuthorityBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type RevokeTokenDelegateAuthorityBuilderParams = Omit<\n  RevokeTokenDelegateAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that revokes the delegated authority. */\n  instructionKey?: string;\n};\n\n/**\n * Revokes the current delegate authority for a token account.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .builders()\n *   .revokeDelegateAuthority({ mintAddress });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const revokeTokenDelegateAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: RevokeTokenDelegateAuthorityBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    owner = metaplex.identity(),\n    tokenAddress,\n    multiSigners = [],\n  } = params;\n\n  const [ownerPublicKey, signers] = isSigner(owner)\n    ? [owner.publicKey, [owner]]\n    : [owner, multiSigners];\n\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenAccount =\n    tokenAddress ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: ownerPublicKey,\n      programs,\n    });\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createRevokeInstruction(\n        tokenAccount,\n        ownerPublicKey,\n        multiSigners,\n        tokenProgram.address\n      ),\n      signers,\n      key: params.instructionKey ?? 'revokeDelegateAuthority',\n    });\n};\n"]},"metadata":{},"sourceType":"module"}