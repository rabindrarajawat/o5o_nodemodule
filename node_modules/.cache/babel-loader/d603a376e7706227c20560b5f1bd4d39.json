{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.harvestWithheldTokensToMint = exports.withdrawWithheldTokensFromAccounts = exports.withdrawWithheldTokensFromMint = exports.transferCheckedWithFee = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst internal_js_1 = require(\"../../actions/internal.js\");\n\nconst constants_js_1 = require(\"../../constants.js\");\n\nconst instructions_js_1 = require(\"./instructions.js\");\n/**\n * Transfer tokens from one account to another, asserting the transfer fee, token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\n\nfunction transferCheckedWithFee(connection, payer, source, mint, destination, owner, amount, decimals, fee) {\n  let multiSigners = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : [];\n  let confirmOptions = arguments.length > 10 ? arguments[10] : undefined;\n  let programId = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);\n    const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createTransferCheckedWithFeeInstruction)(source, mint, destination, ownerPublicKey, amount, decimals, fee, multiSigners, programId));\n    return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);\n  });\n}\n\nexports.transferCheckedWithFee = transferCheckedWithFee;\n/**\n * Withdraw withheld tokens from mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nfunction withdrawWithheldTokensFromMint(connection, payer, mint, destination, authority) {\n  let multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  let confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const [authorityPublicKey, signers] = (0, internal_js_1.getSigners)(authority, multiSigners);\n    const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createWithdrawWithheldTokensFromMintInstruction)(mint, destination, authorityPublicKey, signers, programId));\n    return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);\n  });\n}\n\nexports.withdrawWithheldTokensFromMint = withdrawWithheldTokensFromMint;\n/**\n * Withdraw withheld tokens from accounts\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nfunction withdrawWithheldTokensFromAccounts(connection, payer, mint, destination, authority, multiSigners, sources, confirmOptions) {\n  let programId = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const [authorityPublicKey, signers] = (0, internal_js_1.getSigners)(authority, multiSigners);\n    const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createWithdrawWithheldTokensFromAccountsInstruction)(mint, destination, authorityPublicKey, signers, sources, programId));\n    return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);\n  });\n}\n\nexports.withdrawWithheldTokensFromAccounts = withdrawWithheldTokensFromAccounts;\n/**\n * Harvest withheld tokens from accounts to the mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nfunction harvestWithheldTokensToMint(connection, payer, mint, sources, confirmOptions) {\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createHarvestWithheldTokensToMintInstruction)(mint, sources, programId));\n    return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);\n  });\n}\n\nexports.harvestWithheldTokensToMint = harvestWithheldTokensToMint;","map":{"version":3,"sources":["../../../../src/extensions/transferFee/actions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.harvestWithheldTokensToMint = exports.withdrawWithheldTokensFromAccounts = exports.withdrawWithheldTokensFromMint = exports.transferCheckedWithFee = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst internal_js_1 = require(\"../../actions/internal.js\");\nconst constants_js_1 = require(\"../../constants.js\");\nconst instructions_js_1 = require(\"./instructions.js\");\n/**\n * Transfer tokens from one account to another, asserting the transfer fee, token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction transferCheckedWithFee(connection, payer, source, mint, destination, owner, amount, decimals, fee, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);\n        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createTransferCheckedWithFeeInstruction)(source, mint, destination, ownerPublicKey, amount, decimals, fee, multiSigners, programId));\n        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);\n    });\n}\nexports.transferCheckedWithFee = transferCheckedWithFee;\n/**\n * Withdraw withheld tokens from mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction withdrawWithheldTokensFromMint(connection, payer, mint, destination, authority, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [authorityPublicKey, signers] = (0, internal_js_1.getSigners)(authority, multiSigners);\n        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createWithdrawWithheldTokensFromMintInstruction)(mint, destination, authorityPublicKey, signers, programId));\n        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);\n    });\n}\nexports.withdrawWithheldTokensFromMint = withdrawWithheldTokensFromMint;\n/**\n * Withdraw withheld tokens from accounts\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction withdrawWithheldTokensFromAccounts(connection, payer, mint, destination, authority, multiSigners, sources, confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [authorityPublicKey, signers] = (0, internal_js_1.getSigners)(authority, multiSigners);\n        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createWithdrawWithheldTokensFromAccountsInstruction)(mint, destination, authorityPublicKey, signers, sources, programId));\n        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);\n    });\n}\nexports.withdrawWithheldTokensFromAccounts = withdrawWithheldTokensFromAccounts;\n/**\n * Harvest withheld tokens from accounts to the mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction harvestWithheldTokensToMint(connection, payer, mint, sources, confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createHarvestWithheldTokensToMintInstruction)(mint, sources, programId));\n        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);\n    });\n}\nexports.harvestWithheldTokensToMint = harvestWithheldTokensToMint;\n//# sourceMappingURL=actions.js.map"]},"metadata":{},"sourceType":"script"}