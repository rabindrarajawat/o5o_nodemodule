{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createBurnCheckedInstruction } from '../instructions/burnChecked.js';\nimport { getSigners } from './internal.js';\n/**\n * Burn tokens from an account, asserting the token mint and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to burn tokens from\n * @param mint           Mint for the account\n * @param owner          Account owner\n * @param amount         Amount to burn\n * @param decimals       Number of decimals in amount to burn\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function burnChecked(connection, payer, account, mint, owner, amount, decimals) {\n  let multiSigners = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n  let confirmOptions = arguments.length > 8 ? arguments[8] : undefined;\n  let programId = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : TOKEN_PROGRAM_ID;\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createBurnCheckedInstruction(account, mint, ownerPublicKey, amount, decimals, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"sources":["../../../src/actions/burnChecked.ts"],"names":[],"mappings":"AACA,SAAS,yBAAT,EAAoC,WAApC,QAAuD,iBAAvD;AACA,SAAS,gBAAT,QAAiC,iBAAjC;AACA,SAAS,4BAAT,QAA6C,gCAA7C;AACA,SAAS,UAAT,QAA2B,eAA3B;AAEA;;;;;;;;;;;;;;;AAeG;;AACH,OAAO,eAAe,WAAf,CACH,UADG,EAEH,KAFG,EAGH,OAHG,EAIH,IAJG,EAKH,KALG,EAMH,MANG,EAOH,QAPG,EAUyB;EAAA,IAF5B,YAE4B,uEAFH,EAEG;EAAA,IAD5B,cAC4B;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B,MAAM,CAAC,cAAD,EAAiB,OAAjB,IAA4B,UAAU,CAAC,KAAD,EAAQ,YAAR,CAA5C;EAEA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,4BAA4B,CAAC,OAAD,EAAU,IAAV,EAAgB,cAAhB,EAAgC,MAAhC,EAAwC,QAAxC,EAAkD,YAAlD,EAAgE,SAAhE,CADZ,CAApB;EAIA,OAAO,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,EAAQ,GAAG,OAAX,CAA1B,EAA+C,cAA/C,CAAtC;AACH","sourceRoot":"","sourcesContent":["import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createBurnCheckedInstruction } from '../instructions/burnChecked.js';\nimport { getSigners } from './internal.js';\n/**\n * Burn tokens from an account, asserting the token mint and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to burn tokens from\n * @param mint           Mint for the account\n * @param owner          Account owner\n * @param amount         Amount to burn\n * @param decimals       Number of decimals in amount to burn\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function burnChecked(connection, payer, account, mint, owner, amount, decimals, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n    const transaction = new Transaction().add(createBurnCheckedInstruction(account, mint, ownerPublicKey, amount, decimals, multiSigners, programId));\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n//# sourceMappingURL=burnChecked.js.map"]},"metadata":{},"sourceType":"module"}