{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createHarvestWithheldTokensToMintInstruction, createTransferCheckedWithFeeInstruction, createWithdrawWithheldTokensFromAccountsInstruction, createWithdrawWithheldTokensFromMintInstruction } from './instructions.js';\n/**\n * Transfer tokens from one account to another, asserting the transfer fee, token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function transferCheckedWithFee(connection, payer, source, mint, destination, owner, amount, decimals, fee) {\n  let multiSigners = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : [];\n  let confirmOptions = arguments.length > 10 ? arguments[10] : undefined;\n  let programId = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : TOKEN_2022_PROGRAM_ID;\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createTransferCheckedWithFeeInstruction(source, mint, destination, ownerPublicKey, amount, decimals, fee, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Withdraw withheld tokens from mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function withdrawWithheldTokensFromMint(connection, payer, mint, destination, authority) {\n  let multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  let confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : TOKEN_2022_PROGRAM_ID;\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(createWithdrawWithheldTokensFromMintInstruction(mint, destination, authorityPublicKey, signers, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Withdraw withheld tokens from accounts\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function withdrawWithheldTokensFromAccounts(connection, payer, mint, destination, authority, multiSigners, sources, confirmOptions) {\n  let programId = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : TOKEN_2022_PROGRAM_ID;\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(createWithdrawWithheldTokensFromAccountsInstruction(mint, destination, authorityPublicKey, signers, sources, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Harvest withheld tokens from accounts to the mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function harvestWithheldTokensToMint(connection, payer, mint, sources, confirmOptions) {\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_2022_PROGRAM_ID;\n  const transaction = new Transaction().add(createHarvestWithheldTokensToMintInstruction(mint, sources, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}","map":{"version":3,"sources":["../../../../src/extensions/transferFee/actions.ts"],"names":[],"mappings":"AACA,SAAS,yBAAT,EAAoC,WAApC,QAAuD,iBAAvD;AACA,SAAS,UAAT,QAA2B,2BAA3B;AACA,SAAS,qBAAT,QAAsC,oBAAtC;AACA,SACI,4CADJ,EAEI,uCAFJ,EAGI,mDAHJ,EAII,+CAJJ,QAKO,mBALP;AAOA;;;;;;;;;;;;;;;;AAgBG;;AACH,OAAO,eAAe,sBAAf,CACH,UADG,EAEH,KAFG,EAGH,MAHG,EAIH,IAJG,EAKH,WALG,EAMH,KANG,EAOH,MAPG,EAQH,QARG,EASH,GATG,EAY8B;EAAA,IAFjC,YAEiC,uEAFR,EAEQ;EAAA,IADjC,cACiC;EAAA,IAAjC,SAAiC,0EAArB,qBAAqB;EAEjC,MAAM,CAAC,cAAD,EAAiB,OAAjB,IAA4B,UAAU,CAAC,KAAD,EAAQ,YAAR,CAA5C;EAEA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,uCAAuC,CACnC,MADmC,EAEnC,IAFmC,EAGnC,WAHmC,EAInC,cAJmC,EAKnC,MALmC,EAMnC,QANmC,EAOnC,GAPmC,EAQnC,YARmC,EASnC,SATmC,CADvB,CAApB;EAcA,OAAO,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,EAAQ,GAAG,OAAX,CAA1B,EAA+C,cAA/C,CAAtC;AACH;AAED;;;;;;;;;;;;;AAaG;;AACH,OAAO,eAAe,8BAAf,CACH,UADG,EAEH,KAFG,EAGH,IAHG,EAIH,WAJG,EAKH,SALG,EAQ8B;EAAA,IAFjC,YAEiC,uEAFR,EAEQ;EAAA,IADjC,cACiC;EAAA,IAAjC,SAAiC,uEAArB,qBAAqB;EAEjC,MAAM,CAAC,kBAAD,EAAqB,OAArB,IAAgC,UAAU,CAAC,SAAD,EAAY,YAAZ,CAAhD;EAEA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,+CAA+C,CAAC,IAAD,EAAO,WAAP,EAAoB,kBAApB,EAAwC,OAAxC,EAAiD,SAAjD,CAD/B,CAApB;EAIA,OAAO,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,EAAQ,GAAG,OAAX,CAA1B,EAA+C,cAA/C,CAAtC;AACH;AAED;;;;;;;;;;;;;;AAcG;;AACH,OAAO,eAAe,kCAAf,CACH,UADG,EAEH,KAFG,EAGH,IAHG,EAIH,WAJG,EAKH,SALG,EAMH,YANG,EAOH,OAPG,EAQH,cARG,EAS8B;EAAA,IAAjC,SAAiC,uEAArB,qBAAqB;EAEjC,MAAM,CAAC,kBAAD,EAAqB,OAArB,IAAgC,UAAU,CAAC,SAAD,EAAY,YAAZ,CAAhD;EAEA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,mDAAmD,CAC/C,IAD+C,EAE/C,WAF+C,EAG/C,kBAH+C,EAI/C,OAJ+C,EAK/C,OAL+C,EAM/C,SAN+C,CADnC,CAApB;EAWA,OAAO,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,EAAQ,GAAG,OAAX,CAA1B,EAA+C,cAA/C,CAAtC;AACH;AAED;;;;;;;;;;;AAWG;;AACH,OAAO,eAAe,2BAAf,CACH,UADG,EAEH,KAFG,EAGH,IAHG,EAIH,OAJG,EAKH,cALG,EAM8B;EAAA,IAAjC,SAAiC,uEAArB,qBAAqB;EAEjC,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAAsB,4CAA4C,CAAC,IAAD,EAAO,OAAP,EAAgB,SAAhB,CAAlE,CAApB;EAEA,OAAO,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,CAA1B,EAAmC,cAAnC,CAAtC;AACH","sourceRoot":"","sourcesContent":["import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createHarvestWithheldTokensToMintInstruction, createTransferCheckedWithFeeInstruction, createWithdrawWithheldTokensFromAccountsInstruction, createWithdrawWithheldTokensFromMintInstruction, } from './instructions.js';\n/**\n * Transfer tokens from one account to another, asserting the transfer fee, token mint, and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferCheckedWithFee(connection, payer, source, mint, destination, owner, amount, decimals, fee, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n    const transaction = new Transaction().add(createTransferCheckedWithFeeInstruction(source, mint, destination, ownerPublicKey, amount, decimals, fee, multiSigners, programId));\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Withdraw withheld tokens from mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function withdrawWithheldTokensFromMint(connection, payer, mint, destination, authority, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n    const transaction = new Transaction().add(createWithdrawWithheldTokensFromMintInstruction(mint, destination, authorityPublicKey, signers, programId));\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Withdraw withheld tokens from accounts\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param destination    The destination account\n * @param authority      The mint's withdraw withheld tokens authority\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function withdrawWithheldTokensFromAccounts(connection, payer, mint, destination, authority, multiSigners, sources, confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n    const transaction = new Transaction().add(createWithdrawWithheldTokensFromAccountsInstruction(mint, destination, authorityPublicKey, signers, sources, programId));\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Harvest withheld tokens from accounts to the mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           The token mint\n * @param sources        Source accounts from which to withdraw withheld fees\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function harvestWithheldTokensToMint(connection, payer, mint, sources, confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n    const transaction = new Transaction().add(createHarvestWithheldTokensToMintInstruction(mint, sources, programId));\n    return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n//# sourceMappingURL=actions.js.map"]},"metadata":{},"sourceType":"module"}