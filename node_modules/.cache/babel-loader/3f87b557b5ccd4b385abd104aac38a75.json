{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\n\nexport const burnCheckedInstructionData = struct([u8('instruction'), u64('amount'), u8('decimals')]);\n/**\n * Construct a BurnChecked instruction\n *\n * @param mint         Mint for the account\n * @param account      Account to burn tokens from\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param decimals     Number of decimals in burn amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createBurnCheckedInstruction(account, mint, owner, amount, decimals) {\n  let multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  const data = Buffer.alloc(burnCheckedInstructionData.span);\n  burnCheckedInstructionData.encode({\n    instruction: TokenInstruction.BurnChecked,\n    amount: BigInt(amount),\n    decimals: decimals\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode a BurnChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeBurnCheckedInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== burnCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account: account,\n      mint: mint,\n      owner: owner,\n      multiSigners: multiSigners\n    },\n    data: data\n  } = decodeBurnCheckedInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.BurnChecked) throw new TokenInvalidInstructionTypeError();\n  if (!account || !mint || !owner) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      mint: mint,\n      owner: owner,\n      multiSigners: multiSigners\n    },\n    data: data\n  };\n}\n/**\n * Decode a BurnChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeBurnCheckedInstructionUnchecked(_ref) {\n  let {\n    programId: programId,\n    keys: [account, mint, owner, ...multiSigners],\n    data: data\n  } = _ref;\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      mint: mint,\n      owner: owner,\n      multiSigners: multiSigners\n    },\n    data: burnCheckedInstructionData.decode(data)\n  };\n}","map":{"version":3,"sources":["../../../src/instructions/burnChecked.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const burnCheckedInstructionData = struct([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n/**\n * Construct a BurnChecked instruction\n *\n * @param mint         Mint for the account\n * @param account      Account to burn tokens from\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param decimals     Number of decimals in burn amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createBurnCheckedInstruction(account, mint, owner, amount, decimals, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: true },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(burnCheckedInstructionData.span);\n    burnCheckedInstructionData.encode({\n        instruction: TokenInstruction.BurnChecked,\n        amount: BigInt(amount),\n        decimals,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a BurnChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeBurnCheckedInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== burnCheckedInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, mint, owner, multiSigners }, data, } = decodeBurnCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.BurnChecked)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a BurnChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeBurnCheckedInstructionUnchecked({ programId, keys: [account, mint, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data: burnCheckedInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=burnChecked.js.map"]},"metadata":{},"sourceType":"module"}