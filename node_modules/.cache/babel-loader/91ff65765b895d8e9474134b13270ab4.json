{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nexport function useLocalStorage(key, defaultState) {\n  const state = useState(() => {\n    try {\n      const value = localStorage.getItem(key);\n      if (value) return JSON.parse(value);\n    } catch (error) {\n      if (typeof window !== 'undefined') {\n        console.error(error);\n      }\n    }\n\n    return defaultState;\n  });\n  const value = state[0];\n  const isFirstRenderRef = useRef(true);\n  useEffect(() => {\n    if (isFirstRenderRef.current) {\n      isFirstRenderRef.current = false;\n      return;\n    }\n\n    try {\n      if (value === null) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, JSON.stringify(value));\n      }\n    } catch (error) {\n      if (typeof window !== 'undefined') {\n        console.error(error);\n      }\n    }\n  }, [value, key]);\n  return state;\n}","map":{"version":3,"sources":["../../src/useLocalStorage.ts"],"names":[],"mappings":"AAAA,SAA6C,SAA7C,EAAwD,MAAxD,EAAgE,QAAhE,QAAgF,OAAhF;AAEA,OAAM,SAAU,eAAV,CAA6B,GAA7B,EAA0C,YAA1C,EAAyD;EAC3D,MAAM,KAAK,GAAG,QAAQ,CAAI,MAAK;IAC3B,IAAI;MACA,MAAM,KAAK,GAAG,YAAY,CAAC,OAAb,CAAqB,GAArB,CAAd;MACA,IAAI,KAAJ,EAAW,OAAO,IAAI,CAAC,KAAL,CAAW,KAAX,CAAP;IACd,CAHD,CAGE,OAAO,KAAP,EAAmB;MACjB,IAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;QAC/B,OAAO,CAAC,KAAR,CAAc,KAAd;MACH;IACJ;;IAED,OAAO,YAAP;EACH,CAXqB,CAAtB;EAYA,MAAM,KAAK,GAAG,KAAK,CAAC,CAAD,CAAnB;EAEA,MAAM,gBAAgB,GAAG,MAAM,CAAC,IAAD,CAA/B;EACA,SAAS,CAAC,MAAK;IACX,IAAI,gBAAgB,CAAC,OAArB,EAA8B;MAC1B,gBAAgB,CAAC,OAAjB,GAA2B,KAA3B;MACA;IACH;;IACD,IAAI;MACA,IAAI,KAAK,KAAK,IAAd,EAAoB;QAChB,YAAY,CAAC,UAAb,CAAwB,GAAxB;MACH,CAFD,MAEO;QACH,YAAY,CAAC,OAAb,CAAqB,GAArB,EAA0B,IAAI,CAAC,SAAL,CAAe,KAAf,CAA1B;MACH;IACJ,CAND,CAME,OAAO,KAAP,EAAmB;MACjB,IAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;QAC/B,OAAO,CAAC,KAAR,CAAc,KAAd;MACH;IACJ;EACJ,CAhBQ,EAgBN,CAAC,KAAD,EAAQ,GAAR,CAhBM,CAAT;EAkBA,OAAO,KAAP;AACH","sourceRoot":"","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nexport function useLocalStorage(key, defaultState) {\n    const state = useState(() => {\n        try {\n            const value = localStorage.getItem(key);\n            if (value)\n                return JSON.parse(value);\n        }\n        catch (error) {\n            if (typeof window !== 'undefined') {\n                console.error(error);\n            }\n        }\n        return defaultState;\n    });\n    const value = state[0];\n    const isFirstRenderRef = useRef(true);\n    useEffect(() => {\n        if (isFirstRenderRef.current) {\n            isFirstRenderRef.current = false;\n            return;\n        }\n        try {\n            if (value === null) {\n                localStorage.removeItem(key);\n            }\n            else {\n                localStorage.setItem(key, JSON.stringify(value));\n            }\n        }\n        catch (error) {\n            if (typeof window !== 'undefined') {\n                console.error(error);\n            }\n        }\n    }, [value, key]);\n    return state;\n}\n//# sourceMappingURL=useLocalStorage.js.map"]},"metadata":{},"sourceType":"module"}