{"ast":null,"code":"import { ns64, s16, struct } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\nexport const InterestBearingMintConfigStateLayout = struct([publicKey('rateAuthority'), ns64('initializationTimestamp'), s16('preUpdateAverageRate'), ns64('lastUpdateTimestamp'), s16('currentRate')]);\nexport const INTEREST_BEARING_MINT_CONFIG_STATE_SIZE = InterestBearingMintConfigStateLayout.span;\nexport function getInterestBearingMintConfigState(mint) {\n  const extensionData = getExtensionData(ExtensionType.InterestBearingMint, mint.tlvData);\n\n  if (extensionData !== null) {\n    return InterestBearingMintConfigStateLayout.decode(extensionData);\n  }\n\n  return null;\n}","map":{"version":3,"sources":["../../../../src/extensions/interestBearingMint/state.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,EAAe,GAAf,EAAoB,MAApB,QAAkC,uBAAlC;AACA,SAAS,SAAT,QAA0B,6BAA1B;AAGA,SAAS,aAAT,EAAwB,gBAAxB,QAAgD,qBAAhD;AAUA,OAAO,MAAM,oCAAoC,GAAG,MAAM,CAAiC,CACvF,SAAS,CAAC,eAAD,CAD8E,EAEvF,IAAI,CAAC,yBAAD,CAFmF,EAGvF,GAAG,CAAC,sBAAD,CAHoF,EAIvF,IAAI,CAAC,qBAAD,CAJmF,EAKvF,GAAG,CAAC,aAAD,CALoF,CAAjC,CAAnD;AAQP,OAAO,MAAM,uCAAuC,GAAG,oCAAoC,CAAC,IAArF;AAEP,OAAM,SAAU,iCAAV,CAA4C,IAA5C,EAAsD;EACxD,MAAM,aAAa,GAAG,gBAAgB,CAAC,aAAa,CAAC,mBAAf,EAAoC,IAAI,CAAC,OAAzC,CAAtC;;EACA,IAAI,aAAa,KAAK,IAAtB,EAA4B;IACxB,OAAO,oCAAoC,CAAC,MAArC,CAA4C,aAA5C,CAAP;EACH;;EACD,OAAO,IAAP;AACH","sourceRoot":"","sourcesContent":["import { ns64, s16, struct } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\nexport const InterestBearingMintConfigStateLayout = struct([\n    publicKey('rateAuthority'),\n    ns64('initializationTimestamp'),\n    s16('preUpdateAverageRate'),\n    ns64('lastUpdateTimestamp'),\n    s16('currentRate'),\n]);\nexport const INTEREST_BEARING_MINT_CONFIG_STATE_SIZE = InterestBearingMintConfigStateLayout.span;\nexport function getInterestBearingMintConfigState(mint) {\n    const extensionData = getExtensionData(ExtensionType.InterestBearingMint, mint.tlvData);\n    if (extensionData !== null) {\n        return InterestBearingMintConfigStateLayout.decode(extensionData);\n    }\n    return null;\n}\n//# sourceMappingURL=state.js.map"]},"metadata":{},"sourceType":"module"}