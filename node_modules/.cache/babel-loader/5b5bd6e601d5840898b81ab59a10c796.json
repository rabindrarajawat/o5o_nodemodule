{"ast":null,"code":"import assert from '../../../utils/assert.mjs';\nimport { amount, lamports } from '../../../types/Amount.mjs';\nimport { Pda } from '../../../types/Pda.mjs';\nimport { toBigNumber } from '../../../types/BigNumber.mjs';\nimport { toDateTime, toOptionDateTime } from '../../../types/DateTime.mjs';\n/** @group Models */\n\n/** @group Model Helpers */\n\nconst isListing = value => typeof value === 'object' && value.model === 'listing' && !value.lazy;\n/** @group Model Helpers */\n\n\nfunction assertListing(value) {\n  assert(isListing(value), `Expected Listing type`);\n}\n/** @group Model Helpers */\n\n\nconst toListing = (account, auctionHouse, asset) => {\n  const lazyListing = toLazyListing(account, auctionHouse);\n  return { ...lazyListing,\n    model: 'listing',\n    lazy: false,\n    asset,\n    tokens: amount(lazyListing.tokens, asset.mint.currency)\n  };\n};\n/** @group Model Helpers */\n\n\nconst isLazyListing = value => typeof value === 'object' && value.model === 'listing' && value.lazy;\n/** @group Model Helpers */\n\n\nfunction assertLazyListing(value) {\n  assert(isLazyListing(value), `Expected LazyListing type`);\n}\n/** @group Model Helpers */\n\n\nconst toLazyListing = (account, auctionHouse) => {\n  return {\n    model: 'listing',\n    lazy: true,\n    auctionHouse,\n    tradeStateAddress: new Pda(account.data.tradeState, account.data.tradeStateBump),\n    bookkeeperAddress: account.data.bookkeeper,\n    sellerAddress: account.data.seller,\n    metadataAddress: account.data.metadata,\n    receiptAddress: new Pda(account.publicKey, account.data.bump),\n    purchaseReceiptAddress: account.data.purchaseReceipt,\n    // Data.\n    price: auctionHouse.isNative ? lamports(account.data.price) : amount(account.data.price, auctionHouse.treasuryMint.currency),\n    tokens: toBigNumber(account.data.tokenSize),\n    createdAt: toDateTime(account.data.createdAt),\n    canceledAt: toOptionDateTime(account.data.canceledAt)\n  };\n};\n\nexport { assertLazyListing, assertListing, isLazyListing, isListing, toLazyListing, toListing };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/models/Listing.ts"],"names":["isListing","value","model","lazy","assertListing","assert","toListing","account","auctionHouse","asset","lazyListing","toLazyListing","tokens","amount","mint","currency","isLazyListing","assertLazyListing","tradeStateAddress","Pda","data","tradeState","tradeStateBump","bookkeeperAddress","bookkeeper","sellerAddress","seller","metadataAddress","metadata","receiptAddress","publicKey","bump","purchaseReceiptAddress","purchaseReceipt","price","isNative","lamports","treasuryMint","toBigNumber","tokenSize","createdAt","toDateTime","canceledAt","toOptionDateTime"],"mappings":";;;;;AAkBA;;AA8DA;;MACaA,SAAS,GAAIC,KAAU,IAClC,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAND,KAAgB,SAA7C,IAA0D,CAACA,KAAK,CAACE,I;AAEnE;;;AACO,SAASC,aAAT,CAAuBH,KAAvB,EAA6D;EAClEI,MAAM,CAACL,SAAS,CAACC,KAAD,CAAV,EAAoB,uBAApB,CAANI;AACF;AAEA;;;AACO,MAAMC,SAAS,GAAG,CACvBC,OADuB,EAEvBC,YAFuB,EAGvBC,KAHuB,KAIX;EACZ,MAAMC,WAAW,GAAGC,aAAa,CAACJ,OAAD,EAAUC,YAAV,CAAjC;EACA,OAAO,EACL,GAAGE,WADE;IAELR,KAAK,EAAE,SAFF;IAGLC,IAAI,EAAE,KAHD;IAILM,KAJK;IAKLG,MAAM,EAAEC,MAAM,CAACH,WAAW,CAACE,MAAb,EAAqBH,KAAK,CAACK,IAANL,CAAWM,QAAhC;EALT,CAAP;AAOF,CAbO;AAsBP;;;MACaC,aAAa,GAAIf,KAAU,IACtC,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAND,KAAgB,SAA7C,IAA0DA,KAAK,CAACE,I;AAElE;;;AACO,SAASc,iBAAT,CAA2BhB,KAA3B,EAAqE;EAC1EI,MAAM,CAACW,aAAa,CAACf,KAAD,CAAd,EAAwB,2BAAxB,CAANI;AACF;AAEA;;;MACaM,aAAa,GAAG,CAC3BJ,OAD2B,EAE3BC,YAF2B,KAGX;EAChB,OAAO;IACLN,KAAK,EAAE,SADF;IAELC,IAAI,EAAE,IAFD;IAGLK,YAHK;IAILU,iBAAiB,EAAE,IAAIC,GAAJ,CACjBZ,OAAO,CAACa,IAARb,CAAac,UADI,EAEjBd,OAAO,CAACa,IAARb,CAAae,cAFI,CAJd;IAQLC,iBAAiB,EAAEhB,OAAO,CAACa,IAARb,CAAaiB,UAR3B;IASLC,aAAa,EAAElB,OAAO,CAACa,IAARb,CAAamB,MATvB;IAULC,eAAe,EAAEpB,OAAO,CAACa,IAARb,CAAaqB,QAVzB;IAWLC,cAAc,EAAE,IAAIV,GAAJ,CAAQZ,OAAO,CAACuB,SAAhB,EAA2BvB,OAAO,CAACa,IAARb,CAAawB,IAAxC,CAXX;IAYLC,sBAAsB,EAAEzB,OAAO,CAACa,IAARb,CAAa0B,eAZhC;IAcL;IACAC,KAAK,EAAE1B,YAAY,CAAC2B,QAAb3B,GACH4B,QAAQ,CAAC7B,OAAO,CAACa,IAARb,CAAa2B,KAAd,CADL1B,GAEHK,MAAM,CAACN,OAAO,CAACa,IAARb,CAAa2B,KAAd,EAAqB1B,YAAY,CAAC6B,YAAb7B,CAA0BO,QAA/C,CAjBL;IAkBLH,MAAM,EAAE0B,WAAW,CAAC/B,OAAO,CAACa,IAARb,CAAagC,SAAd,CAlBd;IAmBLC,SAAS,EAAEC,UAAU,CAAClC,OAAO,CAACa,IAARb,CAAaiC,SAAd,CAnBhB;IAoBLE,UAAU,EAAEC,gBAAgB,CAACpC,OAAO,CAACa,IAARb,CAAamC,UAAd;EApBvB,CAAP;AAsBF,C","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { ListingReceiptAccount } from '../accounts';\nimport { NftWithToken, SftWithToken } from '../../nftModule';\nimport { AuctionHouse } from './AuctionHouse';\nimport { assert, Option } from '@/utils';\nimport {\n  amount,\n  BigNumber,\n  DateTime,\n  lamports,\n  Pda,\n  SolAmount,\n  SplTokenAmount,\n  toBigNumber,\n  toDateTime,\n  toOptionDateTime,\n} from '@/types';\n\n/** @group Models */\nexport type Listing = Readonly<{\n  /** A model identifier to distinguish models in the SDK. */\n  model: 'listing';\n\n  /**\n   * Whether or not the asset was loaded.\n   * When this is `false`, it means the Listing includes asset model.\n   */\n  lazy: false;\n\n  /** A model of the Auction House related to this listing. */\n  auctionHouse: AuctionHouse;\n\n  /** The Nft or Sft with the associated token account. */\n  asset: NftWithToken | SftWithToken;\n\n  /** The address of the seller's trade state account. */\n  tradeStateAddress: Pda;\n\n  /** The address of the seller's wallet. */\n  sellerAddress: PublicKey;\n\n  /**\n   * The address of the bookkeeper account.\n   * It is responsible for signing a Listing Receipt Print.\n   */\n  bookkeeperAddress: Option<PublicKey>;\n\n  /**\n   * The address of the listing receipt account.\n   * This is the account that stores information about this listing.\n   * The Listing model is built on top of this account.\n   */\n  receiptAddress: Option<Pda>;\n\n  /**\n   * The address of the purchase receipt account.\n   * This is the account that stores information about the purchase related to this listing.\n   *\n   * ```ts\n   * const transactionBuilder = metaplex\n   *   .auctionHouse()\n   *   .builders()\n   *   .findPurchaseByReceipt({ auctionHouse, receiptAddress: purchaseReceiptAddress });\n   * ```\n   */\n  purchaseReceiptAddress: Option<PublicKey>;\n\n  /** The sellers's price. */\n  price: SolAmount | SplTokenAmount;\n\n  /** The number of tokens listed in case it's a sale of a Fungible Token. */\n  tokens: SplTokenAmount;\n\n  /** The date of creation. */\n  createdAt: DateTime;\n\n  /** The date of cancellation. */\n  canceledAt: Option<DateTime>;\n}>;\n\n/** @group Model Helpers */\nexport const isListing = (value: any): value is Listing =>\n  typeof value === 'object' && value.model === 'listing' && !value.lazy;\n\n/** @group Model Helpers */\nexport function assertListing(value: any): asserts value is Listing {\n  assert(isListing(value), `Expected Listing type`);\n}\n\n/** @group Model Helpers */\nexport const toListing = (\n  account: ListingReceiptAccount,\n  auctionHouse: AuctionHouse,\n  asset: NftWithToken | SftWithToken\n): Listing => {\n  const lazyListing = toLazyListing(account, auctionHouse);\n  return {\n    ...lazyListing,\n    model: 'listing',\n    lazy: false,\n    asset,\n    tokens: amount(lazyListing.tokens, asset.mint.currency),\n  };\n};\n\nexport type LazyListing = Omit<Listing, 'lazy' | 'asset' | 'tokens'> &\n  Readonly<{\n    lazy: true;\n    metadataAddress: PublicKey;\n    tokens: BigNumber;\n  }>;\n\n/** @group Model Helpers */\nexport const isLazyListing = (value: any): value is LazyListing =>\n  typeof value === 'object' && value.model === 'listing' && value.lazy;\n\n/** @group Model Helpers */\nexport function assertLazyListing(value: any): asserts value is LazyListing {\n  assert(isLazyListing(value), `Expected LazyListing type`);\n}\n\n/** @group Model Helpers */\nexport const toLazyListing = (\n  account: ListingReceiptAccount,\n  auctionHouse: AuctionHouse\n): LazyListing => {\n  return {\n    model: 'listing',\n    lazy: true,\n    auctionHouse,\n    tradeStateAddress: new Pda(\n      account.data.tradeState,\n      account.data.tradeStateBump\n    ),\n    bookkeeperAddress: account.data.bookkeeper,\n    sellerAddress: account.data.seller,\n    metadataAddress: account.data.metadata,\n    receiptAddress: new Pda(account.publicKey, account.data.bump),\n    purchaseReceiptAddress: account.data.purchaseReceipt,\n\n    // Data.\n    price: auctionHouse.isNative\n      ? lamports(account.data.price)\n      : amount(account.data.price, auctionHouse.treasuryMint.currency),\n    tokens: toBigNumber(account.data.tokenSize),\n    createdAt: toDateTime(account.data.createdAt),\n    canceledAt: toOptionDateTime(account.data.canceledAt),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}