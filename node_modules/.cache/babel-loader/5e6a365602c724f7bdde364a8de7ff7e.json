{"ast":null,"code":"'use strict';\n\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase) => {\n  let isLastCharLower = false;\n  let isLastCharUpper = false;\n  let isLastLastCharUpper = false;\n\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n\n    if (isLastCharLower && UPPERCASE.test(character)) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n    }\n  }\n\n  return string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n  LEADING_CAPITAL.lastIndex = 0;\n  return input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));\n};\n\nconst postProcess = (input, toUpperCase) => {\n  SEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n  NUMBERS_AND_IDENTIFIER.lastIndex = 0;\n  return input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier)).replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));\n};\n\nconst camelCase = (input, options) => {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n\n  options = {\n    pascalCase: false,\n    preserveConsecutiveUppercase: false,\n    ...options\n  };\n\n  if (Array.isArray(input)) {\n    input = input.map(x => x.trim()).filter(x => x.length).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  const toLowerCase = options.locale === false ? string => string.toLowerCase() : string => string.toLocaleLowerCase(options.locale);\n  const toUpperCase = options.locale === false ? string => string.toUpperCase() : string => string.toLocaleUpperCase(options.locale);\n\n  if (input.length === 1) {\n    return options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n  }\n\n  const hasUpperCase = input !== toLowerCase(input);\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input, toLowerCase, toUpperCase);\n  }\n\n  input = input.replace(LEADING_SEPARATORS, '');\n\n  if (options.preserveConsecutiveUppercase) {\n    input = preserveConsecutiveUppercase(input, toLowerCase);\n  } else {\n    input = toLowerCase(input);\n  }\n\n  if (options.pascalCase) {\n    input = toUpperCase(input.charAt(0)) + input.slice(1);\n  }\n\n  return postProcess(input, toUpperCase);\n};\n\nmodule.exports = camelCase; // TODO: Remove this for the next major release\n\nmodule.exports.default = camelCase;","map":{"version":3,"names":["UPPERCASE","LOWERCASE","LEADING_CAPITAL","IDENTIFIER","SEPARATORS","LEADING_SEPARATORS","RegExp","source","SEPARATORS_AND_IDENTIFIER","NUMBERS_AND_IDENTIFIER","preserveCamelCase","string","toLowerCase","toUpperCase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","length","character","test","slice","preserveConsecutiveUppercase","input","lastIndex","replace","m1","postProcess","_","identifier","m","camelCase","options","Array","isArray","TypeError","pascalCase","map","x","trim","filter","join","locale","toLocaleLowerCase","toLocaleUpperCase","hasUpperCase","charAt","module","exports","default"],"sources":["D:/software/o5o BNB/o5o-staking-frontend/node_modules/camelcase/index.js"],"sourcesContent":["'use strict';\n\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))\n\t\t.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false ?\n\t\tstring => string.toLowerCase() :\n\t\tstring => string.toLocaleLowerCase(options.locale);\n\tconst toUpperCase = options.locale === false ?\n\t\tstring => string.toUpperCase() :\n\t\tstring => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input, toLowerCase);\n\t} else {\n\t\tinput = toLowerCase(input);\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}