{"ast":null,"code":"import { TokenGpaBuilder } from '../../tokenModule/gpaBuilders.mjs';\nimport { useOperation } from '../../../types/Operation.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByOwnerOperation';\n/**\n * Finds multiple NFTs and SFTs by a given owner.\n *\n * ```ts\n * const nfts = await metaplex\n *   .nfts()\n *   .findAllByOwner({ owner };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst findNftsByOwnerOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst findNftsByOwnerOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const {\n      programs\n    } = scope;\n    const {\n      owner\n    } = operation.input;\n    const tokenProgram = metaplex.programs().getToken(programs);\n    const mints = await new TokenGpaBuilder(metaplex, tokenProgram.address).selectMint().whereOwner(owner).whereAmount(1).getDataAsPublicKeys();\n    scope.throwIfCanceled();\n    const nfts = await metaplex.nfts().findAllByMintList({\n      mints\n    }, scope);\n    scope.throwIfCanceled();\n    return nfts.filter(nft => nft !== null);\n  }\n};\nexport { findNftsByOwnerOperation, findNftsByOwnerOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/nftModule/operations/findNftsByOwner.ts"],"names":["Key","findNftsByOwnerOperation","useOperation","findNftsByOwnerOperationHandler","handle","operation","metaplex","scope","programs","owner","input","tokenProgram","getToken","mints","TokenGpaBuilder","address","selectMint","whereOwner","whereAmount","getDataAsPublicKeys","throwIfCanceled","nfts","findAllByMintList","filter","nft"],"mappings":";6DAWA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,0BAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,wBAAwB,GACnCC,YAAY,CAA2BF,GAA3B,C;AAEd;AACA;AACA;AACA;;AAsBA;AACA;AACA;AACA;;AACO,MAAMG,+BAA2E,GACtF;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI6B;IACnC,MAAM;MAAEC;IAAF,IAAeD,KAArB;IACA,MAAM;MAAEE;IAAF,IAAYJ,SAAS,CAACK,KAA5B;IAEA,MAAMC,YAAY,GAAGL,QAAQ,CAACE,QAATF,GAAoBM,QAApBN,CAA6BE,QAA7BF,CAArB;IACA,MAAMO,KAAK,GAAG,MAAM,IAAIC,eAAJ,CAAoBR,QAApB,EAA8BK,YAAY,CAACI,OAA3C,EACjBC,UADiB,GAEjBC,UAFiB,CAENR,KAFM,EAGjBS,WAHiB,CAGL,CAHK,EAIjBC,mBAJiB,EAApB;IAKAZ,KAAK,CAACa,eAANb;IAEA,MAAMc,IAAI,GAAG,MAAMf,QAAQ,CAACe,IAATf,GAAgBgB,iBAAhBhB,CAAkC;MAAEO;IAAF,CAAlCP,EAA6CC,KAA7CD,CAAnB;IACAC,KAAK,CAACa,eAANb;IAEA,OAAOc,IAAI,CAACE,MAALF,CAAaG,GAAG,IAAkCA,GAAG,KAAK,IAA1DH,CAAP;EACF;AArBF,CADK","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { TokenGpaBuilder } from '../../tokenModule';\nimport { Metadata, Nft, Sft } from '../models';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByOwnerOperation' as const;\n\n/**\n * Finds multiple NFTs and SFTs by a given owner.\n *\n * ```ts\n * const nfts = await metaplex\n *   .nfts()\n *   .findAllByOwner({ owner };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findNftsByOwnerOperation =\n  useOperation<FindNftsByOwnerOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindNftsByOwnerOperation = Operation<\n  typeof Key,\n  FindNftsByOwnerInput,\n  FindNftsByOwnerOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindNftsByOwnerInput = {\n  /** The address of the owner. */\n  owner: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindNftsByOwnerOutput = (Metadata | Nft | Sft)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findNftsByOwnerOperationHandler: OperationHandler<FindNftsByOwnerOperation> =\n  {\n    handle: async (\n      operation: FindNftsByOwnerOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindNftsByOwnerOutput> => {\n      const { programs } = scope;\n      const { owner } = operation.input;\n\n      const tokenProgram = metaplex.programs().getToken(programs);\n      const mints = await new TokenGpaBuilder(metaplex, tokenProgram.address)\n        .selectMint()\n        .whereOwner(owner)\n        .whereAmount(1)\n        .getDataAsPublicKeys();\n      scope.throwIfCanceled();\n\n      const nfts = await metaplex.nfts().findAllByMintList({ mints }, scope);\n      scope.throwIfCanceled();\n\n      return nfts.filter((nft): nft is Metadata | Nft | Sft => nft !== null);\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}