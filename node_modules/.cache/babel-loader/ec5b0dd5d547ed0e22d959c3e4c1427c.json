{"ast":null,"code":"import { createBurnNftInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'DeleteNftOperation';\n/**\n * Deletes an existing NFT.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .delete({ mintAddress };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst deleteNftOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst deleteNftOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    return deleteNftBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Deletes an existing NFT.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .delete({ mintAddress });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst deleteNftBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    mintAddress,\n    owner = metaplex.identity(),\n    ownerTokenAccount,\n    collection\n  } = params;\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs\n  });\n  const edition = metaplex.nfts().pdas().masterEdition({\n    mint: mintAddress,\n    programs\n  });\n  const tokenAddress = ownerTokenAccount ?? metaplex.tokens().pdas().associatedTokenAccount({\n    mint: mintAddress,\n    owner: owner.publicKey,\n    programs\n  });\n  return TransactionBuilder.make().setFeePayer(payer).add({\n    instruction: createBurnNftInstruction({\n      metadata,\n      owner: owner.publicKey,\n      mint: mintAddress,\n      tokenAccount: tokenAddress,\n      masterEditionAccount: edition,\n      splTokenProgram: tokenProgram.address,\n      collectionMetadata: collection ? metaplex.nfts().pdas().metadata({\n        mint: collection,\n        programs\n      }) : undefined\n    }, tokenMetadataProgram.address),\n    signers: [owner],\n    key: params.instructionKey ?? 'deleteNft'\n  });\n};\n\nexport { deleteNftBuilder, deleteNftOperation, deleteNftOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/nftModule/operations/deleteNft.ts"],"names":["Key","deleteNftOperation","useOperation","deleteNftOperationHandler","handle","operation","metaplex","scope","deleteNftBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","owner","identity","ownerTokenAccount","collection","tokenProgram","getToken","tokenMetadataProgram","getTokenMetadata","metadata","nfts","pdas","mint","edition","masterEdition","tokenAddress","tokens","associatedTokenAccount","publicKey","TransactionBuilder","make","setFeePayer","add","instruction","createBurnNftInstruction","tokenAccount","masterEditionAccount","splTokenProgram","address","collectionMetadata","undefined","signers","key","instructionKey"],"mappings":";;4EAaA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,oBAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,kBAAkB,GAAGC,YAAY,CAAqBF,GAArB,C;AAE9C;AACA;AACA;AACA;;AAmDA;AACA;AACA;AACA;;AACO,MAAMG,yBAA+D,GAAG;EAC7EC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIuB;IAC7B,OAAOC,gBAAgB,CAACF,QAAD,EAAWD,SAAS,CAACI,KAArB,EAA4BF,KAA5B,CAAhBC,CAAmDE,cAAnDF,CACLF,QADKE,EAELD,KAAK,CAACI,cAFDH,CAAP;EAIF;AAV6E,CAAxE,C,CAaP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaA,MAAAA,gBAAgB,GAAG,UAC9BF,QAD8B,EAE9BM,MAF8B,EAIP;EAAA,IADvBC,OACuB,uEADc,EACd;EACvB,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGT,QAAQ,CAACU,GAATV,GAAeW,kBAAfX;EAApB,IAA4DO,OAAlE;EACA,MAAM;IACJK,WADI;IAEJC,KAAK,GAAGb,QAAQ,CAACc,QAATd,EAFJ;IAGJe,iBAHI;IAIJC;EAJI,IAKFV,MALJ;EAOA,MAAMW,YAAY,GAAGjB,QAAQ,CAACQ,QAATR,GAAoBkB,QAApBlB,CAA6BQ,QAA7BR,CAArB;EACA,MAAMmB,oBAAoB,GAAGnB,QAAQ,CAACQ,QAATR,GAAoBoB,gBAApBpB,CAAqCQ,QAArCR,CAA7B;EAEA,MAAMqB,QAAQ,GAAGrB,QAAQ,CAACsB,IAATtB,GAAgBuB,IAAhBvB,GAAuBqB,QAAvBrB,CAAgC;IAC/CwB,IAAI,EAAEZ,WADyC;IAE/CJ;EAF+C,CAAhCR,CAAjB;EAIA,MAAMyB,OAAO,GAAGzB,QAAQ,CAACsB,IAATtB,GAAgBuB,IAAhBvB,GAAuB0B,aAAvB1B,CAAqC;IACnDwB,IAAI,EAAEZ,WAD6C;IAEnDJ;EAFmD,CAArCR,CAAhB;EAIA,MAAM2B,YAAY,GAChBZ,iBAAiB,IACjBf,QAAQ,CAAC4B,MAAT5B,GAAkBuB,IAAlBvB,GAAyB6B,sBAAzB7B,CAAgD;IAC9CwB,IAAI,EAAEZ,WADwC;IAE9CC,KAAK,EAAEA,KAAK,CAACiB,SAFiC;IAG9CtB;EAH8C,CAAhDR,CAFF;EAQA,OAAO+B,kBAAkB,CAACC,IAAnBD,GACJE,WADIF,CACQtB,KADRsB,EAEJG,GAFIH,CAEA;IACHI,WAAW,EAAEC,wBAAwB,CACnC;MACEf,QADF;MAEER,KAAK,EAAEA,KAAK,CAACiB,SAFf;MAGEN,IAAI,EAAEZ,WAHR;MAIEyB,YAAY,EAAEV,YAJhB;MAKEW,oBAAoB,EAAEb,OALxB;MAMEc,eAAe,EAAEtB,YAAY,CAACuB,OANhC;MAOEC,kBAAkB,EAAEzB,UAAU,GAC1BhB,QAAQ,CAACsB,IAATtB,GAAgBuB,IAAhBvB,GAAuBqB,QAAvBrB,CAAgC;QAAEwB,IAAI,EAAER,UAAR;QAAoBR;MAApB,CAAhCR,CAD0B,GAE1B0C;IATN,CADmC,EAYnCvB,oBAAoB,CAACqB,OAZc,CADlC;IAeHG,OAAO,EAAE,CAAC9B,KAAD,CAfN;IAgBH+B,GAAG,EAAEtC,MAAM,CAACuC,cAAPvC,IAAyB;EAhB3B,CAFAyB,CAAP;AAoBF,CApDa7B","sourcesContent":["import { createBurnNftInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'DeleteNftOperation' as const;\n\n/**\n * Deletes an existing NFT.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .delete({ mintAddress };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const deleteNftOperation = useOperation<DeleteNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type DeleteNftOperation = Operation<\n  typeof Key,\n  DeleteNftInput,\n  DeleteNftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type DeleteNftInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /**\n   * The owner of the NFT as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  owner?: Signer;\n\n  /**\n   * The explicit token account linking the provided mint and owner\n   * accounts, if that account is not their associated token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `owner` parameters.\n   */\n  ownerTokenAccount?: PublicKey;\n\n  /**\n   * The address of the Sized Collection NFT associated with the\n   * NFT to delete, if any. This is required as the collection NFT\n   * will need to decrement its size.\n   *\n   * @defaultValue Defaults to assuming the NFT is not associated with a\n   * Size Collection NFT.\n   */\n  collection?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type DeleteNftOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const deleteNftOperationHandler: OperationHandler<DeleteNftOperation> = {\n  handle: async (\n    operation: DeleteNftOperation,\n    metaplex: Metaplex,\n    scope: OperationScope\n  ): Promise<DeleteNftOutput> => {\n    return deleteNftBuilder(metaplex, operation.input, scope).sendAndConfirm(\n      metaplex,\n      scope.confirmOptions\n    );\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type DeleteNftBuilderParams = Omit<DeleteNftInput, 'confirmOptions'> & {\n  /** A key to distinguish the instruction that burns the NFT. */\n  instructionKey?: string;\n};\n\n/**\n * Deletes an existing NFT.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .delete({ mintAddress });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const deleteNftBuilder = (\n  metaplex: Metaplex,\n  params: DeleteNftBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    owner = metaplex.identity(),\n    ownerTokenAccount,\n    collection,\n  } = params;\n\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs,\n  });\n  const edition = metaplex.nfts().pdas().masterEdition({\n    mint: mintAddress,\n    programs,\n  });\n  const tokenAddress =\n    ownerTokenAccount ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: owner.publicKey,\n      programs,\n    });\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createBurnNftInstruction(\n        {\n          metadata,\n          owner: owner.publicKey,\n          mint: mintAddress,\n          tokenAccount: tokenAddress,\n          masterEditionAccount: edition,\n          splTokenProgram: tokenProgram.address,\n          collectionMetadata: collection\n            ? metaplex.nfts().pdas().metadata({ mint: collection, programs })\n            : undefined,\n        },\n        tokenMetadataProgram.address\n      ),\n      signers: [owner],\n      key: params.instructionKey ?? 'deleteNft',\n    });\n};\n"]},"metadata":{},"sourceType":"module"}