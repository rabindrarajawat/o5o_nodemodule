{"ast":null,"code":"import { toBidReceiptAccount } from '../accounts.mjs';\nimport { BidReceiptGpaBuilder } from '../gpaBuilders/BidReceiptGpaBuilder.mjs';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { toLazyBid } from '../models/Bid.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindBidsOperation';\n/**\n * Finds Bids by multiple criteria.\n * You can use any combination of keys.\n *\n * ```ts\n * // Find all bids in an Auction House.\n * const bids = await metaplex\n *   .auctionHouse()\n *   .findBids({ auctionHouse });\n *\n * // Find bids by buyer and mint.\n * const bids = await metaplex\n *   .auctionHouse()\n *   .findBids({ auctionHouse, buyer, mint });\n *\n * // Find bids by metadata.\n * const bids = await metaplex\n *   .auctionHouse()\n *   .findBids({ auctionHouse, metadata });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst findBidsOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst findBidsOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const {\n      programs,\n      commitment\n    } = scope;\n    const {\n      auctionHouse,\n      buyer,\n      metadata,\n      mint\n    } = operation.input;\n    const auctionHouseProgram = metaplex.programs().getAuctionHouse(programs);\n    let bidQuery = new BidReceiptGpaBuilder(metaplex, auctionHouseProgram.address).mergeConfig({\n      commitment\n    }).whereAuctionHouse(auctionHouse.address);\n\n    if (buyer) {\n      bidQuery = bidQuery.whereBuyer(buyer);\n    }\n\n    if (metadata && !mint) {\n      bidQuery = bidQuery.whereMetadata(metadata);\n    }\n\n    if (mint) {\n      bidQuery = bidQuery.whereMetadata(metaplex.nfts().pdas().metadata({\n        mint,\n        programs\n      }));\n    }\n\n    scope.throwIfCanceled();\n    return bidQuery.getAndMap(account => toLazyBid(toBidReceiptAccount(account), auctionHouse));\n  }\n};\nexport { findBidsOperation, findBidsOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/operations/findBids.ts"],"names":["Key","findBidsOperation","useOperation","findBidsOperationHandler","handle","operation","metaplex","scope","programs","commitment","auctionHouse","buyer","metadata","mint","input","auctionHouseProgram","getAuctionHouse","bidQuery","BidReceiptGpaBuilder","address","mergeConfig","whereAuctionHouse","whereBuyer","whereMetadata","nfts","pdas","throwIfCanceled","getAndMap","account","toLazyBid","toBidReceiptAccount"],"mappings":";;;+CAYA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,mBAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,iBAAiB,GAAGC,YAAY,CAAoBF,GAApB,C;AAE7C;AACA;AACA;AACA;;AAkCA;AACA;AACA;AACA;;AACO,MAAMG,wBAA6D,GAAG;EAC3EC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIsB;IAC5B,MAAM;MAAEC,QAAF;MAAYC;IAAZ,IAA2BF,KAAjC;IACA,MAAM;MAAEG,YAAF;MAAgBC,KAAhB;MAAuBC,QAAvB;MAAiCC;IAAjC,IAA0CR,SAAS,CAACS,KAA1D;IACA,MAAMC,mBAAmB,GAAGT,QAAQ,CAACE,QAATF,GAAoBU,eAApBV,CAAoCE,QAApCF,CAA5B;IAEA,IAAIW,QAAQ,GAAG,IAAIC,oBAAJ,CACbZ,QADa,EAEbS,mBAAmB,CAACI,OAFP,EAIZC,WAJY,CAIA;MAAEX;IAAF,CAJA,EAKZY,iBALY,CAKMX,YAAY,CAACS,OALnB,CAAf;;IAOA,IAAIR,KAAJ,EAAW;MACTM,QAAQ,GAAGA,QAAQ,CAACK,UAATL,CAAoBN,KAApBM,CAAXA;IACF;;IAEA,IAAIL,QAAQ,IAAI,CAACC,IAAjB,EAAuB;MACrBI,QAAQ,GAAGA,QAAQ,CAACM,aAATN,CAAuBL,QAAvBK,CAAXA;IACF;;IAEA,IAAIJ,IAAJ,EAAU;MACRI,QAAQ,GAAGA,QAAQ,CAACM,aAATN,CACTX,QAAQ,CAACkB,IAATlB,GAAgBmB,IAAhBnB,GAAuBM,QAAvBN,CAAgC;QAAEO,IAAF;QAAQL;MAAR,CAAhCF,CADSW,CAAXA;IAGF;;IAEAV,KAAK,CAACmB,eAANnB;IAEA,OAAOU,QAAQ,CAACU,SAATV,CAAoBW,OAAO,IAChCC,SAAS,CAACC,mBAAmB,CAACF,OAAD,CAApB,EAA+BlB,YAA/B,CADJO,CAAP;EAGF;AApC2E,CAAtE","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { BidReceiptGpaBuilder } from '../gpaBuilders';\nimport { AuctionHouse, Bid, LazyBid, toLazyBid } from '../models';\nimport { toBidReceiptAccount } from '../accounts';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindBidsOperation' as const;\n\n/**\n * Finds Bids by multiple criteria.\n * You can use any combination of keys.\n *\n * ```ts\n * // Find all bids in an Auction House.\n * const bids = await metaplex\n *   .auctionHouse()\n *   .findBids({ auctionHouse });\n *\n * // Find bids by buyer and mint.\n * const bids = await metaplex\n *   .auctionHouse()\n *   .findBids({ auctionHouse, buyer, mint });\n *\n * // Find bids by metadata.\n * const bids = await metaplex\n *   .auctionHouse()\n *   .findBids({ auctionHouse, metadata });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findBidsOperation = useOperation<FindBidsOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindBidsOperation = Operation<\n  typeof Key,\n  FindBidsInput,\n  FindBidsOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindBidsInput = {\n  /** A model of the Auction House related to these listings. */\n  auctionHouse: AuctionHouse;\n\n  /** The address of a buyer to search by. */\n  buyer?: PublicKey;\n\n  /**\n   * The address of metadata to search by.\n   * Ignored when mint provided.\n   */\n  metadata?: PublicKey;\n\n  /** The address of a mint to search by. */\n  mint?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindBidsOutput = (LazyBid | Bid)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findBidsOperationHandler: OperationHandler<FindBidsOperation> = {\n  handle: async (\n    operation: FindBidsOperation,\n    metaplex: Metaplex,\n    scope: OperationScope\n  ): Promise<FindBidsOutput> => {\n    const { programs, commitment } = scope;\n    const { auctionHouse, buyer, metadata, mint } = operation.input;\n    const auctionHouseProgram = metaplex.programs().getAuctionHouse(programs);\n\n    let bidQuery = new BidReceiptGpaBuilder(\n      metaplex,\n      auctionHouseProgram.address\n    )\n      .mergeConfig({ commitment })\n      .whereAuctionHouse(auctionHouse.address);\n\n    if (buyer) {\n      bidQuery = bidQuery.whereBuyer(buyer);\n    }\n\n    if (metadata && !mint) {\n      bidQuery = bidQuery.whereMetadata(metadata);\n    }\n\n    if (mint) {\n      bidQuery = bidQuery.whereMetadata(\n        metaplex.nfts().pdas().metadata({ mint, programs })\n      );\n    }\n\n    scope.throwIfCanceled();\n\n    return bidQuery.getAndMap((account) =>\n      toLazyBid(toBidReceiptAccount(account), auctionHouse)\n    );\n  },\n};\n"]},"metadata":{},"sourceType":"module"}