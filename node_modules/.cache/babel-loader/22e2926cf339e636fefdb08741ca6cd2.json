{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\n\nexport const transferInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct a Transfer instruction\n *\n * @param source       Source account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createTransferInstruction(source, destination, owner, amount) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: source,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  const data = Buffer.alloc(transferInstructionData.span);\n  transferInstructionData.encode({\n    instruction: TokenInstruction.Transfer,\n    amount: BigInt(amount)\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a Transfer instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeTransferInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== transferInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      source,\n      destination,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeTransferInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.Transfer) throw new TokenInvalidInstructionTypeError();\n  if (!source || !destination || !owner) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      source,\n      destination,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode a Transfer instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeTransferInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [source, destination, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      source,\n      destination,\n      owner,\n      multiSigners\n    },\n    data: transferInstructionData.decode(data)\n  };\n}","map":{"version":3,"sources":["../../../src/instructions/transfer.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,EAAiB,EAAjB,QAA2B,uBAA3B;AACA,SAAS,GAAT,QAAoB,6BAApB;AAEA,SAAS,sBAAT,QAAuC,iBAAvC;AACA,SAAS,gBAAT,QAAiC,iBAAjC;AACA,SACI,gCADJ,EAEI,gCAFJ,EAGI,mCAHJ,EAII,gCAJJ,QAKO,cALP;AAMA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,gBAAT,QAAiC,YAAjC;AAQA;;AACA,OAAO,MAAM,uBAAuB,GAAG,MAAM,CAA0B,CAAC,EAAE,CAAC,aAAD,CAAH,EAAoB,GAAG,CAAC,QAAD,CAAvB,CAA1B,CAAtC;AAEP;;;;;;;;;;;AAWG;;AACH,OAAM,SAAU,yBAAV,CACF,MADE,EAEF,WAFE,EAGF,KAHE,EAIF,MAJE,EAM0B;EAAA,IAD5B,YAC4B,uEADH,EACG;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B,MAAM,IAAI,GAAG,UAAU,CACnB,CACI;IAAE,MAAM,EAAE,MAAV;IAAkB,QAAQ,EAAE,KAA5B;IAAmC,UAAU,EAAE;EAA/C,CADJ,EAEI;IAAE,MAAM,EAAE,WAAV;IAAuB,QAAQ,EAAE,KAAjC;IAAwC,UAAU,EAAE;EAApD,CAFJ,CADmB,EAKnB,KALmB,EAMnB,YANmB,CAAvB;EASA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,uBAAuB,CAAC,IAArC,CAAb;EACA,uBAAuB,CAAC,MAAxB,CACI;IACI,WAAW,EAAE,gBAAgB,CAAC,QADlC;IAEI,MAAM,EAAE,MAAM,CAAC,MAAD;EAFlB,CADJ,EAKI,IALJ;EAQA,OAAO,IAAI,sBAAJ,CAA2B;IAAE,IAAF;IAAQ,SAAR;IAAmB;EAAnB,CAA3B,CAAP;AACH;AAiBD;;;;;;;AAOG;;AACH,OAAM,SAAU,yBAAV,CACF,WADE,EAE0B;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B,IAAI,CAAC,WAAW,CAAC,SAAZ,CAAsB,MAAtB,CAA6B,SAA7B,CAAL,EAA8C,MAAM,IAAI,mCAAJ,EAAN;EAC9C,IAAI,WAAW,CAAC,IAAZ,CAAiB,MAAjB,KAA4B,uBAAuB,CAAC,IAAxD,EAA8D,MAAM,IAAI,gCAAJ,EAAN;EAE9D,MAAM;IACF,IAAI,EAAE;MAAE,MAAF;MAAU,WAAV;MAAuB,KAAvB;MAA8B;IAA9B,CADJ;IAEF;EAFE,IAGF,kCAAkC,CAAC,WAAD,CAHtC;EAIA,IAAI,IAAI,CAAC,WAAL,KAAqB,gBAAgB,CAAC,QAA1C,EAAoD,MAAM,IAAI,gCAAJ,EAAN;EACpD,IAAI,CAAC,MAAD,IAAW,CAAC,WAAZ,IAA2B,CAAC,KAAhC,EAAuC,MAAM,IAAI,gCAAJ,EAAN,CAVX,CAY5B;;EAEA,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF,MADE;MAEF,WAFE;MAGF,KAHE;MAIF;IAJE,CAFH;IAQH;EARG,CAAP;AAUH;AAiBD;;;;;;AAMG;;AACH,OAAM,SAAU,kCAAV,OAImB;EAAA,IAJ0B;IAC/C,SAD+C;IAE/C,IAAI,EAAE,CAAC,MAAD,EAAS,WAAT,EAAsB,KAAtB,EAA6B,GAAG,YAAhC,CAFyC;IAG/C;EAH+C,CAI1B;EACrB,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF,MADE;MAEF,WAFE;MAGF,KAHE;MAIF;IAJE,CAFH;IAQH,IAAI,EAAE,uBAAuB,CAAC,MAAxB,CAA+B,IAA/B;EARH,CAAP;AAUH","sourceRoot":"","sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const transferInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct a Transfer instruction\n *\n * @param source       Source account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferInstruction(source, destination, owner, amount, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: source, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(transferInstructionData.span);\n    transferInstructionData.encode({\n        instruction: TokenInstruction.Transfer,\n        amount: BigInt(amount),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a Transfer instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { source, destination, owner, multiSigners }, data, } = decodeTransferInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Transfer)\n        throw new TokenInvalidInstructionTypeError();\n    if (!source || !destination || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            source,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a Transfer instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferInstructionUnchecked({ programId, keys: [source, destination, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            source,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data: transferInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=transfer.js.map"]},"metadata":{},"sourceType":"module"}