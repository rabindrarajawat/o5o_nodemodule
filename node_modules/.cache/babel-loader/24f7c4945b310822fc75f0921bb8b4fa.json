{"ast":null,"code":"import { seq, struct, u16, u8 } from '@solana/buffer-layout';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { TokenUnsupportedInstructionError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/**\n * Construct a Reallocate instruction\n *\n * @param account        Address of the token account\n * @param payer          Address paying for the reallocation\n * @param extensionTypes Extensions to reallocate for\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createReallocateInstruction(account, payer, extensionTypes, owner) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_2022_PROGRAM_ID;\n\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n\n  const baseKeys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  const keys = addSigners(baseKeys, owner, multiSigners);\n  const reallocateInstructionData = struct([u8('instruction'), seq(u16(), extensionTypes.length, 'extensionTypes')]);\n  const data = Buffer.alloc(reallocateInstructionData.span);\n  reallocateInstructionData.encode({\n    instruction: TokenInstruction.Reallocate,\n    extensionTypes\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}","map":{"version":3,"sources":["../../../src/instructions/reallocate.ts"],"names":[],"mappings":"AAAA,SAAS,GAAT,EAAc,MAAd,EAAsB,GAAtB,EAA2B,EAA3B,QAAqC,uBAArC;AAEA,SAAS,aAAT,EAAwB,sBAAxB,QAAsD,iBAAtD;AACA,SAAS,yBAAT,EAAoC,qBAApC,QAAiE,iBAAjE;AACA,SAAS,gCAAT,QAAiD,cAAjD;AAEA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,gBAAT,QAAiC,YAAjC;AAQA;;;;;;;;;;;AAWG;;AACH,OAAM,SAAU,2BAAV,CACF,OADE,EAEF,KAFE,EAGF,cAHE,EAIF,KAJE,EAM+B;EAAA,IADjC,YACiC,uEADR,EACQ;EAAA,IAAjC,SAAiC,uEAArB,qBAAqB;;EAEjC,IAAI,CAAC,yBAAyB,CAAC,SAAD,CAA9B,EAA2C;IACvC,MAAM,IAAI,gCAAJ,EAAN;EACH;;EACD,MAAM,QAAQ,GAAG,CACb;IAAE,MAAM,EAAE,OAAV;IAAmB,QAAQ,EAAE,KAA7B;IAAoC,UAAU,EAAE;EAAhD,CADa,EAEb;IAAE,MAAM,EAAE,KAAV;IAAiB,QAAQ,EAAE,IAA3B;IAAiC,UAAU,EAAE;EAA7C,CAFa,EAGb;IAAE,MAAM,EAAE,aAAa,CAAC,SAAxB;IAAmC,QAAQ,EAAE,KAA7C;IAAoD,UAAU,EAAE;EAAhE,CAHa,CAAjB;EAKA,MAAM,IAAI,GAAG,UAAU,CAAC,QAAD,EAAW,KAAX,EAAkB,YAAlB,CAAvB;EAEA,MAAM,yBAAyB,GAAG,MAAM,CAA4B,CAChE,EAAE,CAAC,aAAD,CAD8D,EAEhE,GAAG,CAAC,GAAG,EAAJ,EAAQ,cAAc,CAAC,MAAvB,EAA+B,gBAA/B,CAF6D,CAA5B,CAAxC;EAIA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,yBAAyB,CAAC,IAAvC,CAAb;EACA,yBAAyB,CAAC,MAA1B,CAAiC;IAAE,WAAW,EAAE,gBAAgB,CAAC,UAAhC;IAA4C;EAA5C,CAAjC,EAA+F,IAA/F;EAEA,OAAO,IAAI,sBAAJ,CAA2B;IAAE,IAAF;IAAQ,SAAR;IAAmB;EAAnB,CAA3B,CAAP;AACH","sourceRoot":"","sourcesContent":["import { seq, struct, u16, u8 } from '@solana/buffer-layout';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { TokenUnsupportedInstructionError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/**\n * Construct a Reallocate instruction\n *\n * @param account        Address of the token account\n * @param payer          Address paying for the reallocation\n * @param extensionTypes Extensions to reallocate for\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createReallocateInstruction(account, payer, extensionTypes, owner, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const baseKeys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    ];\n    const keys = addSigners(baseKeys, owner, multiSigners);\n    const reallocateInstructionData = struct([\n        u8('instruction'),\n        seq(u16(), extensionTypes.length, 'extensionTypes'),\n    ]);\n    const data = Buffer.alloc(reallocateInstructionData.span);\n    reallocateInstructionData.encode({ instruction: TokenInstruction.Reallocate, extensionTypes }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n//# sourceMappingURL=reallocate.js.map"]},"metadata":{},"sourceType":"module"}