{"ast":null,"code":"import { configLineBeet } from '@metaplex-foundation/mpl-candy-machine';\nimport { CONFIG_ARRAY_START, CONFIG_LINE_SIZE } from './constants.mjs';\nimport { toBigNumber } from '../../types/BigNumber.mjs';\nimport { removeEmptyChars } from '../../utils/common.mjs';\n\nfunction countCandyMachineV2Items(rawData) {\n  const number = rawData.slice(CONFIG_ARRAY_START, CONFIG_ARRAY_START + 4);\n  return toBigNumber(number, 'le');\n}\n\nfunction parseCandyMachineV2Items(rawData) {\n  const configLinesStart = CONFIG_ARRAY_START + 4;\n  const lines = [];\n  const count = countCandyMachineV2Items(rawData).toNumber();\n\n  for (let i = 0; i < count; i++) {\n    const [line] = configLineBeet.deserialize(rawData, configLinesStart + i * CONFIG_LINE_SIZE);\n    lines.push({\n      name: removeEmptyChars(line.name),\n      uri: removeEmptyChars(line.uri)\n    });\n  }\n\n  return lines;\n}\n\nfunction getCandyMachineV2AccountSizeFromData(data) {\n  if (data.hiddenSettings != null) {\n    return CONFIG_ARRAY_START;\n  }\n\n  const itemsAvailable = toBigNumber(data.itemsAvailable).toNumber();\n  return Math.ceil(CONFIG_ARRAY_START + 4 + itemsAvailable * CONFIG_LINE_SIZE + 8 + 2 * (itemsAvailable / 8 + 1));\n}\n\nconst getCandyMachineV2UuidFromAddress = candyMachineAddress => {\n  return candyMachineAddress.toBase58().slice(0, 6);\n};\n\nexport { countCandyMachineV2Items, getCandyMachineV2AccountSizeFromData, getCandyMachineV2UuidFromAddress, parseCandyMachineV2Items };","map":{"version":3,"sources":["../../../../src/plugins/candyMachineV2Module/helpers.ts"],"names":["countCandyMachineV2Items","rawData","number","slice","CONFIG_ARRAY_START","toBigNumber","parseCandyMachineV2Items","configLinesStart","lines","count","toNumber","i","line","configLineBeet","deserialize","CONFIG_LINE_SIZE","push","name","removeEmptyChars","uri","getCandyMachineV2AccountSizeFromData","data","hiddenSettings","itemsAvailable","Math","ceil","getCandyMachineV2UuidFromAddress","candyMachineAddress","toBase58"],"mappings":";;;;;AAUO,SAASA,wBAAT,CAAkCC,OAAlC,EAA8D;EACnE,MAAMC,MAAM,GAAGD,OAAO,CAACE,KAARF,CAAcG,kBAAdH,EAAkCG,kBAAkB,GAAG,CAAvDH,CAAf;EACA,OAAOI,WAAW,CAACH,MAAD,EAAS,IAAT,CAAlB;AACF;;AAEO,SAASI,wBAAT,CACLL,OADK,EAEiB;EACtB,MAAMM,gBAAgB,GAAGH,kBAAkB,GAAG,CAA9C;EACA,MAAMI,KAAK,GAAG,EAAd;EACA,MAAMC,KAAK,GAAGT,wBAAwB,CAACC,OAAD,CAAxBD,CAAkCU,QAAlCV,EAAd;;EACA,KAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAApB,EAA2BE,CAAC,EAA5B,EAAgC;IAC9B,MAAM,CAACC,IAAD,IAASC,cAAc,CAACC,WAAfD,CACbZ,OADaY,EAEbN,gBAAgB,GAAGI,CAAC,GAAGI,gBAFVF,CAAf;IAIAL,KAAK,CAACQ,IAANR,CAAW;MACTS,IAAI,EAAEC,gBAAgB,CAACN,IAAI,CAACK,IAAN,CADb;MAETE,GAAG,EAAED,gBAAgB,CAACN,IAAI,CAACO,GAAN;IAFZ,CAAXX;EAIF;;EACA,OAAOA,KAAP;AACF;;AAEO,SAASY,oCAAT,CAA8CC,IAA9C,EAAsE;EAC3E,IAAIA,IAAI,CAACC,cAALD,IAAuB,IAA3B,EAAiC;IAC/B,OAAOjB,kBAAP;EACF;;EACA,MAAMmB,cAAc,GAAGlB,WAAW,CAACgB,IAAI,CAACE,cAAN,CAAXlB,CAAiCK,QAAjCL,EAAvB;EACA,OAAOmB,IAAI,CAACC,IAALD,CACLpB,kBAAkB,GAChB,CADFA,GAEEmB,cAAc,GAAGR,gBAFnBX,GAGE,CAHFA,GAIE,KAAKmB,cAAc,GAAG,CAAjBA,GAAqB,CAA1B,CALGC,CAAP;AAOF;;AAEaE,MAAAA,gCAAgC,GAC3CC,mBAA8B,IACnB;EACX,OAAOA,mBAAmB,CAACC,QAApBD,GAA+BxB,KAA/BwB,CAAqC,CAArCA,EAAwC,CAAxCA,CAAP;AACF,CAJaD","sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport {\n  CandyMachineData,\n  configLineBeet,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport { CONFIG_ARRAY_START, CONFIG_LINE_SIZE } from './constants';\nimport { CandyMachineV2Item } from './models';\nimport { removeEmptyChars } from '@/utils';\nimport { BigNumber, toBigNumber } from '@/types';\n\nexport function countCandyMachineV2Items(rawData: Buffer): BigNumber {\n  const number = rawData.slice(CONFIG_ARRAY_START, CONFIG_ARRAY_START + 4);\n  return toBigNumber(number, 'le');\n}\n\nexport function parseCandyMachineV2Items(\n  rawData: Buffer\n): CandyMachineV2Item[] {\n  const configLinesStart = CONFIG_ARRAY_START + 4;\n  const lines = [];\n  const count = countCandyMachineV2Items(rawData).toNumber();\n  for (let i = 0; i < count; i++) {\n    const [line] = configLineBeet.deserialize(\n      rawData,\n      configLinesStart + i * CONFIG_LINE_SIZE\n    );\n    lines.push({\n      name: removeEmptyChars(line.name),\n      uri: removeEmptyChars(line.uri),\n    });\n  }\n  return lines;\n}\n\nexport function getCandyMachineV2AccountSizeFromData(data: CandyMachineData) {\n  if (data.hiddenSettings != null) {\n    return CONFIG_ARRAY_START;\n  }\n  const itemsAvailable = toBigNumber(data.itemsAvailable).toNumber();\n  return Math.ceil(\n    CONFIG_ARRAY_START +\n      4 +\n      itemsAvailable * CONFIG_LINE_SIZE +\n      8 +\n      2 * (itemsAvailable / 8 + 1)\n  );\n}\n\nexport const getCandyMachineV2UuidFromAddress = (\n  candyMachineAddress: PublicKey\n): string => {\n  return candyMachineAddress.toBase58().slice(0, 6);\n};\n"]},"metadata":{},"sourceType":"module"}