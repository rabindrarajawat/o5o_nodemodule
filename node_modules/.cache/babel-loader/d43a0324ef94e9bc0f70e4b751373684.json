{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_1 = require(\"react\");\n\nconst types_1 = require(\"../types\");\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\n\nconst usePowo = (_ref, state, dispatch) => {\n  let {\n    wallet: wallet,\n    chainImplementation: chainImplementation\n  } = _ref;\n  const {\n    powoFinished: powoFinished,\n    walletPowoInProgress: walletPowoInProgress,\n    refreshInProgress: refreshInProgress,\n    ownerTransactionConfirmed: ownerTransactionConfirmed\n  } = state;\n  const {\n    expectWalletConnected: expectWalletConnected\n  } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n  /**\n   * wait until the user has confirmed they want to continue the proof of wallet ownership flow\n   * then resolve the promise\n   */\n\n  const waitForConfirmPOWO = (0, react_1.useCallback)( // eslint-disable-next-line @typescript-eslint/no-shadow\n  async payload => {\n    logger_1.default.debug('usePowo waitForConfirmPOWO before expectWalletConnected', {\n      payload: payload\n    });\n    expectWalletConnected();\n    return new Promise(resolve => {\n      logger_1.default.debug('usePowo waitForConfirmPOWO', {\n        powoFinished: powoFinished\n      });\n\n      if (powoFinished) {\n        resolve(payload);\n      }\n    });\n  }, [powoFinished, expectWalletConnected]);\n  /**\n   * wait until the user has provided proof of wallet ownership using their connected wallet\n   * if this was triggered from the refresh flow, dispatch events to indicate progress\n   * if not, resolve a promise when the proof is ready\n   */\n\n  const waitForPOWO = (0, react_1.useCallback)(async ( // eslint-disable-next-line @typescript-eslint/no-shadow\n  payload) => {\n    logger_1.default.debug('usePowo waitForPOWO before expectWalletConnected');\n    const connectedWallet = expectWalletConnected();\n\n    if (connectedWallet) {\n      logger_1.default.debug('usePowo waitForPOWO', {\n        payload: payload,\n        publicKey: connectedWallet.publicKey\n      });\n      return new Promise(resolve => {\n        logger_1.default.debug('usePowo waitForPOWO walletPowoInProgress', {\n          walletPowoInProgress: walletPowoInProgress,\n          refreshInProgress: refreshInProgress\n        });\n        chainImplementation.proveWalletOwnership().then(proof => {\n          resolve({\n            proof: proof,\n            payload: payload\n          });\n          dispatch({\n            type: 'walletPowoComplete'\n          });\n          dispatch({\n            type: 'civicPass_check_token_status'\n          });\n        }).catch(error => {\n          logger_1.default.error('Proof of wallet ownership error: ', error);\n          dispatch({\n            type: 'walletPowoIncomplete'\n          });\n        });\n      });\n    }\n\n    return {};\n  }, [expectWalletConnected, walletPowoInProgress, chainImplementation]);\n  /**\n   * wait until the user has confirmed they want to continue the sign transaction flow\n   * then resolve the promise\n   */\n\n  const waitForTransactionConfirm = (0, react_1.useCallback)(async () => {\n    expectWalletConnected();\n    return new Promise(resolve => {\n      logger_1.default.debug('usePowo waitForTransactionConfirm', {\n        ownerTransactionConfirmed: ownerTransactionConfirmed\n      });\n\n      if (ownerTransactionConfirmed) {\n        resolve();\n      }\n    });\n  }, [ownerTransactionConfirmed, expectWalletConnected]);\n  /**\n   * wait for the user sign transaction callback and then dispatch awaiting owner transaction\n   * to set the correct status while waiting for the token on chain\n   */\n\n  const waitForHandleTransaction = (0, react_1.useCallback)(async transaction => {\n    logger_1.default.debug('waitForHandleTransaction', transaction);\n\n    try {\n      await chainImplementation.handleUserSignedTransaction(transaction);\n      dispatch({\n        type: 'walletPowoComplete'\n      });\n    } catch (error) {\n      const errorMessage = error && error instanceof Error ? error.message : 'ChainTransaction error';\n      const errorCode = error === null || error === void 0 ? void 0 : error.errorCode;\n      logger_1.default.error('waitForHandleTransaction error', {\n        errorCode: errorCode\n      });\n      const payload = Object.assign({}, errorCode ? {\n        errorCode: errorCode\n      } : {});\n      logger_1.default.error('waitForHandleTransaction (error instanceof ChainError)', errorCode);\n      dispatch({\n        type: 'civicPass_owner_sends_chainTransactionError',\n        payload: payload\n      });\n      throw new types_1.ChainTransactionError(errorMessage);\n    }\n  }, [chainImplementation]);\n  return {\n    waitForConfirmPOWO: waitForConfirmPOWO,\n    waitForTransactionConfirm: waitForTransactionConfirm,\n    waitForHandleTransaction: waitForHandleTransaction,\n    waitForPOWO: waitForPOWO\n  };\n};\n\nexports.default = usePowo;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","react_1","require","types_1","logger_1","useWalletHooks_1","usePowo","state","dispatch","wallet","chainImplementation","powoFinished","walletPowoInProgress","refreshInProgress","ownerTransactionConfirmed","expectWalletConnected","default","waitForConfirmPOWO","useCallback","payload","debug","Promise","resolve","waitForPOWO","connectedWallet","publicKey","proveWalletOwnership","then","proof","type","catch","error","waitForTransactionConfirm","waitForHandleTransaction","transaction","handleUserSignedTransaction","errorMessage","Error","message","errorCode","assign","ChainTransactionError"],"sources":["D:/software/o5o BNB/o5o-staking-frontend/node_modules/@civic/common-gateway-react/dist/esm/useHooks/usePOWO.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = require(\"react\");\nconst types_1 = require(\"../types\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\nconst usePowo = ({ wallet, chainImplementation }, state, dispatch) => {\n    const { powoFinished, walletPowoInProgress, refreshInProgress, ownerTransactionConfirmed } = state;\n    const { expectWalletConnected } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n    /**\n     * wait until the user has confirmed they want to continue the proof of wallet ownership flow\n     * then resolve the promise\n     */\n    const waitForConfirmPOWO = (0, react_1.useCallback)(\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    async (payload) => {\n        logger_1.default.debug('usePowo waitForConfirmPOWO before expectWalletConnected', {\n            payload,\n        });\n        expectWalletConnected();\n        return new Promise((resolve) => {\n            logger_1.default.debug('usePowo waitForConfirmPOWO', { powoFinished });\n            if (powoFinished) {\n                resolve(payload);\n            }\n        });\n    }, [powoFinished, expectWalletConnected]);\n    /**\n     * wait until the user has provided proof of wallet ownership using their connected wallet\n     * if this was triggered from the refresh flow, dispatch events to indicate progress\n     * if not, resolve a promise when the proof is ready\n     */\n    const waitForPOWO = (0, react_1.useCallback)(async (\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    payload) => {\n        logger_1.default.debug('usePowo waitForPOWO before expectWalletConnected');\n        const connectedWallet = expectWalletConnected();\n        if (connectedWallet) {\n            logger_1.default.debug('usePowo waitForPOWO', {\n                payload,\n                publicKey: connectedWallet.publicKey,\n            });\n            return new Promise((resolve) => {\n                logger_1.default.debug('usePowo waitForPOWO walletPowoInProgress', {\n                    walletPowoInProgress,\n                    refreshInProgress,\n                });\n                chainImplementation\n                    .proveWalletOwnership()\n                    .then((proof) => {\n                    resolve({ proof, payload });\n                    dispatch({ type: 'walletPowoComplete' });\n                    dispatch({ type: 'civicPass_check_token_status' });\n                })\n                    .catch((error) => {\n                    logger_1.default.error('Proof of wallet ownership error: ', error);\n                    dispatch({ type: 'walletPowoIncomplete' });\n                });\n            });\n        }\n        return {};\n    }, [expectWalletConnected, walletPowoInProgress, chainImplementation]);\n    /**\n     * wait until the user has confirmed they want to continue the sign transaction flow\n     * then resolve the promise\n     */\n    const waitForTransactionConfirm = (0, react_1.useCallback)(async () => {\n        expectWalletConnected();\n        return new Promise((resolve) => {\n            logger_1.default.debug('usePowo waitForTransactionConfirm', { ownerTransactionConfirmed });\n            if (ownerTransactionConfirmed) {\n                resolve();\n            }\n        });\n    }, [ownerTransactionConfirmed, expectWalletConnected]);\n    /**\n     * wait for the user sign transaction callback and then dispatch awaiting owner transaction\n     * to set the correct status while waiting for the token on chain\n     */\n    const waitForHandleTransaction = (0, react_1.useCallback)(async (transaction) => {\n        logger_1.default.debug('waitForHandleTransaction', transaction);\n        try {\n            await chainImplementation.handleUserSignedTransaction(transaction);\n            dispatch({ type: 'walletPowoComplete' });\n        }\n        catch (error) {\n            const errorMessage = error && error instanceof Error ? error.message : 'ChainTransaction error';\n            const errorCode = error === null || error === void 0 ? void 0 : error.errorCode;\n            logger_1.default.error('waitForHandleTransaction error', { errorCode });\n            const payload = Object.assign({}, (errorCode ? { errorCode } : {}));\n            logger_1.default.error('waitForHandleTransaction (error instanceof ChainError)', errorCode);\n            dispatch({ type: 'civicPass_owner_sends_chainTransactionError', payload });\n            throw new types_1.ChainTransactionError(errorMessage);\n        }\n    }, [chainImplementation]);\n    return {\n        waitForConfirmPOWO,\n        waitForTransactionConfirm,\n        waitForHandleTransaction,\n        waitForPOWO,\n    };\n};\nexports.default = usePowo;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}