{"ast":null,"code":"import { toPurchaseReceiptAccount } from '../accounts.mjs';\nimport { FindAllSupportsOnlyThreeFiltersMaxError } from '../errors.mjs';\nimport { PurchaseReceiptGpaBuilder } from '../gpaBuilders/PurchaseReceiptGpaBuilder.mjs';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { toLazyPurchase } from '../models/Purchase.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindPurchasesOperation';\n/**\n * Finds Purchases by multiple criteria.\n * You can use any combination of keys.\n * Supports only 3 criteria at the same time including\n * the required `auctionHouse` attribute.\n *\n * ```ts\n * // Find all purchases in an Auction House.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchases({ auctionHouse });\n *\n * // Find purchases by buyer and mint.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchases({ auctionHouse, buyer, mint });\n *\n * // Find purchases by metadata.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchases({ auctionHouse, metadata });\n *\n * // Find purchases by seller and buyer.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchases({ auctionHouse, seller, buyer });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst findPurchasesOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst findPurchasesOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const {\n      programs,\n      commitment\n    } = scope;\n    const {\n      auctionHouse,\n      buyer,\n      seller,\n      metadata,\n      mint\n    } = operation.input;\n    const auctionHouseProgram = metaplex.programs().getAuctionHouse(programs);\n    let purchaseQuery = new PurchaseReceiptGpaBuilder(metaplex, auctionHouseProgram.address).mergeConfig({\n      commitment\n    }).whereAuctionHouse(auctionHouse.address);\n\n    if (Object.keys(operation.input).length > 3) {\n      throw new FindAllSupportsOnlyThreeFiltersMaxError();\n    }\n\n    if (buyer) {\n      purchaseQuery = purchaseQuery.whereBuyer(buyer);\n    }\n\n    if (seller) {\n      purchaseQuery = purchaseQuery.whereSeller(seller);\n    }\n\n    if (metadata && !mint) {\n      purchaseQuery = purchaseQuery.whereMetadata(metadata);\n    }\n\n    if (mint) {\n      purchaseQuery = purchaseQuery.whereMetadata(metaplex.nfts().pdas().metadata({\n        mint,\n        programs\n      }));\n    }\n\n    scope.throwIfCanceled();\n    return purchaseQuery.getAndMap(account => toLazyPurchase(toPurchaseReceiptAccount(account), auctionHouse));\n  }\n};\nexport { findPurchasesOperation, findPurchasesOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/operations/findPurchases.ts"],"names":["Key","findPurchasesOperation","useOperation","findPurchasesOperationHandler","handle","operation","metaplex","scope","programs","commitment","auctionHouse","buyer","seller","metadata","mint","input","auctionHouseProgram","getAuctionHouse","purchaseQuery","PurchaseReceiptGpaBuilder","address","mergeConfig","whereAuctionHouse","Object","keys","length","FindAllSupportsOnlyThreeFiltersMaxError","whereBuyer","whereSeller","whereMetadata","nfts","pdas","throwIfCanceled","getAndMap","account","toLazyPurchase","toPurchaseReceiptAccount"],"mappings":";;;;yDAkBA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,wBAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,sBAAsB,GAAGC,YAAY,CAAyBF,GAAzB,C;AAElD;AACA;AACA;AACA;;AAqCA;AACA;AACA;AACA;;AACO,MAAMG,6BAAuE,GAClF;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI2B;IACjC,MAAM;MAAEC,QAAF;MAAYC;IAAZ,IAA2BF,KAAjC;IACA,MAAM;MAAEG,YAAF;MAAgBC,KAAhB;MAAuBC,MAAvB;MAA+BC,QAA/B;MAAyCC;IAAzC,IAAkDT,SAAS,CAACU,KAAlE;IAEA,MAAMC,mBAAmB,GAAGV,QAAQ,CAACE,QAATF,GAAoBW,eAApBX,CAAoCE,QAApCF,CAA5B;IAEA,IAAIY,aAAa,GAAG,IAAIC,yBAAJ,CAClBb,QADkB,EAElBU,mBAAmB,CAACI,OAFF,EAIjBC,WAJiB,CAIL;MAAEZ;IAAF,CAJK,EAKjBa,iBALiB,CAKCZ,YAAY,CAACU,OALd,CAApB;;IAOA,IAAIG,MAAM,CAACC,IAAPD,CAAYlB,SAAS,CAACU,KAAtBQ,EAA6BE,MAA7BF,GAAsC,CAA1C,EAA6C;MAC3C,MAAM,IAAIG,uCAAJ,EAAN;IACF;;IAEA,IAAIf,KAAJ,EAAW;MACTO,aAAa,GAAGA,aAAa,CAACS,UAAdT,CAAyBP,KAAzBO,CAAhBA;IACF;;IAEA,IAAIN,MAAJ,EAAY;MACVM,aAAa,GAAGA,aAAa,CAACU,WAAdV,CAA0BN,MAA1BM,CAAhBA;IACF;;IAEA,IAAIL,QAAQ,IAAI,CAACC,IAAjB,EAAuB;MACrBI,aAAa,GAAGA,aAAa,CAACW,aAAdX,CAA4BL,QAA5BK,CAAhBA;IACF;;IAEA,IAAIJ,IAAJ,EAAU;MACRI,aAAa,GAAGA,aAAa,CAACW,aAAdX,CACdZ,QAAQ,CAACwB,IAATxB,GAAgByB,IAAhBzB,GAAuBO,QAAvBP,CAAgC;QAAEQ,IAAF;QAAQN;MAAR,CAAhCF,CADcY,CAAhBA;IAGF;;IAEAX,KAAK,CAACyB,eAANzB;IAEA,OAAOW,aAAa,CAACe,SAAdf,CAAyBgB,OAAO,IACrCC,cAAc,CAACC,wBAAwB,CAACF,OAAD,CAAzB,EAAoCxB,YAApC,CADTQ,CAAP;EAGF;AA7CF,CADK","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { toPurchaseReceiptAccount } from '../accounts';\nimport { PurchaseReceiptGpaBuilder } from '../gpaBuilders';\nimport {\n  AuctionHouse,\n  LazyPurchase,\n  Purchase,\n  toLazyPurchase,\n} from '../models';\nimport { FindAllSupportsOnlyThreeFiltersMaxError } from '../errors';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindPurchasesOperation' as const;\n\n/**\n * Finds Purchases by multiple criteria.\n * You can use any combination of keys.\n * Supports only 3 criteria at the same time including\n * the required `auctionHouse` attribute.\n *\n * ```ts\n * // Find all purchases in an Auction House.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchases({ auctionHouse });\n *\n * // Find purchases by buyer and mint.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchases({ auctionHouse, buyer, mint });\n *\n * // Find purchases by metadata.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchases({ auctionHouse, metadata });\n *\n * // Find purchases by seller and buyer.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchases({ auctionHouse, seller, buyer });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findPurchasesOperation = useOperation<FindPurchasesOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindPurchasesOperation = Operation<\n  typeof Key,\n  FindPurchasesInput,\n  FindPurchasesOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindPurchasesInput = {\n  /** A model of the Auction House related to these listings. */\n  auctionHouse: AuctionHouse;\n\n  /** The address of a buyer to search by. */\n  buyer?: PublicKey;\n\n  /** The address of a seller to search by. */\n  seller?: PublicKey;\n\n  /**\n   * The address of metadata to search by.\n   * Ignored when mint provided.\n   */\n  metadata?: PublicKey;\n\n  /** The address of a mint to search by. */\n  mint?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindPurchasesOutput = (Purchase | LazyPurchase)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findPurchasesOperationHandler: OperationHandler<FindPurchasesOperation> =\n  {\n    handle: async (\n      operation: FindPurchasesOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindPurchasesOutput> => {\n      const { programs, commitment } = scope;\n      const { auctionHouse, buyer, seller, metadata, mint } = operation.input;\n\n      const auctionHouseProgram = metaplex.programs().getAuctionHouse(programs);\n\n      let purchaseQuery = new PurchaseReceiptGpaBuilder(\n        metaplex,\n        auctionHouseProgram.address\n      )\n        .mergeConfig({ commitment })\n        .whereAuctionHouse(auctionHouse.address);\n\n      if (Object.keys(operation.input).length > 3) {\n        throw new FindAllSupportsOnlyThreeFiltersMaxError();\n      }\n\n      if (buyer) {\n        purchaseQuery = purchaseQuery.whereBuyer(buyer);\n      }\n\n      if (seller) {\n        purchaseQuery = purchaseQuery.whereSeller(seller);\n      }\n\n      if (metadata && !mint) {\n        purchaseQuery = purchaseQuery.whereMetadata(metadata);\n      }\n\n      if (mint) {\n        purchaseQuery = purchaseQuery.whereMetadata(\n          metaplex.nfts().pdas().metadata({ mint, programs })\n        );\n      }\n\n      scope.throwIfCanceled();\n\n      return purchaseQuery.getAndMap((account) =>\n        toLazyPurchase(toPurchaseReceiptAccount(account), auctionHouse)\n      );\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}