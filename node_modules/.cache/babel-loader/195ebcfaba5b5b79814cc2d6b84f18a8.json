{"ast":null,"code":"import { toTokenAccount, toMintAccount } from '../accounts.mjs';\nimport { toMint } from '../models/Mint.mjs';\nimport { toTokenWithMint } from '../models/Token.mjs';\nimport { useOperation } from '../../../types/Operation.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindTokenWithMintByAddressOperation';\n/**\n * Finds a token account and its associated mint account\n * by providing the token address.\n *\n * ```ts\n * const tokenWithMint = await metaplex.tokens().findTokenWithMintByAddress({ address });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst findTokenWithMintByAddressOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst findTokenWithMintByAddressOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const {\n      commitment\n    } = scope;\n    const {\n      address\n    } = operation.input;\n    const tokenAccount = toTokenAccount(await metaplex.rpc().getAccount(address, commitment));\n    const mintAccount = toMintAccount(await metaplex.rpc().getAccount(tokenAccount.data.mint, commitment));\n    return toTokenWithMint(tokenAccount, toMint(mintAccount));\n  }\n};\nexport { findTokenWithMintByAddressOperation, findTokenWithMintByAddressOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/tokenModule/operations/findTokenWithMintByAddress.ts"],"names":["Key","findTokenWithMintByAddressOperation","useOperation","findTokenWithMintByAddressOperationHandler","handle","operation","metaplex","scope","commitment","address","input","tokenAccount","toTokenAccount","rpc","getAccount","mintAccount","toMintAccount","data","mint","toTokenWithMint","toMint"],"mappings":";;;6DAYA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,qCAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,mCAAmC,GAC9CC,YAAY,CAAsCF,GAAtC,C;AAEd;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;;AACO,MAAMG,0CAAiG,GAC5G;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIqB;IAC3B,MAAM;MAAEC;IAAF,IAAiBD,KAAvB;IACA,MAAM;MAAEE;IAAF,IAAcJ,SAAS,CAACK,KAA9B;IAEA,MAAMC,YAAY,GAAGC,cAAc,CACjC,MAAMN,QAAQ,CAACO,GAATP,GAAeQ,UAAfR,CAA0BG,OAA1BH,EAAmCE,UAAnCF,CAD2B,CAAnC;IAIA,MAAMS,WAAW,GAAGC,aAAa,CAC/B,MAAMV,QAAQ,CAACO,GAATP,GAAeQ,UAAfR,CAA0BK,YAAY,CAACM,IAAbN,CAAkBO,IAA5CZ,EAAkDE,UAAlDF,CADyB,CAAjC;IAIA,OAAOa,eAAe,CAACR,YAAD,EAAeS,MAAM,CAACL,WAAD,CAArB,CAAtB;EACF;AAlBF,CADK","sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { toMintAccount, toTokenAccount } from '../accounts';\nimport { toMint } from '../models/Mint';\nimport { TokenWithMint, toTokenWithMint } from '../models/Token';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindTokenWithMintByAddressOperation' as const;\n\n/**\n * Finds a token account and its associated mint account\n * by providing the token address.\n *\n * ```ts\n * const tokenWithMint = await metaplex.tokens().findTokenWithMintByAddress({ address });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findTokenWithMintByAddressOperation =\n  useOperation<FindTokenWithMintByAddressOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindTokenWithMintByAddressOperation = Operation<\n  typeof Key,\n  FindTokenWithMintByAddressInput,\n  TokenWithMint\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindTokenWithMintByAddressInput = {\n  /** The address of the token account. */\n  address: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findTokenWithMintByAddressOperationHandler: OperationHandler<FindTokenWithMintByAddressOperation> =\n  {\n    handle: async (\n      operation: FindTokenWithMintByAddressOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<TokenWithMint> => {\n      const { commitment } = scope;\n      const { address } = operation.input;\n\n      const tokenAccount = toTokenAccount(\n        await metaplex.rpc().getAccount(address, commitment)\n      );\n\n      const mintAccount = toMintAccount(\n        await metaplex.rpc().getAccount(tokenAccount.data.mint, commitment)\n      );\n\n      return toTokenWithMint(tokenAccount, toMint(mintAccount));\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}