{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createConnectionConfig = exports.isValidSolanaAddress = exports.getSolanaMetadataAddress = exports.decodeTokenMetadata = void 0;\n\nvar borsh_1 = require(\"borsh\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar metaplex_1 = require(\"./config/metaplex\");\n\nvar borsh_2 = require(\"./config/borsh\");\n\n(0, borsh_2.extendBorsh)();\nvar metaProgamPublicKey = new web3_js_1.PublicKey(metaplex_1.METADATA_PROGRAM);\nvar metaProgamPublicKeyBuffer = metaProgamPublicKey.toBuffer(); // Create UTF-8 bytes Buffer from string\n// similar to Buffer.from(METADATA_PREFIX) but should work by default in node.js/browser\n\nvar metaProgamPrefixBuffer = new TextEncoder().encode(metaplex_1.METADATA_PREFIX);\n\nvar decodeTokenMetadata = function (buffer) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2\n      /*return*/\n      , (0, borsh_1.deserializeUnchecked)(metaplex_1.METADATA_SCHEMA, metaplex_1.Metadata, buffer)];\n    });\n  });\n};\n\nexports.decodeTokenMetadata = decodeTokenMetadata;\n/**\n * Get Addresses of Metadata account assosiated with Mint Token\n */\n\nfunction getSolanaMetadataAddress(tokenMint) {\n  return __awaiter(this, void 0, void 0, function () {\n    var metaProgamPublicKey;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          metaProgamPublicKey = new web3_js_1.PublicKey(metaplex_1.METADATA_PROGRAM);\n          return [4\n          /*yield*/\n          , web3_js_1.PublicKey.findProgramAddress([metaProgamPrefixBuffer, metaProgamPublicKeyBuffer, tokenMint.toBuffer()], metaProgamPublicKey)];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()[0]];\n      }\n    });\n  });\n}\n\nexports.getSolanaMetadataAddress = getSolanaMetadataAddress;\n/**\n * Check if passed address is Solana address\n */\n\nvar isValidSolanaAddress = function (address) {\n  try {\n    // this fn accepts Base58 character\n    // and if it pass we suppose Solana address is valid\n    new web3_js_1.PublicKey(address);\n    return true;\n  } catch (error) {\n    // Non-base58 character or can't be used as Solana address\n    return false;\n  }\n};\n\nexports.isValidSolanaAddress = isValidSolanaAddress;\n\nvar createConnectionConfig = function (clusterApi, commitment) {\n  if (clusterApi === void 0) {\n    clusterApi = (0, web3_js_1.clusterApiUrl)(\"mainnet-beta\");\n  }\n\n  if (commitment === void 0) {\n    commitment = \"confirmed\";\n  }\n\n  return new web3_js_1.Connection(clusterApi, commitment);\n};\n\nexports.createConnectionConfig = createConnectionConfig;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAMA;;AAOA;;AAEA;AAEA,IAAMA,mBAAmB,GAAG,IAAIC,mBAAJ,CAAcC,2BAAd,CAA5B;AACA,IAAMC,yBAAyB,GAAGH,mBAAmB,CAACI,QAApB,EAAlC,C,CACA;AACA;;AACA,IAAMC,sBAAsB,GAAG,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyBL,0BAAzB,CAA/B;;AAEO,IAAMM,mBAAmB,GAAG,UAAOC,MAAP,EAAqB;EAAA;IAAA;MACtD;MAAA;MAAA,oCAAqBP,0BAArB,EAAsCA,mBAAtC,EAAgDO,MAAhD;KADsD;GAAA;AACC,CADlD;;AAAMC,8BAAmBF,mBAAnB;AAGb;;;;AAGA,SAAsBG,wBAAtB,CAA+CC,SAA/C,EAAmE;;;;;;UAC3DZ,mBAAmB,GAAG,IAAIC,mBAAJ,CAAcC,2BAAd,CAAtB;UAEJ;UAAA;UAAA,EAAMD,oBAAUY,kBAAV,CACJ,CAACR,sBAAD,EAAyBF,yBAAzB,EAAoDS,SAAS,CAACR,QAAV,EAApD,CADI,EAEJJ,mBAFI,CAAN;;;UADF;UAAA;UAAA,EACEc,SADK,CAKL,CALK,CAAP;;;;AAMD;;AARDJ;AAUA;;;;AAGO,IAAMK,oBAAoB,GAAG,UAACC,OAAD,EAAgB;EAClD,IAAI;IACF;IACA;IACA,IAAIf,mBAAJ,CAAce,OAAd;IACA,OAAO,IAAP;EACD,CALD,CAKE,OAAOC,KAAP,EAAc;IACd;IACA,OAAO,KAAP;EACD;AACF,CAVM;;AAAMP,+BAAoBK,oBAApB;;AAYN,IAAMG,sBAAsB,GAAG,UACpCC,UADoC,EAEpCC,UAFoC,EAEZ;EADxB;IAAAD,iBAAalB,uBAAb,EAA2B,cAA3B;EAA0C;;EAC1C;IAAAmB;EAAwB;;EACrB,WAAInB,oBAAJ,CAAekB,UAAf,EAA2BC,UAA3B;AAAoD,CAHlD;;AAAMV,iCAAsBQ,sBAAtB","names":["metaProgamPublicKey","web3_js_1","metaplex_1","metaProgamPublicKeyBuffer","toBuffer","metaProgamPrefixBuffer","TextEncoder","encode","decodeTokenMetadata","buffer","exports","getSolanaMetadataAddress","tokenMint","findProgramAddress","_a","isValidSolanaAddress","address","error","createConnectionConfig","clusterApi","commitment"],"sourceRoot":"","sources":["../src/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}