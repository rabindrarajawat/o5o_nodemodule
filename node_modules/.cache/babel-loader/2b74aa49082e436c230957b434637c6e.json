{"ast":null,"code":"import assert from '../../../utils/assert.mjs';\nimport { Pda } from '../../../types/Pda.mjs';\n/** @group Model Helpers */\n\nconst isAuctionHouse = value => typeof value === 'object' && value.model === 'auctionHouse';\n/** @group Model Helpers */\n\n\nfunction assertAuctionHouse(value) {\n  assert(isAuctionHouse(value), `Expected AuctionHouse type`);\n}\n/** @group Model Helpers */\n\n\nconst isAuctioneerAuctionHouse = value => isAuctionHouse(value) && value.hasAuctioneer;\n/** @group Model Helpers */\n\n\nfunction assertAuctioneerAuctionHouse(value) {\n  assert(isAuctioneerAuctionHouse(value), `Expected AuctioneerAuctionHouse type`);\n}\n/** @group Model Helpers */\n\n\nconst toAuctionHouse = (auctionHouseAccount, treasuryMint, auctioneerAccount) => {\n  if (auctionHouseAccount.data.hasAuctioneer) {\n    assert(!!auctioneerAccount, 'Auctioneer account is required when hasAuctioneer is true');\n    assert(!!auctioneerAccount && auctioneerAccount.data.auctionHouse.equals(auctionHouseAccount.publicKey), 'Auctioneer account does not match the AuctionHouse account');\n  }\n\n  return {\n    model: 'auctionHouse',\n    address: new Pda(auctionHouseAccount.publicKey, auctionHouseAccount.data.bump),\n    creatorAddress: auctionHouseAccount.data.creator,\n    authorityAddress: auctionHouseAccount.data.authority,\n    treasuryMint,\n    feeAccountAddress: new Pda(auctionHouseAccount.data.auctionHouseFeeAccount, auctionHouseAccount.data.feePayerBump),\n    treasuryAccountAddress: new Pda(auctionHouseAccount.data.auctionHouseTreasury, auctionHouseAccount.data.treasuryBump),\n    feeWithdrawalDestinationAddress: auctionHouseAccount.data.feeWithdrawalDestination,\n    treasuryWithdrawalDestinationAddress: auctionHouseAccount.data.treasuryWithdrawalDestination,\n    sellerFeeBasisPoints: auctionHouseAccount.data.sellerFeeBasisPoints,\n    requiresSignOff: auctionHouseAccount.data.requiresSignOff,\n    canChangeSalePrice: auctionHouseAccount.data.canChangeSalePrice,\n    isNative: treasuryMint.isWrappedSol,\n    scopes: auctionHouseAccount.data.scopes.reduce((acc, isAllowed, index) => isAllowed ? [...acc, index] : acc, []),\n    // Auctioneer.\n    ...(auctionHouseAccount.data.hasAuctioneer && auctioneerAccount ? {\n      hasAuctioneer: true,\n      auctioneer: {\n        address: auctioneerAccount.publicKey,\n        authority: auctioneerAccount.data.auctioneerAuthority\n      }\n    } : {\n      hasAuctioneer: false\n    })\n  };\n};\n\nexport { assertAuctionHouse, assertAuctioneerAuctionHouse, isAuctionHouse, isAuctioneerAuctionHouse, toAuctionHouse };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/models/AuctionHouse.ts"],"names":["isAuctionHouse","value","model","assertAuctionHouse","assert","isAuctioneerAuctionHouse","hasAuctioneer","assertAuctioneerAuctionHouse","toAuctionHouse","auctionHouseAccount","treasuryMint","auctioneerAccount","data","auctionHouse","equals","publicKey","address","Pda","bump","creatorAddress","creator","authorityAddress","authority","feeAccountAddress","auctionHouseFeeAccount","feePayerBump","treasuryAccountAddress","auctionHouseTreasury","treasuryBump","feeWithdrawalDestinationAddress","feeWithdrawalDestination","treasuryWithdrawalDestinationAddress","treasuryWithdrawalDestination","sellerFeeBasisPoints","requiresSignOff","canChangeSalePrice","isNative","isWrappedSol","scopes","reduce","acc","isAllowed","index","auctioneer","auctioneerAuthority"],"mappings":";;AAuFA;;AACaA,MAAAA,cAAc,GAAIC,KAAU,IACvC,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAND,KAAgB,cADlCD;AAGb;;;AACO,SAASG,kBAAT,CAA4BF,KAA5B,EAAuE;EAC5EG,MAAM,CAACJ,cAAc,CAACC,KAAD,CAAf,EAAyB,4BAAzB,CAANG;AACF;AAMA;;;AACaC,MAAAA,wBAAwB,GACnCJ,KAAU,IAEVD,cAAc,CAACC,KAAD,CAAdD,IAAyBC,KAAK,CAACK,aAHpBD;AAKb;;;AACO,SAASE,4BAAT,CACLN,KADK,EAEoC;EACzCG,MAAM,CACJC,wBAAwB,CAACJ,KAAD,CADpB,EAEH,sCAFG,CAANG;AAIF;AAEA;;;AACO,MAAMI,cAAc,GAAG,CAC5BC,mBAD4B,EAE5BC,YAF4B,EAG5BC,iBAH4B,KAIX;EACjB,IAAIF,mBAAmB,CAACG,IAApBH,CAAyBH,aAA7B,EAA4C;IAC1CF,MAAM,CACJ,CAAC,CAACO,iBADE,EAEJ,2DAFI,CAANP;IAIAA,MAAM,CACJ,CAAC,CAACO,iBAAF,IACEA,iBAAiB,CAACC,IAAlBD,CAAuBE,YAAvBF,CAAoCG,MAApCH,CACEF,mBAAmB,CAACM,SADtBJ,CAFE,EAKJ,4DALI,CAANP;EAOF;;EAEA,OAAO;IACLF,KAAK,EAAE,cADF;IAELc,OAAO,EAAE,IAAIC,GAAJ,CACPR,mBAAmB,CAACM,SADb,EAEPN,mBAAmB,CAACG,IAApBH,CAAyBS,IAFlB,CAFJ;IAMLC,cAAc,EAAEV,mBAAmB,CAACG,IAApBH,CAAyBW,OANpC;IAOLC,gBAAgB,EAAEZ,mBAAmB,CAACG,IAApBH,CAAyBa,SAPtC;IAQLZ,YARK;IASLa,iBAAiB,EAAE,IAAIN,GAAJ,CACjBR,mBAAmB,CAACG,IAApBH,CAAyBe,sBADR,EAEjBf,mBAAmB,CAACG,IAApBH,CAAyBgB,YAFR,CATd;IAaLC,sBAAsB,EAAE,IAAIT,GAAJ,CACtBR,mBAAmB,CAACG,IAApBH,CAAyBkB,oBADH,EAEtBlB,mBAAmB,CAACG,IAApBH,CAAyBmB,YAFH,CAbnB;IAiBLC,+BAA+B,EAC7BpB,mBAAmB,CAACG,IAApBH,CAAyBqB,wBAlBtB;IAmBLC,oCAAoC,EAClCtB,mBAAmB,CAACG,IAApBH,CAAyBuB,6BApBtB;IAqBLC,oBAAoB,EAAExB,mBAAmB,CAACG,IAApBH,CAAyBwB,oBArB1C;IAsBLC,eAAe,EAAEzB,mBAAmB,CAACG,IAApBH,CAAyByB,eAtBrC;IAuBLC,kBAAkB,EAAE1B,mBAAmB,CAACG,IAApBH,CAAyB0B,kBAvBxC;IAwBLC,QAAQ,EAAE1B,YAAY,CAAC2B,YAxBlB;IAyBLC,MAAM,EAAE7B,mBAAmB,CAACG,IAApBH,CAAyB6B,MAAzB7B,CAAgC8B,MAAhC9B,CACN,CAAC+B,GAAD,EAAMC,SAAN,EAAiBC,KAAjB,KAA4BD,SAAS,GAAG,CAAC,GAAGD,GAAJ,EAASE,KAAT,CAAH,GAAqBF,GADpD/B,EAEN,EAFMA,CAzBH;IA8BL;IACA,IAAIA,mBAAmB,CAACG,IAApBH,CAAyBH,aAAzBG,IAA0CE,iBAA1CF,GACA;MACEH,aAAa,EAAE,IADjB;MAEEqC,UAAU,EAAE;QACV3B,OAAO,EAAEL,iBAAiB,CAACI,SADjB;QAEVO,SAAS,EAAEX,iBAAiB,CAACC,IAAlBD,CAAuBiC;MAFxB;IAFd,CADAnC,GAQA;MAAEH,aAAa,EAAE;IAAjB,CARJ;EA/BK,CAAP;AAyCF,CA5DO","sourcesContent":["import { AuthorityScope } from '@metaplex-foundation/mpl-auction-house';\nimport type { PublicKey } from '@solana/web3.js';\nimport { AuctioneerAccount, AuctionHouseAccount } from '../accounts';\nimport { Mint } from '../../tokenModule';\nimport { Pda } from '@/types';\nimport { assert } from '@/utils';\n\nexport type AuctionHouse = Readonly<\n  {\n    /** A model identifier to distinguish models in the SDK. */\n    model: 'auctionHouse';\n\n    /** The address of the Auction House. */\n    address: Pda;\n\n    /** The address of the Auction House creator. */\n    creatorAddress: PublicKey;\n\n    /** The address of the authority that is allowed to manage this Auction House. */\n    authorityAddress: PublicKey;\n\n    /**\n     * The address of the Auction House treasury mint.\n     * The token you accept as the purchase currency.\n     * By default Auction House uses the `WRAPPED_SOL_MINT` treasury mint.\n     */\n    treasuryMint: Mint;\n\n    /** The account that used to pay the fees for selling and buying. */\n    feeAccountAddress: Pda;\n\n    /** The account that receives the AuctionHouse fees. */\n    treasuryAccountAddress: Pda;\n\n    /** The account that is marked as a destination of withdrawal from the fee account. */\n    feeWithdrawalDestinationAddress: PublicKey;\n\n    /** The account that is marked as a destination of withdrawal from the treasury account. */\n    treasuryWithdrawalDestinationAddress: PublicKey;\n\n    /** The share of the sale the auction house takes on all NFTs as a fee. */\n    sellerFeeBasisPoints: number;\n\n    /** This allows the centralised authority to gate which NFT can be listed, bought and sold. */\n    requiresSignOff: boolean;\n\n    /**\n     * Is intended to be used with the Auction House that requires sign off.\n     * If the seller intentionally lists their NFT for a price of 0, a new FreeSellerTradeState is made.\n     * The Auction House can then change the price to match a matching Bid that is greater than 0.\n     */\n    canChangeSalePrice: boolean;\n\n    /**\n     * If this is true, then it means that Auction House accepts SOL as the purchase currency.\n     * In other case, different SPL token is set as the purchase currency.\n     */\n    isNative: boolean;\n\n    /**\n     * The list of scopes available to the user in the Auction House.\n     * For example Bid, List, Execute Sale.\n     */\n    scopes: AuthorityScope[];\n  } & (\n    | {\n        /** This Auction House doesn't have Auctioneer. */\n        hasAuctioneer: false;\n      }\n    | {\n        /**\n         * This Auction House has Auctioneer enabled.\n         * It allows timed auctions, minimum bid prices, and highest bid tracking.\n         */\n        hasAuctioneer: true;\n\n        auctioneer: {\n          /** The address of Auctioneer instance. */\n          address: PublicKey;\n\n          /** The address of Auctioneer Authority. */\n          authority: PublicKey;\n        };\n      }\n  )\n>;\n\n/** @group Model Helpers */\nexport const isAuctionHouse = (value: any): value is AuctionHouse =>\n  typeof value === 'object' && value.model === 'auctionHouse';\n\n/** @group Model Helpers */\nexport function assertAuctionHouse(value: any): asserts value is AuctionHouse {\n  assert(isAuctionHouse(value), `Expected AuctionHouse type`);\n}\n\nexport type AuctioneerAuctionHouse = AuctionHouse & {\n  hasAuctioneer: true;\n};\n\n/** @group Model Helpers */\nexport const isAuctioneerAuctionHouse = (\n  value: any\n): value is AuctioneerAuctionHouse =>\n  isAuctionHouse(value) && value.hasAuctioneer;\n\n/** @group Model Helpers */\nexport function assertAuctioneerAuctionHouse(\n  value: any\n): asserts value is AuctioneerAuctionHouse {\n  assert(\n    isAuctioneerAuctionHouse(value),\n    `Expected AuctioneerAuctionHouse type`\n  );\n}\n\n/** @group Model Helpers */\nexport const toAuctionHouse = (\n  auctionHouseAccount: AuctionHouseAccount,\n  treasuryMint: Mint,\n  auctioneerAccount?: AuctioneerAccount | null\n): AuctionHouse => {\n  if (auctionHouseAccount.data.hasAuctioneer) {\n    assert(\n      !!auctioneerAccount,\n      'Auctioneer account is required when hasAuctioneer is true'\n    );\n    assert(\n      !!auctioneerAccount &&\n        auctioneerAccount.data.auctionHouse.equals(\n          auctionHouseAccount.publicKey\n        ),\n      'Auctioneer account does not match the AuctionHouse account'\n    );\n  }\n\n  return {\n    model: 'auctionHouse',\n    address: new Pda(\n      auctionHouseAccount.publicKey,\n      auctionHouseAccount.data.bump\n    ),\n    creatorAddress: auctionHouseAccount.data.creator,\n    authorityAddress: auctionHouseAccount.data.authority,\n    treasuryMint,\n    feeAccountAddress: new Pda(\n      auctionHouseAccount.data.auctionHouseFeeAccount,\n      auctionHouseAccount.data.feePayerBump\n    ),\n    treasuryAccountAddress: new Pda(\n      auctionHouseAccount.data.auctionHouseTreasury,\n      auctionHouseAccount.data.treasuryBump\n    ),\n    feeWithdrawalDestinationAddress:\n      auctionHouseAccount.data.feeWithdrawalDestination,\n    treasuryWithdrawalDestinationAddress:\n      auctionHouseAccount.data.treasuryWithdrawalDestination,\n    sellerFeeBasisPoints: auctionHouseAccount.data.sellerFeeBasisPoints,\n    requiresSignOff: auctionHouseAccount.data.requiresSignOff,\n    canChangeSalePrice: auctionHouseAccount.data.canChangeSalePrice,\n    isNative: treasuryMint.isWrappedSol,\n    scopes: auctionHouseAccount.data.scopes.reduce<number[]>(\n      (acc, isAllowed, index) => (isAllowed ? [...acc, index] : acc),\n      [] as number[]\n    ),\n\n    // Auctioneer.\n    ...(auctionHouseAccount.data.hasAuctioneer && auctioneerAccount\n      ? {\n          hasAuctioneer: true,\n          auctioneer: {\n            address: auctioneerAccount.publicKey,\n            authority: auctioneerAccount.data.auctioneerAuthority,\n          },\n        }\n      : { hasAuctioneer: false }),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}