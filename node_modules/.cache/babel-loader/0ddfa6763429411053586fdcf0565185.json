{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createUpdateDefaultAccountStateInstruction = exports.createInitializeDefaultAccountStateInstruction = exports.defaultAccountStateInstructionData = exports.DefaultAccountStateInstruction = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../../constants.js\");\n\nconst errors_js_1 = require(\"../../errors.js\");\n\nconst types_js_1 = require(\"../../instructions/types.js\");\n\nvar DefaultAccountStateInstruction;\n\n(function (DefaultAccountStateInstruction) {\n  DefaultAccountStateInstruction[DefaultAccountStateInstruction[\"Initialize\"] = 0] = \"Initialize\";\n  DefaultAccountStateInstruction[DefaultAccountStateInstruction[\"Update\"] = 1] = \"Update\";\n})(DefaultAccountStateInstruction = exports.DefaultAccountStateInstruction || (exports.DefaultAccountStateInstruction = {}));\n/** TODO: docs */\n\n\nexports.defaultAccountStateInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('defaultAccountStateInstruction'), (0, buffer_layout_1.u8)('accountState')]);\n/**\n * Construct an InitializeDefaultAccountState instruction\n *\n * @param mint         Mint to initialize\n * @param accountState Default account state to set on all new accounts\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createInitializeDefaultAccountStateInstruction(mint, accountState) {\n  let programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(exports.defaultAccountStateInstructionData.span);\n  exports.defaultAccountStateInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.DefaultAccountStateExtension,\n    defaultAccountStateInstruction: DefaultAccountStateInstruction.Initialize,\n    accountState\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createInitializeDefaultAccountStateInstruction = createInitializeDefaultAccountStateInstruction;\n/**\n * Construct an UpdateDefaultAccountState instruction\n *\n * @param mint         Mint to update\n * @param accountState    Default account state to set on all accounts\n * @param freezeAuthority       The mint's freeze authority\n * @param signers         The signer account(s) for a multisig\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createUpdateDefaultAccountStateInstruction(mint, accountState, freezeAuthority) {\n  let multiSigners = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  keys.push({\n    pubkey: freezeAuthority,\n    isSigner: !multiSigners.length,\n    isWritable: false\n  });\n\n  for (const signer of multiSigners) {\n    keys.push({\n      pubkey: signer.publicKey,\n      isSigner: true,\n      isWritable: false\n    });\n  }\n\n  const data = Buffer.alloc(exports.defaultAccountStateInstructionData.span);\n  exports.defaultAccountStateInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.DefaultAccountStateExtension,\n    defaultAccountStateInstruction: DefaultAccountStateInstruction.Update,\n    accountState\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createUpdateDefaultAccountStateInstruction = createUpdateDefaultAccountStateInstruction;","map":{"version":3,"sources":["../../../../src/extensions/defaultAccountState/instructions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createUpdateDefaultAccountStateInstruction = exports.createInitializeDefaultAccountStateInstruction = exports.defaultAccountStateInstructionData = exports.DefaultAccountStateInstruction = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../../constants.js\");\nconst errors_js_1 = require(\"../../errors.js\");\nconst types_js_1 = require(\"../../instructions/types.js\");\nvar DefaultAccountStateInstruction;\n(function (DefaultAccountStateInstruction) {\n    DefaultAccountStateInstruction[DefaultAccountStateInstruction[\"Initialize\"] = 0] = \"Initialize\";\n    DefaultAccountStateInstruction[DefaultAccountStateInstruction[\"Update\"] = 1] = \"Update\";\n})(DefaultAccountStateInstruction = exports.DefaultAccountStateInstruction || (exports.DefaultAccountStateInstruction = {}));\n/** TODO: docs */\nexports.defaultAccountStateInstructionData = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('instruction'),\n    (0, buffer_layout_1.u8)('defaultAccountStateInstruction'),\n    (0, buffer_layout_1.u8)('accountState'),\n]);\n/**\n * Construct an InitializeDefaultAccountState instruction\n *\n * @param mint         Mint to initialize\n * @param accountState Default account state to set on all new accounts\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeDefaultAccountStateInstruction(mint, accountState, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n    if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n        throw new errors_js_1.TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(exports.defaultAccountStateInstructionData.span);\n    exports.defaultAccountStateInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.DefaultAccountStateExtension,\n        defaultAccountStateInstruction: DefaultAccountStateInstruction.Initialize,\n        accountState,\n    }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createInitializeDefaultAccountStateInstruction = createInitializeDefaultAccountStateInstruction;\n/**\n * Construct an UpdateDefaultAccountState instruction\n *\n * @param mint         Mint to update\n * @param accountState    Default account state to set on all accounts\n * @param freezeAuthority       The mint's freeze authority\n * @param signers         The signer account(s) for a multisig\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createUpdateDefaultAccountStateInstruction(mint, accountState, freezeAuthority, multiSigners = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n    if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n        throw new errors_js_1.TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    keys.push({ pubkey: freezeAuthority, isSigner: !multiSigners.length, isWritable: false });\n    for (const signer of multiSigners) {\n        keys.push({ pubkey: signer.publicKey, isSigner: true, isWritable: false });\n    }\n    const data = Buffer.alloc(exports.defaultAccountStateInstructionData.span);\n    exports.defaultAccountStateInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.DefaultAccountStateExtension,\n        defaultAccountStateInstruction: DefaultAccountStateInstruction.Update,\n        accountState,\n    }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createUpdateDefaultAccountStateInstruction = createUpdateDefaultAccountStateInstruction;\n//# sourceMappingURL=instructions.js.map"]},"metadata":{},"sourceType":"script"}