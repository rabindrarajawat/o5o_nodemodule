{"ast":null,"code":"import { createWithdrawInstruction, createAuctioneerWithdrawInstruction } from '@metaplex-foundation/mpl-auction-house';\nimport { AuctioneerAuthorityRequiredError, WithdrawFromBuyerAccountRequiresSignerError } from '../errors.mjs';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { isSigner } from '../../../types/Signer.mjs';\nimport { toPublicKey } from '../../../types/PublicKey.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'WithdrawFromBuyerAccountOperation';\n/**\n * Withdraws funds from the user's buyer escrow account for the given auction house.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .withdraw({ auctionHouse, buyer, amount };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst withdrawFromBuyerAccountOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst withdrawFromBuyerAccountOperationHandler = {\n  handle: async (operation, metaplex, scope) => withdrawFromBuyerAccountBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions)\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Withdraws funds from the user's buyer escrow account to the given auction house.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .withdrawFromBuyerAccountBuilder({ auctionHouse, buyer, amount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst withdrawFromBuyerAccountBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    auctionHouse,\n    auctioneerAuthority,\n    amount\n  } = params;\n\n  if (auctionHouse.hasAuctioneer && !params.auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  const amountBasisPoint = amount.basisPoints;\n  const buyer = params.buyer ?? metaplex.identity();\n  const authority = params.authority ?? auctionHouse.authorityAddress;\n\n  if (!isSigner(buyer) && !isSigner(authority)) {\n    throw new WithdrawFromBuyerAccountRequiresSignerError();\n  }\n\n  const escrowPayment = metaplex.auctionHouse().pdas().buyerEscrow({\n    auctionHouse: auctionHouse.address,\n    buyer: toPublicKey(buyer),\n    programs\n  }); // Accounts,\n\n  const accounts = {\n    wallet: toPublicKey(buyer),\n    receiptAccount: toPublicKey(buyer),\n    escrowPaymentAccount: escrowPayment,\n    treasuryMint: auctionHouse.treasuryMint.address,\n    authority: toPublicKey(authority),\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress\n  }; // Args.\n\n  const args = {\n    escrowPaymentBump: escrowPayment.bump,\n    amount: amountBasisPoint\n  }; // Withdraw Instruction.\n\n  let withdrawInstruction = createWithdrawInstruction(accounts, args);\n\n  if (auctioneerAuthority) {\n    const ahAuctioneerPda = metaplex.auctionHouse().pdas().auctioneer({\n      auctionHouse: auctionHouse.address,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      programs\n    });\n    const accountsWithAuctioneer = { ...accounts,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      ahAuctioneerPda\n    };\n    withdrawInstruction = createAuctioneerWithdrawInstruction(accountsWithAuctioneer, args);\n  } // Signers.\n\n\n  const signer = isSigner(buyer) ? buyer : authority;\n  const withdrawSigners = [signer, params.auctioneerAuthority].filter(isSigner); // Update the account to be a signer since it's not covered properly by MPL due to its dynamic nature.\n\n  const signerKeyIndex = withdrawInstruction.keys.findIndex(key => key.pubkey.equals(signer.publicKey));\n  withdrawInstruction.keys[signerKeyIndex].isSigner = true;\n  return TransactionBuilder.make().setFeePayer(payer) // Withdraw.\n  .add({\n    instruction: withdrawInstruction,\n    signers: withdrawSigners,\n    key: params.instructionKey ?? 'withdrawFromBuyerAccount'\n  });\n};\n\nexport { withdrawFromBuyerAccountBuilder, withdrawFromBuyerAccountOperation, withdrawFromBuyerAccountOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/operations/withdrawFromBuyerAccount.ts"],"names":["Key","withdrawFromBuyerAccountOperation","useOperation","withdrawFromBuyerAccountOperationHandler","handle","operation","metaplex","scope","withdrawFromBuyerAccountBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","auctionHouse","auctioneerAuthority","amount","hasAuctioneer","AuctioneerAuthorityRequiredError","amountBasisPoint","basisPoints","buyer","identity","authority","authorityAddress","isSigner","WithdrawFromBuyerAccountRequiresSignerError","escrowPayment","pdas","buyerEscrow","address","toPublicKey","accounts","wallet","receiptAccount","escrowPaymentAccount","treasuryMint","auctionHouseFeeAccount","feeAccountAddress","args","escrowPaymentBump","bump","withdrawInstruction","createWithdrawInstruction","ahAuctioneerPda","auctioneer","publicKey","accountsWithAuctioneer","createAuctioneerWithdrawInstruction","signer","withdrawSigners","filter","signerKeyIndex","keys","findIndex","key","pubkey","equals","TransactionBuilder","make","setFeePayer","add","instruction","signers","instructionKey"],"mappings":"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","sourcesContent":["import {\n  createAuctioneerWithdrawInstruction,\n  createWithdrawInstruction,\n  WithdrawInstructionAccounts,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  AuctioneerAuthorityRequiredError,\n  WithdrawFromBuyerAccountRequiresSignerError,\n} from '../errors';\nimport { AuctionHouse } from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  isSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'WithdrawFromBuyerAccountOperation' as const;\n\n/**\n * Withdraws funds from the user's buyer escrow account for the given auction house.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .withdraw({ auctionHouse, buyer, amount };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const withdrawFromBuyerAccountOperation =\n  useOperation<WithdrawFromBuyerAccountOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type WithdrawFromBuyerAccountOperation = Operation<\n  typeof Key,\n  WithdrawFromBuyerAccountInput,\n  WithdrawFromBuyerAccountOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type WithdrawFromBuyerAccountInput = {\n  /** The Auction House from which escrow buyer withdraws funds. */\n  auctionHouse: Pick<\n    AuctionHouse,\n    | 'address'\n    | 'authorityAddress'\n    | 'hasAuctioneer'\n    | 'treasuryMint'\n    | 'feeAccountAddress'\n  >;\n\n  /**\n   * The buyer who withdraws funds.\n   *\n   * There must be one and only one signer; Authority or Seller must sign.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  buyer?: PublicKey | Signer;\n\n  /**\n   * The Authority key.\n   * It is required when the buyer is not a signer.\n   * There must be one and only one signer; Authority or Buyer must sign.\n   *\n   * @defaultValue Defaults to not being used.\n   */\n  authority?: Signer;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n\n  /**\n   * Amount of funds to withdraw.\n   * This can either be in SOL or in the SPL token used by the Auction House as a currency.\n   */\n  amount: SolAmount | SplTokenAmount;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type WithdrawFromBuyerAccountOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const withdrawFromBuyerAccountOperationHandler: OperationHandler<WithdrawFromBuyerAccountOperation> =\n  {\n    handle: async (\n      operation: WithdrawFromBuyerAccountOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) =>\n      withdrawFromBuyerAccountBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions),\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type WithdrawFromBuyerAccountBuilderParams = Omit<\n  WithdrawFromBuyerAccountInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type WithdrawFromBuyerAccountBuilderContext = Omit<\n  WithdrawFromBuyerAccountOutput,\n  'response'\n>;\n\n/**\n * Withdraws funds from the user's buyer escrow account to the given auction house.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .withdrawFromBuyerAccountBuilder({ auctionHouse, buyer, amount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const withdrawFromBuyerAccountBuilder = (\n  metaplex: Metaplex,\n  params: WithdrawFromBuyerAccountBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<WithdrawFromBuyerAccountBuilderContext> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { auctionHouse, auctioneerAuthority, amount } = params;\n\n  if (auctionHouse.hasAuctioneer && !params.auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  const amountBasisPoint = amount.basisPoints;\n  const buyer = params.buyer ?? (metaplex.identity() as Signer);\n  const authority = params.authority ?? auctionHouse.authorityAddress;\n\n  if (!isSigner(buyer) && !isSigner(authority)) {\n    throw new WithdrawFromBuyerAccountRequiresSignerError();\n  }\n\n  const escrowPayment = metaplex\n    .auctionHouse()\n    .pdas()\n    .buyerEscrow({\n      auctionHouse: auctionHouse.address,\n      buyer: toPublicKey(buyer),\n      programs,\n    });\n\n  // Accounts,\n  const accounts: WithdrawInstructionAccounts = {\n    wallet: toPublicKey(buyer),\n    receiptAccount: toPublicKey(buyer),\n    escrowPaymentAccount: escrowPayment,\n    treasuryMint: auctionHouse.treasuryMint.address,\n    authority: toPublicKey(authority),\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n  };\n\n  // Args.\n  const args = {\n    escrowPaymentBump: escrowPayment.bump,\n    amount: amountBasisPoint,\n  };\n\n  // Withdraw Instruction.\n  let withdrawInstruction = createWithdrawInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    const ahAuctioneerPda = metaplex.auctionHouse().pdas().auctioneer({\n      auctionHouse: auctionHouse.address,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      programs,\n    });\n\n    const accountsWithAuctioneer = {\n      ...accounts,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      ahAuctioneerPda,\n    };\n\n    withdrawInstruction = createAuctioneerWithdrawInstruction(\n      accountsWithAuctioneer,\n      args\n    );\n  }\n\n  // Signers.\n  const signer = isSigner(buyer) ? buyer : (authority as Signer);\n  const withdrawSigners = [signer, params.auctioneerAuthority].filter(isSigner);\n\n  // Update the account to be a signer since it's not covered properly by MPL due to its dynamic nature.\n  const signerKeyIndex = withdrawInstruction.keys.findIndex((key) =>\n    key.pubkey.equals(signer.publicKey)\n  );\n  withdrawInstruction.keys[signerKeyIndex].isSigner = true;\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Withdraw.\n      .add({\n        instruction: withdrawInstruction,\n        signers: withdrawSigners,\n        key: params.instructionKey ?? 'withdrawFromBuyerAccount',\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}