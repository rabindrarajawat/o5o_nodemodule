{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createInitializeDefaultAccountStateInstruction, createUpdateDefaultAccountStateInstruction } from './instructions.js';\n/**\n * Initialize a default account state on a mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint        Mint to initialize with extension\n * @param state        Account state with which to initialize new accounts\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function initializeDefaultAccountState(connection, payer, mint, state, confirmOptions) {\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_2022_PROGRAM_ID;\n  const transaction = new Transaction().add(createInitializeDefaultAccountStateInstruction(mint, state, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n/**\n * Update the default account state on a mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint        Mint to modify\n * @param state        New account state to set on created accounts\n * @param freezeAuthority          Freeze authority of the mint\n * @param multiSigners   Signing accounts if `freezeAuthority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function updateDefaultAccountState(connection, payer, mint, state, freezeAuthority) {\n  let multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  let confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : TOKEN_2022_PROGRAM_ID;\n  const [freezeAuthorityPublicKey, signers] = getSigners(freezeAuthority, multiSigners);\n  const transaction = new Transaction().add(createUpdateDefaultAccountStateInstruction(mint, state, freezeAuthorityPublicKey, signers, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"sources":["../../../../src/extensions/defaultAccountState/actions.ts"],"names":[],"mappings":"AACA,SAAS,yBAAT,EAAoC,WAApC,QAAuD,iBAAvD;AACA,SAAS,UAAT,QAA2B,2BAA3B;AACA,SAAS,qBAAT,QAAsC,oBAAtC;AAEA,SACI,8CADJ,EAEI,0CAFJ,QAGO,mBAHP;AAKA;;;;;;;;;;;AAWG;;AACH,OAAO,eAAe,6BAAf,CACH,UADG,EAEH,KAFG,EAGH,IAHG,EAIH,KAJG,EAKH,cALG,EAM8B;EAAA,IAAjC,SAAiC,uEAArB,qBAAqB;EAEjC,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAAsB,8CAA8C,CAAC,IAAD,EAAO,KAAP,EAAc,SAAd,CAApE,CAApB;EAEA,OAAO,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,CAA1B,EAAmC,cAAnC,CAAtC;AACH;AAED;;;;;;;;;;;;;AAaG;;AACH,OAAO,eAAe,yBAAf,CACH,UADG,EAEH,KAFG,EAGH,IAHG,EAIH,KAJG,EAKH,eALG,EAQ8B;EAAA,IAFjC,YAEiC,uEAFR,EAEQ;EAAA,IADjC,cACiC;EAAA,IAAjC,SAAiC,uEAArB,qBAAqB;EAEjC,MAAM,CAAC,wBAAD,EAA2B,OAA3B,IAAsC,UAAU,CAAC,eAAD,EAAkB,YAAlB,CAAtD;EAEA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,0CAA0C,CAAC,IAAD,EAAO,KAAP,EAAc,wBAAd,EAAwC,OAAxC,EAAiD,SAAjD,CAD1B,CAApB;EAIA,OAAO,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,EAAQ,GAAG,OAAX,CAA1B,EAA+C,cAA/C,CAAtC;AACH","sourceRoot":"","sourcesContent":["import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createInitializeDefaultAccountStateInstruction, createUpdateDefaultAccountStateInstruction, } from './instructions.js';\n/**\n * Initialize a default account state on a mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint        Mint to initialize with extension\n * @param state        Account state with which to initialize new accounts\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function initializeDefaultAccountState(connection, payer, mint, state, confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n    const transaction = new Transaction().add(createInitializeDefaultAccountStateInstruction(mint, state, programId));\n    return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n/**\n * Update the default account state on a mint\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint        Mint to modify\n * @param state        New account state to set on created accounts\n * @param freezeAuthority          Freeze authority of the mint\n * @param multiSigners   Signing accounts if `freezeAuthority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function updateDefaultAccountState(connection, payer, mint, state, freezeAuthority, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n    const [freezeAuthorityPublicKey, signers] = getSigners(freezeAuthority, multiSigners);\n    const transaction = new Transaction().add(createUpdateDefaultAccountStateInstruction(mint, state, freezeAuthorityPublicKey, signers, programId));\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n//# sourceMappingURL=actions.js.map"]},"metadata":{},"sourceType":"module"}