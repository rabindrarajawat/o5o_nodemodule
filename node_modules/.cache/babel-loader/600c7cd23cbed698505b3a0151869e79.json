{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeCloseAccountInstructionUnchecked = exports.decodeCloseAccountInstruction = exports.createCloseAccountInstruction = exports.closeAccountInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst internal_js_1 = require(\"./internal.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\n\n\nexports.closeAccountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct a CloseAccount instruction\n *\n * @param account      Account to close\n * @param destination  Account to receive the remaining balance of the closed account\n * @param authority    Account close authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createCloseAccountInstruction(account, destination, authority) {\n  let multiSigners = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.TOKEN_PROGRAM_ID;\n  const keys = (0, internal_js_1.addSigners)([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(exports.closeAccountInstructionData.span);\n  exports.closeAccountInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.CloseAccount\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createCloseAccountInstruction = createCloseAccountInstruction;\n/**\n * Decode a CloseAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeCloseAccountInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.closeAccountInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      destination,\n      authority,\n      multiSigners\n    },\n    data\n  } = decodeCloseAccountInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.CloseAccount) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account || !destination || !authority) throw new errors_js_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      destination,\n      authority,\n      multiSigners\n    },\n    data\n  };\n}\n\nexports.decodeCloseAccountInstruction = decodeCloseAccountInstruction;\n/**\n * Decode a CloseAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeCloseAccountInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, destination, authority, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      destination,\n      authority,\n      multiSigners\n    },\n    data: exports.closeAccountInstructionData.decode(data)\n  };\n}\n\nexports.decodeCloseAccountInstructionUnchecked = decodeCloseAccountInstructionUnchecked;","map":{"version":3,"sources":["../../../src/instructions/closeAccount.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAMA,MAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAOA;;;AACa,OAAA,CAAA,2BAAA,GAA8B,CAAA,GAAA,eAAA,CAAA,MAAA,EAAoC,CAAC,CAAA,GAAA,eAAA,CAAA,EAAA,EAAG,aAAH,CAAD,CAApC,CAA9B;AAEb;;;;;;;;;;AAUG;;AACH,SAAgB,6BAAhB,CACI,OADJ,EAEI,WAFJ,EAGI,SAHJ,EAKgC;EAAA,IAD5B,YAC4B,uEADH,EACG;EAAA,IAA5B,SAA4B,uEAAhB,cAAA,CAAA,gBAAgB;EAE5B,MAAM,IAAI,GAAG,CAAA,GAAA,aAAA,CAAA,UAAA,EACT,CACI;IAAE,MAAM,EAAE,OAAV;IAAmB,QAAQ,EAAE,KAA7B;IAAoC,UAAU,EAAE;EAAhD,CADJ,EAEI;IAAE,MAAM,EAAE,WAAV;IAAuB,QAAQ,EAAE,KAAjC;IAAwC,UAAU,EAAE;EAApD,CAFJ,CADS,EAKT,SALS,EAMT,YANS,CAAb;EASA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,OAAA,CAAA,2BAAA,CAA4B,IAAzC,CAAb;EACA,OAAA,CAAA,2BAAA,CAA4B,MAA5B,CAAmC;IAAE,WAAW,EAAE,UAAA,CAAA,gBAAA,CAAiB;EAAhC,CAAnC,EAAmF,IAAnF;EAEA,OAAO,IAAI,SAAA,CAAA,sBAAJ,CAA2B;IAAE,IAAF;IAAQ,SAAR;IAAmB;EAAnB,CAA3B,CAAP;AACH;;AApBD,OAAA,CAAA,6BAAA,GAAA,6BAAA;AAoCA;;;;;;;AAOG;;AACH,SAAgB,6BAAhB,CACI,WADJ,EAEgC;EAAA,IAA5B,SAA4B,uEAAhB,cAAA,CAAA,gBAAgB;EAE5B,IAAI,CAAC,WAAW,CAAC,SAAZ,CAAsB,MAAtB,CAA6B,SAA7B,CAAL,EAA8C,MAAM,IAAI,WAAA,CAAA,mCAAJ,EAAN;EAC9C,IAAI,WAAW,CAAC,IAAZ,CAAiB,MAAjB,KAA4B,OAAA,CAAA,2BAAA,CAA4B,IAA5D,EAAkE,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN;EAElE,MAAM;IACF,IAAI,EAAE;MAAE,OAAF;MAAW,WAAX;MAAwB,SAAxB;MAAmC;IAAnC,CADJ;IAEF;EAFE,IAGF,sCAAsC,CAAC,WAAD,CAH1C;EAIA,IAAI,IAAI,CAAC,WAAL,KAAqB,UAAA,CAAA,gBAAA,CAAiB,YAA1C,EAAwD,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN;EACxD,IAAI,CAAC,OAAD,IAAY,CAAC,WAAb,IAA4B,CAAC,SAAjC,EAA4C,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN,CAVhB,CAY5B;;EAEA,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF,OADE;MAEF,WAFE;MAGF,SAHE;MAIF;IAJE,CAFH;IAQH;EARG,CAAP;AAUH;;AA1BD,OAAA,CAAA,6BAAA,GAAA,6BAAA;AA0CA;;;;;;AAMG;;AACH,SAAgB,sCAAhB,OAIyB;EAAA,IAJ8B;IACnD,SADmD;IAEnD,IAAI,EAAE,CAAC,OAAD,EAAU,WAAV,EAAuB,SAAvB,EAAkC,GAAG,YAArC,CAF6C;IAGnD;EAHmD,CAI9B;EACrB,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF,OADE;MAEF,WAFE;MAGF,SAHE;MAIF;IAJE,CAFH;IAQH,IAAI,EAAE,OAAA,CAAA,2BAAA,CAA4B,MAA5B,CAAmC,IAAnC;EARH,CAAP;AAUH;;AAfD,OAAA,CAAA,sCAAA,GAAA,sCAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeCloseAccountInstructionUnchecked = exports.decodeCloseAccountInstruction = exports.createCloseAccountInstruction = exports.closeAccountInstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst internal_js_1 = require(\"./internal.js\");\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.closeAccountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct a CloseAccount instruction\n *\n * @param account      Account to close\n * @param destination  Account to receive the remaining balance of the closed account\n * @param authority    Account close authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createCloseAccountInstruction(account, destination, authority, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    const keys = (0, internal_js_1.addSigners)([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], authority, multiSigners);\n    const data = Buffer.alloc(exports.closeAccountInstructionData.span);\n    exports.closeAccountInstructionData.encode({ instruction: types_js_1.TokenInstruction.CloseAccount }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createCloseAccountInstruction = createCloseAccountInstruction;\n/**\n * Decode a CloseAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeCloseAccountInstruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.closeAccountInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { account, destination, authority, multiSigners }, data, } = decodeCloseAccountInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.CloseAccount)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!account || !destination || !authority)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\nexports.decodeCloseAccountInstruction = decodeCloseAccountInstruction;\n/**\n * Decode a CloseAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeCloseAccountInstructionUnchecked({ programId, keys: [account, destination, authority, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: exports.closeAccountInstructionData.decode(data),\n    };\n}\nexports.decodeCloseAccountInstructionUnchecked = decodeCloseAccountInstructionUnchecked;\n//# sourceMappingURL=closeAccount.js.map"]},"metadata":{},"sourceType":"script"}