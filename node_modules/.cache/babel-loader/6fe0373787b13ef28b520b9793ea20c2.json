{"ast":null,"code":"import BN from 'bn.js';\nimport { BEET_PACKAGE } from '../types'; // -----------------\n// Unsigned\n// -----------------\n\n/**\n * De/Serializer for 8-bit unsigned integers aka `u8`.\n *\n * @category beet/primitive\n */\n\nexport const u8 = {\n  write: function (buf, offset, value) {\n    buf.writeUInt8(value, offset);\n  },\n  read: function (buf, offset) {\n    return buf.readUInt8(offset);\n  },\n  byteSize: 1,\n  description: 'u8'\n};\n/**\n * De/Serializer 16-bit unsigned integers aka `u16`.\n *\n * @category beet/primitive\n */\n\nexport const u16 = {\n  write: function (buf, offset, value) {\n    buf.writeUInt16LE(value, offset);\n  },\n  read: function (buf, offset) {\n    return buf.readUInt16LE(offset);\n  },\n  byteSize: 2,\n  description: 'u16'\n};\n/**\n * De/Serializer for 32-bit unsigned integers aka `u32`.\n *\n * @category beet/primitive\n */\n\nexport const u32 = {\n  write: function (buf, offset, value) {\n    buf.writeUInt32LE(value, offset);\n  },\n  read: function (buf, offset) {\n    return buf.readUInt32LE(offset);\n  },\n  byteSize: 4,\n  description: 'u32'\n};\n\nfunction unsignedLargeBeet(byteSize, description) {\n  return {\n    write: function (buf, offset, value) {\n      const bn = BN.isBN(value) ? value : new BN(value);\n      const bytesArray = bn.toArray('le', this.byteSize);\n      const bytesArrayBuf = Buffer.from(bytesArray);\n      bytesArrayBuf.copy(buf, offset, 0, this.byteSize);\n    },\n    read: function (buf, offset) {\n      const slice = buf.slice(offset, offset + this.byteSize);\n      return new BN(slice, 'le');\n    },\n    byteSize,\n    description\n  };\n}\n/**\n * De/Serializer for 64-bit unsigned integers aka `u64` which serializes to a JavaScript\n * _BigNum_ via {@link https://github.com/indutny/bn.js | BN}.\n *\n * @category beet/primitive\n */\n\n\nexport const u64 = unsignedLargeBeet(8, 'u64');\n/**\n * De/Serializer for 128-bit unsigned integers aka `u128` which serializes to a JavaScript\n * _BigNum_ via {@link https://github.com/indutny/bn.js | BN}.\n *\n * @category beet/primitive\n */\n\nexport const u128 = unsignedLargeBeet(16, 'u128');\n/**\n * De/Serializer for 256-bit unsigned integers aka `u256` which serializes to a JavaScript\n * _BigNum_ via {@link https://github.com/indutny/bn.js | BN}.\n *\n * @category beet/primitive\n */\n\nexport const u256 = unsignedLargeBeet(32, 'u256');\n/**\n * De/Serializer for 512-bit unsigned integers aka `u512` which serializes to a JavaScript\n * _BigNum_ via {@link https://github.com/indutny/bn.js | BN}.\n *\n * @category beet/primitive\n */\n\nexport const u512 = unsignedLargeBeet(64, 'u512'); // -----------------\n// Signed\n// -----------------\n\n/**\n * De/Serializer 8-bit signed integers aka `i8`.\n *\n * @category beet/primitive\n */\n\nexport const i8 = {\n  write: function (buf, offset, value) {\n    buf.writeInt8(value, offset);\n  },\n  read: function (buf, offset) {\n    return buf.readInt8(offset);\n  },\n  byteSize: 1,\n  description: 'i8'\n};\n/**\n * De/Serializer 16-bit signed integers aka `i16`.\n *\n * @category beet/primitive\n */\n\nexport const i16 = {\n  write: function (buf, offset, value) {\n    buf.writeInt16LE(value, offset);\n  },\n  read: function (buf, offset) {\n    return buf.readInt16LE(offset);\n  },\n  byteSize: 2,\n  description: 'i16'\n};\n/**\n * De/Serializer 32-bit signed integers aka `i32`.\n *\n * @category beet/primitive\n */\n\nexport const i32 = {\n  write: function (buf, offset, value) {\n    buf.writeInt32LE(value, offset);\n  },\n  read: function (buf, offset) {\n    return buf.readInt32LE(offset);\n  },\n  byteSize: 4,\n  description: 'i32'\n};\n\nfunction signedLargeBeet(byteSize, description) {\n  const bitSize = byteSize * 8;\n  return {\n    write: function (buf, offset, value) {\n      const bn = (BN.isBN(value) ? value : new BN(value)).toTwos(bitSize);\n      const bytesArray = bn.toArray('le', this.byteSize);\n      const bytesArrayBuf = Buffer.from(bytesArray);\n      bytesArrayBuf.copy(buf, offset, 0, this.byteSize);\n    },\n    read: function (buf, offset) {\n      const slice = buf.slice(offset, offset + this.byteSize);\n      const x = new BN(slice, 'le');\n      return x.fromTwos(bitSize);\n    },\n    byteSize,\n    description\n  };\n}\n/**\n * De/Serializer for 64-bit signed integers aka `i64` which serializes to a JavaScript\n * _BigNum_ via {@link https://github.com/indutny/bn.js | BN}.\n *\n * @category beet/primitive\n */\n\n\nexport const i64 = signedLargeBeet(8, 'i64');\n/**\n * De/Serializer for 128-bit signed integers aka `i128` which serializes to a JavaScript\n * _BigNum_ via {@link https://github.com/indutny/bn.js | BN}.\n *\n * @category beet/primitive\n */\n\nexport const i128 = signedLargeBeet(16, 'i128');\n/**\n * De/Serializer for 256-bit signed integers aka `i256` which serializes to a JavaScript\n * _BigNum_ via {@link https://github.com/indutny/bn.js | BN}.\n *\n * @category beet/primitive\n */\n\nexport const i256 = signedLargeBeet(32, 'i256');\n/**\n * De/Serializer for 512-bit signed integers aka `i512` which serializes to a JavaScript\n * _BigNum_ via {@link https://github.com/indutny/bn.js | BN}.\n *\n * @category beet/primitive\n */\n\nexport const i512 = signedLargeBeet(64, 'i512'); // -----------------\n// Boolean\n// -----------------\n\n/**\n * De/Serializer booleans aka `bool`.\n *\n * @category beet/primitive\n */\n\nexport const bool = {\n  write: function (buf, offset, value) {\n    const n = value ? 1 : 0;\n    u8.write(buf, offset, n);\n  },\n  read: function (buf, offset) {\n    return u8.read(buf, offset) === 1;\n  },\n  byteSize: 1,\n  description: 'bool'\n};\n/**\n * Maps primitive beet exports to metadata which describes in which package it\n * is defined as well as which TypeScript type is used to represent the\n * deserialized value in JavaScript.\n *\n * @category TypeDefinition\n */\n// prettier-ignore\n\nexport const numbersTypeMap = {\n  // <= 32-bit numbers and boolean\n  u8: {\n    beet: 'u8',\n    isFixable: false,\n    sourcePack: BEET_PACKAGE,\n    ts: 'number'\n  },\n  u16: {\n    beet: 'u16',\n    isFixable: false,\n    sourcePack: BEET_PACKAGE,\n    ts: 'number'\n  },\n  u32: {\n    beet: 'u32',\n    isFixable: false,\n    sourcePack: BEET_PACKAGE,\n    ts: 'number'\n  },\n  i8: {\n    beet: 'i8',\n    isFixable: false,\n    sourcePack: BEET_PACKAGE,\n    ts: 'number'\n  },\n  i16: {\n    beet: 'i16',\n    isFixable: false,\n    sourcePack: BEET_PACKAGE,\n    ts: 'number'\n  },\n  i32: {\n    beet: 'i32',\n    isFixable: false,\n    sourcePack: BEET_PACKAGE,\n    ts: 'number'\n  },\n  bool: {\n    beet: 'bool',\n    isFixable: false,\n    sourcePack: BEET_PACKAGE,\n    ts: 'boolean'\n  },\n  // Big Number, they use, the 'bignum' type which is defined in this package\n  u64: {\n    beet: 'u64',\n    isFixable: false,\n    sourcePack: BEET_PACKAGE,\n    ts: 'bignum',\n    pack: BEET_PACKAGE\n  },\n  u128: {\n    beet: 'u128',\n    isFixable: false,\n    sourcePack: BEET_PACKAGE,\n    ts: 'bignum',\n    pack: BEET_PACKAGE\n  },\n  u256: {\n    beet: 'u256',\n    isFixable: false,\n    sourcePack: BEET_PACKAGE,\n    ts: 'bignum',\n    pack: BEET_PACKAGE\n  },\n  u512: {\n    beet: 'u512',\n    isFixable: false,\n    sourcePack: BEET_PACKAGE,\n    ts: 'bignum',\n    pack: BEET_PACKAGE\n  },\n  i64: {\n    beet: 'i64',\n    isFixable: false,\n    sourcePack: BEET_PACKAGE,\n    ts: 'bignum',\n    pack: BEET_PACKAGE\n  },\n  i128: {\n    beet: 'i128',\n    isFixable: false,\n    sourcePack: BEET_PACKAGE,\n    ts: 'bignum',\n    pack: BEET_PACKAGE\n  },\n  i256: {\n    beet: 'i256',\n    isFixable: false,\n    sourcePack: BEET_PACKAGE,\n    ts: 'bignum',\n    pack: BEET_PACKAGE\n  },\n  i512: {\n    beet: 'i512',\n    isFixable: false,\n    sourcePack: BEET_PACKAGE,\n    ts: 'bignum',\n    pack: BEET_PACKAGE\n  }\n};","map":{"version":3,"sources":["../../../../src/beets/numbers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import BN from 'bn.js';\nimport { BEET_PACKAGE } from '../types';\n// -----------------\n// Unsigned\n// -----------------\n/**\n * De/Serializer for 8-bit unsigned integers aka `u8`.\n *\n * @category beet/primitive\n */\nexport const u8 = {\n    write: function (buf, offset, value) {\n        buf.writeUInt8(value, offset);\n    },\n    read: function (buf, offset) {\n        return buf.readUInt8(offset);\n    },\n    byteSize: 1,\n    description: 'u8',\n};\n/**\n * De/Serializer 16-bit unsigned integers aka `u16`.\n *\n * @category beet/primitive\n */\nexport const u16 = {\n    write: function (buf, offset, value) {\n        buf.writeUInt16LE(value, offset);\n    },\n    read: function (buf, offset) {\n        return buf.readUInt16LE(offset);\n    },\n    byteSize: 2,\n    description: 'u16',\n};\n/**\n * De/Serializer for 32-bit unsigned integers aka `u32`.\n *\n * @category beet/primitive\n */\nexport const u32 = {\n    write: function (buf, offset, value) {\n        buf.writeUInt32LE(value, offset);\n    },\n    read: function (buf, offset) {\n        return buf.readUInt32LE(offset);\n    },\n    byteSize: 4,\n    description: 'u32',\n};\nfunction unsignedLargeBeet(byteSize, description) {\n    return {\n        write: function (buf, offset, value) {\n            const bn = BN.isBN(value) ? value : new BN(value);\n            const bytesArray = bn.toArray('le', this.byteSize);\n            const bytesArrayBuf = Buffer.from(bytesArray);\n            bytesArrayBuf.copy(buf, offset, 0, this.byteSize);\n        },\n        read: function (buf, offset) {\n            const slice = buf.slice(offset, offset + this.byteSize);\n            return new BN(slice, 'le');\n        },\n        byteSize,\n        description,\n    };\n}\n/**\n * De/Serializer for 64-bit unsigned integers aka `u64` which serializes to a JavaScript\n * _BigNum_ via {@link https://github.com/indutny/bn.js | BN}.\n *\n * @category beet/primitive\n */\nexport const u64 = unsignedLargeBeet(8, 'u64');\n/**\n * De/Serializer for 128-bit unsigned integers aka `u128` which serializes to a JavaScript\n * _BigNum_ via {@link https://github.com/indutny/bn.js | BN}.\n *\n * @category beet/primitive\n */\nexport const u128 = unsignedLargeBeet(16, 'u128');\n/**\n * De/Serializer for 256-bit unsigned integers aka `u256` which serializes to a JavaScript\n * _BigNum_ via {@link https://github.com/indutny/bn.js | BN}.\n *\n * @category beet/primitive\n */\nexport const u256 = unsignedLargeBeet(32, 'u256');\n/**\n * De/Serializer for 512-bit unsigned integers aka `u512` which serializes to a JavaScript\n * _BigNum_ via {@link https://github.com/indutny/bn.js | BN}.\n *\n * @category beet/primitive\n */\nexport const u512 = unsignedLargeBeet(64, 'u512');\n// -----------------\n// Signed\n// -----------------\n/**\n * De/Serializer 8-bit signed integers aka `i8`.\n *\n * @category beet/primitive\n */\nexport const i8 = {\n    write: function (buf, offset, value) {\n        buf.writeInt8(value, offset);\n    },\n    read: function (buf, offset) {\n        return buf.readInt8(offset);\n    },\n    byteSize: 1,\n    description: 'i8',\n};\n/**\n * De/Serializer 16-bit signed integers aka `i16`.\n *\n * @category beet/primitive\n */\nexport const i16 = {\n    write: function (buf, offset, value) {\n        buf.writeInt16LE(value, offset);\n    },\n    read: function (buf, offset) {\n        return buf.readInt16LE(offset);\n    },\n    byteSize: 2,\n    description: 'i16',\n};\n/**\n * De/Serializer 32-bit signed integers aka `i32`.\n *\n * @category beet/primitive\n */\nexport const i32 = {\n    write: function (buf, offset, value) {\n        buf.writeInt32LE(value, offset);\n    },\n    read: function (buf, offset) {\n        return buf.readInt32LE(offset);\n    },\n    byteSize: 4,\n    description: 'i32',\n};\nfunction signedLargeBeet(byteSize, description) {\n    const bitSize = byteSize * 8;\n    return {\n        write: function (buf, offset, value) {\n            const bn = (BN.isBN(value) ? value : new BN(value)).toTwos(bitSize);\n            const bytesArray = bn.toArray('le', this.byteSize);\n            const bytesArrayBuf = Buffer.from(bytesArray);\n            bytesArrayBuf.copy(buf, offset, 0, this.byteSize);\n        },\n        read: function (buf, offset) {\n            const slice = buf.slice(offset, offset + this.byteSize);\n            const x = new BN(slice, 'le');\n            return x.fromTwos(bitSize);\n        },\n        byteSize,\n        description,\n    };\n}\n/**\n * De/Serializer for 64-bit signed integers aka `i64` which serializes to a JavaScript\n * _BigNum_ via {@link https://github.com/indutny/bn.js | BN}.\n *\n * @category beet/primitive\n */\nexport const i64 = signedLargeBeet(8, 'i64');\n/**\n * De/Serializer for 128-bit signed integers aka `i128` which serializes to a JavaScript\n * _BigNum_ via {@link https://github.com/indutny/bn.js | BN}.\n *\n * @category beet/primitive\n */\nexport const i128 = signedLargeBeet(16, 'i128');\n/**\n * De/Serializer for 256-bit signed integers aka `i256` which serializes to a JavaScript\n * _BigNum_ via {@link https://github.com/indutny/bn.js | BN}.\n *\n * @category beet/primitive\n */\nexport const i256 = signedLargeBeet(32, 'i256');\n/**\n * De/Serializer for 512-bit signed integers aka `i512` which serializes to a JavaScript\n * _BigNum_ via {@link https://github.com/indutny/bn.js | BN}.\n *\n * @category beet/primitive\n */\nexport const i512 = signedLargeBeet(64, 'i512');\n// -----------------\n// Boolean\n// -----------------\n/**\n * De/Serializer booleans aka `bool`.\n *\n * @category beet/primitive\n */\nexport const bool = {\n    write: function (buf, offset, value) {\n        const n = value ? 1 : 0;\n        u8.write(buf, offset, n);\n    },\n    read: function (buf, offset) {\n        return u8.read(buf, offset) === 1;\n    },\n    byteSize: 1,\n    description: 'bool',\n};\n/**\n * Maps primitive beet exports to metadata which describes in which package it\n * is defined as well as which TypeScript type is used to represent the\n * deserialized value in JavaScript.\n *\n * @category TypeDefinition\n */\n// prettier-ignore\nexport const numbersTypeMap = {\n    // <= 32-bit numbers and boolean\n    u8: { beet: 'u8', isFixable: false, sourcePack: BEET_PACKAGE, ts: 'number' },\n    u16: { beet: 'u16', isFixable: false, sourcePack: BEET_PACKAGE, ts: 'number' },\n    u32: { beet: 'u32', isFixable: false, sourcePack: BEET_PACKAGE, ts: 'number' },\n    i8: { beet: 'i8', isFixable: false, sourcePack: BEET_PACKAGE, ts: 'number' },\n    i16: { beet: 'i16', isFixable: false, sourcePack: BEET_PACKAGE, ts: 'number' },\n    i32: { beet: 'i32', isFixable: false, sourcePack: BEET_PACKAGE, ts: 'number' },\n    bool: { beet: 'bool', isFixable: false, sourcePack: BEET_PACKAGE, ts: 'boolean' },\n    // Big Number, they use, the 'bignum' type which is defined in this package\n    u64: { beet: 'u64', isFixable: false, sourcePack: BEET_PACKAGE, ts: 'bignum', pack: BEET_PACKAGE },\n    u128: { beet: 'u128', isFixable: false, sourcePack: BEET_PACKAGE, ts: 'bignum', pack: BEET_PACKAGE },\n    u256: { beet: 'u256', isFixable: false, sourcePack: BEET_PACKAGE, ts: 'bignum', pack: BEET_PACKAGE },\n    u512: { beet: 'u512', isFixable: false, sourcePack: BEET_PACKAGE, ts: 'bignum', pack: BEET_PACKAGE },\n    i64: { beet: 'i64', isFixable: false, sourcePack: BEET_PACKAGE, ts: 'bignum', pack: BEET_PACKAGE },\n    i128: { beet: 'i128', isFixable: false, sourcePack: BEET_PACKAGE, ts: 'bignum', pack: BEET_PACKAGE },\n    i256: { beet: 'i256', isFixable: false, sourcePack: BEET_PACKAGE, ts: 'bignum', pack: BEET_PACKAGE },\n    i512: { beet: 'i512', isFixable: false, sourcePack: BEET_PACKAGE, ts: 'bignum', pack: BEET_PACKAGE },\n};\n//# sourceMappingURL=numbers.js.map"]},"metadata":{},"sourceType":"module"}