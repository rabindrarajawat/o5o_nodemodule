{"ast":null,"code":"import { programGateBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport * as beet from '@metaplex-foundation/beet';\nimport { MaximumOfFiveAdditionalProgramsError } from '../errors.mjs';\nconst MAXIMUM_SIZE = 5;\nconst SETTINGS_BYTES = 4 + MAXIMUM_SIZE * 32;\n/** @internal */\n\nconst programGateGuardManifest = {\n  name: 'programGate',\n  settingsBytes: SETTINGS_BYTES,\n  settingsSerializer: {\n    description: programGateBeet.description,\n    serialize: value => {\n      // Maximum of 5 additional programs allowed.\n      if (value.additional.length >= MAXIMUM_SIZE) {\n        throw new MaximumOfFiveAdditionalProgramsError();\n      } // Create buffer with beet.\n\n\n      const fixedBeet = programGateBeet.toFixedFromValue(value);\n      const writer = new beet.BeetWriter(fixedBeet.byteSize);\n      writer.write(fixedBeet, value); // Create 164 byte buffer and fill with previous buffer.\n      // This allows for < 5 additional programs.\n\n      const bufferFullSize = Buffer.alloc(SETTINGS_BYTES);\n      bufferFullSize.fill(writer.buffer);\n      return bufferFullSize;\n    },\n    deserialize: (buffer, offset) => {\n      const fixedBeet = programGateBeet.toFixedFromData(buffer, offset ?? 0);\n      const reader = new beet.BeetReader(buffer, offset ?? 0);\n      const value = reader.read(fixedBeet);\n      return [value, reader.offset];\n    }\n  }\n};\nexport { programGateGuardManifest };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineModule/guards/programGate.ts"],"names":["MAXIMUM_SIZE","SETTINGS_BYTES","programGateGuardManifest","name","settingsBytes","settingsSerializer","description","programGateBeet","serialize","value","additional","length","MaximumOfFiveAdditionalProgramsError","fixedBeet","toFixedFromValue","writer","beet","BeetWriter","byteSize","write","bufferFullSize","Buffer","alloc","fill","buffer","deserialize","offset","toFixedFromData","reader","BeetReader","read"],"mappings":";;;AAgCA,MAAMA,YAAY,GAAG,CAArB;AACA,MAAMC,cAAc,GAAG,IAAID,YAAY,GAAG,EAA1C;AAEA;;AACO,MAAME,wBAAsE,GACjF;EACEC,IAAI,EAAE,aADR;EAEEC,aAAa,EAAEH,cAFjB;EAGEI,kBAAkB,EAAE;IAClBC,WAAW,EAAEC,eAAe,CAACD,WADX;IAElBE,SAAS,EAAGC,KAA+B,IAAK;MAC9C;MACA,IAAIA,KAAK,CAACC,UAAND,CAAiBE,MAAjBF,IAA2BT,YAA/B,EAA6C;QAC3C,MAAM,IAAIY,oCAAJ,EAAN;MACF,CAJ8C,CAM9C;;;MACA,MAAMC,SAAS,GAAGN,eAAe,CAACO,gBAAhBP,CAAiCE,KAAjCF,CAAlB;MACA,MAAMQ,MAAM,GAAG,IAAIC,IAAI,CAACC,UAAT,CAAoBJ,SAAS,CAACK,QAA9B,CAAf;MACAH,MAAM,CAACI,KAAPJ,CAAaF,SAAbE,EAAwBN,KAAxBM,EAT8C,CAW9C;MACA;;MACA,MAAMK,cAAc,GAAGC,MAAM,CAACC,KAAPD,CAAapB,cAAboB,CAAvB;MACAD,cAAc,CAACG,IAAfH,CAAoBL,MAAM,CAACS,MAA3BJ;MAEA,OAAOA,cAAP;IACD,CAnBiB;IAoBlBK,WAAW,EAAE,CAACD,MAAD,EAAiBE,MAAjB,KAAqC;MAChD,MAAMb,SAAS,GAAGN,eAAe,CAACoB,eAAhBpB,CAAgCiB,MAAhCjB,EAAwCmB,MAAM,IAAI,CAAlDnB,CAAlB;MACA,MAAMqB,MAAM,GAAG,IAAIZ,IAAI,CAACa,UAAT,CAAoBL,MAApB,EAA4BE,MAAM,IAAI,CAAtC,CAAf;MACA,MAAMjB,KAAK,GAAGmB,MAAM,CAACE,IAAPF,CAAYf,SAAZe,CAAd;MACA,OAAO,CAACnB,KAAD,EAAQmB,MAAM,CAACF,MAAf,CAAP;IACF;EAzBkB;AAHtB,CADK","sourcesContent":["import { programGateBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport * as beet from '@metaplex-foundation/beet';\nimport { MaximumOfFiveAdditionalProgramsError } from '../errors';\nimport { CandyGuardManifest } from './core';\nimport { PublicKey } from '@/types';\n\n/**\n * The programGate guard restricts the programs that can be invoked within\n * the mint transaction. It allows the necessary programs for the mint\n * instruction to work and any other program specified in the configuration.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n */\nexport type ProgramGateGuardSettings = {\n  /**\n   * An array of additional programs that can be invoked in a mint transaction.\n   *\n   * These programs are in addition to the mandatory programs that\n   * are required for the mint instruction to work. Providing an empty\n   * array is equivalent to only authorising the mandatory programs.\n   *\n   * The mandatory programs are:\n   * - Candy Machine\n   * - System Program\n   * - SPL Token\n   * - SPL ASsociated Token Account\n   */\n  additional: PublicKey[];\n};\n\nconst MAXIMUM_SIZE = 5;\nconst SETTINGS_BYTES = 4 + MAXIMUM_SIZE * 32;\n\n/** @internal */\nexport const programGateGuardManifest: CandyGuardManifest<ProgramGateGuardSettings> =\n  {\n    name: 'programGate',\n    settingsBytes: SETTINGS_BYTES,\n    settingsSerializer: {\n      description: programGateBeet.description,\n      serialize: (value: ProgramGateGuardSettings) => {\n        // Maximum of 5 additional programs allowed.\n        if (value.additional.length >= MAXIMUM_SIZE) {\n          throw new MaximumOfFiveAdditionalProgramsError();\n        }\n\n        // Create buffer with beet.\n        const fixedBeet = programGateBeet.toFixedFromValue(value);\n        const writer = new beet.BeetWriter(fixedBeet.byteSize);\n        writer.write(fixedBeet, value);\n\n        // Create 164 byte buffer and fill with previous buffer.\n        // This allows for < 5 additional programs.\n        const bufferFullSize = Buffer.alloc(SETTINGS_BYTES);\n        bufferFullSize.fill(writer.buffer);\n\n        return bufferFullSize;\n      },\n      deserialize: (buffer: Buffer, offset?: number) => {\n        const fixedBeet = programGateBeet.toFixedFromData(buffer, offset ?? 0);\n        const reader = new beet.BeetReader(buffer, offset ?? 0);\n        const value = reader.read(fixedBeet);\n        return [value, reader.offset];\n      },\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}