{"ast":null,"code":"\"use strict\";\n/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.utils = exports.curve25519 = exports.getSharedSecret = exports.sync = exports.verify = exports.sign = exports.getPublicKey = exports.Signature = exports.Point = exports.RistrettoPoint = exports.ExtendedPoint = exports.CURVE = void 0;\n\nconst nodeCrypto = require(\"crypto\");\n\nconst _0n = BigInt(0);\n\nconst _1n = BigInt(1);\n\nconst _2n = BigInt(2);\n\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n  a: BigInt(-1),\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n  l: CU_O,\n  n: CU_O,\n  h: BigInt(8),\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960')\n});\nexports.CURVE = CURVE;\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n\nclass ExtendedPoint {\n  constructor(x, y, z, t) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.t = t;\n  }\n\n  static fromAffine(p) {\n    if (!(p instanceof Point)) {\n      throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n    }\n\n    if (p.equals(Point.ZERO)) return ExtendedPoint.ZERO;\n    return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n  }\n\n  static toAffineBatch(points) {\n    const toInv = invertBatch(points.map(p => p.z));\n    return points.map((p, i) => p.toAffine(toInv[i]));\n  }\n\n  static normalizeZ(points) {\n    return this.toAffineBatch(points).map(this.fromAffine);\n  }\n\n  equals(other) {\n    assertExtPoint(other);\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1\n    } = this;\n    const {\n      x: X2,\n      y: Y2,\n      z: Z2\n    } = other;\n    const X1Z2 = mod(X1 * Z2);\n    const X2Z1 = mod(X2 * Z1);\n    const Y1Z2 = mod(Y1 * Z2);\n    const Y2Z1 = mod(Y2 * Z1);\n    return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n  }\n\n  negate() {\n    return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n  }\n\n  double() {\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1\n    } = this;\n    const {\n      a\n    } = CURVE;\n    const A = mod(X1 * X1);\n    const B = mod(Y1 * Y1);\n    const C = mod(_2n * mod(Z1 * Z1));\n    const D = mod(a * A);\n    const x1y1 = X1 + Y1;\n    const E = mod(mod(x1y1 * x1y1) - A - B);\n    const G = D + B;\n    const F = G - C;\n    const H = D - B;\n    const X3 = mod(E * F);\n    const Y3 = mod(G * H);\n    const T3 = mod(E * H);\n    const Z3 = mod(F * G);\n    return new ExtendedPoint(X3, Y3, Z3, T3);\n  }\n\n  add(other) {\n    assertExtPoint(other);\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1,\n      t: T1\n    } = this;\n    const {\n      x: X2,\n      y: Y2,\n      z: Z2,\n      t: T2\n    } = other;\n    const A = mod((Y1 - X1) * (Y2 + X2));\n    const B = mod((Y1 + X1) * (Y2 - X2));\n    const F = mod(B - A);\n    if (F === _0n) return this.double();\n    const C = mod(Z1 * _2n * T2);\n    const D = mod(T1 * _2n * Z2);\n    const E = D + C;\n    const G = B + A;\n    const H = D - C;\n    const X3 = mod(E * F);\n    const Y3 = mod(G * H);\n    const T3 = mod(E * H);\n    const Z3 = mod(F * G);\n    return new ExtendedPoint(X3, Y3, Z3, T3);\n  }\n\n  subtract(other) {\n    return this.add(other.negate());\n  }\n\n  precomputeWindow(W) {\n    const windows = 1 + 256 / W;\n    const points = [];\n    let p = this;\n    let base = p;\n\n    for (let window = 0; window < windows; window++) {\n      base = p;\n      points.push(base);\n\n      for (let i = 1; i < 2 ** (W - 1); i++) {\n        base = base.add(p);\n        points.push(base);\n      }\n\n      p = base.double();\n    }\n\n    return points;\n  }\n\n  wNAF(n, affinePoint) {\n    if (!affinePoint && this.equals(ExtendedPoint.BASE)) affinePoint = Point.BASE;\n    const W = affinePoint && affinePoint._WINDOW_SIZE || 1;\n\n    if (256 % W) {\n      throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n    }\n\n    let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n\n    if (!precomputes) {\n      precomputes = this.precomputeWindow(W);\n\n      if (affinePoint && W !== 1) {\n        precomputes = ExtendedPoint.normalizeZ(precomputes);\n        pointPrecomputes.set(affinePoint, precomputes);\n      }\n    }\n\n    let p = ExtendedPoint.ZERO;\n    let f = ExtendedPoint.ZERO;\n    const windows = 1 + 256 / W;\n    const windowSize = 2 ** (W - 1);\n    const mask = BigInt(2 ** W - 1);\n    const maxNumber = 2 ** W;\n    const shiftBy = BigInt(W);\n\n    for (let window = 0; window < windows; window++) {\n      const offset = window * windowSize;\n      let wbits = Number(n & mask);\n      n >>= shiftBy;\n\n      if (wbits > windowSize) {\n        wbits -= maxNumber;\n        n += _1n;\n      }\n\n      if (wbits === 0) {\n        let pr = precomputes[offset];\n        if (window % 2) pr = pr.negate();\n        f = f.add(pr);\n      } else {\n        let cached = precomputes[offset + Math.abs(wbits) - 1];\n        if (wbits < 0) cached = cached.negate();\n        p = p.add(cached);\n      }\n    }\n\n    return ExtendedPoint.normalizeZ([p, f])[0];\n  }\n\n  multiply(scalar, affinePoint) {\n    return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n  }\n\n  multiplyUnsafe(scalar) {\n    let n = normalizeScalar(scalar, CURVE.l, false);\n    const G = ExtendedPoint.BASE;\n    const P0 = ExtendedPoint.ZERO;\n    if (n === _0n) return P0;\n    if (this.equals(P0) || n === _1n) return this;\n    if (this.equals(G)) return this.wNAF(n);\n    let p = P0;\n    let d = this;\n\n    while (n > _0n) {\n      if (n & _1n) p = p.add(d);\n      d = d.double();\n      n >>= _1n;\n    }\n\n    return p;\n  }\n\n  isSmallOrder() {\n    return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n  }\n\n  isTorsionFree() {\n    return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n  }\n\n  toAffine() {\n    let invZ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : invert(this.z);\n    const {\n      x,\n      y,\n      z\n    } = this;\n    const ax = mod(x * invZ);\n    const ay = mod(y * invZ);\n    const zz = mod(z * invZ);\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return new Point(ax, ay);\n  }\n\n  fromRistrettoBytes() {\n    legacyRist();\n  }\n\n  toRistrettoBytes() {\n    legacyRist();\n  }\n\n  fromRistrettoHash() {\n    legacyRist();\n  }\n\n}\n\nexports.ExtendedPoint = ExtendedPoint;\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\n\nfunction assertExtPoint(other) {\n  if (!(other instanceof ExtendedPoint)) throw new TypeError('ExtendedPoint expected');\n}\n\nfunction assertRstPoint(other) {\n  if (!(other instanceof RistrettoPoint)) throw new TypeError('RistrettoPoint expected');\n}\n\nfunction legacyRist() {\n  throw new Error('Legacy method: switch to RistrettoPoint');\n}\n\nclass RistrettoPoint {\n  constructor(ep) {\n    this.ep = ep;\n  }\n\n  static calcElligatorRistrettoMap(r0) {\n    const {\n      d\n    } = CURVE;\n    const r = mod(SQRT_M1 * r0 * r0);\n    const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n    let c = BigInt(-1);\n    const D = mod((c - d * r) * mod(r + d));\n    let {\n      isValid: Ns_D_is_sq,\n      value: s\n    } = uvRatio(Ns, D);\n    let s_ = mod(s * r0);\n    if (!edIsNegative(s_)) s_ = mod(-s_);\n    if (!Ns_D_is_sq) s = s_;\n    if (!Ns_D_is_sq) c = r;\n    const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n    const s2 = s * s;\n    const W0 = mod((s + s) * D);\n    const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n    const W2 = mod(_1n - s2);\n    const W3 = mod(_1n + s2);\n    return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n  }\n\n  static hashToCurve(hex) {\n    hex = ensureBytes(hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = this.calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = this.calcElligatorRistrettoMap(r2);\n    return new RistrettoPoint(R1.add(R2));\n  }\n\n  static fromHex(hex) {\n    hex = ensureBytes(hex, 32);\n    const {\n      a,\n      d\n    } = CURVE;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2);\n    const u2 = mod(_1n - a * s2);\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2);\n    const {\n      isValid,\n      value: I\n    } = invertSqrt(mod(v * u2_2));\n    const Dx = mod(I * u2);\n    const Dy = mod(I * Dx * v);\n    let x = mod((s + s) * Dx);\n    if (edIsNegative(x)) x = mod(-x);\n    const y = mod(u1 * Dy);\n    const t = mod(x * y);\n    if (!isValid || edIsNegative(t) || y === _0n) throw new Error(emsg);\n    return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n  }\n\n  toRawBytes() {\n    let {\n      x,\n      y,\n      z,\n      t\n    } = this.ep;\n    const u1 = mod(mod(z + y) * mod(z - y));\n    const u2 = mod(x * y);\n    const u2sq = mod(u2 * u2);\n    const {\n      value: invsqrt\n    } = invertSqrt(mod(u1 * u2sq));\n    const D1 = mod(invsqrt * u1);\n    const D2 = mod(invsqrt * u2);\n    const zInv = mod(D1 * D2 * t);\n    let D;\n\n    if (edIsNegative(t * zInv)) {\n      let _x = mod(y * SQRT_M1);\n\n      let _y = mod(x * SQRT_M1);\n\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2;\n    }\n\n    if (edIsNegative(x * zInv)) y = mod(-y);\n    let s = mod((z - y) * D);\n    if (edIsNegative(s)) s = mod(-s);\n    return numberTo32BytesLE(s);\n  }\n\n  toHex() {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString() {\n    return this.toHex();\n  }\n\n  equals(other) {\n    assertRstPoint(other);\n    const a = this.ep;\n    const b = other.ep;\n    const one = mod(a.x * b.y) === mod(a.y * b.x);\n    const two = mod(a.y * b.y) === mod(a.x * b.x);\n    return one || two;\n  }\n\n  add(other) {\n    assertRstPoint(other);\n    return new RistrettoPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other) {\n    assertRstPoint(other);\n    return new RistrettoPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar) {\n    return new RistrettoPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar) {\n    return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n  }\n\n}\n\nexports.RistrettoPoint = RistrettoPoint;\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\n\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  _setWindowSize(windowSize) {\n    this._WINDOW_SIZE = windowSize;\n    pointPrecomputes.delete(this);\n  }\n\n  static fromHex(hex) {\n    let strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const {\n      d,\n      P\n    } = CURVE;\n    hex = ensureBytes(hex, 32);\n    const normed = hex.slice();\n    normed[31] = hex[31] & ~0x80;\n    const y = bytesToNumberLE(normed);\n    if (strict && y >= P) throw new Error('Expected 0 < hex < P');\n    if (!strict && y >= POW_2_256) throw new Error('Expected 0 < hex < 2**256');\n    const y2 = mod(y * y);\n    const u = mod(y2 - _1n);\n    const v = mod(d * y2 + _1n);\n    let {\n      isValid,\n      value: x\n    } = uvRatio(u, v);\n    if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n    const isXOdd = (x & _1n) === _1n;\n    const isLastByteOdd = (hex[31] & 0x80) !== 0;\n\n    if (isLastByteOdd !== isXOdd) {\n      x = mod(-x);\n    }\n\n    return new Point(x, y);\n  }\n\n  static async fromPrivateKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).point;\n  }\n\n  toRawBytes() {\n    const bytes = numberTo32BytesLE(this.y);\n    bytes[31] |= this.x & _1n ? 0x80 : 0;\n    return bytes;\n  }\n\n  toHex() {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toX25519() {\n    const {\n      y\n    } = this;\n    const u = mod((_1n + y) * invert(_1n - y));\n    return numberTo32BytesLE(u);\n  }\n\n  isTorsionFree() {\n    return ExtendedPoint.fromAffine(this).isTorsionFree();\n  }\n\n  equals(other) {\n    return this.x === other.x && this.y === other.y;\n  }\n\n  negate() {\n    return new Point(mod(-this.x), this.y);\n  }\n\n  add(other) {\n    return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n  }\n\n  subtract(other) {\n    return this.add(other.negate());\n  }\n\n  multiply(scalar) {\n    return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n  }\n\n}\n\nexports.Point = Point;\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\n\nclass Signature {\n  constructor(r, s) {\n    this.r = r;\n    this.s = s;\n    this.assertValidity();\n  }\n\n  static fromHex(hex) {\n    const bytes = ensureBytes(hex, 64);\n    const r = Point.fromHex(bytes.slice(0, 32), false);\n    const s = bytesToNumberLE(bytes.slice(32, 64));\n    return new Signature(r, s);\n  }\n\n  assertValidity() {\n    const {\n      r,\n      s\n    } = this;\n    if (!(r instanceof Point)) throw new Error('Expected Point instance');\n    normalizeScalar(s, CURVE.l, false);\n    return this;\n  }\n\n  toRawBytes() {\n    const u8 = new Uint8Array(64);\n    u8.set(this.r.toRawBytes());\n    u8.set(numberTo32BytesLE(this.s), 32);\n    return u8;\n  }\n\n  toHex() {\n    return bytesToHex(this.toRawBytes());\n  }\n\n}\n\nexports.Signature = Signature;\n\nfunction concatBytes() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n\n  if (!arrays.every(a => a instanceof Uint8Array)) throw new Error('Expected Uint8Array list');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n\n  return result;\n}\n\nconst hexes = Array.from({\n  length: 256\n}, (v, i) => i.toString(16).padStart(2, '0'));\n\nfunction bytesToHex(uint8a) {\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  let hex = '';\n\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n\n  return hex;\n}\n\nfunction hexToBytes(hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  const array = new Uint8Array(hex.length / 2);\n\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n\n  return array;\n}\n\nfunction numberTo32BytesBE(num) {\n  const length = 32;\n  const hex = num.toString(16).padStart(length * 2, '0');\n  return hexToBytes(hex);\n}\n\nfunction numberTo32BytesLE(num) {\n  return numberTo32BytesBE(num).reverse();\n}\n\nfunction edIsNegative(num) {\n  return (mod(num) & _1n) === _1n;\n}\n\nfunction bytesToNumberLE(uint8a) {\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\n\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n\nfunction bytes255ToNumberLE(bytes) {\n  return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\n\nfunction mod(a) {\n  let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  const res = a % b;\n  return res >= _0n ? res : b + res;\n}\n\nfunction invert(number) {\n  let modulo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n\n  let a = mod(number, modulo);\n  let b = modulo;\n  let x = _0n,\n      y = _1n,\n      u = _1n,\n      v = _0n;\n\n  while (a !== _0n) {\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\nfunction invertBatch(nums) {\n  let p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  const tmp = new Array(nums.length);\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (num === _0n) return acc;\n    tmp[i] = acc;\n    return mod(acc * num, p);\n  }, _1n);\n  const inverted = invert(lastMultiplied, p);\n  nums.reduceRight((acc, num, i) => {\n    if (num === _0n) return acc;\n    tmp[i] = mod(acc * tmp[i], p);\n    return mod(acc * num, p);\n  }, inverted);\n  return tmp;\n}\n\nfunction pow2(x, power) {\n  const {\n    P\n  } = CURVE;\n  let res = x;\n\n  while (power-- > _0n) {\n    res *= res;\n    res %= P;\n  }\n\n  return res;\n}\n\nfunction pow_2_252_3(x) {\n  const {\n    P\n  } = CURVE;\n\n  const _5n = BigInt(5);\n\n  const _10n = BigInt(10);\n\n  const _20n = BigInt(20);\n\n  const _40n = BigInt(40);\n\n  const _80n = BigInt(80);\n\n  const x2 = x * x % P;\n  const b2 = x2 * x % P;\n  const b4 = pow2(b2, _2n) * b2 % P;\n  const b5 = pow2(b4, _1n) * x % P;\n  const b10 = pow2(b5, _5n) * b5 % P;\n  const b20 = pow2(b10, _10n) * b10 % P;\n  const b40 = pow2(b20, _20n) * b20 % P;\n  const b80 = pow2(b40, _40n) * b40 % P;\n  const b160 = pow2(b80, _80n) * b80 % P;\n  const b240 = pow2(b160, _80n) * b80 % P;\n  const b250 = pow2(b240, _10n) * b10 % P;\n  const pow_p_5_8 = pow2(b250, _2n) * x % P;\n  return {\n    pow_p_5_8,\n    b2\n  };\n}\n\nfunction uvRatio(u, v) {\n  const v3 = mod(v * v * v);\n  const v7 = mod(v3 * v3 * v);\n  const pow = pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow);\n  const vx2 = mod(v * x * x);\n  const root1 = x;\n  const root2 = mod(x * SQRT_M1);\n  const useRoot1 = vx2 === u;\n  const useRoot2 = vx2 === mod(-u);\n  const noRoot = vx2 === mod(-u * SQRT_M1);\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2;\n  if (edIsNegative(x)) x = mod(-x);\n  return {\n    isValid: useRoot1 || useRoot2,\n    value: x\n  };\n}\n\nfunction invertSqrt(number) {\n  return uvRatio(_1n, number);\n}\n\nfunction modlLE(hash) {\n  return mod(bytesToNumberLE(hash), CURVE.l);\n}\n\nfunction equalBytes(b1, b2) {\n  if (b1.length !== b2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < b1.length; i++) {\n    if (b1[i] !== b2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction ensureBytes(hex, expectedLength) {\n  const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n  if (typeof expectedLength === 'number' && bytes.length !== expectedLength) throw new Error(`Expected ${expectedLength} bytes`);\n  return bytes;\n}\n\nfunction normalizeScalar(num, max) {\n  let strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (!max) throw new TypeError('Specify max value');\n  if (typeof num === 'number' && Number.isSafeInteger(num)) num = BigInt(num);\n\n  if (typeof num === 'bigint' && num < max) {\n    if (strict) {\n      if (_0n < num) return num;\n    } else {\n      if (_0n <= num) return num;\n    }\n  }\n\n  throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\n\nfunction adjustBytes25519(bytes) {\n  bytes[0] &= 248;\n  bytes[31] &= 127;\n  bytes[31] |= 64;\n  return bytes;\n}\n\nfunction decodeScalar25519(n) {\n  return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\n\nfunction checkPrivateKey(key) {\n  key = typeof key === 'bigint' || typeof key === 'number' ? numberTo32BytesBE(normalizeScalar(key, POW_2_256)) : ensureBytes(key);\n  if (key.length !== 32) throw new Error(`Expected 32 bytes`);\n  return key;\n}\n\nfunction getKeyFromHash(hashed) {\n  const head = adjustBytes25519(hashed.slice(0, 32));\n  const prefix = hashed.slice(32, 64);\n  const scalar = modlLE(head);\n  const point = Point.BASE.multiply(scalar);\n  const pointBytes = point.toRawBytes();\n  return {\n    head,\n    prefix,\n    scalar,\n    point,\n    pointBytes\n  };\n}\n\nlet _sha512Sync;\n\nfunction sha512s() {\n  if (typeof _sha512Sync !== 'function') throw new Error('utils.sha512Sync must be set to use sync methods');\n  return _sha512Sync(...arguments);\n}\n\nasync function getExtendedPublicKey(key) {\n  return getKeyFromHash(await exports.utils.sha512(checkPrivateKey(key)));\n}\n\nfunction getExtendedPublicKeySync(key) {\n  return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\n\nasync function getPublicKey(privateKey) {\n  return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\n\nexports.getPublicKey = getPublicKey;\n\nfunction getPublicKeySync(privateKey) {\n  return getExtendedPublicKeySync(privateKey).pointBytes;\n}\n\nasync function sign(message, privateKey) {\n  message = ensureBytes(message);\n  const {\n    prefix,\n    scalar,\n    pointBytes\n  } = await getExtendedPublicKey(privateKey);\n  const r = modlLE(await exports.utils.sha512(prefix, message));\n  const R = Point.BASE.multiply(r);\n  const k = modlLE(await exports.utils.sha512(R.toRawBytes(), pointBytes, message));\n  const s = mod(r + k * scalar, CURVE.l);\n  return new Signature(R, s).toRawBytes();\n}\n\nexports.sign = sign;\n\nfunction signSync(message, privateKey) {\n  message = ensureBytes(message);\n  const {\n    prefix,\n    scalar,\n    pointBytes\n  } = getExtendedPublicKeySync(privateKey);\n  const r = modlLE(sha512s(prefix, message));\n  const R = Point.BASE.multiply(r);\n  const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n  const s = mod(r + k * scalar, CURVE.l);\n  return new Signature(R, s).toRawBytes();\n}\n\nfunction prepareVerification(sig, message, publicKey) {\n  message = ensureBytes(message);\n  if (!(publicKey instanceof Point)) publicKey = Point.fromHex(publicKey, false);\n  const {\n    r,\n    s\n  } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n  const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n  return {\n    r,\n    s,\n    SB,\n    pub: publicKey,\n    msg: message\n  };\n}\n\nfunction finishVerification(publicKey, r, SB, hashed) {\n  const k = modlLE(hashed);\n  const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n  const RkA = ExtendedPoint.fromAffine(r).add(kA);\n  return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\n\nasync function verify(sig, message, publicKey) {\n  const {\n    r,\n    SB,\n    msg,\n    pub\n  } = prepareVerification(sig, message, publicKey);\n  const hashed = await exports.utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n  return finishVerification(pub, r, SB, hashed);\n}\n\nexports.verify = verify;\n\nfunction verifySync(sig, message, publicKey) {\n  const {\n    r,\n    SB,\n    msg,\n    pub\n  } = prepareVerification(sig, message, publicKey);\n  const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n  return finishVerification(pub, r, SB, hashed);\n}\n\nexports.sync = {\n  getExtendedPublicKey: getExtendedPublicKeySync,\n  getPublicKey: getPublicKeySync,\n  sign: signSync,\n  verify: verifySync\n};\n\nasync function getSharedSecret(privateKey, publicKey) {\n  const {\n    head\n  } = await getExtendedPublicKey(privateKey);\n  const u = Point.fromHex(publicKey).toX25519();\n  return exports.curve25519.scalarMult(head, u);\n}\n\nexports.getSharedSecret = getSharedSecret;\n\nPoint.BASE._setWindowSize(8);\n\nfunction cswap(swap, x_2, x_3) {\n  const dummy = mod(swap * (x_2 - x_3));\n  x_2 = mod(x_2 - dummy);\n  x_3 = mod(x_3 + dummy);\n  return [x_2, x_3];\n}\n\nfunction montgomeryLadder(pointU, scalar) {\n  const {\n    P\n  } = CURVE;\n  const u = normalizeScalar(pointU, P);\n  const k = normalizeScalar(scalar, P);\n  const a24 = BigInt(121665);\n  const x_1 = u;\n  let x_2 = _1n;\n  let z_2 = _0n;\n  let x_3 = u;\n  let z_3 = _1n;\n  let swap = _0n;\n  let sw;\n\n  for (let t = BigInt(255 - 1); t >= _0n; t--) {\n    const k_t = k >> t & _1n;\n    swap ^= k_t;\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    swap = k_t;\n    const A = x_2 + z_2;\n    const AA = mod(A * A);\n    const B = x_2 - z_2;\n    const BB = mod(B * B);\n    const E = AA - BB;\n    const C = x_3 + z_3;\n    const D = x_3 - z_3;\n    const DA = mod(D * A);\n    const CB = mod(C * B);\n    const dacb = DA + CB;\n    const da_cb = DA - CB;\n    x_3 = mod(dacb * dacb);\n    z_3 = mod(x_1 * mod(da_cb * da_cb));\n    x_2 = mod(AA * BB);\n    z_2 = mod(E * (AA + mod(a24 * E)));\n  }\n\n  sw = cswap(swap, x_2, x_3);\n  x_2 = sw[0];\n  x_3 = sw[1];\n  sw = cswap(swap, z_2, z_3);\n  z_2 = sw[0];\n  z_3 = sw[1];\n  const {\n    pow_p_5_8,\n    b2\n  } = pow_2_252_3(z_2);\n  const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n  return mod(x_2 * xp2);\n}\n\nfunction encodeUCoordinate(u) {\n  return numberTo32BytesLE(mod(u, CURVE.P));\n}\n\nfunction decodeUCoordinate(uEnc) {\n  const u = ensureBytes(uEnc, 32);\n  u[31] &= 127;\n  return bytesToNumberLE(u);\n}\n\nexports.curve25519 = {\n  BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n\n  scalarMult(privateKey, publicKey) {\n    const u = decodeUCoordinate(publicKey);\n    const p = decodeScalar25519(privateKey);\n    const pu = montgomeryLadder(u, p);\n    if (pu === _0n) throw new Error('Invalid private or public key received');\n    return encodeUCoordinate(pu);\n  },\n\n  scalarMultBase(privateKey) {\n    return exports.curve25519.scalarMult(privateKey, exports.curve25519.BASE_POINT_U);\n  }\n\n};\nconst crypto = {\n  node: nodeCrypto,\n  web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined\n};\nexports.utils = {\n  bytesToHex,\n  hexToBytes,\n  concatBytes,\n  getExtendedPublicKey,\n  mod,\n  invert,\n  TORSION_SUBGROUP: ['0100000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a', '0000000000000000000000000000000000000000000000000000000000000080', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05', 'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85', '0000000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa'],\n  hashToPrivateScalar: hash => {\n    hash = ensureBytes(hash);\n    if (hash.length < 40 || hash.length > 1024) throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n    return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n  },\n  randomBytes: function () {\n    let bytesLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;\n\n    if (crypto.web) {\n      return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    } else if (crypto.node) {\n      const {\n        randomBytes\n      } = crypto.node;\n      return new Uint8Array(randomBytes(bytesLength).buffer);\n    } else {\n      throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n  },\n  randomPrivateKey: () => {\n    return exports.utils.randomBytes(32);\n  },\n  sha512: async function () {\n    const message = concatBytes(...arguments);\n\n    if (crypto.web) {\n      const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n      return new Uint8Array(buffer);\n    } else if (crypto.node) {\n      return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n    } else {\n      throw new Error(\"The environment doesn't have sha512 function\");\n    }\n  },\n\n  precompute() {\n    let windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n    let point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;\n    const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n\n    cached._setWindowSize(windowSize);\n\n    cached.multiply(_2n);\n    return cached;\n  },\n\n  sha512Sync: undefined\n};\nObject.defineProperties(exports.utils, {\n  sha512Sync: {\n    configurable: false,\n\n    get() {\n      return _sha512Sync;\n    },\n\n    set(val) {\n      if (!_sha512Sync) _sha512Sync = val;\n    }\n\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","utils","curve25519","getSharedSecret","sync","verify","sign","getPublicKey","Signature","Point","RistrettoPoint","ExtendedPoint","CURVE","nodeCrypto","require","_0n","BigInt","_1n","_2n","CU_O","freeze","a","d","P","l","n","h","Gx","Gy","POW_2_256","SQRT_M1","SQRT_D","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","constructor","x","y","z","t","fromAffine","p","TypeError","equals","ZERO","mod","toAffineBatch","points","toInv","invertBatch","map","i","toAffine","normalizeZ","other","assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","X2Z1","Y1Z2","Y2Z1","negate","double","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","add","T1","T2","subtract","precomputeWindow","W","windows","base","window","push","wNAF","affinePoint","BASE","_WINDOW_SIZE","Error","precomputes","pointPrecomputes","get","set","f","windowSize","mask","maxNumber","shiftBy","offset","wbits","Number","pr","cached","Math","abs","multiply","scalar","normalizeScalar","multiplyUnsafe","P0","isSmallOrder","isTorsionFree","invZ","invert","ax","ay","zz","fromRistrettoBytes","legacyRist","toRistrettoBytes","fromRistrettoHash","assertRstPoint","ep","calcElligatorRistrettoMap","r0","r","Ns","c","isValid","Ns_D_is_sq","s","uvRatio","s_","edIsNegative","Nt","s2","W0","W1","W2","W3","hashToCurve","hex","ensureBytes","r1","bytes255ToNumberLE","slice","R1","r2","R2","fromHex","emsg","equalBytes","numberTo32BytesLE","u1","u2","u1_2","u2_2","v","I","invertSqrt","Dx","Dy","toRawBytes","u2sq","invsqrt","D1","D2","zInv","_x","_y","toHex","bytesToHex","toString","b","one","two","WeakMap","_setWindowSize","delete","strict","normed","bytesToNumberLE","y2","u","isXOdd","isLastByteOdd","fromPrivateKey","privateKey","getExtendedPublicKey","point","bytes","toX25519","assertValidity","u8","Uint8Array","concatBytes","arrays","every","length","reduce","arr","result","pad","hexes","Array","from","padStart","uint8a","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","numberTo32BytesBE","num","reverse","MAX_255B","res","number","modulo","q","m","gcd","nums","tmp","lastMultiplied","acc","inverted","reduceRight","pow2","power","pow_2_252_3","_5n","_10n","_20n","_40n","_80n","x2","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","pow","vx2","root1","root2","useRoot1","useRoot2","noRoot","modlLE","hash","b1","expectedLength","max","isSafeInteger","adjustBytes25519","decodeScalar25519","checkPrivateKey","key","getKeyFromHash","hashed","head","prefix","pointBytes","_sha512Sync","sha512s","sha512","getExtendedPublicKeySync","getPublicKeySync","message","R","k","signSync","prepareVerification","sig","publicKey","SB","pub","msg","finishVerification","kA","RkA","verifySync","scalarMult","cswap","swap","x_2","x_3","dummy","montgomeryLadder","pointU","a24","x_1","z_2","z_3","sw","k_t","AA","BB","DA","CB","dacb","da_cb","xp2","encodeUCoordinate","decodeUCoordinate","uEnc","BASE_POINT_U","pu","scalarMultBase","crypto","node","web","self","undefined","TORSION_SUBGROUP","hashToPrivateScalar","randomBytes","bytesLength","getRandomValues","buffer","randomPrivateKey","subtle","digest","createHash","update","precompute","sha512Sync","defineProperties","configurable","val"],"sources":["D:/software/o5o BNB/o5o-staking-frontend/node_modules/@noble/ed25519/lib/index.js"],"sourcesContent":["\"use strict\";\n/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.utils = exports.curve25519 = exports.getSharedSecret = exports.sync = exports.verify = exports.sign = exports.getPublicKey = exports.Signature = exports.Point = exports.RistrettoPoint = exports.ExtendedPoint = exports.CURVE = void 0;\nconst nodeCrypto = require(\"crypto\");\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexports.CURVE = CURVE;\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.ZERO;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nexports.ExtendedPoint = ExtendedPoint;\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nexports.RistrettoPoint = RistrettoPoint;\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nexports.Point = Point;\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexports.Signature = Signature;\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await exports.utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nasync function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nexports.getPublicKey = getPublicKey;\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nasync function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await exports.utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await exports.utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nexports.sign = sign;\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nasync function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await exports.utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexports.verify = verify;\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexports.sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nasync function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return exports.curve25519.scalarMult(head, u);\n}\nexports.getSharedSecret = getSharedSecret;\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexports.curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return exports.curve25519.scalarMult(privateKey, exports.curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexports.utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return exports.utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(exports.utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}