{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createInitializeNonTransferableMintInstruction = exports.initializeNonTransferableMintInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/** The struct that represents the instruction data as it is read by the program */\n\n\nexports.initializeNonTransferableMintInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct an InitializeNonTransferableMint instruction\n *\n * @param mint           Mint Account to make non-transferable\n * @param programId         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createInitializeNonTransferableMintInstruction(mint, programId) {\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(exports.initializeNonTransferableMintInstructionData.span);\n  exports.initializeNonTransferableMintInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InitializeNonTransferableMint\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createInitializeNonTransferableMintInstruction = createInitializeNonTransferableMintInstruction;","map":{"version":3,"sources":["../../../src/instructions/initializeNonTransferableMint.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAOA;;;AACa,OAAA,CAAA,4CAAA,GAA+C,CAAA,GAAA,eAAA,CAAA,MAAA,EAAqD,CAC7G,CAAA,GAAA,eAAA,CAAA,EAAA,EAAG,aAAH,CAD6G,CAArD,CAA/C;AAIb;;;;;;;AAOG;;AACH,SAAgB,8CAAhB,CACI,IADJ,EAEI,SAFJ,EAEwB;EAEpB,IAAI,CAAC,CAAA,GAAA,cAAA,CAAA,yBAAA,EAA0B,SAA1B,CAAL,EAA2C;IACvC,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN;EACH;;EACD,MAAM,IAAI,GAAG,CAAC;IAAE,MAAM,EAAE,IAAV;IAAgB,QAAQ,EAAE,KAA1B;IAAiC,UAAU,EAAE;EAA7C,CAAD,CAAb;EAEA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,OAAA,CAAA,4CAAA,CAA6C,IAA1D,CAAb;EACA,OAAA,CAAA,4CAAA,CAA6C,MAA7C,CACI;IACI,WAAW,EAAE,UAAA,CAAA,gBAAA,CAAiB;EADlC,CADJ,EAII,IAJJ;EAOA,OAAO,IAAI,SAAA,CAAA,sBAAJ,CAA2B;IAAE,IAAF;IAAQ,SAAR;IAAmB;EAAnB,CAA3B,CAAP;AACH;;AAlBD,OAAA,CAAA,8CAAA,GAAA,8CAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createInitializeNonTransferableMintInstruction = exports.initializeNonTransferableMintInstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst types_js_1 = require(\"./types.js\");\n/** The struct that represents the instruction data as it is read by the program */\nexports.initializeNonTransferableMintInstructionData = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('instruction'),\n]);\n/**\n * Construct an InitializeNonTransferableMint instruction\n *\n * @param mint           Mint Account to make non-transferable\n * @param programId         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeNonTransferableMintInstruction(mint, programId) {\n    if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n        throw new errors_js_1.TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(exports.initializeNonTransferableMintInstructionData.span);\n    exports.initializeNonTransferableMintInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.InitializeNonTransferableMint,\n    }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createInitializeNonTransferableMintInstruction = createInitializeNonTransferableMintInstruction;\n//# sourceMappingURL=initializeNonTransferableMint.js.map"]},"metadata":{},"sourceType":"script"}