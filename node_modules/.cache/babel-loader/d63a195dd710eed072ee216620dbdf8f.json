{"ast":null,"code":"import { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createInitializeMintInstruction } from '../../instructions/initializeMint.js';\nimport { ExtensionType, getMintLen } from '../extensionType.js';\nimport { createInitializeInterestBearingMintInstruction, createUpdateRateInterestBearingMintInstruction } from './instructions.js';\n/**\n * Initialize an interest bearing account on a mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Public key of the mint\n */\n\nexport async function createInterestBearingMint(connection, payer, mintAuthority, freezeAuthority, rateAuthority, rate, decimals) {\n  let keypair = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : Keypair.generate();\n  let confirmOptions = arguments.length > 8 ? arguments[8] : undefined;\n  let programId = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : TOKEN_2022_PROGRAM_ID;\n  const mintLen = getMintLen([ExtensionType.InterestBearingMint]);\n  const lamports = await connection.getMinimumBalanceForRentExemption(mintLen);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: mintLen,\n    lamports,\n    programId\n  }), createInitializeInterestBearingMintInstruction(keypair.publicKey, rateAuthority, rate, programId), createInitializeMintInstruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}\n/**\n * Update the interest rate of an interest bearing account\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mint            Public key of the mint\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param multiSigners    Signing accounts if `owner` is a multisig\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function updateRateInterestBearingMint(connection, payer, mint, rateAuthority, rate) {\n  let multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  let confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : TOKEN_2022_PROGRAM_ID;\n  const [rateAuthorityPublicKey, signers] = getSigners(rateAuthority, multiSigners);\n  const transaction = new Transaction().add(createUpdateRateInterestBearingMintInstruction(mint, rateAuthorityPublicKey, rate, signers, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, rateAuthority, ...signers], confirmOptions);\n}","map":{"version":3,"sources":["../../../../src/extensions/interestBearingMint/actions.ts"],"names":[],"mappings":"AACA,SAAS,OAAT,EAAkB,yBAAlB,EAA6C,aAA7C,EAA4D,WAA5D,QAA+E,iBAA/E;AACA,SAAS,UAAT,QAA2B,2BAA3B;AACA,SAAS,qBAAT,QAAsC,oBAAtC;AACA,SAAS,+BAAT,QAAgD,sCAAhD;AACA,SAAS,aAAT,EAAwB,UAAxB,QAA0C,qBAA1C;AACA,SACI,8CADJ,EAEI,8CAFJ,QAGO,mBAHP;AAKA;;;;;;;;;;;;;;;AAeG;;AACH,OAAO,eAAe,yBAAf,CACH,UADG,EAEH,KAFG,EAGH,aAHG,EAIH,eAJG,EAKH,aALG,EAMH,IANG,EAOH,QAPG,EAU8B;EAAA,IAFjC,OAEiC,uEAFvB,OAAO,CAAC,QAAR,EAEuB;EAAA,IADjC,cACiC;EAAA,IAAjC,SAAiC,uEAArB,qBAAqB;EAEjC,MAAM,OAAO,GAAG,UAAU,CAAC,CAAC,aAAa,CAAC,mBAAf,CAAD,CAA1B;EACA,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,iCAAX,CAA6C,OAA7C,CAAvB;EACA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,aAAa,CAAC,aAAd,CAA4B;IACxB,UAAU,EAAE,KAAK,CAAC,SADM;IAExB,gBAAgB,EAAE,OAAO,CAAC,SAFF;IAGxB,KAAK,EAAE,OAHiB;IAIxB,QAJwB;IAKxB;EALwB,CAA5B,CADgB,EAQhB,8CAA8C,CAAC,OAAO,CAAC,SAAT,EAAoB,aAApB,EAAmC,IAAnC,EAAyC,SAAzC,CAR9B,EAShB,+BAA+B,CAAC,OAAO,CAAC,SAAT,EAAoB,QAApB,EAA8B,aAA9B,EAA6C,eAA7C,EAA8D,SAA9D,CATf,CAApB;EAWA,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,EAAQ,OAAR,CAA1B,EAA4C,cAA5C,CAA/B;EACA,OAAO,OAAO,CAAC,SAAf;AACH;AAED;;;;;;;;;;;;;AAaG;;AACH,OAAO,eAAe,6BAAf,CACH,UADG,EAEH,KAFG,EAGH,IAHG,EAIH,aAJG,EAKH,IALG,EAQ8B;EAAA,IAFjC,YAEiC,uEAFR,EAEQ;EAAA,IADjC,cACiC;EAAA,IAAjC,SAAiC,uEAArB,qBAAqB;EAEjC,MAAM,CAAC,sBAAD,EAAyB,OAAzB,IAAoC,UAAU,CAAC,aAAD,EAAgB,YAAhB,CAApD;EACA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,8CAA8C,CAAC,IAAD,EAAO,sBAAP,EAA+B,IAA/B,EAAqC,OAArC,EAA8C,SAA9C,CAD9B,CAApB;EAIA,OAAO,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,EAAQ,aAAR,EAAuB,GAAG,OAA1B,CAA1B,EAA8D,cAA9D,CAAtC;AACH","sourceRoot":"","sourcesContent":["import { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createInitializeMintInstruction } from '../../instructions/initializeMint.js';\nimport { ExtensionType, getMintLen } from '../extensionType.js';\nimport { createInitializeInterestBearingMintInstruction, createUpdateRateInterestBearingMintInstruction, } from './instructions.js';\n/**\n * Initialize an interest bearing account on a mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Public key of the mint\n */\nexport async function createInterestBearingMint(connection, payer, mintAuthority, freezeAuthority, rateAuthority, rate, decimals, keypair = Keypair.generate(), confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n    const mintLen = getMintLen([ExtensionType.InterestBearingMint]);\n    const lamports = await connection.getMinimumBalanceForRentExemption(mintLen);\n    const transaction = new Transaction().add(SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: keypair.publicKey,\n        space: mintLen,\n        lamports,\n        programId,\n    }), createInitializeInterestBearingMintInstruction(keypair.publicKey, rateAuthority, rate, programId), createInitializeMintInstruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n    return keypair.publicKey;\n}\n/**\n * Update the interest rate of an interest bearing account\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction fees\n * @param mint            Public key of the mint\n * @param rateAuthority   The public key for the account that can update the rate\n * @param rate            The initial interest rate\n * @param multiSigners    Signing accounts if `owner` is a multisig\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function updateRateInterestBearingMint(connection, payer, mint, rateAuthority, rate, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n    const [rateAuthorityPublicKey, signers] = getSigners(rateAuthority, multiSigners);\n    const transaction = new Transaction().add(createUpdateRateInterestBearingMintInstruction(mint, rateAuthorityPublicKey, rate, signers, programId));\n    return await sendAndConfirmTransaction(connection, transaction, [payer, rateAuthority, ...signers], confirmOptions);\n}\n//# sourceMappingURL=actions.js.map"]},"metadata":{},"sourceType":"module"}