{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { getAssociatedTokenAddress } from '../state/mint.js';\n/**\n * Create and initialize a new associated token account\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\n\nexport async function createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions) {\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_PROGRAM_ID;\n  let associatedTokenProgramId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : ASSOCIATED_TOKEN_PROGRAM_ID;\n  const associatedToken = await getAssociatedTokenAddress(mint, owner, false, programId, associatedTokenProgramId);\n  const transaction = new Transaction().add(createAssociatedTokenAccountInstruction(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n  await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n  return associatedToken;\n}","map":{"version":3,"sources":["../../../src/actions/createAssociatedTokenAccount.ts"],"names":[],"mappings":"AACA,SAAS,yBAAT,EAAoC,WAApC,QAAuD,iBAAvD;AACA,SAAS,2BAAT,EAAsC,gBAAtC,QAA8D,iBAA9D;AACA,SAAS,uCAAT,QAAwD,2CAAxD;AACA,SAAS,yBAAT,QAA0C,kBAA1C;AAEA;;;;;;;;;;;;AAYG;;AACH,OAAO,eAAe,4BAAf,CACH,UADG,EAEH,KAFG,EAGH,IAHG,EAIH,KAJG,EAKH,cALG,EAOmD;EAAA,IADtD,SACsD,uEAD1C,gBAC0C;EAAA,IAAtD,wBAAsD,uEAA3B,2BAA2B;EAEtD,MAAM,eAAe,GAAG,MAAM,yBAAyB,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,EAAqB,SAArB,EAAgC,wBAAhC,CAAvD;EAEA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,uCAAuC,CACnC,KAAK,CAAC,SAD6B,EAEnC,eAFmC,EAGnC,KAHmC,EAInC,IAJmC,EAKnC,SALmC,EAMnC,wBANmC,CADvB,CAApB;EAWA,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,CAA1B,EAAmC,cAAnC,CAA/B;EAEA,OAAO,eAAP;AACH","sourceRoot":"","sourcesContent":["import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport { getAssociatedTokenAddress } from '../state/mint.js';\n/**\n * Create and initialize a new associated token account\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\nexport async function createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    const associatedToken = await getAssociatedTokenAddress(mint, owner, false, programId, associatedTokenProgramId);\n    const transaction = new Transaction().add(createAssociatedTokenAccountInstruction(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n    return associatedToken;\n}\n//# sourceMappingURL=createAssociatedTokenAccount.js.map"]},"metadata":{},"sourceType":"module"}