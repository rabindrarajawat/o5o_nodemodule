{"ast":null,"code":"import { toTokenAccount } from '../accounts.mjs';\nimport { toToken } from '../models/Token.mjs';\nimport { useOperation } from '../../../types/Operation.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindTokenByAddressOperation';\n/**\n * Finds a token account by its address.\n *\n * ```ts\n * const token = await metaplex.tokens().findTokenByAddress({ address });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst findTokenByAddressOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst findTokenByAddressOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const {\n      commitment\n    } = scope;\n    const {\n      address\n    } = operation.input;\n    const account = toTokenAccount(await metaplex.rpc().getAccount(address, commitment));\n    return toToken(account);\n  }\n};\nexport { findTokenByAddressOperation, findTokenByAddressOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/tokenModule/operations/findTokenByAddress.ts"],"names":["Key","findTokenByAddressOperation","useOperation","findTokenByAddressOperationHandler","handle","operation","metaplex","scope","commitment","address","input","account","toTokenAccount","rpc","getAccount","toToken"],"mappings":";;6DAWA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,6BAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,2BAA2B,GACtCC,YAAY,CAA8BF,GAA9B,C;AAEd;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;;AACO,MAAMG,kCAAiF,GAC5F;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIa;IACnB,MAAM;MAAEC;IAAF,IAAiBD,KAAvB;IACA,MAAM;MAAEE;IAAF,IAAcJ,SAAS,CAACK,KAA9B;IAEA,MAAMC,OAAO,GAAGC,cAAc,CAC5B,MAAMN,QAAQ,CAACO,GAATP,GAAeQ,UAAfR,CAA0BG,OAA1BH,EAAmCE,UAAnCF,CADsB,CAA9B;IAIA,OAAOS,OAAO,CAACJ,OAAD,CAAd;EACF;AAdF,CADK","sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { toTokenAccount } from '../accounts';\nimport { Token, toToken } from '../models/Token';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindTokenByAddressOperation' as const;\n\n/**\n * Finds a token account by its address.\n *\n * ```ts\n * const token = await metaplex.tokens().findTokenByAddress({ address });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findTokenByAddressOperation =\n  useOperation<FindTokenByAddressOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindTokenByAddressOperation = Operation<\n  typeof Key,\n  FindTokenByAddressInput,\n  Token\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindTokenByAddressInput = {\n  /** The address of the token account. */\n  address: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findTokenByAddressOperationHandler: OperationHandler<FindTokenByAddressOperation> =\n  {\n    handle: async (\n      operation: FindTokenByAddressOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<Token> => {\n      const { commitment } = scope;\n      const { address } = operation.input;\n\n      const account = toTokenAccount(\n        await metaplex.rpc().getAccount(address, commitment)\n      );\n\n      return toToken(account);\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}