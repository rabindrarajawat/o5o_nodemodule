{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getOrCreateAssociatedTokenAccount = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst associatedTokenAccount_js_1 = require(\"../instructions/associatedTokenAccount.js\");\n\nconst account_js_1 = require(\"../state/account.js\");\n\nconst mint_js_1 = require(\"../state/mint.js\");\n/**\n * Retrieve the associated token account, or create it if it doesn't exist\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint associated with the account to set or verify\n * @param owner                    Owner of the account to set or verify\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param commitment               Desired level of commitment for querying the state\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\n\n\nfunction getOrCreateAssociatedTokenAccount(connection, payer, mint, owner) {\n  let allowOwnerOffCurve = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  let commitment = arguments.length > 5 ? arguments[5] : undefined;\n  let confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : constants_js_1.TOKEN_PROGRAM_ID;\n  let associatedTokenProgramId = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const associatedToken = yield (0, mint_js_1.getAssociatedTokenAddress)(mint, owner, allowOwnerOffCurve, programId, associatedTokenProgramId); // This is the optimal logic, considering TX fee, client-side computation, RPC roundtrips and guaranteed idempotent.\n    // Sadly we can't do this atomically.\n\n    let account;\n\n    try {\n      account = yield (0, account_js_1.getAccount)(connection, associatedToken, commitment, programId);\n    } catch (error) {\n      // TokenAccountNotFoundError can be possible if the associated address has already received some lamports,\n      // becoming a system account. Assuming program derived addressing is safe, this is the only case for the\n      // TokenInvalidAccountOwnerError in this code path.\n      if (error instanceof errors_js_1.TokenAccountNotFoundError || error instanceof errors_js_1.TokenInvalidAccountOwnerError) {\n        // As this isn't atomic, it's possible others can create associated accounts meanwhile.\n        try {\n          const transaction = new web3_js_1.Transaction().add((0, associatedTokenAccount_js_1.createAssociatedTokenAccountInstruction)(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n          yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);\n        } catch (error) {// Ignore all errors; for now there is no API-compatible way to selectively ignore the expected\n          // instruction error if the associated account exists already.\n        } // Now this should always succeed\n\n\n        account = yield (0, account_js_1.getAccount)(connection, associatedToken, commitment, programId);\n      } else {\n        throw error;\n      }\n    }\n\n    if (!account.mint.equals(mint)) throw new errors_js_1.TokenInvalidMintError();\n    if (!account.owner.equals(owner)) throw new errors_js_1.TokenInvalidOwnerError();\n    return account;\n  });\n}\n\nexports.getOrCreateAssociatedTokenAccount = getOrCreateAssociatedTokenAccount;","map":{"version":3,"sources":["../../../src/actions/getOrCreateAssociatedTokenAccount.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAMA,MAAA,2BAAA,GAAA,OAAA,CAAA,2CAAA,CAAA;;AAEA,MAAA,YAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AAEA;;;;;;;;;;;;;;AAcG;;;AACH,SAAsB,iCAAtB,CACI,UADJ,EAEI,KAFJ,EAGI,IAHJ,EAII,KAJJ,EAS0D;EAAA,IAJtD,kBAIsD,uEAJjC,KAIiC;EAAA,IAHtD,UAGsD;EAAA,IAFtD,cAEsD;EAAA,IADtD,SACsD,uEAD1C,cAAA,CAAA,gBAC0C;EAAA,IAAtD,wBAAsD,uEAA3B,cAAA,CAAA,2BAA2B;;IAEtD,MAAM,eAAe,GAAG,MAAM,CAAA,GAAA,SAAA,CAAA,yBAAA,EAC1B,IAD0B,EAE1B,KAF0B,EAG1B,kBAH0B,EAI1B,SAJ0B,EAK1B,wBAL0B,CAA9B,C,CAQA;IACA;;IACA,IAAI,OAAJ;;IACA,IAAI;MACA,OAAO,GAAG,MAAM,CAAA,GAAA,YAAA,CAAA,UAAA,EAAW,UAAX,EAAuB,eAAvB,EAAwC,UAAxC,EAAoD,SAApD,CAAhB;IACH,CAFD,CAEE,OAAO,KAAP,EAAuB;MACrB;MACA;MACA;MACA,IAAI,KAAK,YAAY,WAAA,CAAA,yBAAjB,IAA8C,KAAK,YAAY,WAAA,CAAA,6BAAnE,EAAkG;QAC9F;QACA,IAAI;UACA,MAAM,WAAW,GAAG,IAAI,SAAA,CAAA,WAAJ,GAAkB,GAAlB,CAChB,CAAA,GAAA,2BAAA,CAAA,uCAAA,EACI,KAAK,CAAC,SADV,EAEI,eAFJ,EAGI,KAHJ,EAII,IAJJ,EAKI,SALJ,EAMI,wBANJ,CADgB,CAApB;UAWA,MAAM,CAAA,GAAA,SAAA,CAAA,yBAAA,EAA0B,UAA1B,EAAsC,WAAtC,EAAmD,CAAC,KAAD,CAAnD,EAA4D,cAA5D,CAAN;QACH,CAbD,CAaE,OAAO,KAAP,EAAuB,CACrB;UACA;QACH,CAlB6F,CAoB9F;;;QACA,OAAO,GAAG,MAAM,CAAA,GAAA,YAAA,CAAA,UAAA,EAAW,UAAX,EAAuB,eAAvB,EAAwC,UAAxC,EAAoD,SAApD,CAAhB;MACH,CAtBD,MAsBO;QACH,MAAM,KAAN;MACH;IACJ;;IAED,IAAI,CAAC,OAAO,CAAC,IAAR,CAAa,MAAb,CAAoB,IAApB,CAAL,EAAgC,MAAM,IAAI,WAAA,CAAA,qBAAJ,EAAN;IAChC,IAAI,CAAC,OAAO,CAAC,KAAR,CAAc,MAAd,CAAqB,KAArB,CAAL,EAAkC,MAAM,IAAI,WAAA,CAAA,sBAAJ,EAAN;IAElC,OAAO,OAAP;EACH,C;AAAA;;AA3DD,OAAA,CAAA,iCAAA,GAAA,iCAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getOrCreateAssociatedTokenAccount = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst associatedTokenAccount_js_1 = require(\"../instructions/associatedTokenAccount.js\");\nconst account_js_1 = require(\"../state/account.js\");\nconst mint_js_1 = require(\"../state/mint.js\");\n/**\n * Retrieve the associated token account, or create it if it doesn't exist\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint associated with the account to set or verify\n * @param owner                    Owner of the account to set or verify\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param commitment               Desired level of commitment for querying the state\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\nfunction getOrCreateAssociatedTokenAccount(connection, payer, mint, owner, allowOwnerOffCurve = false, commitment, confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const associatedToken = yield (0, mint_js_1.getAssociatedTokenAddress)(mint, owner, allowOwnerOffCurve, programId, associatedTokenProgramId);\n        // This is the optimal logic, considering TX fee, client-side computation, RPC roundtrips and guaranteed idempotent.\n        // Sadly we can't do this atomically.\n        let account;\n        try {\n            account = yield (0, account_js_1.getAccount)(connection, associatedToken, commitment, programId);\n        }\n        catch (error) {\n            // TokenAccountNotFoundError can be possible if the associated address has already received some lamports,\n            // becoming a system account. Assuming program derived addressing is safe, this is the only case for the\n            // TokenInvalidAccountOwnerError in this code path.\n            if (error instanceof errors_js_1.TokenAccountNotFoundError || error instanceof errors_js_1.TokenInvalidAccountOwnerError) {\n                // As this isn't atomic, it's possible others can create associated accounts meanwhile.\n                try {\n                    const transaction = new web3_js_1.Transaction().add((0, associatedTokenAccount_js_1.createAssociatedTokenAccountInstruction)(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n                    yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);\n                }\n                catch (error) {\n                    // Ignore all errors; for now there is no API-compatible way to selectively ignore the expected\n                    // instruction error if the associated account exists already.\n                }\n                // Now this should always succeed\n                account = yield (0, account_js_1.getAccount)(connection, associatedToken, commitment, programId);\n            }\n            else {\n                throw error;\n            }\n        }\n        if (!account.mint.equals(mint))\n            throw new errors_js_1.TokenInvalidMintError();\n        if (!account.owner.equals(owner))\n            throw new errors_js_1.TokenInvalidOwnerError();\n        return account;\n    });\n}\nexports.getOrCreateAssociatedTokenAccount = getOrCreateAssociatedTokenAccount;\n//# sourceMappingURL=getOrCreateAssociatedTokenAccount.js.map"]},"metadata":{},"sourceType":"script"}