{"ast":null,"code":"import { CandyMachineBuildersClient } from './CandyMachineBuildersClient.mjs';\nimport { CandyMachineGuardsClient } from './CandyMachineGuardsClient.mjs';\nimport { CandyMachinePdasClient } from './CandyMachinePdasClient.mjs';\nimport { updateCandyGuardAuthorityOperation } from './operations/updateCandyGuardAuthority.mjs';\nimport { callCandyGuardRouteOperation } from './operations/callCandyGuardRoute.mjs';\nimport { createCandyMachineOperation } from './operations/createCandyMachine.mjs';\nimport { createCandyGuardOperation } from './operations/createCandyGuard.mjs';\nimport { deleteCandyMachineOperation } from './operations/deleteCandyMachine.mjs';\nimport { deleteCandyGuardOperation } from './operations/deleteCandyGuard.mjs';\nimport { findCandyGuardsByAuthorityOperation } from './operations/findCandyGuardsByAuthority.mjs';\nimport { findCandyMachineByAddressOperation } from './operations/findCandyMachineByAddress.mjs';\nimport { findCandyGuardByAddressOperation } from './operations/findCandyGuardByAddress.mjs';\nimport { insertCandyMachineItemsOperation } from './operations/insertCandyMachineItems.mjs';\nimport { mintFromCandyMachineOperation } from './operations/mintFromCandyMachine.mjs';\nimport { unwrapCandyGuardOperation } from './operations/unwrapCandyGuard.mjs';\nimport { updateCandyMachineOperation } from './operations/updateCandyMachine.mjs';\nimport { updateCandyGuardOperation } from './operations/updateCandyGuard.mjs';\nimport { wrapCandyGuardOperation } from './operations/wrapCandyGuard.mjs';\nimport { toPublicKey } from '../../types/PublicKey.mjs';\nimport { isCandyMachine } from './models/CandyMachine.mjs';\n/**\n * This is a client for the Candy Machine V3 module.\n *\n * It enables us to interact with the Candy Machine V3 and Candy Guard programs\n * in order to create, update, delete and mint from Candy Machines as well as\n * registering your own custom Candy Guards.\n *\n * You may access this client via the `candyMachines()` method of your `Metaplex` instance.\n *\n * ```ts\n * const candyMachineClient = metaplex.candyMachines();\n * ```\n *\n * @example\n * You can create a new Candy Machine with minimum input like so.\n * By default, the current identity of the Metaplex instance will be\n * the authority of the Candy Machine and it will immediately create\n * a Candy Guard linked to the new Candy Machine.\n *\n * ```ts\n *  const { candyMachine } = await metaplex\n *    .candyMachines()\n *    .create({\n *      itemsAvailable: toBigNumber(5000),\n *      sellerFeeBasisPoints: 333, // 3.33%\n *      collection: {\n *        address: collectionNft.address,\n *        updateAuthority: collectionUpdateAuthority,\n *      },\n *    });\n * ```\n *\n * @see {@link CandyGuard} The `CandyGuard` model\n * @group Modules\n */\n\nclass CandyMachineClient {\n  constructor(metaplex) {\n    this.metaplex = metaplex;\n    this.guardsClient = new CandyMachineGuardsClient(metaplex);\n  }\n  /**\n   * You may use the `guards()` client to access the default guards\n   * available as well as register your own guards.\n   *\n   * ```ts\n   * const guardsClient = metaplex.candyMachines().guards();\n   * ```\n   */\n\n\n  guards() {\n    return this.guardsClient;\n  }\n  /**\n   * You may use the `builders()` client to access the\n   * underlying Transaction Builders of this module.\n   *\n   * ```ts\n   * const buildersClient = metaplex.candyMachines().builders();\n   * ```\n   */\n\n\n  builders() {\n    return new CandyMachineBuildersClient(this.metaplex);\n  }\n  /**\n   * You may use the `pdas()` client to build PDAs related to this module.\n   *\n   * ```ts\n   * const pdasClient = metaplex.candyMachines().pdas();\n   * ```\n   */\n\n\n  pdas() {\n    return new CandyMachinePdasClient(this.metaplex);\n  }\n  /** {@inheritDoc callCandyGuardRouteOperation} */\n\n\n  callGuardRoute(input, options) {\n    return this.metaplex.operations().execute(callCandyGuardRouteOperation(input), options);\n  }\n  /** {@inheritDoc createCandyMachineOperation} */\n\n\n  create(input, options) {\n    return this.metaplex.operations().execute(createCandyMachineOperation(input), options);\n  }\n  /** {@inheritDoc createCandyGuardOperation} */\n\n\n  createCandyGuard(input, options) {\n    return this.metaplex.operations().execute(createCandyGuardOperation(input), options);\n  }\n  /** {@inheritDoc deleteCandyMachineOperation} */\n\n\n  delete(input, options) {\n    return this.metaplex.operations().execute(deleteCandyMachineOperation(input), options);\n  }\n  /** {@inheritDoc deleteCandyGuardOperation} */\n\n\n  deleteCandyGuard(input, options) {\n    return this.metaplex.operations().execute(deleteCandyGuardOperation(input), options);\n  }\n  /** {@inheritDoc findCandyGuardsByAuthorityOperation} */\n\n\n  findAllCandyGuardsByAuthority(input, options) {\n    return this.metaplex.operations().execute(findCandyGuardsByAuthorityOperation(input), options);\n  }\n  /** {@inheritDoc findCandyMachineByAddressOperation} */\n\n\n  findByAddress(input, options) {\n    return this.metaplex.operations().execute(findCandyMachineByAddressOperation(input), options);\n  }\n  /** {@inheritDoc findCandyGuardByAddressOperation} */\n\n\n  findCandyGuardByAddress(input, options) {\n    return this.metaplex.operations().execute(findCandyGuardByAddressOperation(input), options);\n  }\n  /**\n   * Helper method that fetches a Candy Guard via the base\n   * address used to derived its PDA.\n   *\n   * ```ts\n   * const candyGuard = await metaplex\n   *   .candyMachines()\n   *   .findCandyGuardByBaseAddress({ address: base });\n   * ```\n   */\n\n\n  findCandyGuardByBaseAddress(input, options) {\n    const address = this.pdas().candyGuard({\n      base: input.address\n    });\n    return this.findCandyGuardByAddress({ ...input,\n      address\n    }, options);\n  }\n  /** {@inheritDoc insertCandyMachineItemsOperation} */\n\n\n  insertItems(input, options) {\n    return this.metaplex.operations().execute(insertCandyMachineItemsOperation(input), options);\n  }\n  /** {@inheritDoc mintFromCandyMachineOperation} */\n\n\n  mint(input, options) {\n    return this.metaplex.operations().execute(mintFromCandyMachineOperation(input), options);\n  }\n  /**\n   * Helper method that refetches a given Candy Machine or Candy Guard.\n   *\n   * ```ts\n   * const candyMachine = await metaplex.candyMachines().refresh(candyMachine);\n   * const candyGuard = await metaplex.candyMachines().refresh(candyGuard);\n   * ```\n   */\n\n\n  async refresh(model, options) {\n    const input = {\n      address: toPublicKey(model)\n    };\n    const refreshedModel = isCandyMachine(model) ? await this.findByAddress(input, options) : await this.findCandyGuardByAddress(input, options);\n    return refreshedModel;\n  }\n  /** {@inheritDoc unwrapCandyGuardOperation} */\n\n\n  unwrapCandyGuard(input, options) {\n    return this.metaplex.operations().execute(unwrapCandyGuardOperation(input), options);\n  }\n  /** {@inheritDoc updateCandyMachineOperation} */\n\n\n  update(input, options) {\n    return this.metaplex.operations().execute(updateCandyMachineOperation(input), options);\n  }\n  /** {@inheritDoc updateCandyGuardOperation} */\n\n\n  updateCandyGuard(input, options) {\n    return this.metaplex.operations().execute(updateCandyGuardOperation(input), options);\n  }\n  /** {@inheritDoc updateCandyGuardAuthorityOperation} */\n\n\n  updateCandyGuardAuthority(input, options) {\n    return this.metaplex.operations().execute(updateCandyGuardAuthorityOperation(input), options);\n  }\n  /** {@inheritDoc wrapCandyGuardOperation} */\n\n\n  wrapCandyGuard(input, options) {\n    return this.metaplex.operations().execute(wrapCandyGuardOperation(input), options);\n  }\n\n}\n\nexport { CandyMachineClient };","map":{"version":3,"sources":["../../../../src/plugins/candyMachineModule/CandyMachineClient.ts"],"names":["CandyMachineClient","constructor","metaplex","guardsClient","CandyMachineGuardsClient","guards","builders","CandyMachineBuildersClient","pdas","CandyMachinePdasClient","callGuardRoute","input","options","operations","execute","callCandyGuardRouteOperation","create","createCandyMachineOperation","createCandyGuard","createCandyGuardOperation","delete","deleteCandyMachineOperation","deleteCandyGuard","deleteCandyGuardOperation","findAllCandyGuardsByAuthority","findCandyGuardsByAuthorityOperation","findByAddress","findCandyMachineByAddressOperation","findCandyGuardByAddress","findCandyGuardByAddressOperation","findCandyGuardByBaseAddress","address","candyGuard","base","insertItems","insertCandyMachineItemsOperation","mint","mintFromCandyMachineOperation","refresh","model","toPublicKey","refreshedModel","isCandyMachine","unwrapCandyGuard","unwrapCandyGuardOperation","update","updateCandyMachineOperation","updateCandyGuard","updateCandyGuardOperation","updateCandyGuardAuthority","updateCandyGuardAuthorityOperation","wrapCandyGuard","wrapCandyGuardOperation"],"mappings":"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","sourcesContent":["import { CandyMachineBuildersClient } from './CandyMachineBuildersClient';\nimport { CandyMachineGuardsClient } from './CandyMachineGuardsClient';\nimport { CandyMachinePdasClient } from './CandyMachinePdasClient';\nimport {\n  CandyGuardsMintSettings,\n  CandyGuardsRouteSettings,\n  CandyGuardsSettings,\n  DefaultCandyGuardMintSettings,\n  DefaultCandyGuardRouteSettings,\n  DefaultCandyGuardSettings,\n} from './guards';\nimport { CandyGuard, CandyMachine, isCandyMachine } from './models';\nimport {\n  CallCandyGuardRouteInput,\n  callCandyGuardRouteOperation,\n  CreateCandyGuardInput,\n  createCandyGuardOperation,\n  CreateCandyMachineInput,\n  createCandyMachineOperation,\n  DeleteCandyGuardInput,\n  deleteCandyGuardOperation,\n  DeleteCandyMachineInput,\n  deleteCandyMachineOperation,\n  FindCandyGuardByAddressInput,\n  findCandyGuardByAddressOperation,\n  FindCandyGuardsByAuthorityInput,\n  findCandyGuardsByAuthorityOperation,\n  FindCandyMachineByAddressInput,\n  findCandyMachineByAddressOperation,\n  InsertCandyMachineItemsInput,\n  insertCandyMachineItemsOperation,\n  MintFromCandyMachineInput,\n  mintFromCandyMachineOperation,\n  UnwrapCandyGuardInput,\n  unwrapCandyGuardOperation,\n  UpdateCandyGuardInput,\n  updateCandyGuardOperation,\n  UpdateCandyMachineInput,\n  updateCandyMachineOperation,\n  WrapCandyGuardInput,\n  wrapCandyGuardOperation,\n} from './operations';\nimport {\n  UpdateCandyGuardAuthorityInput,\n  updateCandyGuardAuthorityOperation,\n} from './operations/updateCandyGuardAuthority';\nimport { OperationOptions, toPublicKey } from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n/**\n * This is a client for the Candy Machine V3 module.\n *\n * It enables us to interact with the Candy Machine V3 and Candy Guard programs\n * in order to create, update, delete and mint from Candy Machines as well as\n * registering your own custom Candy Guards.\n *\n * You may access this client via the `candyMachines()` method of your `Metaplex` instance.\n *\n * ```ts\n * const candyMachineClient = metaplex.candyMachines();\n * ```\n *\n * @example\n * You can create a new Candy Machine with minimum input like so.\n * By default, the current identity of the Metaplex instance will be\n * the authority of the Candy Machine and it will immediately create\n * a Candy Guard linked to the new Candy Machine.\n *\n * ```ts\n *  const { candyMachine } = await metaplex\n *    .candyMachines()\n *    .create({\n *      itemsAvailable: toBigNumber(5000),\n *      sellerFeeBasisPoints: 333, // 3.33%\n *      collection: {\n *        address: collectionNft.address,\n *        updateAuthority: collectionUpdateAuthority,\n *      },\n *    });\n * ```\n *\n * @see {@link CandyGuard} The `CandyGuard` model\n * @group Modules\n */\nexport class CandyMachineClient {\n  protected readonly guardsClient: CandyMachineGuardsClient;\n\n  constructor(readonly metaplex: Metaplex) {\n    this.guardsClient = new CandyMachineGuardsClient(metaplex);\n  }\n\n  /**\n   * You may use the `guards()` client to access the default guards\n   * available as well as register your own guards.\n   *\n   * ```ts\n   * const guardsClient = metaplex.candyMachines().guards();\n   * ```\n   */\n  guards() {\n    return this.guardsClient;\n  }\n\n  /**\n   * You may use the `builders()` client to access the\n   * underlying Transaction Builders of this module.\n   *\n   * ```ts\n   * const buildersClient = metaplex.candyMachines().builders();\n   * ```\n   */\n  builders() {\n    return new CandyMachineBuildersClient(this.metaplex);\n  }\n\n  /**\n   * You may use the `pdas()` client to build PDAs related to this module.\n   *\n   * ```ts\n   * const pdasClient = metaplex.candyMachines().pdas();\n   * ```\n   */\n  pdas() {\n    return new CandyMachinePdasClient(this.metaplex);\n  }\n\n  /** {@inheritDoc callCandyGuardRouteOperation} */\n  callGuardRoute<\n    Guard extends keyof RouteSettings & string,\n    Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n    RouteSettings extends CandyGuardsRouteSettings = DefaultCandyGuardRouteSettings\n  >(\n    input: CallCandyGuardRouteInput<\n      Guard,\n      Settings extends undefined ? DefaultCandyGuardSettings : Settings,\n      RouteSettings extends undefined\n        ? DefaultCandyGuardRouteSettings\n        : RouteSettings\n    >,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(callCandyGuardRouteOperation(input), options);\n  }\n\n  /** {@inheritDoc createCandyMachineOperation} */\n  create<T extends CandyGuardsSettings = DefaultCandyGuardSettings>(\n    input: CreateCandyMachineInput<\n      T extends undefined ? DefaultCandyGuardSettings : T\n    >,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(createCandyMachineOperation(input), options);\n  }\n\n  /** {@inheritDoc createCandyGuardOperation} */\n  createCandyGuard<T extends CandyGuardsSettings = DefaultCandyGuardSettings>(\n    input: CreateCandyGuardInput<\n      T extends undefined ? DefaultCandyGuardSettings : T\n    >,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(createCandyGuardOperation(input), options);\n  }\n\n  /** {@inheritDoc deleteCandyMachineOperation} */\n  delete(input: DeleteCandyMachineInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(deleteCandyMachineOperation(input), options);\n  }\n\n  /** {@inheritDoc deleteCandyGuardOperation} */\n  deleteCandyGuard(input: DeleteCandyGuardInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(deleteCandyGuardOperation(input), options);\n  }\n\n  /** {@inheritDoc findCandyGuardsByAuthorityOperation} */\n  findAllCandyGuardsByAuthority<\n    T extends CandyGuardsSettings = DefaultCandyGuardSettings\n  >(input: FindCandyGuardsByAuthorityInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(findCandyGuardsByAuthorityOperation<T>(input), options);\n  }\n\n  /** {@inheritDoc findCandyMachineByAddressOperation} */\n  findByAddress<T extends CandyGuardsSettings = DefaultCandyGuardSettings>(\n    input: FindCandyMachineByAddressInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(findCandyMachineByAddressOperation<T>(input), options);\n  }\n\n  /** {@inheritDoc findCandyGuardByAddressOperation} */\n  findCandyGuardByAddress<\n    T extends CandyGuardsSettings = DefaultCandyGuardSettings\n  >(input: FindCandyGuardByAddressInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(findCandyGuardByAddressOperation<T>(input), options);\n  }\n\n  /**\n   * Helper method that fetches a Candy Guard via the base\n   * address used to derived its PDA.\n   *\n   * ```ts\n   * const candyGuard = await metaplex\n   *   .candyMachines()\n   *   .findCandyGuardByBaseAddress({ address: base });\n   * ```\n   */\n  findCandyGuardByBaseAddress<\n    T extends CandyGuardsSettings = DefaultCandyGuardSettings\n  >(input: FindCandyGuardByAddressInput, options?: OperationOptions) {\n    const address = this.pdas().candyGuard({ base: input.address });\n    return this.findCandyGuardByAddress<T>({ ...input, address }, options);\n  }\n\n  /** {@inheritDoc insertCandyMachineItemsOperation} */\n  insertItems(input: InsertCandyMachineItemsInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(insertCandyMachineItemsOperation(input), options);\n  }\n\n  /** {@inheritDoc mintFromCandyMachineOperation} */\n  mint<\n    Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n    MintSettings extends CandyGuardsMintSettings = DefaultCandyGuardMintSettings\n  >(\n    input: MintFromCandyMachineInput<\n      Settings extends undefined ? DefaultCandyGuardSettings : Settings,\n      MintSettings extends undefined\n        ? DefaultCandyGuardMintSettings\n        : MintSettings\n    >,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(mintFromCandyMachineOperation(input), options);\n  }\n\n  /**\n   * Helper method that refetches a given Candy Machine or Candy Guard.\n   *\n   * ```ts\n   * const candyMachine = await metaplex.candyMachines().refresh(candyMachine);\n   * const candyGuard = await metaplex.candyMachines().refresh(candyGuard);\n   * ```\n   */\n  async refresh<\n    T extends CandyGuardsSettings,\n    M extends CandyMachine<T> | CandyGuard<T>\n  >(model: M, options?: OperationOptions): Promise<M> {\n    const input = { address: toPublicKey(model) };\n    const refreshedModel = isCandyMachine(model)\n      ? await this.findByAddress<T>(input, options)\n      : await this.findCandyGuardByAddress<T>(input, options);\n\n    return refreshedModel as M;\n  }\n\n  /** {@inheritDoc unwrapCandyGuardOperation} */\n  unwrapCandyGuard(input: UnwrapCandyGuardInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(unwrapCandyGuardOperation(input), options);\n  }\n\n  /** {@inheritDoc updateCandyMachineOperation} */\n  update<T extends CandyGuardsSettings = DefaultCandyGuardSettings>(\n    input: UpdateCandyMachineInput<\n      T extends undefined ? DefaultCandyGuardSettings : T\n    >,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(updateCandyMachineOperation(input), options);\n  }\n\n  /** {@inheritDoc updateCandyGuardOperation} */\n  updateCandyGuard<T extends CandyGuardsSettings = DefaultCandyGuardSettings>(\n    input: UpdateCandyGuardInput<\n      T extends undefined ? DefaultCandyGuardSettings : T\n    >,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(updateCandyGuardOperation(input), options);\n  }\n\n  /** {@inheritDoc updateCandyGuardAuthorityOperation} */\n  updateCandyGuardAuthority(\n    input: UpdateCandyGuardAuthorityInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(updateCandyGuardAuthorityOperation(input), options);\n  }\n\n  /** {@inheritDoc wrapCandyGuardOperation} */\n  wrapCandyGuard(input: WrapCandyGuardInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(wrapCandyGuardOperation(input), options);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}