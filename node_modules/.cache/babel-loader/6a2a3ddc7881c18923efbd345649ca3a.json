{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeHarvestWithheldTokensToMintInstructionUnchecked = exports.decodeHarvestWithheldTokensToMintInstruction = exports.createHarvestWithheldTokensToMintInstruction = exports.harvestWithheldTokensToMintInstructionData = exports.decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked = exports.decodeWithdrawWithheldTokensFromAccountsInstruction = exports.createWithdrawWithheldTokensFromAccountsInstruction = exports.withdrawWithheldTokensFromAccountsInstructionData = exports.decodeWithdrawWithheldTokensFromMintInstructionUnchecked = exports.decodeWithdrawWithheldTokensFromMintInstruction = exports.createWithdrawWithheldTokensFromMintInstruction = exports.withdrawWithheldTokensFromMintInstructionData = exports.decodeTransferCheckedWithFeeInstructionUnchecked = exports.decodeTransferCheckedWithFeeInstruction = exports.createTransferCheckedWithFeeInstruction = exports.transferCheckedWithFeeInstructionData = exports.decodeInitializeTransferFeeConfigInstructionUnchecked = exports.decodeInitializeTransferFeeConfigInstruction = exports.createInitializeTransferFeeConfigInstruction = exports.initializeTransferFeeConfigInstructionData = exports.TransferFeeInstruction = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../../constants.js\");\n\nconst errors_js_1 = require(\"../../errors.js\");\n\nconst types_js_1 = require(\"../../instructions/types.js\");\n\nvar TransferFeeInstruction;\n\n(function (TransferFeeInstruction) {\n  TransferFeeInstruction[TransferFeeInstruction[\"InitializeTransferFeeConfig\"] = 0] = \"InitializeTransferFeeConfig\";\n  TransferFeeInstruction[TransferFeeInstruction[\"TransferCheckedWithFee\"] = 1] = \"TransferCheckedWithFee\";\n  TransferFeeInstruction[TransferFeeInstruction[\"WithdrawWithheldTokensFromMint\"] = 2] = \"WithdrawWithheldTokensFromMint\";\n  TransferFeeInstruction[TransferFeeInstruction[\"WithdrawWithheldTokensFromAccounts\"] = 3] = \"WithdrawWithheldTokensFromAccounts\";\n  TransferFeeInstruction[TransferFeeInstruction[\"HarvestWithheldTokensToMint\"] = 4] = \"HarvestWithheldTokensToMint\";\n  TransferFeeInstruction[TransferFeeInstruction[\"SetTransferFee\"] = 5] = \"SetTransferFee\";\n})(TransferFeeInstruction = exports.TransferFeeInstruction || (exports.TransferFeeInstruction = {}));\n/** TODO: docs */\n\n\nexports.initializeTransferFeeConfigInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('transferFeeInstruction'), (0, buffer_layout_1.u8)('transferFeeConfigAuthorityOption'), (0, buffer_layout_utils_1.publicKey)('transferFeeConfigAuthority'), (0, buffer_layout_1.u8)('withdrawWithheldAuthorityOption'), (0, buffer_layout_utils_1.publicKey)('withdrawWithheldAuthority'), (0, buffer_layout_1.u16)('transferFeeBasisPoints'), (0, buffer_layout_utils_1.u64)('maximumFee')]);\n/**\n * Construct an InitializeTransferFeeConfig instruction\n *\n * @param mint            Token mint account\n * @param transferFeeConfigAuthority  Optional authority that can update the fees\n * @param withdrawWithheldAuthority Optional authority that can withdraw fees\n * @param transferFeeBasisPoints Amount of transfer collected as fees, expressed as basis points of the transfer amount\n * @param maximumFee        Maximum fee assessed on transfers\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createInitializeTransferFeeConfigInstruction(mint, transferFeeConfigAuthority, withdrawWithheldAuthority, transferFeeBasisPoints, maximumFee) {\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(exports.initializeTransferFeeConfigInstructionData.span);\n  exports.initializeTransferFeeConfigInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.TransferFeeExtension,\n    transferFeeInstruction: TransferFeeInstruction.InitializeTransferFeeConfig,\n    transferFeeConfigAuthorityOption: transferFeeConfigAuthority ? 1 : 0,\n    transferFeeConfigAuthority: transferFeeConfigAuthority || new web3_js_1.PublicKey(0),\n    withdrawWithheldAuthorityOption: withdrawWithheldAuthority ? 1 : 0,\n    withdrawWithheldAuthority: withdrawWithheldAuthority || new web3_js_1.PublicKey(0),\n    transferFeeBasisPoints: transferFeeBasisPoints,\n    maximumFee: maximumFee\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createInitializeTransferFeeConfigInstruction = createInitializeTransferFeeConfigInstruction;\n/**\n * Decode an InitializeTransferFeeConfig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeInitializeTransferFeeConfigInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializeTransferFeeConfigInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint\n    },\n    data\n  } = decodeInitializeTransferFeeConfigInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.TransferFeeExtension || data.transferFeeInstruction !== TransferFeeInstruction.InitializeTransferFeeConfig) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!mint) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data\n  };\n}\n\nexports.decodeInitializeTransferFeeConfigInstruction = decodeInitializeTransferFeeConfigInstruction;\n/**\n * Decode an InitializeTransferFeeConfig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeInitializeTransferFeeConfigInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [mint],\n    data\n  } = _ref;\n  const {\n    instruction,\n    transferFeeInstruction,\n    transferFeeConfigAuthorityOption,\n    transferFeeConfigAuthority,\n    withdrawWithheldAuthorityOption,\n    withdrawWithheldAuthority,\n    transferFeeBasisPoints,\n    maximumFee\n  } = exports.initializeTransferFeeConfigInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data: {\n      instruction,\n      transferFeeInstruction,\n      transferFeeConfigAuthority: transferFeeConfigAuthorityOption ? transferFeeConfigAuthority : null,\n      withdrawWithheldAuthority: withdrawWithheldAuthorityOption ? withdrawWithheldAuthority : null,\n      transferFeeBasisPoints,\n      maximumFee\n    }\n  };\n}\n\nexports.decodeInitializeTransferFeeConfigInstructionUnchecked = decodeInitializeTransferFeeConfigInstructionUnchecked;\nexports.transferCheckedWithFeeInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('transferFeeInstruction'), (0, buffer_layout_utils_1.u64)('amount'), (0, buffer_layout_1.u8)('decimals'), (0, buffer_layout_utils_1.u64)('fee')]);\n/**\n * Construct an TransferCheckedWithFee instruction\n *\n * @param source          The source account\n * @param mint            The token mint\n * @param destination     The destination account\n * @param authority       The source account's owner/delegate\n * @param signers         The signer account(s)\n * @param amount          The amount of tokens to transfer\n * @param decimals        The expected number of base 10 digits to the right of the decimal place\n * @param fee             The expected fee assesed on this transfer, calculated off-chain based on the transferFeeBasisPoints and maximumFee of the mint.\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createTransferCheckedWithFeeInstruction(source, mint, destination, authority, amount, decimals, fee) {\n  let multiSigners = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n  let programId = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n\n  const data = Buffer.alloc(exports.transferCheckedWithFeeInstructionData.span);\n  exports.transferCheckedWithFeeInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.TransferFeeExtension,\n    transferFeeInstruction: TransferFeeInstruction.TransferCheckedWithFee,\n    amount,\n    decimals,\n    fee\n  }, data);\n  const keys = [];\n  keys.push({\n    pubkey: source,\n    isSigner: false,\n    isWritable: true\n  });\n  keys.push({\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  });\n  keys.push({\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  });\n  keys.push({\n    pubkey: authority,\n    isSigner: !multiSigners.length,\n    isWritable: false\n  });\n\n  for (const signer of multiSigners) {\n    keys.push({\n      pubkey: signer.publicKey,\n      isSigner: true,\n      isWritable: false\n    });\n  }\n\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createTransferCheckedWithFeeInstruction = createTransferCheckedWithFeeInstruction;\n/**\n * Decode a TransferCheckedWithFee instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeTransferCheckedWithFeeInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.transferCheckedWithFeeInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      source,\n      mint,\n      destination,\n      authority,\n      signers\n    },\n    data\n  } = decodeTransferCheckedWithFeeInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.TransferFeeExtension || data.transferFeeInstruction !== TransferFeeInstruction.TransferCheckedWithFee) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!mint) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  return {\n    programId,\n    keys: {\n      source,\n      mint,\n      destination,\n      authority,\n      signers: signers ? signers : null\n    },\n    data\n  };\n}\n\nexports.decodeTransferCheckedWithFeeInstruction = decodeTransferCheckedWithFeeInstruction;\n/**\n * Decode a TransferCheckedWithFees instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeTransferCheckedWithFeeInstructionUnchecked(_ref2) {\n  let {\n    programId,\n    keys: [source, mint, destination, authority, ...signers],\n    data\n  } = _ref2;\n  const {\n    instruction,\n    transferFeeInstruction,\n    amount,\n    decimals,\n    fee\n  } = exports.transferCheckedWithFeeInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      source,\n      mint,\n      destination,\n      authority,\n      signers\n    },\n    data: {\n      instruction,\n      transferFeeInstruction,\n      amount,\n      decimals,\n      fee\n    }\n  };\n}\n\nexports.decodeTransferCheckedWithFeeInstructionUnchecked = decodeTransferCheckedWithFeeInstructionUnchecked;\nexports.withdrawWithheldTokensFromMintInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('transferFeeInstruction')]);\n/**\n * Construct a WithdrawWithheldTokensFromMint instruction\n *\n * @param mint              The token mint\n * @param destination       The destination account\n * @param authority         The source account's owner/delegate\n * @param signers           The signer account(s)\n * @param programID         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createWithdrawWithheldTokensFromMintInstruction(mint, destination, authority) {\n  let signers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n\n  const data = Buffer.alloc(exports.withdrawWithheldTokensFromMintInstructionData.span);\n  exports.withdrawWithheldTokensFromMintInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.TransferFeeExtension,\n    transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromMint\n  }, data);\n  const keys = [];\n  keys.push({\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: authority,\n    isSigner: !signers.length,\n    isWritable: false\n  });\n\n  for (const signer of signers) {\n    keys.push({\n      pubkey: signer.publicKey,\n      isSigner: true,\n      isWritable: false\n    });\n  }\n\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createWithdrawWithheldTokensFromMintInstruction = createWithdrawWithheldTokensFromMintInstruction;\n/**\n * Decode a WithdrawWithheldTokensFromMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeWithdrawWithheldTokensFromMintInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.withdrawWithheldTokensFromMintInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint,\n      destination,\n      authority,\n      signers\n    },\n    data\n  } = decodeWithdrawWithheldTokensFromMintInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.TransferFeeExtension || data.transferFeeInstruction !== TransferFeeInstruction.WithdrawWithheldTokensFromMint) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!mint) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  return {\n    programId,\n    keys: {\n      mint,\n      destination,\n      authority,\n      signers: signers ? signers : null\n    },\n    data\n  };\n}\n\nexports.decodeWithdrawWithheldTokensFromMintInstruction = decodeWithdrawWithheldTokensFromMintInstruction;\n/**\n * Decode a WithdrawWithheldTokensFromMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeWithdrawWithheldTokensFromMintInstructionUnchecked(_ref3) {\n  let {\n    programId,\n    keys: [mint, destination, authority, ...signers],\n    data\n  } = _ref3;\n  const {\n    instruction,\n    transferFeeInstruction\n  } = exports.withdrawWithheldTokensFromMintInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      mint,\n      destination,\n      authority,\n      signers\n    },\n    data: {\n      instruction,\n      transferFeeInstruction\n    }\n  };\n}\n\nexports.decodeWithdrawWithheldTokensFromMintInstructionUnchecked = decodeWithdrawWithheldTokensFromMintInstructionUnchecked;\nexports.withdrawWithheldTokensFromAccountsInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('transferFeeInstruction'), (0, buffer_layout_1.u8)('numTokenAccounts')]);\n/**\n * Construct a WithdrawWithheldTokensFromAccounts instruction\n *\n * @param mint              The token mint\n * @param destination       The destination account\n * @param authority         The source account's owner/delegate\n * @param signers           The signer account(s)\n * @param sources           The source accounts to withdraw from\n * @param programID         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createWithdrawWithheldTokensFromAccountsInstruction(mint, destination, authority, signers, sources) {\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n\n  const data = Buffer.alloc(exports.withdrawWithheldTokensFromAccountsInstructionData.span);\n  exports.withdrawWithheldTokensFromAccountsInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.TransferFeeExtension,\n    transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromAccounts,\n    numTokenAccounts: sources.length\n  }, data);\n  const keys = [];\n  keys.push({\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: authority,\n    isSigner: !signers.length,\n    isWritable: false\n  });\n\n  for (const signer of signers) {\n    keys.push({\n      pubkey: signer.publicKey,\n      isSigner: true,\n      isWritable: false\n    });\n  }\n\n  for (const source of sources) {\n    keys.push({\n      pubkey: source,\n      isSigner: false,\n      isWritable: true\n    });\n  }\n\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createWithdrawWithheldTokensFromAccountsInstruction = createWithdrawWithheldTokensFromAccountsInstruction;\n/**\n * Decode a WithdrawWithheldTokensFromAccounts instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeWithdrawWithheldTokensFromAccountsInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.withdrawWithheldTokensFromAccountsInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint,\n      destination,\n      authority,\n      signers,\n      sources\n    },\n    data\n  } = decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.TransferFeeExtension || data.transferFeeInstruction !== TransferFeeInstruction.WithdrawWithheldTokensFromAccounts) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!mint) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  return {\n    programId,\n    keys: {\n      mint,\n      destination,\n      authority,\n      signers: signers ? signers : null,\n      sources: sources ? sources : null\n    },\n    data\n  };\n}\n\nexports.decodeWithdrawWithheldTokensFromAccountsInstruction = decodeWithdrawWithheldTokensFromAccountsInstruction;\n/**\n * Decode a WithdrawWithheldTokensFromAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked(_ref4) {\n  let {\n    programId,\n    keys,\n    data\n  } = _ref4;\n  const {\n    instruction,\n    transferFeeInstruction,\n    numTokenAccounts\n  } = exports.withdrawWithheldTokensFromAccountsInstructionData.decode(data);\n  const [mint, destination, authority, signers, sources] = [keys[0], keys[1], keys[2], keys.slice(3, 3 + numTokenAccounts), keys.slice(-1 * numTokenAccounts)];\n  return {\n    programId,\n    keys: {\n      mint,\n      destination,\n      authority,\n      signers,\n      sources\n    },\n    data: {\n      instruction,\n      transferFeeInstruction,\n      numTokenAccounts\n    }\n  };\n}\n\nexports.decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked = decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked;\nexports.harvestWithheldTokensToMintInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('transferFeeInstruction')]);\n/**\n * Construct a HarvestWithheldTokensToMint instruction\n *\n * @param mint              The token mint\n * @param sources           The source accounts to withdraw from\n * @param programID         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createHarvestWithheldTokensToMintInstruction(mint, sources) {\n  let programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n\n  const data = Buffer.alloc(exports.harvestWithheldTokensToMintInstructionData.span);\n  exports.harvestWithheldTokensToMintInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.TransferFeeExtension,\n    transferFeeInstruction: TransferFeeInstruction.HarvestWithheldTokensToMint\n  }, data);\n  const keys = [];\n  keys.push({\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  });\n\n  for (const source of sources) {\n    keys.push({\n      pubkey: source,\n      isSigner: false,\n      isWritable: true\n    });\n  }\n\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createHarvestWithheldTokensToMintInstruction = createHarvestWithheldTokensToMintInstruction;\n/**\n * Decode a HarvestWithheldTokensToMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeHarvestWithheldTokensToMintInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.harvestWithheldTokensToMintInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint,\n      sources\n    },\n    data\n  } = decodeHarvestWithheldTokensToMintInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.TransferFeeExtension || data.transferFeeInstruction !== TransferFeeInstruction.HarvestWithheldTokensToMint) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!mint) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  return {\n    programId,\n    keys: {\n      mint,\n      sources\n    },\n    data\n  };\n}\n\nexports.decodeHarvestWithheldTokensToMintInstruction = decodeHarvestWithheldTokensToMintInstruction;\n/**\n * Decode a HarvestWithheldTokensToMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeHarvestWithheldTokensToMintInstructionUnchecked(_ref5) {\n  let {\n    programId,\n    keys: [mint, ...sources],\n    data\n  } = _ref5;\n  const {\n    instruction,\n    transferFeeInstruction\n  } = exports.harvestWithheldTokensToMintInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      mint,\n      sources\n    },\n    data: {\n      instruction,\n      transferFeeInstruction\n    }\n  };\n}\n\nexports.decodeHarvestWithheldTokensToMintInstructionUnchecked = decodeHarvestWithheldTokensToMintInstructionUnchecked;","map":{"version":3,"sources":["../../../../src/extensions/transferFee/instructions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeHarvestWithheldTokensToMintInstructionUnchecked = exports.decodeHarvestWithheldTokensToMintInstruction = exports.createHarvestWithheldTokensToMintInstruction = exports.harvestWithheldTokensToMintInstructionData = exports.decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked = exports.decodeWithdrawWithheldTokensFromAccountsInstruction = exports.createWithdrawWithheldTokensFromAccountsInstruction = exports.withdrawWithheldTokensFromAccountsInstructionData = exports.decodeWithdrawWithheldTokensFromMintInstructionUnchecked = exports.decodeWithdrawWithheldTokensFromMintInstruction = exports.createWithdrawWithheldTokensFromMintInstruction = exports.withdrawWithheldTokensFromMintInstructionData = exports.decodeTransferCheckedWithFeeInstructionUnchecked = exports.decodeTransferCheckedWithFeeInstruction = exports.createTransferCheckedWithFeeInstruction = exports.transferCheckedWithFeeInstructionData = exports.decodeInitializeTransferFeeConfigInstructionUnchecked = exports.decodeInitializeTransferFeeConfigInstruction = exports.createInitializeTransferFeeConfigInstruction = exports.initializeTransferFeeConfigInstructionData = exports.TransferFeeInstruction = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../../constants.js\");\nconst errors_js_1 = require(\"../../errors.js\");\nconst types_js_1 = require(\"../../instructions/types.js\");\nvar TransferFeeInstruction;\n(function (TransferFeeInstruction) {\n    TransferFeeInstruction[TransferFeeInstruction[\"InitializeTransferFeeConfig\"] = 0] = \"InitializeTransferFeeConfig\";\n    TransferFeeInstruction[TransferFeeInstruction[\"TransferCheckedWithFee\"] = 1] = \"TransferCheckedWithFee\";\n    TransferFeeInstruction[TransferFeeInstruction[\"WithdrawWithheldTokensFromMint\"] = 2] = \"WithdrawWithheldTokensFromMint\";\n    TransferFeeInstruction[TransferFeeInstruction[\"WithdrawWithheldTokensFromAccounts\"] = 3] = \"WithdrawWithheldTokensFromAccounts\";\n    TransferFeeInstruction[TransferFeeInstruction[\"HarvestWithheldTokensToMint\"] = 4] = \"HarvestWithheldTokensToMint\";\n    TransferFeeInstruction[TransferFeeInstruction[\"SetTransferFee\"] = 5] = \"SetTransferFee\";\n})(TransferFeeInstruction = exports.TransferFeeInstruction || (exports.TransferFeeInstruction = {}));\n/** TODO: docs */\nexports.initializeTransferFeeConfigInstructionData = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('instruction'),\n    (0, buffer_layout_1.u8)('transferFeeInstruction'),\n    (0, buffer_layout_1.u8)('transferFeeConfigAuthorityOption'),\n    (0, buffer_layout_utils_1.publicKey)('transferFeeConfigAuthority'),\n    (0, buffer_layout_1.u8)('withdrawWithheldAuthorityOption'),\n    (0, buffer_layout_utils_1.publicKey)('withdrawWithheldAuthority'),\n    (0, buffer_layout_1.u16)('transferFeeBasisPoints'),\n    (0, buffer_layout_utils_1.u64)('maximumFee'),\n]);\n/**\n * Construct an InitializeTransferFeeConfig instruction\n *\n * @param mint            Token mint account\n * @param transferFeeConfigAuthority  Optional authority that can update the fees\n * @param withdrawWithheldAuthority Optional authority that can withdraw fees\n * @param transferFeeBasisPoints Amount of transfer collected as fees, expressed as basis points of the transfer amount\n * @param maximumFee        Maximum fee assessed on transfers\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeTransferFeeConfigInstruction(mint, transferFeeConfigAuthority, withdrawWithheldAuthority, transferFeeBasisPoints, maximumFee, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n    if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n        throw new errors_js_1.TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(exports.initializeTransferFeeConfigInstructionData.span);\n    exports.initializeTransferFeeConfigInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.TransferFeeExtension,\n        transferFeeInstruction: TransferFeeInstruction.InitializeTransferFeeConfig,\n        transferFeeConfigAuthorityOption: transferFeeConfigAuthority ? 1 : 0,\n        transferFeeConfigAuthority: transferFeeConfigAuthority || new web3_js_1.PublicKey(0),\n        withdrawWithheldAuthorityOption: withdrawWithheldAuthority ? 1 : 0,\n        withdrawWithheldAuthority: withdrawWithheldAuthority || new web3_js_1.PublicKey(0),\n        transferFeeBasisPoints: transferFeeBasisPoints,\n        maximumFee: maximumFee,\n    }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createInitializeTransferFeeConfigInstruction = createInitializeTransferFeeConfigInstruction;\n/**\n * Decode an InitializeTransferFeeConfig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeInitializeTransferFeeConfigInstruction(instruction, programId) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.initializeTransferFeeConfigInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { mint }, data, } = decodeInitializeTransferFeeConfigInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.InitializeTransferFeeConfig)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\nexports.decodeInitializeTransferFeeConfigInstruction = decodeInitializeTransferFeeConfigInstruction;\n/**\n * Decode an InitializeTransferFeeConfig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeInitializeTransferFeeConfigInstructionUnchecked({ programId, keys: [mint], data, }) {\n    const { instruction, transferFeeInstruction, transferFeeConfigAuthorityOption, transferFeeConfigAuthority, withdrawWithheldAuthorityOption, withdrawWithheldAuthority, transferFeeBasisPoints, maximumFee, } = exports.initializeTransferFeeConfigInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n            transferFeeConfigAuthority: transferFeeConfigAuthorityOption ? transferFeeConfigAuthority : null,\n            withdrawWithheldAuthority: withdrawWithheldAuthorityOption ? withdrawWithheldAuthority : null,\n            transferFeeBasisPoints,\n            maximumFee,\n        },\n    };\n}\nexports.decodeInitializeTransferFeeConfigInstructionUnchecked = decodeInitializeTransferFeeConfigInstructionUnchecked;\nexports.transferCheckedWithFeeInstructionData = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('instruction'),\n    (0, buffer_layout_1.u8)('transferFeeInstruction'),\n    (0, buffer_layout_utils_1.u64)('amount'),\n    (0, buffer_layout_1.u8)('decimals'),\n    (0, buffer_layout_utils_1.u64)('fee'),\n]);\n/**\n * Construct an TransferCheckedWithFee instruction\n *\n * @param source          The source account\n * @param mint            The token mint\n * @param destination     The destination account\n * @param authority       The source account's owner/delegate\n * @param signers         The signer account(s)\n * @param amount          The amount of tokens to transfer\n * @param decimals        The expected number of base 10 digits to the right of the decimal place\n * @param fee             The expected fee assesed on this transfer, calculated off-chain based on the transferFeeBasisPoints and maximumFee of the mint.\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createTransferCheckedWithFeeInstruction(source, mint, destination, authority, amount, decimals, fee, multiSigners = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n    if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n        throw new errors_js_1.TokenUnsupportedInstructionError();\n    }\n    const data = Buffer.alloc(exports.transferCheckedWithFeeInstructionData.span);\n    exports.transferCheckedWithFeeInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.TransferFeeExtension,\n        transferFeeInstruction: TransferFeeInstruction.TransferCheckedWithFee,\n        amount,\n        decimals,\n        fee,\n    }, data);\n    const keys = [];\n    keys.push({ pubkey: source, isSigner: false, isWritable: true });\n    keys.push({ pubkey: mint, isSigner: false, isWritable: false });\n    keys.push({ pubkey: destination, isSigner: false, isWritable: true });\n    keys.push({ pubkey: authority, isSigner: !multiSigners.length, isWritable: false });\n    for (const signer of multiSigners) {\n        keys.push({ pubkey: signer.publicKey, isSigner: true, isWritable: false });\n    }\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createTransferCheckedWithFeeInstruction = createTransferCheckedWithFeeInstruction;\n/**\n * Decode a TransferCheckedWithFee instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeTransferCheckedWithFeeInstruction(instruction, programId) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.transferCheckedWithFeeInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { source, mint, destination, authority, signers }, data, } = decodeTransferCheckedWithFeeInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.TransferCheckedWithFee)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            authority,\n            signers: signers ? signers : null,\n        },\n        data,\n    };\n}\nexports.decodeTransferCheckedWithFeeInstruction = decodeTransferCheckedWithFeeInstruction;\n/**\n * Decode a TransferCheckedWithFees instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeTransferCheckedWithFeeInstructionUnchecked({ programId, keys: [source, mint, destination, authority, ...signers], data, }) {\n    const { instruction, transferFeeInstruction, amount, decimals, fee } = exports.transferCheckedWithFeeInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            authority,\n            signers,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n            amount,\n            decimals,\n            fee,\n        },\n    };\n}\nexports.decodeTransferCheckedWithFeeInstructionUnchecked = decodeTransferCheckedWithFeeInstructionUnchecked;\nexports.withdrawWithheldTokensFromMintInstructionData = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('instruction'),\n    (0, buffer_layout_1.u8)('transferFeeInstruction'),\n]);\n/**\n * Construct a WithdrawWithheldTokensFromMint instruction\n *\n * @param mint              The token mint\n * @param destination       The destination account\n * @param authority         The source account's owner/delegate\n * @param signers           The signer account(s)\n * @param programID         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createWithdrawWithheldTokensFromMintInstruction(mint, destination, authority, signers = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n    if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n        throw new errors_js_1.TokenUnsupportedInstructionError();\n    }\n    const data = Buffer.alloc(exports.withdrawWithheldTokensFromMintInstructionData.span);\n    exports.withdrawWithheldTokensFromMintInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.TransferFeeExtension,\n        transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromMint,\n    }, data);\n    const keys = [];\n    keys.push({ pubkey: mint, isSigner: false, isWritable: true }, { pubkey: destination, isSigner: false, isWritable: true }, { pubkey: authority, isSigner: !signers.length, isWritable: false });\n    for (const signer of signers) {\n        keys.push({ pubkey: signer.publicKey, isSigner: true, isWritable: false });\n    }\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createWithdrawWithheldTokensFromMintInstruction = createWithdrawWithheldTokensFromMintInstruction;\n/**\n * Decode a WithdrawWithheldTokensFromMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeWithdrawWithheldTokensFromMintInstruction(instruction, programId) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.withdrawWithheldTokensFromMintInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { mint, destination, authority, signers }, data, } = decodeWithdrawWithheldTokensFromMintInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.WithdrawWithheldTokensFromMint)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            signers: signers ? signers : null,\n        },\n        data,\n    };\n}\nexports.decodeWithdrawWithheldTokensFromMintInstruction = decodeWithdrawWithheldTokensFromMintInstruction;\n/**\n * Decode a WithdrawWithheldTokensFromMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeWithdrawWithheldTokensFromMintInstructionUnchecked({ programId, keys: [mint, destination, authority, ...signers], data, }) {\n    const { instruction, transferFeeInstruction } = exports.withdrawWithheldTokensFromMintInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            signers,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n        },\n    };\n}\nexports.decodeWithdrawWithheldTokensFromMintInstructionUnchecked = decodeWithdrawWithheldTokensFromMintInstructionUnchecked;\nexports.withdrawWithheldTokensFromAccountsInstructionData = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('instruction'),\n    (0, buffer_layout_1.u8)('transferFeeInstruction'),\n    (0, buffer_layout_1.u8)('numTokenAccounts'),\n]);\n/**\n * Construct a WithdrawWithheldTokensFromAccounts instruction\n *\n * @param mint              The token mint\n * @param destination       The destination account\n * @param authority         The source account's owner/delegate\n * @param signers           The signer account(s)\n * @param sources           The source accounts to withdraw from\n * @param programID         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createWithdrawWithheldTokensFromAccountsInstruction(mint, destination, authority, signers, sources, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n    if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n        throw new errors_js_1.TokenUnsupportedInstructionError();\n    }\n    const data = Buffer.alloc(exports.withdrawWithheldTokensFromAccountsInstructionData.span);\n    exports.withdrawWithheldTokensFromAccountsInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.TransferFeeExtension,\n        transferFeeInstruction: TransferFeeInstruction.WithdrawWithheldTokensFromAccounts,\n        numTokenAccounts: sources.length,\n    }, data);\n    const keys = [];\n    keys.push({ pubkey: mint, isSigner: false, isWritable: true }, { pubkey: destination, isSigner: false, isWritable: true }, { pubkey: authority, isSigner: !signers.length, isWritable: false });\n    for (const signer of signers) {\n        keys.push({ pubkey: signer.publicKey, isSigner: true, isWritable: false });\n    }\n    for (const source of sources) {\n        keys.push({ pubkey: source, isSigner: false, isWritable: true });\n    }\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createWithdrawWithheldTokensFromAccountsInstruction = createWithdrawWithheldTokensFromAccountsInstruction;\n/**\n * Decode a WithdrawWithheldTokensFromAccounts instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeWithdrawWithheldTokensFromAccountsInstruction(instruction, programId) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.withdrawWithheldTokensFromAccountsInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { mint, destination, authority, signers, sources }, data, } = decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.WithdrawWithheldTokensFromAccounts)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            signers: signers ? signers : null,\n            sources: sources ? sources : null,\n        },\n        data,\n    };\n}\nexports.decodeWithdrawWithheldTokensFromAccountsInstruction = decodeWithdrawWithheldTokensFromAccountsInstruction;\n/**\n * Decode a WithdrawWithheldTokensFromAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked({ programId, keys, data, }) {\n    const { instruction, transferFeeInstruction, numTokenAccounts } = exports.withdrawWithheldTokensFromAccountsInstructionData.decode(data);\n    const [mint, destination, authority, signers, sources] = [\n        keys[0],\n        keys[1],\n        keys[2],\n        keys.slice(3, 3 + numTokenAccounts),\n        keys.slice(-1 * numTokenAccounts),\n    ];\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            signers,\n            sources,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n            numTokenAccounts,\n        },\n    };\n}\nexports.decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked = decodeWithdrawWithheldTokensFromAccountsInstructionUnchecked;\nexports.harvestWithheldTokensToMintInstructionData = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('instruction'),\n    (0, buffer_layout_1.u8)('transferFeeInstruction'),\n]);\n/**\n * Construct a HarvestWithheldTokensToMint instruction\n *\n * @param mint              The token mint\n * @param sources           The source accounts to withdraw from\n * @param programID         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createHarvestWithheldTokensToMintInstruction(mint, sources, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n    if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n        throw new errors_js_1.TokenUnsupportedInstructionError();\n    }\n    const data = Buffer.alloc(exports.harvestWithheldTokensToMintInstructionData.span);\n    exports.harvestWithheldTokensToMintInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.TransferFeeExtension,\n        transferFeeInstruction: TransferFeeInstruction.HarvestWithheldTokensToMint,\n    }, data);\n    const keys = [];\n    keys.push({ pubkey: mint, isSigner: false, isWritable: true });\n    for (const source of sources) {\n        keys.push({ pubkey: source, isSigner: false, isWritable: true });\n    }\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createHarvestWithheldTokensToMintInstruction = createHarvestWithheldTokensToMintInstruction;\n/**\n * Decode a HarvestWithheldTokensToMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeHarvestWithheldTokensToMintInstruction(instruction, programId) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.harvestWithheldTokensToMintInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { mint, sources }, data, } = decodeHarvestWithheldTokensToMintInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.TransferFeeExtension ||\n        data.transferFeeInstruction !== TransferFeeInstruction.HarvestWithheldTokensToMint)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n            sources,\n        },\n        data,\n    };\n}\nexports.decodeHarvestWithheldTokensToMintInstruction = decodeHarvestWithheldTokensToMintInstruction;\n/**\n * Decode a HarvestWithheldTokensToMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeHarvestWithheldTokensToMintInstructionUnchecked({ programId, keys: [mint, ...sources], data, }) {\n    const { instruction, transferFeeInstruction } = exports.harvestWithheldTokensToMintInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n            sources,\n        },\n        data: {\n            instruction,\n            transferFeeInstruction,\n        },\n    };\n}\nexports.decodeHarvestWithheldTokensToMintInstructionUnchecked = decodeHarvestWithheldTokensToMintInstructionUnchecked;\n//# sourceMappingURL=instructions.js.map"]},"metadata":{},"sourceType":"script"}