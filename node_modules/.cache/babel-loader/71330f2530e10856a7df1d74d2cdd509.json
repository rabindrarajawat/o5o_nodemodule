{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeUiAmountToAmountInstructionUnchecked = exports.decodeUiAmountToAmountInstruction = exports.createUiAmountToAmountInstruction = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\n\n/**\n * Construct a UiAmountToAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       UiAmount of tokens to be converted to Amount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\n\nfunction createUiAmountToAmountInstruction(mint, amount) {\n  let programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : constants_js_1.TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }];\n  const buf = Buffer.from(amount, 'utf8');\n  const uiAmountToAmountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.blob)(buf.length, 'amount')]);\n  const data = Buffer.alloc(uiAmountToAmountInstructionData.span);\n  uiAmountToAmountInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.UiAmountToAmount,\n    amount: buf\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createUiAmountToAmountInstruction = createUiAmountToAmountInstruction;\n/**\n * Decode a UiAmountToAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeUiAmountToAmountInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  const uiAmountToAmountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.blob)(instruction.data.length - 1, 'amount')]);\n  if (instruction.data.length !== uiAmountToAmountInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint\n    },\n    data\n  } = decodeUiAmountToAmountInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.UiAmountToAmount) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!mint) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data\n  };\n}\n\nexports.decodeUiAmountToAmountInstruction = decodeUiAmountToAmountInstruction;\n/**\n * Decode a UiAmountToAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeUiAmountToAmountInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [mint],\n    data\n  } = _ref;\n  const uiAmountToAmountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.blob)(data.length - 1, 'amount')]);\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data: uiAmountToAmountInstructionData.decode(data)\n  };\n}\n\nexports.decodeUiAmountToAmountInstructionUnchecked = decodeUiAmountToAmountInstructionUnchecked;","map":{"version":3,"sources":["../../../src/instructions/uiAmountToAmount.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeUiAmountToAmountInstructionUnchecked = exports.decodeUiAmountToAmountInstruction = exports.createUiAmountToAmountInstruction = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\n/**\n * Construct a UiAmountToAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       UiAmount of tokens to be converted to Amount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createUiAmountToAmountInstruction(mint, amount, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: false }];\n    const buf = Buffer.from(amount, 'utf8');\n    const uiAmountToAmountInstructionData = (0, buffer_layout_1.struct)([\n        (0, buffer_layout_1.u8)('instruction'),\n        (0, buffer_layout_1.blob)(buf.length, 'amount'),\n    ]);\n    const data = Buffer.alloc(uiAmountToAmountInstructionData.span);\n    uiAmountToAmountInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.UiAmountToAmount,\n        amount: buf,\n    }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createUiAmountToAmountInstruction = createUiAmountToAmountInstruction;\n/**\n * Decode a UiAmountToAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeUiAmountToAmountInstruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    const uiAmountToAmountInstructionData = (0, buffer_layout_1.struct)([\n        (0, buffer_layout_1.u8)('instruction'),\n        (0, buffer_layout_1.blob)(instruction.data.length - 1, 'amount'),\n    ]);\n    if (instruction.data.length !== uiAmountToAmountInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { mint }, data, } = decodeUiAmountToAmountInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.UiAmountToAmount)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\nexports.decodeUiAmountToAmountInstruction = decodeUiAmountToAmountInstruction;\n/**\n * Decode a UiAmountToAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeUiAmountToAmountInstructionUnchecked({ programId, keys: [mint], data, }) {\n    const uiAmountToAmountInstructionData = (0, buffer_layout_1.struct)([\n        (0, buffer_layout_1.u8)('instruction'),\n        (0, buffer_layout_1.blob)(data.length - 1, 'amount'),\n    ]);\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: uiAmountToAmountInstructionData.decode(data),\n    };\n}\nexports.decodeUiAmountToAmountInstructionUnchecked = decodeUiAmountToAmountInstructionUnchecked;\n//# sourceMappingURL=uiAmountToAmount.js.map"]},"metadata":{},"sourceType":"script"}