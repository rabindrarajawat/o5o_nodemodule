{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMinimumBalanceForRentExemptMultisig = exports.unpackMultisig = exports.getMultisig = exports.MULTISIG_SIZE = exports.MultisigLayout = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n/** Buffer layout for de/serializing a multisig */\n\n\nexports.MultisigLayout = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('m'), (0, buffer_layout_1.u8)('n'), (0, buffer_layout_utils_1.bool)('isInitialized'), (0, buffer_layout_utils_1.publicKey)('signer1'), (0, buffer_layout_utils_1.publicKey)('signer2'), (0, buffer_layout_utils_1.publicKey)('signer3'), (0, buffer_layout_utils_1.publicKey)('signer4'), (0, buffer_layout_utils_1.publicKey)('signer5'), (0, buffer_layout_utils_1.publicKey)('signer6'), (0, buffer_layout_utils_1.publicKey)('signer7'), (0, buffer_layout_utils_1.publicKey)('signer8'), (0, buffer_layout_utils_1.publicKey)('signer9'), (0, buffer_layout_utils_1.publicKey)('signer10'), (0, buffer_layout_utils_1.publicKey)('signer11')]);\n/** Byte length of a multisig */\n\nexports.MULTISIG_SIZE = exports.MultisigLayout.span;\n/**\n * Retrieve information about a multisig\n *\n * @param connection Connection to use\n * @param address    Multisig account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Multisig information\n */\n\nfunction getMultisig(connection, address, commitment) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_js_1.TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const info = yield connection.getAccountInfo(address, commitment);\n    return unpackMultisig(address, info, programId);\n  });\n}\n\nexports.getMultisig = getMultisig;\n/**\n * Unpack a multisig\n *\n * @param address   Multisig account\n * @param info      Multisig account data\n * @param programId SPL Token program account\n *\n * @return Unpacked multisig\n */\n\nfunction unpackMultisig(address, info) {\n  let programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!info) throw new errors_js_1.TokenAccountNotFoundError();\n  if (!info.owner.equals(programId)) throw new errors_js_1.TokenInvalidAccountOwnerError();\n  if (info.data.length != exports.MULTISIG_SIZE) throw new errors_js_1.TokenInvalidAccountSizeError();\n  const multisig = exports.MultisigLayout.decode(info.data);\n  return Object.assign({\n    address\n  }, multisig);\n}\n\nexports.unpackMultisig = unpackMultisig;\n/** Get the minimum lamport balance for a multisig to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\n\nfunction getMinimumBalanceForRentExemptMultisig(connection, commitment) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return yield connection.getMinimumBalanceForRentExemption(exports.MULTISIG_SIZE, commitment);\n  });\n}\n\nexports.getMinimumBalanceForRentExemptMultisig = getMinimumBalanceForRentExemptMultisig;","map":{"version":3,"sources":["../../../src/state/multisig.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,MAAA,qBAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AAEA,MAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AA6BA;;;AACa,OAAA,CAAA,cAAA,GAAiB,CAAA,GAAA,eAAA,CAAA,MAAA,EAAoB,CAC9C,CAAA,GAAA,eAAA,CAAA,EAAA,EAAG,GAAH,CAD8C,EAE9C,CAAA,GAAA,eAAA,CAAA,EAAA,EAAG,GAAH,CAF8C,EAG9C,CAAA,GAAA,qBAAA,CAAA,IAAA,EAAK,eAAL,CAH8C,EAI9C,CAAA,GAAA,qBAAA,CAAA,SAAA,EAAU,SAAV,CAJ8C,EAK9C,CAAA,GAAA,qBAAA,CAAA,SAAA,EAAU,SAAV,CAL8C,EAM9C,CAAA,GAAA,qBAAA,CAAA,SAAA,EAAU,SAAV,CAN8C,EAO9C,CAAA,GAAA,qBAAA,CAAA,SAAA,EAAU,SAAV,CAP8C,EAQ9C,CAAA,GAAA,qBAAA,CAAA,SAAA,EAAU,SAAV,CAR8C,EAS9C,CAAA,GAAA,qBAAA,CAAA,SAAA,EAAU,SAAV,CAT8C,EAU9C,CAAA,GAAA,qBAAA,CAAA,SAAA,EAAU,SAAV,CAV8C,EAW9C,CAAA,GAAA,qBAAA,CAAA,SAAA,EAAU,SAAV,CAX8C,EAY9C,CAAA,GAAA,qBAAA,CAAA,SAAA,EAAU,SAAV,CAZ8C,EAa9C,CAAA,GAAA,qBAAA,CAAA,SAAA,EAAU,UAAV,CAb8C,EAc9C,CAAA,GAAA,qBAAA,CAAA,SAAA,EAAU,UAAV,CAd8C,CAApB,CAAjB;AAiBb;;AACa,OAAA,CAAA,aAAA,GAAgB,OAAA,CAAA,cAAA,CAAe,IAA/B;AAEb;;;;;;;;;AASG;;AACH,SAAsB,WAAtB,CACI,UADJ,EAEI,OAFJ,EAGI,UAHJ,EAIgC;EAAA,IAA5B,SAA4B,uEAAhB,cAAA,CAAA,gBAAgB;;IAE5B,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,cAAX,CAA0B,OAA1B,EAAmC,UAAnC,CAAnB;IACA,OAAO,cAAc,CAAC,OAAD,EAAU,IAAV,EAAgB,SAAhB,CAArB;EACH,C;AAAA;;AARD,OAAA,CAAA,WAAA,GAAA,WAAA;AAUA;;;;;;;;AAQG;;AACH,SAAgB,cAAhB,CACI,OADJ,EAEI,IAFJ,EAGgC;EAAA,IAA5B,SAA4B,uEAAhB,cAAA,CAAA,gBAAgB;EAE5B,IAAI,CAAC,IAAL,EAAW,MAAM,IAAI,WAAA,CAAA,yBAAJ,EAAN;EACX,IAAI,CAAC,IAAI,CAAC,KAAL,CAAW,MAAX,CAAkB,SAAlB,CAAL,EAAmC,MAAM,IAAI,WAAA,CAAA,6BAAJ,EAAN;EACnC,IAAI,IAAI,CAAC,IAAL,CAAU,MAAV,IAAoB,OAAA,CAAA,aAAxB,EAAuC,MAAM,IAAI,WAAA,CAAA,4BAAJ,EAAN;EAEvC,MAAM,QAAQ,GAAG,OAAA,CAAA,cAAA,CAAe,MAAf,CAAsB,IAAI,CAAC,IAA3B,CAAjB;EAEA,OAAA,MAAA,CAAA,MAAA,CAAA;IAAS;EAAT,CAAA,EAAqB,QAArB,CAAA;AACH;;AAZD,OAAA,CAAA,cAAA,GAAA,cAAA;AAcA;;;;;;AAMG;;AACH,SAAsB,sCAAtB,CACI,UADJ,EAEI,UAFJ,EAE2B;;IAEvB,OAAO,MAAM,UAAU,CAAC,iCAAX,CAA6C,OAAA,CAAA,aAA7C,EAA4D,UAA5D,CAAb;EACH,C;AAAA;;AALD,OAAA,CAAA,sCAAA,GAAA,sCAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMinimumBalanceForRentExemptMultisig = exports.unpackMultisig = exports.getMultisig = exports.MULTISIG_SIZE = exports.MultisigLayout = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\n/** Buffer layout for de/serializing a multisig */\nexports.MultisigLayout = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('m'),\n    (0, buffer_layout_1.u8)('n'),\n    (0, buffer_layout_utils_1.bool)('isInitialized'),\n    (0, buffer_layout_utils_1.publicKey)('signer1'),\n    (0, buffer_layout_utils_1.publicKey)('signer2'),\n    (0, buffer_layout_utils_1.publicKey)('signer3'),\n    (0, buffer_layout_utils_1.publicKey)('signer4'),\n    (0, buffer_layout_utils_1.publicKey)('signer5'),\n    (0, buffer_layout_utils_1.publicKey)('signer6'),\n    (0, buffer_layout_utils_1.publicKey)('signer7'),\n    (0, buffer_layout_utils_1.publicKey)('signer8'),\n    (0, buffer_layout_utils_1.publicKey)('signer9'),\n    (0, buffer_layout_utils_1.publicKey)('signer10'),\n    (0, buffer_layout_utils_1.publicKey)('signer11'),\n]);\n/** Byte length of a multisig */\nexports.MULTISIG_SIZE = exports.MultisigLayout.span;\n/**\n * Retrieve information about a multisig\n *\n * @param connection Connection to use\n * @param address    Multisig account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Multisig information\n */\nfunction getMultisig(connection, address, commitment, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const info = yield connection.getAccountInfo(address, commitment);\n        return unpackMultisig(address, info, programId);\n    });\n}\nexports.getMultisig = getMultisig;\n/**\n * Unpack a multisig\n *\n * @param address   Multisig account\n * @param info      Multisig account data\n * @param programId SPL Token program account\n *\n * @return Unpacked multisig\n */\nfunction unpackMultisig(address, info, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new errors_js_1.TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new errors_js_1.TokenInvalidAccountOwnerError();\n    if (info.data.length != exports.MULTISIG_SIZE)\n        throw new errors_js_1.TokenInvalidAccountSizeError();\n    const multisig = exports.MultisigLayout.decode(info.data);\n    return Object.assign({ address }, multisig);\n}\nexports.unpackMultisig = unpackMultisig;\n/** Get the minimum lamport balance for a multisig to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nfunction getMinimumBalanceForRentExemptMultisig(connection, commitment) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield connection.getMinimumBalanceForRentExemption(exports.MULTISIG_SIZE, commitment);\n    });\n}\nexports.getMinimumBalanceForRentExemptMultisig = getMinimumBalanceForRentExemptMultisig;\n//# sourceMappingURL=multisig.js.map"]},"metadata":{},"sourceType":"script"}