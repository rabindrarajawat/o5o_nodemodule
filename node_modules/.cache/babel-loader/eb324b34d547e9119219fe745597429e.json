{"ast":null,"code":"import { isFixableBeet, isFixedSizeBeet } from './types';\n/**\n * Converts the provided beet into a {@link FixedBeet} unless it already is.\n * The sizes for {@link FixableBeet}s are determined from the provided data.\n *\n * @param beet to convert\n * @param buf containing serialized data that the fixed beet needs to process\n * @param offset at which the data for the beet starts\n *\n * @category beet\n */\n\nexport function fixBeetFromData(beet, buf, offset) {\n  if (isFixedSizeBeet(beet)) {\n    return beet;\n  }\n\n  if (isFixableBeet(beet)) {\n    return beet.toFixedFromData(buf, offset);\n  }\n\n  throw new Error(`${beet.description} is neither fixed size nor fixable`);\n}\n/**\n * Converts the provided beet into a {@link FixedBeet} unless it already is.\n * The sizes for {@link FixableBeet}s are determined from the provided value.\n *\n * @param beet to convert\n * @param val value that the fixed beet needs to process\n *\n * @category beet\n */\n\nexport function fixBeetFromValue(beet, val) {\n  if (isFixedSizeBeet(beet)) {\n    return beet;\n  }\n\n  if (isFixableBeet(beet)) {\n    return beet.toFixedFromValue(val);\n  }\n\n  throw new Error(`${beet.description} is neither fixed size nor fixable`);\n}","map":{"version":3,"sources":["../../../src/beet.fixable.ts"],"names":[],"mappings":"AAAA,SAAe,aAAf,EAA8B,eAA9B,QAAqD,SAArD;AAEA;;;;;;;;;AASG;;AACH,OAAM,SAAU,eAAV,CACJ,IADI,EAEJ,GAFI,EAGJ,MAHI,EAGU;EAEd,IAAI,eAAe,CAAC,IAAD,CAAnB,EAA2B;IACzB,OAAO,IAAP;EACD;;EACD,IAAI,aAAa,CAAC,IAAD,CAAjB,EAAyB;IACvB,OAAO,IAAI,CAAC,eAAL,CAAqB,GAArB,EAA0B,MAA1B,CAAP;EACD;;EACD,MAAM,IAAI,KAAJ,CAAU,GAAG,IAAI,CAAC,WAAW,oCAA7B,CAAN;AACD;AAED;;;;;;;;AAQG;;AACH,OAAM,SAAU,gBAAV,CAA8C,IAA9C,EAAgE,GAAhE,EAAsE;EAC1E,IAAI,eAAe,CAAC,IAAD,CAAnB,EAA2B;IACzB,OAAO,IAAP;EACD;;EACD,IAAI,aAAa,CAAC,IAAD,CAAjB,EAAyB;IACvB,OAAO,IAAI,CAAC,gBAAL,CAAsB,GAAtB,CAAP;EACD;;EACD,MAAM,IAAI,KAAJ,CAAU,GAAG,IAAI,CAAC,WAAW,oCAA7B,CAAN;AACD","sourceRoot":"","sourcesContent":["import { isFixableBeet, isFixedSizeBeet } from './types';\n/**\n * Converts the provided beet into a {@link FixedBeet} unless it already is.\n * The sizes for {@link FixableBeet}s are determined from the provided data.\n *\n * @param beet to convert\n * @param buf containing serialized data that the fixed beet needs to process\n * @param offset at which the data for the beet starts\n *\n * @category beet\n */\nexport function fixBeetFromData(beet, buf, offset) {\n    if (isFixedSizeBeet(beet)) {\n        return beet;\n    }\n    if (isFixableBeet(beet)) {\n        return beet.toFixedFromData(buf, offset);\n    }\n    throw new Error(`${beet.description} is neither fixed size nor fixable`);\n}\n/**\n * Converts the provided beet into a {@link FixedBeet} unless it already is.\n * The sizes for {@link FixableBeet}s are determined from the provided value.\n *\n * @param beet to convert\n * @param val value that the fixed beet needs to process\n *\n * @category beet\n */\nexport function fixBeetFromValue(beet, val) {\n    if (isFixedSizeBeet(beet)) {\n        return beet;\n    }\n    if (isFixableBeet(beet)) {\n        return beet.toFixedFromValue(val);\n    }\n    throw new Error(`${beet.description} is neither fixed size nor fixable`);\n}\n//# sourceMappingURL=beet.fixable.js.map"]},"metadata":{},"sourceType":"module"}