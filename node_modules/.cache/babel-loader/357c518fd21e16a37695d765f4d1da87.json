{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** The struct that represents the instruction data as it is read by the program */\n\nexport const initializeImmutableOwnerInstructionData = struct([u8('instruction')]);\n/**\n * Construct an InitializeImmutableOwner instruction\n *\n * @param account           Immutable Owner Account\n * @param programId         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createInitializeImmutableOwnerInstruction(account, programId) {\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(initializeImmutableOwnerInstructionData.span);\n  initializeImmutableOwnerInstructionData.encode({\n    instruction: TokenInstruction.InitializeImmutableOwner\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode an InitializeImmutableOwner instruction and validate it\n *\n * @param instruction InitializeImmutableOwner instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeInitializeImmutableOwnerInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeImmutableOwnerInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account: account\n    },\n    data: data\n  } = decodeInitializeImmutableOwnerInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.InitializeImmutableOwner) throw new TokenInvalidInstructionTypeError();\n  if (!account) throw new TokenInvalidInstructionKeysError();\n  return {\n    programId: programId,\n    keys: {\n      account: account\n    },\n    data: data\n  };\n}\n/**\n * Decode an InitializeImmutableOwner instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeInitializeImmutableOwnerInstructionUnchecked(_ref) {\n  let {\n    programId: programId,\n    keys: [account],\n    data: data\n  } = _ref;\n  const {\n    instruction: instruction\n  } = initializeImmutableOwnerInstructionData.decode(data);\n  return {\n    programId: programId,\n    keys: {\n      account: account\n    },\n    data: {\n      instruction: instruction\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/instructions/initializeImmutableOwner.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,EAAiB,EAAjB,QAA2B,uBAA3B;AAEA,SAAS,sBAAT,QAAuC,iBAAvC;AACA,SACI,gCADJ,EAEI,gCAFJ,EAGI,mCAHJ,EAII,gCAJJ,QAKO,cALP;AAMA,SAAS,gBAAT,QAAiC,YAAjC;AAOA;;AACA,OAAO,MAAM,uCAAuC,GAAG,MAAM,CAA0C,CACnG,EAAE,CAAC,aAAD,CADiG,CAA1C,CAAtD;AAIP;;;;;;;AAOG;;AACH,OAAM,SAAU,yCAAV,CACF,OADE,EAEF,SAFE,EAEkB;EAEpB,MAAM,IAAI,GAAG,CAAC;IAAE,MAAM,EAAE,OAAV;IAAmB,QAAQ,EAAE,KAA7B;IAAoC,UAAU,EAAE;EAAhD,CAAD,CAAb;EAEA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,uCAAuC,CAAC,IAArD,CAAb;EACA,uCAAuC,CAAC,MAAxC,CACI;IACI,WAAW,EAAE,gBAAgB,CAAC;EADlC,CADJ,EAII,IAJJ;EAOA,OAAO,IAAI,sBAAJ,CAA2B;IAAE,IAAI,EAAJ,IAAF;IAAQ,SAAS,EAAT,SAAR;IAAmB,IAAI,EAAJ;EAAnB,CAA3B,CAAP;AACH;AAaD;;;;;;;AAOG;;AACH,OAAM,SAAU,yCAAV,CACF,WADE,EAEF,SAFE,EAEkB;EAEpB,IAAI,CAAC,WAAW,CAAC,SAAZ,CAAsB,MAAtB,CAA6B,SAA7B,CAAL,EAA8C,MAAM,IAAI,mCAAJ,EAAN;EAC9C,IAAI,WAAW,CAAC,IAAZ,CAAiB,MAAjB,KAA4B,uCAAuC,CAAC,IAAxE,EACI,MAAM,IAAI,gCAAJ,EAAN;EAEJ,MAAM;IACF,IAAI,EAAE;MAAE,OAAO,EAAP;IAAF,CADJ;IAEF,IAAI,EAAJ;EAFE,IAGF,kDAAkD,CAAC,WAAD,CAHtD;EAIA,IAAI,IAAI,CAAC,WAAL,KAAqB,gBAAgB,CAAC,wBAA1C,EAAoE,MAAM,IAAI,gCAAJ,EAAN;EACpE,IAAI,CAAC,OAAL,EAAc,MAAM,IAAI,gCAAJ,EAAN;EAEd,OAAO;IACH,SAAS,EAAT,SADG;IAEH,IAAI,EAAE;MACF,OAAO,EAAP;IADE,CAFH;IAKH,IAAI,EAAJ;EALG,CAAP;AAOH;AAaD;;;;;;AAMG;;AACH,OAAM,SAAU,kDAAV,OAImB;EAAA,IAJ0C;IAC/D,SAAS,EAAT,SAD+D;IAE/D,IAAI,EAAE,CAAC,OAAD,CAFyD;IAG/D,IAAI,EAAJ;EAH+D,CAI1C;EACrB,MAAM;IAAE,WAAW,EAAX;EAAF,IAAkB,uCAAuC,CAAC,MAAxC,CAA+C,IAA/C,CAAxB;EAEA,OAAO;IACH,SAAS,EAAT,SADG;IAEH,IAAI,EAAE;MACF,OAAO,EAAE;IADP,CAFH;IAKH,IAAI,EAAE;MACF,WAAW,EAAX;IADE;EALH,CAAP;AASH","sourceRoot":"","sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** The struct that represents the instruction data as it is read by the program */\nexport const initializeImmutableOwnerInstructionData = struct([\n    u8('instruction'),\n]);\n/**\n * Construct an InitializeImmutableOwner instruction\n *\n * @param account           Immutable Owner Account\n * @param programId         SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeImmutableOwnerInstruction(account, programId) {\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(initializeImmutableOwnerInstructionData.span);\n    initializeImmutableOwnerInstructionData.encode({\n        instruction: TokenInstruction.InitializeImmutableOwner,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeImmutableOwner instruction and validate it\n *\n * @param instruction InitializeImmutableOwner instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeImmutableOwnerInstruction(instruction, programId) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeImmutableOwnerInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account }, data, } = decodeInitializeImmutableOwnerInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeImmutableOwner)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account)\n        throw new TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeImmutableOwner instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeImmutableOwnerInstructionUnchecked({ programId, keys: [account], data, }) {\n    const { instruction } = initializeImmutableOwnerInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            account: account,\n        },\n        data: {\n            instruction,\n        },\n    };\n}\n//# sourceMappingURL=initializeImmutableOwner.js.map"]},"metadata":{},"sourceType":"module"}