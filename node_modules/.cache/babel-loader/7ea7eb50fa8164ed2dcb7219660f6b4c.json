{"ast":null,"code":"import { createMintToInstruction } from '@solana/spl-token';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { toPublicKey } from '../../../types/PublicKey.mjs';\nimport { isSigner } from '../../../types/Signer.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'MintTokensOperation';\n/**\n * Mint tokens to an account.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .mint({\n *     mintAddress,\n *     toOwner,\n *     amount: token(100),\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst mintTokensOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst mintTokensOperationHandler = {\n  async handle(operation, metaplex, scope) {\n    const {\n      programs,\n      confirmOptions\n    } = scope;\n    const {\n      mintAddress,\n      toOwner = metaplex.identity().publicKey,\n      toToken\n    } = operation.input;\n    const destination = toToken ?? metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: toOwner,\n      programs\n    });\n    const destinationAddress = toPublicKey(destination);\n    const destinationAccountExists = await metaplex.rpc().accountExists(destinationAddress);\n    scope.throwIfCanceled();\n    const builder = await mintTokensBuilder(metaplex, { ...operation.input,\n      toTokenExists: destinationAccountExists\n    }, scope);\n    scope.throwIfCanceled();\n    return builder.sendAndConfirm(metaplex, confirmOptions);\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Mint tokens to an account.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .tokens()\n *   .builders()\n *   .mint({\n *     mintAddress,\n *     toOwner,\n *     amount: token(100),\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst mintTokensBuilder = async function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    mintAddress,\n    amount,\n    toOwner = metaplex.identity().publicKey,\n    toToken,\n    toTokenExists = true,\n    mintAuthority = metaplex.identity(),\n    multiSigners = []\n  } = params;\n  const [mintAuthorityPublicKey, signers] = isSigner(mintAuthority) ? [mintAuthority.publicKey, [mintAuthority]] : [mintAuthority, multiSigners];\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const destination = toToken ?? metaplex.tokens().pdas().associatedTokenAccount({\n    mint: mintAddress,\n    owner: toOwner,\n    programs\n  });\n  return TransactionBuilder.make() // Create token account if missing.\n  .add(await metaplex.tokens().builders().createTokenIfMissing({ ...params,\n    mint: mintAddress,\n    owner: toOwner,\n    token: toToken,\n    tokenExists: toTokenExists,\n    tokenVariable: 'toToken'\n  }, {\n    payer,\n    programs\n  })) // Mint tokens.\n  .add({\n    instruction: createMintToInstruction(mintAddress, toPublicKey(destination), mintAuthorityPublicKey, amount.basisPoints.toNumber(), multiSigners, tokenProgram.address),\n    signers,\n    key: params.mintTokensInstructionKey ?? 'mintTokens'\n  });\n};\n\nexport { mintTokensBuilder, mintTokensOperation, mintTokensOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/tokenModule/operations/mintTokens.ts"],"names":["Key","mintTokensOperation","useOperation","mintTokensOperationHandler","handle","operation","metaplex","scope","programs","confirmOptions","mintAddress","toOwner","identity","publicKey","toToken","input","destination","tokens","pdas","associatedTokenAccount","mint","owner","destinationAddress","toPublicKey","destinationAccountExists","rpc","accountExists","throwIfCanceled","builder","mintTokensBuilder","toTokenExists","sendAndConfirm","params","options","payer","getDefaultFeePayer","amount","mintAuthority","multiSigners","mintAuthorityPublicKey","signers","isSigner","tokenProgram","getToken","TransactionBuilder","make","add","builders","createTokenIfMissing","token","tokenExists","tokenVariable","instruction","createMintToInstruction","basisPoints","toNumber","address","key","mintTokensInstructionKey"],"mappings":"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","sourcesContent":["import { createMintToInstruction } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'MintTokensOperation' as const;\n\n/**\n * Mint tokens to an account.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .mint({\n *     mintAddress,\n *     toOwner,\n *     amount: token(100),\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const mintTokensOperation = useOperation<MintTokensOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type MintTokensOperation = Operation<\n  typeof Key,\n  MintTokensInput,\n  MintTokensOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type MintTokensInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The amount of tokens to mint. */\n  amount: SplTokenAmount;\n\n  /**\n   * The owner of the token account to mint to.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  toOwner?: PublicKey;\n\n  /**\n   * The address of the token account to mint to.\n   *\n   * Note that this may be required as a `Signer` if the destination\n   * token account does not exist and we need to create it before\n   * minting the tokens.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `toOwner` parameters.\n   */\n  toToken?: PublicKey | Signer;\n\n  /**\n   * The authority that is allowed to mint new tokens as a Signer.\n   *\n   * This may be provided as a PublicKey if and only if\n   * the `multiSigners` parameter is provided.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  mintAuthority?: PublicKey | Signer;\n\n  /**\n   * The signing accounts to use if the mint authority is a multisig.\n   *\n   * @defaultValue `[]`\n   */\n  multiSigners?: KeypairSigner[];\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type MintTokensOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const mintTokensOperationHandler: OperationHandler<MintTokensOperation> =\n  {\n    async handle(\n      operation: MintTokensOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<MintTokensOutput> {\n      const { programs, confirmOptions } = scope;\n      const {\n        mintAddress,\n        toOwner = metaplex.identity().publicKey,\n        toToken,\n      } = operation.input;\n\n      const destination =\n        toToken ??\n        metaplex.tokens().pdas().associatedTokenAccount({\n          mint: mintAddress,\n          owner: toOwner,\n          programs,\n        });\n      const destinationAddress = toPublicKey(destination);\n      const destinationAccountExists = await metaplex\n        .rpc()\n        .accountExists(destinationAddress);\n      scope.throwIfCanceled();\n\n      const builder = await mintTokensBuilder(\n        metaplex,\n        { ...operation.input, toTokenExists: destinationAccountExists },\n        scope\n      );\n      scope.throwIfCanceled();\n\n      return builder.sendAndConfirm(metaplex, confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type MintTokensBuilderParams = Omit<\n  MintTokensInput,\n  'confirmOptions'\n> & {\n  /**\n   * Whether or not the provided token account already exists.\n   * If `false`, we'll add another instruction to create it.\n   *\n   * @defaultValue `true`\n   */\n  toTokenExists?: boolean;\n\n  /** A key to distinguish the instruction that creates the associated token account. */\n  createAssociatedTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the token account. */\n  createAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the token account. */\n  initializeTokenInstructionKey?: string;\n\n  /** A key to distinguish the instruction that mints tokens. */\n  mintTokensInstructionKey?: string;\n};\n\n/**\n * Mint tokens to an account.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .tokens()\n *   .builders()\n *   .mint({\n *     mintAddress,\n *     toOwner,\n *     amount: token(100),\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const mintTokensBuilder = async (\n  metaplex: Metaplex,\n  params: MintTokensBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    amount,\n    toOwner = metaplex.identity().publicKey,\n    toToken,\n    toTokenExists = true,\n    mintAuthority = metaplex.identity(),\n    multiSigners = [],\n  } = params;\n\n  const [mintAuthorityPublicKey, signers] = isSigner(mintAuthority)\n    ? [mintAuthority.publicKey, [mintAuthority]]\n    : [mintAuthority, multiSigners];\n\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const destination =\n    toToken ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: toOwner,\n      programs,\n    });\n\n  return (\n    TransactionBuilder.make()\n\n      // Create token account if missing.\n      .add(\n        await metaplex\n          .tokens()\n          .builders()\n          .createTokenIfMissing(\n            {\n              ...params,\n              mint: mintAddress,\n              owner: toOwner,\n              token: toToken,\n              tokenExists: toTokenExists,\n              tokenVariable: 'toToken',\n            },\n            { payer, programs }\n          )\n      )\n\n      // Mint tokens.\n      .add({\n        instruction: createMintToInstruction(\n          mintAddress,\n          toPublicKey(destination),\n          mintAuthorityPublicKey,\n          amount.basisPoints.toNumber(),\n          multiSigners,\n          tokenProgram.address\n        ),\n        signers,\n        key: params.mintTokensInstructionKey ?? 'mintTokens',\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}