{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeInitializeMint2InstructionUnchecked = exports.decodeInitializeMint2Instruction = exports.createInitializeMint2Instruction = exports.initializeMint2InstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\n\n\nexports.initializeMint2InstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('decimals'), (0, buffer_layout_utils_1.publicKey)('mintAuthority'), (0, buffer_layout_1.u8)('freezeAuthorityOption'), (0, buffer_layout_utils_1.publicKey)('freezeAuthority')]);\n/**\n * Construct an InitializeMint2 instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createInitializeMint2Instruction(mint, decimals, mintAuthority, freezeAuthority) {\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(exports.initializeMint2InstructionData.span);\n  exports.initializeMint2InstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InitializeMint2,\n    decimals,\n    mintAuthority,\n    freezeAuthorityOption: freezeAuthority ? 1 : 0,\n    freezeAuthority: freezeAuthority || new web3_js_1.PublicKey(0)\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createInitializeMint2Instruction = createInitializeMint2Instruction;\n/**\n * Decode an InitializeMint2 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeInitializeMint2Instruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializeMint2InstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint\n    },\n    data\n  } = decodeInitializeMint2InstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.InitializeMint2) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!mint) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data\n  };\n}\n\nexports.decodeInitializeMint2Instruction = decodeInitializeMint2Instruction;\n/**\n * Decode an InitializeMint2 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeInitializeMint2InstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [mint],\n    data\n  } = _ref;\n  const {\n    instruction,\n    decimals,\n    mintAuthority,\n    freezeAuthorityOption,\n    freezeAuthority\n  } = exports.initializeMint2InstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data: {\n      instruction,\n      decimals,\n      mintAuthority,\n      freezeAuthority: freezeAuthorityOption ? freezeAuthority : null\n    }\n  };\n}\n\nexports.decodeInitializeMint2InstructionUnchecked = decodeInitializeMint2InstructionUnchecked;","map":{"version":3,"sources":["../../../src/instructions/initializeMint2.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeInitializeMint2InstructionUnchecked = exports.decodeInitializeMint2Instruction = exports.createInitializeMint2Instruction = exports.initializeMint2InstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.initializeMint2InstructionData = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('instruction'),\n    (0, buffer_layout_1.u8)('decimals'),\n    (0, buffer_layout_utils_1.publicKey)('mintAuthority'),\n    (0, buffer_layout_1.u8)('freezeAuthorityOption'),\n    (0, buffer_layout_utils_1.publicKey)('freezeAuthority'),\n]);\n/**\n * Construct an InitializeMint2 instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeMint2Instruction(mint, decimals, mintAuthority, freezeAuthority, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(exports.initializeMint2InstructionData.span);\n    exports.initializeMint2InstructionData.encode({\n        instruction: types_js_1.TokenInstruction.InitializeMint2,\n        decimals,\n        mintAuthority,\n        freezeAuthorityOption: freezeAuthority ? 1 : 0,\n        freezeAuthority: freezeAuthority || new web3_js_1.PublicKey(0),\n    }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createInitializeMint2Instruction = createInitializeMint2Instruction;\n/**\n * Decode an InitializeMint2 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeInitializeMint2Instruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.initializeMint2InstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { mint }, data, } = decodeInitializeMint2InstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.InitializeMint2)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\nexports.decodeInitializeMint2Instruction = decodeInitializeMint2Instruction;\n/**\n * Decode an InitializeMint2 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeInitializeMint2InstructionUnchecked({ programId, keys: [mint], data, }) {\n    const { instruction, decimals, mintAuthority, freezeAuthorityOption, freezeAuthority } = exports.initializeMint2InstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: {\n            instruction,\n            decimals,\n            mintAuthority,\n            freezeAuthority: freezeAuthorityOption ? freezeAuthority : null,\n        },\n    };\n}\nexports.decodeInitializeMint2InstructionUnchecked = decodeInitializeMint2InstructionUnchecked;\n//# sourceMappingURL=initializeMint2.js.map"]},"metadata":{},"sourceType":"script"}