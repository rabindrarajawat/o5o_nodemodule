{"ast":null,"code":"import { toMetadataAccount } from '../accounts.mjs';\nimport { GmaBuilder } from '../../../utils/GmaBuilder.mjs';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { toMetadata } from '../models/Metadata.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByMintListOperation';\n/**\n * Finds multiple NFTs and SFTs by a given list of mint addresses.\n *\n * ```ts\n * const nfts = await metaplex\n *   .nfts()\n *   .findAllByMintList({ mints: [...] };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst findNftsByMintListOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst findNftsByMintListOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const {\n      commitment,\n      programs\n    } = scope;\n    const {\n      mints\n    } = operation.input;\n    const nftPdas = metaplex.nfts().pdas();\n    const metadataPdas = mints.map(mint => nftPdas.metadata({\n      mint,\n      programs\n    }));\n    const metadataInfos = await GmaBuilder.make(metaplex, metadataPdas, {\n      commitment\n    }).get();\n    scope.throwIfCanceled();\n    return metadataInfos.map(account => {\n      if (!account.exists) {\n        return null;\n      }\n\n      try {\n        return toMetadata(toMetadataAccount(account));\n      } catch (error) {\n        return null;\n      }\n    });\n  }\n};\nexport { findNftsByMintListOperation, findNftsByMintListOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/nftModule/operations/findNftsByMintList.ts"],"names":["Key","findNftsByMintListOperation","useOperation","findNftsByMintListOperationHandler","handle","operation","metaplex","scope","commitment","programs","mints","input","nftPdas","nfts","pdas","metadataPdas","map","mint","metadata","metadataInfos","GmaBuilder","make","get","throwIfCanceled","account","exists","toMetadata","toMetadataAccount","error"],"mappings":";;;qDAYA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,6BAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,2BAA2B,GACtCC,YAAY,CAA8BF,GAA9B,C;AAEd;AACA;AACA;AACA;;AAsBA;AACA;AACA;AACA;;AACO,MAAMG,kCAAiF,GAC5F;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIgC;IACtC,MAAM;MAAEC,UAAF;MAAcC;IAAd,IAA2BF,KAAjC;IACA,MAAM;MAAEG;IAAF,IAAYL,SAAS,CAACM,KAA5B;IACA,MAAMC,OAAO,GAAGN,QAAQ,CAACO,IAATP,GAAgBQ,IAAhBR,EAAhB;IACA,MAAMS,YAAY,GAAGL,KAAK,CAACM,GAANN,CAAWO,IAAI,IAClCL,OAAO,CAACM,QAARN,CAAiB;MAAEK,IAAF;MAAQR;IAAR,CAAjBG,CADmBF,CAArB;IAGA,MAAMS,aAAa,GAAG,MAAMC,UAAU,CAACC,IAAXD,CAAgBd,QAAhBc,EAA0BL,YAA1BK,EAAwC;MAClEZ;IADkE,CAAxCY,EAEzBE,GAFyBF,EAA5B;IAGAb,KAAK,CAACgB,eAANhB;IAEA,OAAOY,aAAa,CAACH,GAAdG,CAAoCK,OAAO,IAAK;MACrD,IAAI,CAACA,OAAO,CAACC,MAAb,EAAqB;QACnB,OAAO,IAAP;MACF;;MAEA,IAAI;QACF,OAAOC,UAAU,CAACC,iBAAiB,CAACH,OAAD,CAAlB,CAAjB;MACD,CAFD,CAEE,OAAOI,KAAP,EAAc;QACd,OAAO,IAAP;MACF;IACD,CAVMT,CAAP;EAWF;AA5BF,CADK","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { toMetadataAccount } from '../accounts';\nimport { Metadata, Nft, Sft, toMetadata } from '../models';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { GmaBuilder } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByMintListOperation' as const;\n\n/**\n * Finds multiple NFTs and SFTs by a given list of mint addresses.\n *\n * ```ts\n * const nfts = await metaplex\n *   .nfts()\n *   .findAllByMintList({ mints: [...] };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findNftsByMintListOperation =\n  useOperation<FindNftsByMintListOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindNftsByMintListOperation = Operation<\n  typeof Key,\n  FindNftsByMintListInput,\n  FindNftsByMintListOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindNftsByMintListInput = {\n  /** The addresses of all mint accounts we want to fetch. */\n  mints: PublicKey[];\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindNftsByMintListOutput = (Metadata | Nft | Sft | null)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findNftsByMintListOperationHandler: OperationHandler<FindNftsByMintListOperation> =\n  {\n    handle: async (\n      operation: FindNftsByMintListOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindNftsByMintListOutput> => {\n      const { commitment, programs } = scope;\n      const { mints } = operation.input;\n      const nftPdas = metaplex.nfts().pdas();\n      const metadataPdas = mints.map((mint) =>\n        nftPdas.metadata({ mint, programs })\n      );\n      const metadataInfos = await GmaBuilder.make(metaplex, metadataPdas, {\n        commitment,\n      }).get();\n      scope.throwIfCanceled();\n\n      return metadataInfos.map<Metadata | null>((account) => {\n        if (!account.exists) {\n          return null;\n        }\n\n        try {\n          return toMetadata(toMetadataAccount(account));\n        } catch (error) {\n          return null;\n        }\n      });\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}