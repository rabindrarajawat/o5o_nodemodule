{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.mjs';\nimport fetch from 'node-fetch';\nimport { getBytesFromMetaplexFiles, toMetaplexFileFromJson, toMetaplexFile } from './MetaplexFile.mjs';\nimport { DriverNotProvidedError, InvalidJsonStringError } from '../../errors/SdkError.mjs';\n/**\n * @group Modules\n */\n\nclass StorageClient {\n  constructor() {\n    _defineProperty(this, \"_driver\", null);\n  }\n\n  driver() {\n    if (!this._driver) {\n      throw new DriverNotProvidedError('StorageDriver');\n    }\n\n    return this._driver;\n  }\n\n  setDriver(newDriver) {\n    this._driver = newDriver;\n  }\n\n  getUploadPriceForBytes(bytes) {\n    return this.driver().getUploadPrice(bytes);\n  }\n\n  getUploadPriceForFile(file) {\n    return this.getUploadPriceForFiles([file]);\n  }\n\n  getUploadPriceForFiles(files) {\n    const driver = this.driver();\n    return driver.getUploadPriceForFiles ? driver.getUploadPriceForFiles(files) : this.getUploadPriceForBytes(getBytesFromMetaplexFiles(...files));\n  }\n\n  upload(file) {\n    return this.driver().upload(file);\n  }\n\n  uploadAll(files) {\n    const driver = this.driver();\n    return driver.uploadAll ? driver.uploadAll(files) : Promise.all(files.map(file => this.driver().upload(file)));\n  }\n\n  uploadJson(json) {\n    return this.upload(toMetaplexFileFromJson(json));\n  }\n\n  async download(uri, options) {\n    const driver = this.driver();\n\n    if (driver.download) {\n      return driver.download(uri, options);\n    }\n\n    const response = await fetch(uri, options);\n    const buffer = await response.arrayBuffer();\n    return toMetaplexFile(buffer, uri);\n  }\n\n  async downloadJson(uri, options) {\n    const file = await this.download(uri, options);\n\n    try {\n      return JSON.parse(file.buffer.toString());\n    } catch (error) {\n      throw new InvalidJsonStringError(error);\n    }\n  }\n\n}\n\nexport { StorageClient };","map":{"version":3,"sources":["../../../../src/plugins/storageModule/StorageClient.ts"],"names":["StorageClient","driver","_driver","DriverNotProvidedError","setDriver","newDriver","getUploadPriceForBytes","bytes","getUploadPrice","getUploadPriceForFile","file","getUploadPriceForFiles","files","getBytesFromMetaplexFiles","upload","uploadAll","Promise","all","map","uploadJson","json","toMetaplexFileFromJson","download","uri","options","response","fetch","buffer","arrayBuffer","toMetaplexFile","downloadJson","JSON","parse","toString","error","InvalidJsonStringError"],"mappings":";;;;AAWA;AACA;AACA;;AACO,MAAMA,aAAN,CAAwD;EAAA,WAAA,GAAA;IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EACrB,IADqB,CAAA;EACjB;;EAE5CC,MAAM,GAAkB;IACtB,IAAI,CAAC,KAAKC,OAAV,EAAmB;MACjB,MAAM,IAAIC,sBAAJ,CAA2B,eAA3B,CAAN;IACF;;IAEA,OAAO,KAAKD,OAAZ;EACF;;EAEAE,SAAS,CAACC,SAAD,EAAiC;IACxC,KAAKH,OAAL,GAAeG,SAAf;EACF;;EAEAC,sBAAsB,CAACC,KAAD,EAAiC;IACrD,OAAO,KAAKN,MAAL,GAAcO,cAAd,CAA6BD,KAA7B,CAAP;EACF;;EAEAE,qBAAqB,CAACC,IAAD,EAAsC;IACzD,OAAO,KAAKC,sBAAL,CAA4B,CAACD,IAAD,CAA5B,CAAP;EACF;;EAEAC,sBAAsB,CAACC,KAAD,EAAyC;IAC7D,MAAMX,MAAM,GAAG,KAAKA,MAAL,EAAf;IAEA,OAAOA,MAAM,CAACU,sBAAPV,GACHA,MAAM,CAACU,sBAAPV,CAA8BW,KAA9BX,CADGA,GAEH,KAAKK,sBAAL,CAA4BO,yBAAyB,CAAC,GAAGD,KAAJ,CAArD,CAFJ;EAGF;;EAEAE,MAAM,CAACJ,IAAD,EAAsC;IAC1C,OAAO,KAAKT,MAAL,GAAca,MAAd,CAAqBJ,IAArB,CAAP;EACF;;EAEAK,SAAS,CAACH,KAAD,EAA2C;IAClD,MAAMX,MAAM,GAAG,KAAKA,MAAL,EAAf;IAEA,OAAOA,MAAM,CAACc,SAAPd,GACHA,MAAM,CAACc,SAAPd,CAAiBW,KAAjBX,CADGA,GAEHe,OAAO,CAACC,GAARD,CAAYJ,KAAK,CAACM,GAANN,CAAWF,IAAI,IAAK,KAAKT,MAAL,GAAca,MAAd,CAAqBJ,IAArB,CAApBE,CAAZI,CAFJ;EAGF;;EAEAG,UAAU,CAA4BC,IAA5B,EAAsD;IAC9D,OAAO,KAAKN,MAAL,CAAYO,sBAAsB,CAAID,IAAJ,CAAlC,CAAP;EACF;;EAEc,MAARE,QAAQ,CACZC,GADY,EAEZC,OAFY,EAGW;IACvB,MAAMvB,MAAM,GAAG,KAAKA,MAAL,EAAf;;IAEA,IAAIA,MAAM,CAACqB,QAAX,EAAqB;MACnB,OAAOrB,MAAM,CAACqB,QAAPrB,CAAgBsB,GAAhBtB,EAAqBuB,OAArBvB,CAAP;IACF;;IAEA,MAAMwB,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAMC,OAAN,CAA5B;IACA,MAAMG,MAAM,GAAG,MAAMF,QAAQ,CAACG,WAATH,EAArB;IAEA,OAAOI,cAAc,CAACF,MAAD,EAASJ,GAAT,CAArB;EACF;;EAEkB,MAAZO,YAAY,CAChBP,GADgB,EAEhBC,OAFgB,EAGJ;IACZ,MAAMd,IAAI,GAAG,MAAM,KAAKY,QAAL,CAAcC,GAAd,EAAmBC,OAAnB,CAAnB;;IAEA,IAAI;MACF,OAAOO,IAAI,CAACC,KAALD,CAAWrB,IAAI,CAACiB,MAALjB,CAAYuB,QAAZvB,EAAXqB,CAAP;IACD,CAFD,CAEE,OAAOG,KAAP,EAAc;MACd,MAAM,IAAIC,sBAAJ,CAA2BD,KAA3B,CAAN;IACF;EACF;;AA1E6D","sourcesContent":["import fetch, { RequestInit } from 'node-fetch';\nimport {\n  getBytesFromMetaplexFiles,\n  MetaplexFile,\n  toMetaplexFile,\n  toMetaplexFileFromJson,\n} from './MetaplexFile';\nimport { StorageDownloadOptions, StorageDriver } from './StorageDriver';\nimport { Amount, HasDriver } from '@/types';\nimport { DriverNotProvidedError, InvalidJsonStringError } from '@/errors';\n\n/**\n * @group Modules\n */\nexport class StorageClient implements HasDriver<StorageDriver> {\n  private _driver: StorageDriver | null = null;\n\n  driver(): StorageDriver {\n    if (!this._driver) {\n      throw new DriverNotProvidedError('StorageDriver');\n    }\n\n    return this._driver;\n  }\n\n  setDriver(newDriver: StorageDriver): void {\n    this._driver = newDriver;\n  }\n\n  getUploadPriceForBytes(bytes: number): Promise<Amount> {\n    return this.driver().getUploadPrice(bytes);\n  }\n\n  getUploadPriceForFile(file: MetaplexFile): Promise<Amount> {\n    return this.getUploadPriceForFiles([file]);\n  }\n\n  getUploadPriceForFiles(files: MetaplexFile[]): Promise<Amount> {\n    const driver = this.driver();\n\n    return driver.getUploadPriceForFiles\n      ? driver.getUploadPriceForFiles(files)\n      : this.getUploadPriceForBytes(getBytesFromMetaplexFiles(...files));\n  }\n\n  upload(file: MetaplexFile): Promise<string> {\n    return this.driver().upload(file);\n  }\n\n  uploadAll(files: MetaplexFile[]): Promise<string[]> {\n    const driver = this.driver();\n\n    return driver.uploadAll\n      ? driver.uploadAll(files)\n      : Promise.all(files.map((file) => this.driver().upload(file)));\n  }\n\n  uploadJson<T extends object = object>(json: T): Promise<string> {\n    return this.upload(toMetaplexFileFromJson<T>(json));\n  }\n\n  async download(\n    uri: string,\n    options?: StorageDownloadOptions\n  ): Promise<MetaplexFile> {\n    const driver = this.driver();\n\n    if (driver.download) {\n      return driver.download(uri, options);\n    }\n\n    const response = await fetch(uri, options as RequestInit);\n    const buffer = await response.arrayBuffer();\n\n    return toMetaplexFile(buffer, uri);\n  }\n\n  async downloadJson<T extends object = object>(\n    uri: string,\n    options?: StorageDownloadOptions\n  ): Promise<T> {\n    const file = await this.download(uri, options);\n\n    try {\n      return JSON.parse(file.buffer.toString());\n    } catch (error) {\n      throw new InvalidJsonStringError(error as Error);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}