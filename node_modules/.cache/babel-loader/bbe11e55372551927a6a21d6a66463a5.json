{"ast":null,"code":"import { UninitializedWalletAdapterError, OperationNotSupportedByWalletAdapterError } from '../../errors/SdkError.mjs';\n\nclass WalletAdapterIdentityDriver {\n  constructor(walletAdapter) {\n    this.walletAdapter = walletAdapter;\n  }\n\n  get publicKey() {\n    if (!this.walletAdapter.publicKey) {\n      throw new UninitializedWalletAdapterError();\n    }\n\n    return this.walletAdapter.publicKey;\n  }\n\n  async signMessage(message) {\n    if (this.walletAdapter.signMessage === undefined) {\n      throw new OperationNotSupportedByWalletAdapterError('signMessage');\n    }\n\n    return this.walletAdapter.signMessage(message);\n  }\n\n  async signTransaction(transaction) {\n    if (this.walletAdapter.signTransaction === undefined) {\n      throw new OperationNotSupportedByWalletAdapterError('signTransaction');\n    }\n\n    return this.walletAdapter.signTransaction(transaction);\n  }\n\n  async signAllTransactions(transactions) {\n    if (this.walletAdapter.signAllTransactions === undefined) {\n      throw new OperationNotSupportedByWalletAdapterError('signAllTransactions');\n    }\n\n    return this.walletAdapter.signAllTransactions(transactions);\n  }\n\n}\n\nexport { WalletAdapterIdentityDriver };","map":{"version":3,"sources":["../../../../src/plugins/walletAdapterIdentity/WalletAdapterIdentityDriver.ts"],"names":["WalletAdapterIdentityDriver","constructor","walletAdapter","publicKey","UninitializedWalletAdapterError","signMessage","message","undefined","OperationNotSupportedByWalletAdapterError","signTransaction","transaction","signAllTransactions","transactions"],"mappings":";;AAcO,MAAMA,2BAAN,CAA4D;EAGjEC,WAAW,CAACC,aAAD,EAA+B;IACxC,KAAKA,aAAL,GAAqBA,aAArB;EACF;;EAEa,IAATC,SAAS,GAAc;IACzB,IAAI,CAAC,KAAKD,aAAL,CAAmBC,SAAxB,EAAmC;MACjC,MAAM,IAAIC,+BAAJ,EAAN;IACF;;IAEA,OAAO,KAAKF,aAAL,CAAmBC,SAA1B;EACF;;EAEwB,MAAXE,WAAW,CAACC,OAAD,EAA2C;IACjE,IAAI,KAAKJ,aAAL,CAAmBG,WAAnB,KAAmCE,SAAvC,EAAkD;MAChD,MAAM,IAAIC,yCAAJ,CAA8C,aAA9C,CAAN;IACF;;IAEA,OAAO,KAAKN,aAAL,CAAmBG,WAAnB,CAA+BC,OAA/B,CAAP;EACF;;EAE4B,MAAfG,eAAe,CAACC,WAAD,EAAiD;IAC3E,IAAI,KAAKR,aAAL,CAAmBO,eAAnB,KAAuCF,SAA3C,EAAsD;MACpD,MAAM,IAAIC,yCAAJ,CAA8C,iBAA9C,CAAN;IACF;;IAEA,OAAO,KAAKN,aAAL,CAAmBO,eAAnB,CAAmCC,WAAnC,CAAP;EACF;;EAEgC,MAAnBC,mBAAmB,CAC9BC,YAD8B,EAEN;IACxB,IAAI,KAAKV,aAAL,CAAmBS,mBAAnB,KAA2CJ,SAA/C,EAA0D;MACxD,MAAM,IAAIC,yCAAJ,CACJ,qBADI,CAAN;IAGF;;IAEA,OAAO,KAAKN,aAAL,CAAmBS,mBAAnB,CAAuCC,YAAvC,CAAP;EACF;;AAzCiE","sourcesContent":["import { PublicKey, Transaction } from '@solana/web3.js';\nimport { IdentityDriver } from '../identityModule';\nimport {\n  OperationNotSupportedByWalletAdapterError,\n  UninitializedWalletAdapterError,\n} from '@/errors';\n\nexport type WalletAdapter = {\n  publicKey: PublicKey | null;\n  signMessage?: (message: Uint8Array) => Promise<Uint8Array>;\n  signTransaction?: (transaction: Transaction) => Promise<Transaction>;\n  signAllTransactions?: (transactions: Transaction[]) => Promise<Transaction[]>;\n};\n\nexport class WalletAdapterIdentityDriver implements IdentityDriver {\n  public readonly walletAdapter: WalletAdapter;\n\n  constructor(walletAdapter: WalletAdapter) {\n    this.walletAdapter = walletAdapter;\n  }\n\n  get publicKey(): PublicKey {\n    if (!this.walletAdapter.publicKey) {\n      throw new UninitializedWalletAdapterError();\n    }\n\n    return this.walletAdapter.publicKey;\n  }\n\n  public async signMessage(message: Uint8Array): Promise<Uint8Array> {\n    if (this.walletAdapter.signMessage === undefined) {\n      throw new OperationNotSupportedByWalletAdapterError('signMessage');\n    }\n\n    return this.walletAdapter.signMessage(message);\n  }\n\n  public async signTransaction(transaction: Transaction): Promise<Transaction> {\n    if (this.walletAdapter.signTransaction === undefined) {\n      throw new OperationNotSupportedByWalletAdapterError('signTransaction');\n    }\n\n    return this.walletAdapter.signTransaction(transaction);\n  }\n\n  public async signAllTransactions(\n    transactions: Transaction[]\n  ): Promise<Transaction[]> {\n    if (this.walletAdapter.signAllTransactions === undefined) {\n      throw new OperationNotSupportedByWalletAdapterError(\n        'signAllTransactions'\n      );\n    }\n\n    return this.walletAdapter.signAllTransactions(transactions);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}