{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getParsedAccountByMint = void 0;\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar solana_1 = require(\"./config/solana\");\n\nvar utils_1 = require(\"./utils\");\n\nfunction isParsedAccountData(obj) {\n  return (obj === null || obj === void 0 ? void 0 : obj.parsed) !== undefined;\n}\n/**\n * This fn look for the account associated with passed NFT token mint field.\n * This associated account holds some useful information like who is current owner of token.\n * it is stored within result.account.data.parsed.info.owner\n * Finding the token owner is main purpose of using this fn.\n */\n\n\nvar getParsedAccountByMint = function (_a) {\n  var mintAddress = _a.mintAddress,\n      _b = _a.connection,\n      connection = _b === void 0 ? (0, utils_1.createConnectionConfig)() : _b,\n      _c = _a.stringifyPubKeys,\n      stringifyPubKeys = _c === void 0 ? true : _c;\n  return __awaiter(void 0, void 0, void 0, function () {\n    var res, positiveAmountResult, formatedData;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , connection.getParsedProgramAccounts(new web3_js_1.PublicKey(solana_1.TOKEN_PROGRAM), {\n            filters: [{\n              dataSize: 165\n            }, {\n              memcmp: {\n                offset: 0,\n                bytes: mintAddress\n              }\n            }]\n          })];\n\n        case 1:\n          res = _d.sent();\n\n          if (!(res === null || res === void 0 ? void 0 : res.length)) {\n            return [2\n            /*return*/\n            , undefined];\n          }\n\n          positiveAmountResult = res === null || res === void 0 ? void 0 : res.find(function (_a) {\n            var _b, _c, _d;\n\n            var account = _a.account;\n            var data = account.data;\n\n            if (isParsedAccountData(data)) {\n              var amount = +((_d = (_c = (_b = data === null || data === void 0 ? void 0 : data.parsed) === null || _b === void 0 ? void 0 : _b.info) === null || _c === void 0 ? void 0 : _c.tokenAmount) === null || _d === void 0 ? void 0 : _d.amount);\n              return amount;\n            }\n\n            return false;\n          });\n          formatedData = stringifyPubKeys ? publicKeyToString(positiveAmountResult) : positiveAmountResult;\n          return [2\n          /*return*/\n          , formatedData];\n      }\n    });\n  });\n};\n\nexports.getParsedAccountByMint = getParsedAccountByMint;\n\nvar publicKeyToString = function (tokenData) {\n  var _a, _b, _c, _d;\n\n  return __assign(__assign({}, tokenData), {\n    account: __assign(__assign({}, tokenData === null || tokenData === void 0 ? void 0 : tokenData.account), {\n      owner: (_b = (_a = new web3_js_1.PublicKey(tokenData === null || tokenData === void 0 ? void 0 : tokenData.account.owner)) === null || _a === void 0 ? void 0 : _a.toString) === null || _b === void 0 ? void 0 : _b.call(_a)\n    }),\n    pubkey: (_d = (_c = new web3_js_1.PublicKey(tokenData === null || tokenData === void 0 ? void 0 : tokenData.pubkey)) === null || _c === void 0 ? void 0 : _c.toString) === null || _d === void 0 ? void 0 : _d.call(_c)\n  });\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAoBA,SAASA,mBAAT,CAA6BC,GAA7B,EAAqC;EACnC,OAAO,IAAG,SAAH,OAAG,WAAH,GAAG,MAAH,MAAG,CAAEC,MAAL,MAAgBC,SAAvB;AACD;AAED;;;;;;;;AAMO,IAAMC,sBAAsB,GAAG,UAAOC,EAAP,EAI9B;MAHNC,WAAW;MACXC;MAAAC,UAAU,mBAAG,qCAAH,GAA2BD;MACrCE;MAAAC,gBAAgB,mBAAG,IAAH,GAAOD;;;;;;UAEX;UAAA;UAAA,EAAMD,UAAU,CAACG,wBAAX,CAChB,IAAIC,mBAAJ,CAAcC,sBAAd,CADgB,EAEhB;YACEC,OAAO,EAAE,CACP;cAAEC,QAAQ,EAAE;YAAZ,CADO,EAEP;cACEC,MAAM,EAAE;gBACNC,MAAM,EAAE,CADF;gBAENC,KAAK,EAAEZ;cAFD;YADV,CAFO;UADX,CAFgB,CAAN;;;UAANa,GAAG,GAAGC,SAAN;;UAeN,IAAI,EAACD,GAAG,SAAH,OAAG,WAAH,GAAG,MAAH,MAAG,CAAEE,MAAN,CAAJ,EAAkB;YAChB;YAAA;YAAA,EAAOlB,SAAP;UACD;;UAEKmB,oBAAoB,GAAGH,GAAG,SAAH,OAAG,WAAH,GAAG,MAAH,MAAG,CAAEI,IAAL,CAAU,UAAClB,EAAD,EAAY;;;gBAATmB,OAAO;YAC/C,IAAMC,IAAI,GAAGD,OAAO,CAACC,IAArB;;YACA,IAAIzB,mBAAmB,CAACyB,IAAD,CAAvB,EAA+B;cAC7B,IAAMC,MAAM,GAAG,EAAC,sBAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAExB,MAAN,MAAY,IAAZ,IAAYK,aAAZ,GAAY,MAAZ,GAAYA,GAAEoB,IAAd,MAAkB,IAAlB,IAAkBlB,aAAlB,GAAkB,MAAlB,GAAkBA,GAAEmB,WAApB,MAA+B,IAA/B,IAA+BR,aAA/B,GAA+B,MAA/B,GAA+BA,GAAEM,MAAlC,CAAf;cACA,OAAOA,MAAP;YACD;;YACD,OAAO,KAAP;UACD,CAP4B,CAAvB;UAQAG,YAAY,GAAGnB,gBAAgB,GACjCoB,iBAAiB,CAACR,oBAAD,CADgB,GAEjCA,oBAFE;UAIN;UAAA;UAAA,EAAOO,YAAP;;;;AACD,CArCM;;AAAME,iCAAsB3B,sBAAtB;;AAuCb,IAAM0B,iBAAiB,GAAG,UAACE,SAAD,EAAe;;;EAAK,6BACzCA,SADyC,GAChC;IACZR,OAAO,wBACFQ,SAAS,SAAT,aAAS,WAAT,GAAS,MAAT,YAAS,CAAER,OADT,GACgB;MACrBS,KAAK,EAAE,gBAAIrB,mBAAJ,CAAcoB,SAAS,SAAT,aAAS,WAAT,GAAS,MAAT,YAAS,CAAER,OAAX,CAAmBS,KAAjC,OAAuC,IAAvC,IAAuC5B,aAAvC,GAAuC,MAAvC,GAAuCA,GAAE6B,QAAzC,MAAiD,IAAjD,IAAiD3B,aAAjD,GAAiD,MAAjD,GAAiDA;IADnC,CADhB,CADK;IAKZ4B,MAAM,EAAE,gBAAIvB,mBAAJ,CAAcoB,SAAS,SAAT,aAAS,WAAT,GAAS,MAAT,YAAS,CAAEG,MAAzB,OAAgC,IAAhC,IAAgC1B,aAAhC,GAAgC,MAAhC,GAAgCA,GAAEyB,QAAlC,MAA0C,IAA1C,IAA0Cd,aAA1C,GAA0C,MAA1C,GAA0CA;EALtC,CADgC;AAO5C,CAPF","names":["isParsedAccountData","obj","parsed","undefined","getParsedAccountByMint","_a","mintAddress","_b","connection","_c","stringifyPubKeys","getParsedProgramAccounts","web3_js_1","solana_1","filters","dataSize","memcmp","offset","bytes","res","_d","length","positiveAmountResult","find","account","data","amount","info","tokenAmount","formatedData","publicKeyToString","exports","tokenData","owner","toString","pubkey"],"sourceRoot":"","sources":["../src/getParsedAccountByMint.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}