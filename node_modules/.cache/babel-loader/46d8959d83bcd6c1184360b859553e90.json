{"ast":null,"code":"import { createApproveUseAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'ApproveNftUseAuthorityOperation';\n/**\n * Approves a new use authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .approveUseAuthority({ mintAddress, user };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst approveNftUseAuthorityOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst approveNftUseAuthorityOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    return approveNftUseAuthorityBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Approves a new use authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .approveUseAuthority({ mintAddress, user });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst approveNftUseAuthorityBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    mintAddress,\n    user,\n    owner = metaplex.identity()\n  } = params;\n  const systemProgram = metaplex.programs().getSystem(programs);\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs\n  });\n  const useAuthorityRecord = metaplex.nfts().pdas().useAuthorityRecord({\n    mint: mintAddress,\n    useAuthority: user,\n    programs\n  });\n  const programAsBurner = metaplex.nfts().pdas().burner({\n    programs\n  });\n  const ownerTokenAddress = params.ownerTokenAddress ?? metaplex.tokens().pdas().associatedTokenAccount({\n    mint: mintAddress,\n    owner: owner.publicKey,\n    programs\n  });\n  return TransactionBuilder.make().setFeePayer(payer) // Approve the use authority.\n  .add({\n    instruction: createApproveUseAuthorityInstruction({\n      useAuthorityRecord,\n      owner: owner.publicKey,\n      payer: payer.publicKey,\n      user,\n      ownerTokenAccount: ownerTokenAddress,\n      metadata,\n      mint: mintAddress,\n      burner: programAsBurner,\n      tokenProgram: tokenProgram.address,\n      systemProgram: systemProgram.address\n    }, {\n      approveUseAuthorityArgs: {\n        numberOfUses: params.numberOfUses ?? 1\n      }\n    }, tokenMetadataProgram.address),\n    signers: [owner, payer],\n    key: params.instructionKey ?? 'approveUseAuthority'\n  });\n};\n\nexport { approveNftUseAuthorityBuilder, approveNftUseAuthorityOperation, approveNftUseAuthorityOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/nftModule/operations/approveNftUseAuthority.ts"],"names":["Key","approveNftUseAuthorityOperation","useOperation","approveNftUseAuthorityOperationHandler","handle","operation","metaplex","scope","approveNftUseAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","user","owner","identity","systemProgram","getSystem","tokenProgram","getToken","tokenMetadataProgram","getTokenMetadata","metadata","nfts","pdas","mint","useAuthorityRecord","useAuthority","programAsBurner","burner","ownerTokenAddress","tokens","associatedTokenAccount","publicKey","TransactionBuilder","make","setFeePayer","add","instruction","createApproveUseAuthorityInstruction","ownerTokenAccount","address","approveUseAuthorityArgs","numberOfUses","signers","key","instructionKey"],"mappings":"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","sourcesContent":["import { createApproveUseAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ApproveNftUseAuthorityOperation' as const;\n\n/**\n * Approves a new use authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .approveUseAuthority({ mintAddress, user };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const approveNftUseAuthorityOperation =\n  useOperation<ApproveNftUseAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ApproveNftUseAuthorityOperation = Operation<\n  typeof Key,\n  ApproveNftUseAuthorityInput,\n  ApproveNftUseAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type ApproveNftUseAuthorityInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The address of the use authority to approve. */\n  user: PublicKey;\n\n  /**\n   * The owner of the NFT or SFT as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  owner?: Signer;\n\n  /**\n   * The address of the token account linking the mint account\n   * with the owner account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `owner` parameters.\n   */\n  ownerTokenAddress?: PublicKey;\n\n  /**\n   * The number of usages this new use authority\n   * is allowed to perform.\n   *\n   * @defaultValue `1`\n   */\n  numberOfUses?: number;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ApproveNftUseAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const approveNftUseAuthorityOperationHandler: OperationHandler<ApproveNftUseAuthorityOperation> =\n  {\n    handle: async (\n      operation: ApproveNftUseAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<ApproveNftUseAuthorityOutput> => {\n      return approveNftUseAuthorityBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ApproveNftUseAuthorityBuilderParams = Omit<\n  ApproveNftUseAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that approves the use authority. */\n  instructionKey?: string;\n};\n\n/**\n * Approves a new use authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .approveUseAuthority({ mintAddress, user });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const approveNftUseAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: ApproveNftUseAuthorityBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { mintAddress, user, owner = metaplex.identity() } = params;\n\n  const systemProgram = metaplex.programs().getSystem(programs);\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs,\n  });\n  const useAuthorityRecord = metaplex.nfts().pdas().useAuthorityRecord({\n    mint: mintAddress,\n    useAuthority: user,\n    programs,\n  });\n  const programAsBurner = metaplex.nfts().pdas().burner({\n    programs,\n  });\n  const ownerTokenAddress =\n    params.ownerTokenAddress ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: owner.publicKey,\n      programs,\n    });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Approve the use authority.\n      .add({\n        instruction: createApproveUseAuthorityInstruction(\n          {\n            useAuthorityRecord,\n            owner: owner.publicKey,\n            payer: payer.publicKey,\n            user,\n            ownerTokenAccount: ownerTokenAddress,\n            metadata,\n            mint: mintAddress,\n            burner: programAsBurner,\n            tokenProgram: tokenProgram.address,\n            systemProgram: systemProgram.address,\n          },\n          {\n            approveUseAuthorityArgs: {\n              numberOfUses: params.numberOfUses ?? 1,\n            },\n          },\n          tokenMetadataProgram.address\n        ),\n        signers: [owner, payer],\n        key: params.instructionKey ?? 'approveUseAuthority',\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}