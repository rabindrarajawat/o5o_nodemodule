{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { NATIVE_MINT_2022, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { createCreateNativeMintInstruction } from '../instructions/createNativeMint.js';\n/**\n * Create native mint\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param nativeMint               Native mint id associated with program\n */\n\nexport async function createNativeMint(connection, payer, confirmOptions) {\n  let nativeMint = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : NATIVE_MINT_2022;\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_2022_PROGRAM_ID;\n  const transaction = new Transaction().add(createCreateNativeMintInstruction(payer.publicKey, nativeMint, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}","map":{"version":3,"sources":["../../../src/actions/createNativeMint.ts"],"names":[],"mappings":"AACA,SAAS,yBAAT,EAAoC,WAApC,QAAuD,iBAAvD;AACA,SAAS,gBAAT,EAA2B,qBAA3B,QAAwD,iBAAxD;AACA,SAAS,iCAAT,QAAkD,qCAAlD;AAEA;;;;;;;;AAQG;;AACH,OAAO,eAAe,gBAAf,CACH,UADG,EAEH,KAFG,EAGH,cAHG,EAK8B;EAAA,IADjC,UACiC,uEADpB,gBACoB;EAAA,IAAjC,SAAiC,uEAArB,qBAAqB;EAEjC,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,iCAAiC,CAAC,KAAK,CAAC,SAAP,EAAkB,UAAlB,EAA8B,SAA9B,CADjB,CAApB;EAGA,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,CAA1B,EAAmC,cAAnC,CAA/B;AACH","sourceRoot":"","sourcesContent":["import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { NATIVE_MINT_2022, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { createCreateNativeMintInstruction } from '../instructions/createNativeMint.js';\n/**\n * Create native mint\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param nativeMint               Native mint id associated with program\n */\nexport async function createNativeMint(connection, payer, confirmOptions, nativeMint = NATIVE_MINT_2022, programId = TOKEN_2022_PROGRAM_ID) {\n    const transaction = new Transaction().add(createCreateNativeMintInstruction(payer.publicKey, nativeMint, programId));\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n//# sourceMappingURL=createNativeMint.js.map"]},"metadata":{},"sourceType":"module"}