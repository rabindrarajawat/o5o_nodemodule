{"ast":null,"code":"import { CandyMachineClient } from './CandyMachineClient.mjs';\nimport { candyMachineProgram, defaultCandyGuardProgram, gatewayProgram } from './programs.mjs';\nimport { updateCandyGuardAuthorityOperation, updateCandyGuardAuthorityOperationHandler } from './operations/updateCandyGuardAuthority.mjs';\nimport { freezeSolPaymentGuardManifest } from './guards/freezeSolPayment.mjs';\nimport { freezeTokenPaymentGuardManifest } from './guards/freezeTokenPayment.mjs';\nimport { botTaxGuardManifest } from './guards/botTax.mjs';\nimport { solPaymentGuardManifest } from './guards/solPayment.mjs';\nimport { tokenPaymentGuardManifest } from './guards/tokenPayment.mjs';\nimport { startDateGuardManifest } from './guards/startDate.mjs';\nimport { thirdPartySignerGuardManifest } from './guards/thirdPartySigner.mjs';\nimport { tokenGateGuardManifest } from './guards/tokenGate.mjs';\nimport { gatekeeperGuardManifest } from './guards/gatekeeper.mjs';\nimport { endDateGuardManifest } from './guards/endDate.mjs';\nimport { allowListGuardManifest } from './guards/allowList.mjs';\nimport { mintLimitGuardManifest } from './guards/mintLimit.mjs';\nimport { nftPaymentGuardManifest } from './guards/nftPayment.mjs';\nimport { redeemedAmountGuardManifest } from './guards/redeemedAmount.mjs';\nimport { addressGateGuardManifest } from './guards/addressGate.mjs';\nimport { nftGateGuardManifest } from './guards/nftGate.mjs';\nimport { nftBurnGuardManifest } from './guards/nftBurn.mjs';\nimport { tokenBurnGuardManifest } from './guards/tokenBurn.mjs';\nimport { programGateGuardManifest } from './guards/programGate.mjs';\nimport { callCandyGuardRouteOperation, callCandyGuardRouteOperationHandler } from './operations/callCandyGuardRoute.mjs';\nimport { createCandyGuardOperation, createCandyGuardOperationHandler } from './operations/createCandyGuard.mjs';\nimport { createCandyMachineOperation, createCandyMachineOperationHandler } from './operations/createCandyMachine.mjs';\nimport { deleteCandyGuardOperation, deleteCandyGuardOperationHandler } from './operations/deleteCandyGuard.mjs';\nimport { deleteCandyMachineOperation, deleteCandyMachineOperationHandler } from './operations/deleteCandyMachine.mjs';\nimport { findCandyGuardByAddressOperation, findCandyGuardByAddressOperationHandler } from './operations/findCandyGuardByAddress.mjs';\nimport { findCandyGuardsByAuthorityOperation, findCandyGuardsByAuthorityOperationHandler } from './operations/findCandyGuardsByAuthority.mjs';\nimport { findCandyMachineByAddressOperation, findCandyMachineByAddressOperationHandler } from './operations/findCandyMachineByAddress.mjs';\nimport { insertCandyMachineItemsOperation, insertCandyMachineItemsOperationHandler } from './operations/insertCandyMachineItems.mjs';\nimport { mintFromCandyMachineOperation, mintFromCandyMachineOperationHandler } from './operations/mintFromCandyMachine.mjs';\nimport { unwrapCandyGuardOperation, unwrapCandyGuardOperationHandler } from './operations/unwrapCandyGuard.mjs';\nimport { updateCandyGuardOperation, updateCandyGuardOperationHandler } from './operations/updateCandyGuard.mjs';\nimport { updateCandyMachineOperation, updateCandyMachineOperationHandler } from './operations/updateCandyMachine.mjs';\nimport { wrapCandyGuardOperation, wrapCandyGuardOperationHandler } from './operations/wrapCandyGuard.mjs';\n/** @group Plugins */\n\nconst candyMachineModule = () => ({\n  install(metaplex) {\n    // Client.\n    const client = new CandyMachineClient(metaplex);\n\n    metaplex.candyMachines = () => client; // Candy Machine Program.\n\n\n    metaplex.programs().register(candyMachineProgram);\n\n    metaplex.programs().getCandyMachine = function (programs) {\n      return this.get(candyMachineProgram.name, programs);\n    }; // Candy Guard Program.\n\n\n    metaplex.programs().register(defaultCandyGuardProgram);\n\n    metaplex.programs().getCandyGuard = function (programs) {\n      return this.get(defaultCandyGuardProgram.name, programs);\n    }; // Gateway Program.\n\n\n    metaplex.programs().register(gatewayProgram);\n\n    metaplex.programs().getGateway = function (programs) {\n      return this.get(gatewayProgram.name, programs);\n    }; // Default Guards.\n\n\n    client.guards().register(botTaxGuardManifest);\n    client.guards().register(solPaymentGuardManifest);\n    client.guards().register(tokenPaymentGuardManifest);\n    client.guards().register(startDateGuardManifest);\n    client.guards().register(thirdPartySignerGuardManifest);\n    client.guards().register(tokenGateGuardManifest);\n    client.guards().register(gatekeeperGuardManifest);\n    client.guards().register(endDateGuardManifest);\n    client.guards().register(allowListGuardManifest);\n    client.guards().register(mintLimitGuardManifest);\n    client.guards().register(nftPaymentGuardManifest);\n    client.guards().register(redeemedAmountGuardManifest);\n    client.guards().register(addressGateGuardManifest);\n    client.guards().register(nftGateGuardManifest);\n    client.guards().register(nftBurnGuardManifest);\n    client.guards().register(tokenBurnGuardManifest);\n    client.guards().register(freezeSolPaymentGuardManifest);\n    client.guards().register(freezeTokenPaymentGuardManifest);\n    client.guards().register(programGateGuardManifest); // Operations.\n\n    const op = metaplex.operations();\n    op.register(callCandyGuardRouteOperation, callCandyGuardRouteOperationHandler);\n    op.register(createCandyGuardOperation, createCandyGuardOperationHandler);\n    op.register(createCandyMachineOperation, createCandyMachineOperationHandler);\n    op.register(deleteCandyGuardOperation, deleteCandyGuardOperationHandler);\n    op.register(deleteCandyMachineOperation, deleteCandyMachineOperationHandler);\n    op.register(findCandyGuardByAddressOperation, findCandyGuardByAddressOperationHandler);\n    op.register(findCandyGuardsByAuthorityOperation, findCandyGuardsByAuthorityOperationHandler);\n    op.register(findCandyMachineByAddressOperation, findCandyMachineByAddressOperationHandler);\n    op.register(insertCandyMachineItemsOperation, insertCandyMachineItemsOperationHandler);\n    op.register(mintFromCandyMachineOperation, mintFromCandyMachineOperationHandler);\n    op.register(unwrapCandyGuardOperation, unwrapCandyGuardOperationHandler);\n    op.register(updateCandyGuardAuthorityOperation, updateCandyGuardAuthorityOperationHandler);\n    op.register(updateCandyGuardOperation, updateCandyGuardOperationHandler);\n    op.register(updateCandyMachineOperation, updateCandyMachineOperationHandler);\n    op.register(wrapCandyGuardOperation, wrapCandyGuardOperationHandler);\n  }\n\n});\n\nexport { candyMachineModule };","map":{"version":3,"sources":["../../../../src/plugins/candyMachineModule/plugin.ts"],"names":["candyMachineModule","install","metaplex","client","CandyMachineClient","candyMachines","programs","register","candyMachineProgram","getCandyMachine","get","name","defaultCandyGuardProgram","getCandyGuard","gatewayProgram","getGateway","guards","botTaxGuardManifest","solPaymentGuardManifest","tokenPaymentGuardManifest","startDateGuardManifest","thirdPartySignerGuardManifest","tokenGateGuardManifest","gatekeeperGuardManifest","endDateGuardManifest","allowListGuardManifest","mintLimitGuardManifest","nftPaymentGuardManifest","redeemedAmountGuardManifest","addressGateGuardManifest","nftGateGuardManifest","nftBurnGuardManifest","tokenBurnGuardManifest","freezeSolPaymentGuardManifest","freezeTokenPaymentGuardManifest","programGateGuardManifest","op","operations","callCandyGuardRouteOperation","callCandyGuardRouteOperationHandler","createCandyGuardOperation","createCandyGuardOperationHandler","createCandyMachineOperation","createCandyMachineOperationHandler","deleteCandyGuardOperation","deleteCandyGuardOperationHandler","deleteCandyMachineOperation","deleteCandyMachineOperationHandler","findCandyGuardByAddressOperation","findCandyGuardByAddressOperationHandler","findCandyGuardsByAuthorityOperation","findCandyGuardsByAuthorityOperationHandler","findCandyMachineByAddressOperation","findCandyMachineByAddressOperationHandler","insertCandyMachineItemsOperation","insertCandyMachineItemsOperationHandler","mintFromCandyMachineOperation","mintFromCandyMachineOperationHandler","unwrapCandyGuardOperation","unwrapCandyGuardOperationHandler","updateCandyGuardAuthorityOperation","updateCandyGuardAuthorityOperationHandler","updateCandyGuardOperation","updateCandyGuardOperationHandler","updateCandyMachineOperation","updateCandyMachineOperationHandler","wrapCandyGuardOperation","wrapCandyGuardOperationHandler"],"mappings":"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","sourcesContent":["import { ProgramClient } from '../programModule';\nimport { CandyMachineClient } from './CandyMachineClient';\nimport {\n  addressGateGuardManifest,\n  allowListGuardManifest,\n  botTaxGuardManifest,\n  endDateGuardManifest,\n  gatekeeperGuardManifest,\n  mintLimitGuardManifest,\n  nftBurnGuardManifest,\n  nftGateGuardManifest,\n  nftPaymentGuardManifest,\n  programGateGuardManifest,\n  redeemedAmountGuardManifest,\n  solPaymentGuardManifest,\n  startDateGuardManifest,\n  thirdPartySignerGuardManifest,\n  tokenBurnGuardManifest,\n  tokenGateGuardManifest,\n  tokenPaymentGuardManifest,\n} from './guards';\nimport {\n  CallCandyGuardRouteOperation,\n  callCandyGuardRouteOperation,\n  callCandyGuardRouteOperationHandler,\n  createCandyGuardOperation,\n  createCandyGuardOperationHandler,\n  createCandyMachineOperation,\n  createCandyMachineOperationHandler,\n  deleteCandyGuardOperation,\n  deleteCandyGuardOperationHandler,\n  deleteCandyMachineOperation,\n  deleteCandyMachineOperationHandler,\n  findCandyGuardByAddressOperation,\n  findCandyGuardByAddressOperationHandler,\n  findCandyGuardsByAuthorityOperation,\n  findCandyGuardsByAuthorityOperationHandler,\n  findCandyMachineByAddressOperation,\n  findCandyMachineByAddressOperationHandler,\n  insertCandyMachineItemsOperation,\n  insertCandyMachineItemsOperationHandler,\n  mintFromCandyMachineOperation,\n  mintFromCandyMachineOperationHandler,\n  unwrapCandyGuardOperation,\n  unwrapCandyGuardOperationHandler,\n  updateCandyGuardOperation,\n  updateCandyGuardOperationHandler,\n  updateCandyMachineOperation,\n  updateCandyMachineOperationHandler,\n  wrapCandyGuardOperation,\n  wrapCandyGuardOperationHandler,\n} from './operations';\nimport {\n  CandyGuardProgram,\n  candyMachineProgram,\n  defaultCandyGuardProgram,\n  gatewayProgram,\n} from './programs';\nimport {\n  updateCandyGuardAuthorityOperation,\n  updateCandyGuardAuthorityOperationHandler,\n} from './operations/updateCandyGuardAuthority';\nimport { freezeSolPaymentGuardManifest } from './guards/freezeSolPayment';\nimport { freezeTokenPaymentGuardManifest } from './guards/freezeTokenPayment';\nimport { MetaplexPlugin, OperationConstructor, Program } from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n/** @group Plugins */\nexport const candyMachineModule = (): MetaplexPlugin => ({\n  install(metaplex: Metaplex) {\n    // Client.\n    const client = new CandyMachineClient(metaplex);\n    metaplex.candyMachines = () => client;\n\n    // Candy Machine Program.\n    metaplex.programs().register(candyMachineProgram);\n    metaplex.programs().getCandyMachine = function (\n      this: ProgramClient,\n      programs?: Program[]\n    ) {\n      return this.get(candyMachineProgram.name, programs);\n    };\n\n    // Candy Guard Program.\n    metaplex.programs().register(defaultCandyGuardProgram);\n    metaplex.programs().getCandyGuard = function <T extends CandyGuardProgram>(\n      this: ProgramClient,\n      programs?: Program[]\n    ): T {\n      return this.get(defaultCandyGuardProgram.name, programs);\n    };\n\n    // Gateway Program.\n    metaplex.programs().register(gatewayProgram);\n    metaplex.programs().getGateway = function (\n      this: ProgramClient,\n      programs?: Program[]\n    ) {\n      return this.get(gatewayProgram.name, programs);\n    };\n\n    // Default Guards.\n    client.guards().register(botTaxGuardManifest);\n    client.guards().register(solPaymentGuardManifest);\n    client.guards().register(tokenPaymentGuardManifest);\n    client.guards().register(startDateGuardManifest);\n    client.guards().register(thirdPartySignerGuardManifest);\n    client.guards().register(tokenGateGuardManifest);\n    client.guards().register(gatekeeperGuardManifest);\n    client.guards().register(endDateGuardManifest);\n    client.guards().register(allowListGuardManifest);\n    client.guards().register(mintLimitGuardManifest);\n    client.guards().register(nftPaymentGuardManifest);\n    client.guards().register(redeemedAmountGuardManifest);\n    client.guards().register(addressGateGuardManifest);\n    client.guards().register(nftGateGuardManifest);\n    client.guards().register(nftBurnGuardManifest);\n    client.guards().register(tokenBurnGuardManifest);\n    client.guards().register(freezeSolPaymentGuardManifest);\n    client.guards().register(freezeTokenPaymentGuardManifest);\n    client.guards().register(programGateGuardManifest);\n\n    // Operations.\n    const op = metaplex.operations();\n    op.register(\n      callCandyGuardRouteOperation as OperationConstructor<\n        CallCandyGuardRouteOperation<any>\n      >,\n      callCandyGuardRouteOperationHandler\n    );\n    op.register(createCandyGuardOperation, createCandyGuardOperationHandler);\n    op.register(\n      createCandyMachineOperation,\n      createCandyMachineOperationHandler\n    );\n    op.register(deleteCandyGuardOperation, deleteCandyGuardOperationHandler);\n    op.register(\n      deleteCandyMachineOperation,\n      deleteCandyMachineOperationHandler\n    );\n    op.register(\n      findCandyGuardByAddressOperation,\n      findCandyGuardByAddressOperationHandler\n    );\n    op.register(\n      findCandyGuardsByAuthorityOperation,\n      findCandyGuardsByAuthorityOperationHandler\n    );\n    op.register(\n      findCandyMachineByAddressOperation,\n      findCandyMachineByAddressOperationHandler\n    );\n    op.register(\n      insertCandyMachineItemsOperation,\n      insertCandyMachineItemsOperationHandler\n    );\n    op.register(\n      mintFromCandyMachineOperation,\n      mintFromCandyMachineOperationHandler\n    );\n    op.register(unwrapCandyGuardOperation, unwrapCandyGuardOperationHandler);\n    op.register(\n      updateCandyGuardAuthorityOperation,\n      updateCandyGuardAuthorityOperationHandler\n    );\n    op.register(updateCandyGuardOperation, updateCandyGuardOperationHandler);\n    op.register(\n      updateCandyMachineOperation,\n      updateCandyMachineOperationHandler\n    );\n    op.register(wrapCandyGuardOperation, wrapCandyGuardOperationHandler);\n  },\n});\n\ndeclare module '../../Metaplex' {\n  interface Metaplex {\n    candyMachines(): CandyMachineClient;\n  }\n}\n\ndeclare module '../programModule/ProgramClient' {\n  interface ProgramClient {\n    getCandyMachine(programs?: Program[]): Program;\n    getCandyGuard<T extends CandyGuardProgram>(programs?: Program[]): T;\n    getGateway(programs?: Program[]): Program;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}