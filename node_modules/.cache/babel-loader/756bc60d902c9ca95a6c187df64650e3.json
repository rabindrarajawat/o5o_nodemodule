{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeSetAuthorityInstructionUnchecked = exports.decodeSetAuthorityInstruction = exports.createSetAuthorityInstruction = exports.setAuthorityInstructionData = exports.AuthorityType = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst internal_js_1 = require(\"./internal.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/** Authority types defined by the program */\n\n\nvar AuthorityType;\n\n(function (AuthorityType) {\n  AuthorityType[AuthorityType[\"MintTokens\"] = 0] = \"MintTokens\";\n  AuthorityType[AuthorityType[\"FreezeAccount\"] = 1] = \"FreezeAccount\";\n  AuthorityType[AuthorityType[\"AccountOwner\"] = 2] = \"AccountOwner\";\n  AuthorityType[AuthorityType[\"CloseAccount\"] = 3] = \"CloseAccount\";\n})(AuthorityType = exports.AuthorityType || (exports.AuthorityType = {}));\n/** TODO: docs */\n\n\nexports.setAuthorityInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('authorityType'), (0, buffer_layout_1.u8)('newAuthorityOption'), (0, buffer_layout_utils_1.publicKey)('newAuthority')]);\n/**\n * Construct a SetAuthority instruction\n *\n * @param account          Address of the token account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param programId        SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createSetAuthorityInstruction(account, currentAuthority, authorityType, newAuthority) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_js_1.TOKEN_PROGRAM_ID;\n  const keys = (0, internal_js_1.addSigners)([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }], currentAuthority, multiSigners);\n  const data = Buffer.alloc(exports.setAuthorityInstructionData.span);\n  exports.setAuthorityInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.SetAuthority,\n    authorityType,\n    newAuthorityOption: newAuthority ? 1 : 0,\n    newAuthority: newAuthority || new web3_js_1.PublicKey(0)\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createSetAuthorityInstruction = createSetAuthorityInstruction;\n/**\n * Decode a SetAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeSetAuthorityInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.setAuthorityInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      currentAuthority,\n      multiSigners\n    },\n    data\n  } = decodeSetAuthorityInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.SetAuthority) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account || !currentAuthority) throw new errors_js_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      currentAuthority,\n      multiSigners\n    },\n    data\n  };\n}\n\nexports.decodeSetAuthorityInstruction = decodeSetAuthorityInstruction;\n/**\n * Decode a SetAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeSetAuthorityInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, currentAuthority, ...multiSigners],\n    data\n  } = _ref;\n  const {\n    instruction,\n    authorityType,\n    newAuthorityOption,\n    newAuthority\n  } = exports.setAuthorityInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      account,\n      currentAuthority,\n      multiSigners\n    },\n    data: {\n      instruction,\n      authorityType,\n      newAuthority: newAuthorityOption ? newAuthority : null\n    }\n  };\n}\n\nexports.decodeSetAuthorityInstructionUnchecked = decodeSetAuthorityInstructionUnchecked;","map":{"version":3,"sources":["../../../src/instructions/setAuthority.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeSetAuthorityInstructionUnchecked = exports.decodeSetAuthorityInstruction = exports.createSetAuthorityInstruction = exports.setAuthorityInstructionData = exports.AuthorityType = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst internal_js_1 = require(\"./internal.js\");\nconst types_js_1 = require(\"./types.js\");\n/** Authority types defined by the program */\nvar AuthorityType;\n(function (AuthorityType) {\n    AuthorityType[AuthorityType[\"MintTokens\"] = 0] = \"MintTokens\";\n    AuthorityType[AuthorityType[\"FreezeAccount\"] = 1] = \"FreezeAccount\";\n    AuthorityType[AuthorityType[\"AccountOwner\"] = 2] = \"AccountOwner\";\n    AuthorityType[AuthorityType[\"CloseAccount\"] = 3] = \"CloseAccount\";\n})(AuthorityType = exports.AuthorityType || (exports.AuthorityType = {}));\n/** TODO: docs */\nexports.setAuthorityInstructionData = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('instruction'),\n    (0, buffer_layout_1.u8)('authorityType'),\n    (0, buffer_layout_1.u8)('newAuthorityOption'),\n    (0, buffer_layout_utils_1.publicKey)('newAuthority'),\n]);\n/**\n * Construct a SetAuthority instruction\n *\n * @param account          Address of the token account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param programId        SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createSetAuthorityInstruction(account, currentAuthority, authorityType, newAuthority, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    const keys = (0, internal_js_1.addSigners)([{ pubkey: account, isSigner: false, isWritable: true }], currentAuthority, multiSigners);\n    const data = Buffer.alloc(exports.setAuthorityInstructionData.span);\n    exports.setAuthorityInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.SetAuthority,\n        authorityType,\n        newAuthorityOption: newAuthority ? 1 : 0,\n        newAuthority: newAuthority || new web3_js_1.PublicKey(0),\n    }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createSetAuthorityInstruction = createSetAuthorityInstruction;\n/**\n * Decode a SetAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeSetAuthorityInstruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.setAuthorityInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { account, currentAuthority, multiSigners }, data, } = decodeSetAuthorityInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.SetAuthority)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!account || !currentAuthority)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            currentAuthority,\n            multiSigners,\n        },\n        data,\n    };\n}\nexports.decodeSetAuthorityInstruction = decodeSetAuthorityInstruction;\n/**\n * Decode a SetAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeSetAuthorityInstructionUnchecked({ programId, keys: [account, currentAuthority, ...multiSigners], data, }) {\n    const { instruction, authorityType, newAuthorityOption, newAuthority } = exports.setAuthorityInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            account,\n            currentAuthority,\n            multiSigners,\n        },\n        data: {\n            instruction,\n            authorityType,\n            newAuthority: newAuthorityOption ? newAuthority : null,\n        },\n    };\n}\nexports.decodeSetAuthorityInstructionUnchecked = decodeSetAuthorityInstructionUnchecked;\n//# sourceMappingURL=setAuthority.js.map"]},"metadata":{},"sourceType":"script"}