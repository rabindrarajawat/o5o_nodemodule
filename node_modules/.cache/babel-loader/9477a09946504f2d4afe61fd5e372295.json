{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.mjs';\nimport { EndSettingType } from '@metaplex-foundation/mpl-candy-machine';\nimport { formatDateTime } from '../../types/DateTime.mjs';\nimport { MetaplexError } from '../../errors/MetaplexError.mjs';\n/** @group Errors */\n\nclass CandyMachineV2Error extends MetaplexError {\n  constructor(message, cause) {\n    super(message, 'plugin', 'Candy Machine V2', cause);\n\n    _defineProperty(this, \"name\", 'CandyMachineV2Error');\n  }\n\n}\n/** @group Errors */\n\n\nclass CandyMachineV2IsFullError extends CandyMachineV2Error {\n  constructor(assetIndex, itemsAvailable) {\n    const message = `Trying to add asset number ${assetIndex.addn(1)}, but ` + `candy machine only can hold ${itemsAvailable} assets. ` + 'Limit number of assets you are adding or create a new Candy Machine that can hold more.';\n    super(message);\n\n    _defineProperty(this, \"name\", 'CandyMachineV2IsFullError');\n  }\n\n}\n/** @group Errors */\n\n\nclass CandyMachineV2IsEmptyError extends CandyMachineV2Error {\n  constructor(itemsAvailable) {\n    const message = `You're trying to mint from an empty candy machine. ` + `All ${itemsAvailable} items have been minted. ` + 'You can no longer mint from this Candy Machine.';\n    super(message);\n\n    _defineProperty(this, \"name\", 'CandyMachineV2IsEmptyError');\n  }\n\n}\n/** @group Errors */\n\n\nclass CandyMachineV2CannotAddAmountError extends CandyMachineV2Error {\n  constructor(index, amount, itemsAvailable) {\n    const message = `Trying to add ${amount} assets to candy machine that already ` + `has ${index} assets and can only hold ${itemsAvailable} assets.` + 'Limit number of assets you are adding or create a new Candy Machine that can hold more.';\n    super(message);\n\n    _defineProperty(this, \"name\", 'CandyMachineV2CannotAddAmountError');\n  }\n\n}\n/** @group Errors */\n\n\nclass CandyMachineV2AddItemConstraintsViolatedError extends CandyMachineV2Error {\n  constructor(index, item, cause) {\n    const message = `Trying to add an asset with name \"${item.name}\" and uri: \"${item.uri}\" ` + `to candy machine at index ${index} that violates constraints. ` + `Fix the name or URI of this asset and try again.`;\n    super(message, cause);\n\n    _defineProperty(this, \"name\", 'CandyMachineV2AddItemConstraintsViolatedError');\n  }\n\n}\n/** @group Errors */\n\n\nclass CandyMachineV2NotLiveError extends CandyMachineV2Error {\n  constructor(goLiveDate) {\n    const message = `You're trying to mint from a Candy Machine which is not live yet. ` + (goLiveDate ? `It will go live on ${formatDateTime(goLiveDate)}.` : `Its live date has not been set yet.`) + 'You need to wait until the Candy Machine is live to mint from it. ' + 'If this is your Candy Machine, use \"metaplex.candyMachinesV2().update(...)\" to set the live date. ' + 'Note that the authority of the Candy Machine can mint regardless of the live date.';\n    super(message);\n\n    _defineProperty(this, \"name\", 'CandyMachineV2NotLiveError');\n  }\n\n}\n/** @group Errors */\n\n\nclass CandyMachineV2EndedError extends CandyMachineV2Error {\n  constructor(endSetting) {\n    const endSettingType = endSetting.endSettingType === EndSettingType.Amount ? 'Amount' : 'Date';\n    const endSettingExplanation = endSetting.endSettingType === EndSettingType.Amount ? `All ${endSetting.number} items have been minted.` : `It ended on ${formatDateTime(endSetting.date)}.`;\n    const message = `The end condition [${endSettingType}] of this Candy Machine has been reached. ` + endSettingExplanation;\n    super(message);\n\n    _defineProperty(this, \"name\", 'CandyMachineV2EndedError');\n  }\n\n}\n/** @group Errors */\n\n\nclass CandyMachineV2BotTaxError extends CandyMachineV2Error {\n  constructor(explorerLink, cause) {\n    const message = `The NFT couldn't be fetched after being minted. ` + `This is most likely due to a bot tax that occured during minting. ` + `When someone tries to mint an NFT from a Candy Machine which cannot be minted from, ` + `the program will succeed and charge a small tax to fight against bots. ` + `Ensure you can mint from the Candy Machine. ` + `You may want to check the transaction logs for more details: [${explorerLink}].`;\n    super(message, cause);\n\n    _defineProperty(this, \"name\", 'CandyMachineV2BotTaxError');\n  }\n\n}\n\nexport { CandyMachineV2AddItemConstraintsViolatedError, CandyMachineV2BotTaxError, CandyMachineV2CannotAddAmountError, CandyMachineV2EndedError, CandyMachineV2Error, CandyMachineV2IsEmptyError, CandyMachineV2IsFullError, CandyMachineV2NotLiveError };","map":{"version":3,"sources":["../../../../src/plugins/candyMachineV2Module/errors.ts"],"names":["CandyMachineV2Error","MetaplexError","constructor","message","cause","CandyMachineV2IsFullError","assetIndex","itemsAvailable","addn","CandyMachineV2IsEmptyError","CandyMachineV2CannotAddAmountError","index","amount","CandyMachineV2AddItemConstraintsViolatedError","item","name","uri","CandyMachineV2NotLiveError","goLiveDate","formatDateTime","CandyMachineV2EndedError","endSetting","endSettingType","EndSettingType","Amount","endSettingExplanation","number","date","CandyMachineV2BotTaxError","explorerLink"],"mappings":"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","sourcesContent":["import { EndSettingType } from '@metaplex-foundation/mpl-candy-machine';\nimport { CandyMachineV2Item, CandyMachineV2EndSettings } from './models';\nimport { MetaplexError } from '@/errors';\nimport { BigNumber, DateTime, formatDateTime } from '@/types';\nimport { Option } from '@/utils';\n\n/** @group Errors */\nexport class CandyMachineV2Error extends MetaplexError {\n  readonly name: string = 'CandyMachineV2Error';\n  constructor(message: string, cause?: Error) {\n    super(message, 'plugin', 'Candy Machine V2', cause);\n  }\n}\n\n/** @group Errors */\nexport class CandyMachineV2IsFullError extends CandyMachineV2Error {\n  readonly name: string = 'CandyMachineV2IsFullError';\n  constructor(assetIndex: BigNumber, itemsAvailable: BigNumber) {\n    const message =\n      `Trying to add asset number ${assetIndex.addn(1)}, but ` +\n      `candy machine only can hold ${itemsAvailable} assets. ` +\n      'Limit number of assets you are adding or create a new Candy Machine that can hold more.';\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class CandyMachineV2IsEmptyError extends CandyMachineV2Error {\n  readonly name: string = 'CandyMachineV2IsEmptyError';\n  constructor(itemsAvailable: BigNumber) {\n    const message =\n      `You're trying to mint from an empty candy machine. ` +\n      `All ${itemsAvailable} items have been minted. ` +\n      'You can no longer mint from this Candy Machine.';\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class CandyMachineV2CannotAddAmountError extends CandyMachineV2Error {\n  readonly name: string = 'CandyMachineV2CannotAddAmountError';\n  constructor(index: BigNumber, amount: number, itemsAvailable: BigNumber) {\n    const message =\n      `Trying to add ${amount} assets to candy machine that already ` +\n      `has ${index} assets and can only hold ${itemsAvailable} assets.` +\n      'Limit number of assets you are adding or create a new Candy Machine that can hold more.';\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class CandyMachineV2AddItemConstraintsViolatedError extends CandyMachineV2Error {\n  readonly name: string = 'CandyMachineV2AddItemConstraintsViolatedError';\n  constructor(index: BigNumber, item: CandyMachineV2Item, cause: Error) {\n    const message =\n      `Trying to add an asset with name \"${item.name}\" and uri: \"${item.uri}\" ` +\n      `to candy machine at index ${index} that violates constraints. ` +\n      `Fix the name or URI of this asset and try again.`;\n    super(message, cause);\n  }\n}\n\n/** @group Errors */\nexport class CandyMachineV2NotLiveError extends CandyMachineV2Error {\n  readonly name: string = 'CandyMachineV2NotLiveError';\n  constructor(goLiveDate: Option<DateTime>) {\n    const message =\n      `You're trying to mint from a Candy Machine which is not live yet. ` +\n      (goLiveDate\n        ? `It will go live on ${formatDateTime(goLiveDate)}.`\n        : `Its live date has not been set yet.`) +\n      'You need to wait until the Candy Machine is live to mint from it. ' +\n      'If this is your Candy Machine, use \"metaplex.candyMachinesV2().update(...)\" to set the live date. ' +\n      'Note that the authority of the Candy Machine can mint regardless of the live date.';\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class CandyMachineV2EndedError extends CandyMachineV2Error {\n  readonly name: string = 'CandyMachineV2EndedError';\n  constructor(endSetting: CandyMachineV2EndSettings) {\n    const endSettingType =\n      endSetting.endSettingType === EndSettingType.Amount ? 'Amount' : 'Date';\n    const endSettingExplanation =\n      endSetting.endSettingType === EndSettingType.Amount\n        ? `All ${endSetting.number} items have been minted.`\n        : `It ended on ${formatDateTime(endSetting.date)}.`;\n    const message =\n      `The end condition [${endSettingType}] of this Candy Machine has been reached. ` +\n      endSettingExplanation;\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class CandyMachineV2BotTaxError extends CandyMachineV2Error {\n  readonly name: string = 'CandyMachineV2BotTaxError';\n  constructor(explorerLink: string, cause: Error) {\n    const message =\n      `The NFT couldn't be fetched after being minted. ` +\n      `This is most likely due to a bot tax that occured during minting. ` +\n      `When someone tries to mint an NFT from a Candy Machine which cannot be minted from, ` +\n      `the program will succeed and charge a small tax to fight against bots. ` +\n      `Ensure you can mint from the Candy Machine. ` +\n      `You may want to check the transaction logs for more details: [${explorerLink}].`;\n    super(message, cause);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}