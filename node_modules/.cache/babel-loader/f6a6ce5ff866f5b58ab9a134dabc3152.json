{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDisableRequiredMemoTransfersInstruction = exports.createEnableRequiredMemoTransfersInstruction = exports.memoTransferInstructionData = exports.MemoTransferInstruction = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../../constants.js\");\n\nconst errors_js_1 = require(\"../../errors.js\");\n\nconst types_js_1 = require(\"../../instructions/types.js\");\n\nvar MemoTransferInstruction;\n\n(function (MemoTransferInstruction) {\n  MemoTransferInstruction[MemoTransferInstruction[\"Enable\"] = 0] = \"Enable\";\n  MemoTransferInstruction[MemoTransferInstruction[\"Disable\"] = 1] = \"Disable\";\n})(MemoTransferInstruction = exports.MemoTransferInstruction || (exports.MemoTransferInstruction = {}));\n/** TODO: docs */\n\n\nexports.memoTransferInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('memoTransferInstruction')]);\n/**\n * Construct an EnableRequiredMemoTransfers instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createEnableRequiredMemoTransfersInstruction(account, authority) {\n  let multiSigners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return createMemoTransferInstruction(\n  /* enable */\n  true, account, authority, multiSigners, programId);\n}\n\nexports.createEnableRequiredMemoTransfersInstruction = createEnableRequiredMemoTransfersInstruction;\n/**\n * Construct a DisableMemoTransfer instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createDisableRequiredMemoTransfersInstruction(account, authority) {\n  let multiSigners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return createMemoTransferInstruction(\n  /* enable */\n  false, account, authority, multiSigners, programId);\n}\n\nexports.createDisableRequiredMemoTransfersInstruction = createDisableRequiredMemoTransfersInstruction;\n\nfunction createMemoTransferInstruction(enable, account, authority, multiSigners, programId) {\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }];\n  keys.push({\n    pubkey: authority,\n    isSigner: !multiSigners.length,\n    isWritable: false\n  });\n\n  for (const signer of multiSigners) {\n    keys.push({\n      pubkey: signer.publicKey,\n      isSigner: true,\n      isWritable: false\n    });\n  }\n\n  const data = Buffer.alloc(exports.memoTransferInstructionData.span);\n  exports.memoTransferInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.MemoTransferExtension,\n    memoTransferInstruction: enable ? MemoTransferInstruction.Enable : MemoTransferInstruction.Disable\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}","map":{"version":3,"sources":["../../../../src/extensions/memoTransfer/instructions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDisableRequiredMemoTransfersInstruction = exports.createEnableRequiredMemoTransfersInstruction = exports.memoTransferInstructionData = exports.MemoTransferInstruction = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../../constants.js\");\nconst errors_js_1 = require(\"../../errors.js\");\nconst types_js_1 = require(\"../../instructions/types.js\");\nvar MemoTransferInstruction;\n(function (MemoTransferInstruction) {\n    MemoTransferInstruction[MemoTransferInstruction[\"Enable\"] = 0] = \"Enable\";\n    MemoTransferInstruction[MemoTransferInstruction[\"Disable\"] = 1] = \"Disable\";\n})(MemoTransferInstruction = exports.MemoTransferInstruction || (exports.MemoTransferInstruction = {}));\n/** TODO: docs */\nexports.memoTransferInstructionData = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('instruction'),\n    (0, buffer_layout_1.u8)('memoTransferInstruction'),\n]);\n/**\n * Construct an EnableRequiredMemoTransfers instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createEnableRequiredMemoTransfersInstruction(account, authority, multiSigners = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n    return createMemoTransferInstruction(/* enable */ true, account, authority, multiSigners, programId);\n}\nexports.createEnableRequiredMemoTransfersInstruction = createEnableRequiredMemoTransfersInstruction;\n/**\n * Construct a DisableMemoTransfer instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createDisableRequiredMemoTransfersInstruction(account, authority, multiSigners = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n    return createMemoTransferInstruction(/* enable */ false, account, authority, multiSigners, programId);\n}\nexports.createDisableRequiredMemoTransfersInstruction = createDisableRequiredMemoTransfersInstruction;\nfunction createMemoTransferInstruction(enable, account, authority, multiSigners, programId) {\n    if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n        throw new errors_js_1.TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\n    keys.push({ pubkey: authority, isSigner: !multiSigners.length, isWritable: false });\n    for (const signer of multiSigners) {\n        keys.push({ pubkey: signer.publicKey, isSigner: true, isWritable: false });\n    }\n    const data = Buffer.alloc(exports.memoTransferInstructionData.span);\n    exports.memoTransferInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.MemoTransferExtension,\n        memoTransferInstruction: enable ? MemoTransferInstruction.Enable : MemoTransferInstruction.Disable,\n    }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\n//# sourceMappingURL=instructions.js.map"]},"metadata":{},"sourceType":"script"}