{"ast":null,"code":"import { defineProperty as _defineProperty } from '../_virtual/_rollupPluginBabelHelpers.mjs';\nimport { MetaplexError } from './MetaplexError.mjs';\n/** @group Errors */\n\nclass ProgramError extends MetaplexError {\n  constructor(message, program, cause, logs) {\n    super(message, 'program', `${program.name} [${program.address.toString()}]`, cause);\n\n    _defineProperty(this, \"name\", 'ProgramError');\n\n    this.program = program;\n    this.logs = logs;\n\n    if (logs) {\n      this.message = this.message + `\\nProgram Logs:\\n${logs.map(log => '| ' + log).join('\\n')}\\n`;\n    }\n  }\n\n}\n/** @group Errors */\n\n\nclass ParsedProgramError extends ProgramError {\n  constructor(program, cause, logs) {\n    const ofCode = cause.code ? ` of code [${cause.code}]` : '';\n    const message = `The program [${program.name}] ` + `at address [${program.address.toString()}] ` + `raised an error${ofCode} ` + `that translates to \"${cause.message}\".`;\n    super(message, program, cause, logs);\n\n    _defineProperty(this, \"name\", 'ParsedProgramError');\n  }\n\n}\n/** @group Errors */\n\n\nclass UnknownProgramError extends ProgramError {\n  constructor(program, cause) {\n    const ofCode = cause.code ? ` of code [${cause.code}]` : '';\n    const message = `The program [${program.name}] ` + `at address [${program.address.toString()}] ` + `raised an error${ofCode} ` + `that is not recognized by the programs registered on the SDK. ` + `Please check the underlying program error below for more details.`;\n    super(message, program, cause, cause.logs);\n\n    _defineProperty(this, \"name\", 'UnknownProgramError');\n  }\n\n}\n\nexport { ParsedProgramError, ProgramError, UnknownProgramError };","map":{"version":3,"sources":["../../../src/errors/ProgramError.ts"],"names":["ProgramError","MetaplexError","constructor","message","program","cause","logs","name","address","toString","map","log","join","ParsedProgramError","ofCode","code","UnknownProgramError"],"mappings":";;AAGA;;AACO,MAAMA,YAAN,SAA2BC,aAA3B,CAAyC;EAK9CC,WAAW,CACTC,OADS,EAETC,OAFS,EAGTC,KAHS,EAITC,IAJS,EAKT;IACA,MACEH,OADF,EAEE,SAFF,EAGG,GAAEC,OAAO,CAACG,IAAK,KAAIH,OAAO,CAACI,OAARJ,CAAgBK,QAAhBL,EAA6B,GAHnD,EAIEC,KAJF;;IAKE,eAAA,CAAA,IAAA,EAAA,MAAA,EAfoB,cAepB,CAAA;;IACF,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKE,IAAL,GAAYA,IAAZ;;IACA,IAAIA,IAAJ,EAAU;MACR,KAAKH,OAAL,GACE,KAAKA,OAAL,GACoBG,oBAAAA,IAAI,CAACI,GAALJ,CAAUK,GAAG,IAAK,OAAOA,GAAzBL,EAA8BM,IAA9BN,CAAmC,IAAnCA,CAA4C,IAFlE;IAGF;EACF;;AAxB8C;AA6BhD;;;AACO,MAAMO,kBAAN,SAAiCb,YAAjC,CAA8C;EAEnDE,WAAW,CAACE,OAAD,EAAmBC,KAAnB,EAAkDC,IAAlD,EAAkE;IAC3E,MAAMQ,MAAM,GAAGT,KAAK,CAACU,IAANV,GAA0BA,aAAAA,KAAK,CAACU,IAAO,GAAvCV,GAA0C,EAAzD;IACA,MAAMF,OAAO,GACV,gBAAeC,OAAO,CAACG,IAAQ,IAA/B,GACcH,eAAAA,OAAO,CAACI,OAARJ,CAAgBK,QAAhBL,EAA8B,IAD5C,GAEiBU,kBAAAA,MAAS,GAF1B,GAGsBT,uBAAAA,KAAK,CAACF,OAAW,IAJ1C;IAKA,MAAMA,OAAN,EAAeC,OAAf,EAAwBC,KAAxB,EAA+BC,IAA/B;;IAAqC,eAAA,CAAA,IAAA,EAAA,MAAA,EARf,oBAQe,CAAA;EACvC;;AAVmD;AAarD;;;AACO,MAAMU,mBAAN,SAAkChB,YAAlC,CAA+C;EAEpDE,WAAW,CAACE,OAAD,EAAmBC,KAAnB,EAAkD;IAC3D,MAAMS,MAAM,GAAGT,KAAK,CAACU,IAANV,GAA0BA,aAAAA,KAAK,CAACU,IAAO,GAAvCV,GAA0C,EAAzD;IACA,MAAMF,OAAO,GACKC,gBAAAA,OAAO,CAACG,IAAK,IAA5B,GACA,eAAcH,OAAO,CAACI,OAARJ,CAAgBK,QAAhBL,EAA2B,IADzC,GAEA,kBAAiBU,MAAS,GAF1B,GAG+D,gEAH/D,GAIkE,mEALrE;IAMA,MAAMX,OAAN,EAAeC,OAAf,EAAwBC,KAAxB,EAA+BA,KAAK,CAACC,IAArC;;IAA2C,eAAA,CAAA,IAAA,EAAA,MAAA,EATrB,qBASqB,CAAA;EAC7C;;AAXoD","sourcesContent":["import { MetaplexError } from './MetaplexError';\nimport { Program } from '@/types';\n\n/** @group Errors */\nexport class ProgramError extends MetaplexError {\n  readonly name: string = 'ProgramError';\n  readonly program: Program;\n  readonly logs?: string[];\n\n  constructor(\n    message: string,\n    program: Program,\n    cause?: Error,\n    logs?: string[]\n  ) {\n    super(\n      message,\n      'program',\n      `${program.name} [${program.address.toString()}]`,\n      cause\n    );\n    this.program = program;\n    this.logs = logs;\n    if (logs) {\n      this.message =\n        this.message +\n        `\\nProgram Logs:\\n${logs.map((log) => '| ' + log).join('\\n')}\\n`;\n    }\n  }\n}\n\ntype UnderlyingProgramError = Error & { code?: number; logs?: string[] };\n\n/** @group Errors */\nexport class ParsedProgramError extends ProgramError {\n  readonly name: string = 'ParsedProgramError';\n  constructor(program: Program, cause: UnderlyingProgramError, logs: string[]) {\n    const ofCode = cause.code ? ` of code [${cause.code}]` : '';\n    const message =\n      `The program [${program.name}] ` +\n      `at address [${program.address.toString()}] ` +\n      `raised an error${ofCode} ` +\n      `that translates to \"${cause.message}\".`;\n    super(message, program, cause, logs);\n  }\n}\n\n/** @group Errors */\nexport class UnknownProgramError extends ProgramError {\n  readonly name: string = 'UnknownProgramError';\n  constructor(program: Program, cause: UnderlyingProgramError) {\n    const ofCode = cause.code ? ` of code [${cause.code}]` : '';\n    const message =\n      `The program [${program.name}] ` +\n      `at address [${program.address.toString()}] ` +\n      `raised an error${ofCode} ` +\n      `that is not recognized by the programs registered on the SDK. ` +\n      `Please check the underlying program error below for more details.`;\n    super(message, program, cause, cause.logs);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}