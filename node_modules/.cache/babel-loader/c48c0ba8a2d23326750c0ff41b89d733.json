{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.mjs';\nimport { OperationHandlerMissingError } from '../../errors/SdkError.mjs';\nimport { Disposable } from '../../utils/Disposable.mjs';\n/**\n * @group Modules\n */\n\nclass OperationClient {\n  /**\n   * Maps the name of an operation with its operation handler.\n   * Whilst the types on the Map are relatively loose, we ensure\n   * operations match with their handlers when registering them.\n   */\n  constructor(metaplex) {\n    _defineProperty(this, \"operationHandlers\", new Map());\n\n    this.metaplex = metaplex;\n  }\n\n  register(operationConstructor, operationHandler) {\n    this.operationHandlers.set(operationConstructor.key, operationHandler);\n    return this;\n  }\n\n  get(operation) {\n    const operationHandler = this.operationHandlers.get(operation.key);\n\n    if (!operationHandler) {\n      throw new OperationHandlerMissingError(operation.key);\n    }\n\n    return operationHandler;\n  }\n\n  async execute(operation) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const operationHandler = this.get(operation);\n    const signal = options.signal ?? new AbortController().signal;\n    return new Disposable(signal).run(scope => operationHandler.handle(operation, this.metaplex, this.getOperationScope(options, scope)));\n  }\n\n  getOperationScope(options, scope) {\n    if (!!options.commitment && !options.confirmOptions) {\n      options.confirmOptions = {\n        commitment: options.commitment\n      };\n    }\n\n    const payer = options.payer ?? this.metaplex.rpc().getDefaultFeePayer();\n    return { ...options,\n      ...scope,\n      payer\n    };\n  }\n\n}\n\nexport { OperationClient };","map":{"version":3,"sources":["../../../../src/plugins/operationModule/OperationClient.ts"],"names":["OperationClient","Map","constructor","metaplex","register","operationConstructor","operationHandler","operationHandlers","set","key","get","operation","OperationHandlerMissingError","execute","options","signal","AbortController","Disposable","run","scope","handle","getOperationScope","commitment","confirmOptions","payer","rpc","getDefaultFeePayer"],"mappings":";;;AAcA;AACA;AACA;;AACO,MAAMA,eAAN,CAAsB;EAC3B;AACF;AACA;AACA;AACA;EAKEE,WAAW,CAAoBC,QAApB,EAAwC;IAAA,eAD/C,CAAA,IAAA,EAAA,mBAAA,EAAA,IAAIF,GAAJ,EAAA,CAC+C;;IADtC,KACkBE,QADlB,GACkBA,QADlB;EACuC;;EAEpDC,QAAQ,CAMNC,oBANM,EAONC,gBAPM,EAQN;IACA,KAAKC,iBAAL,CAAuBC,GAAvB,CAA2BH,oBAAoB,CAACI,GAAhD,EAAqDH,gBAArD;IAEA,OAAO,IAAP;EACF;;EAEAI,GAAG,CAKDC,SALC,EAK2C;IAC5C,MAAML,gBAAgB,GAAG,KAAKC,iBAAL,CAAuBG,GAAvB,CAA2BC,SAAS,CAACF,GAArC,CAAzB;;IAIA,IAAI,CAACH,gBAAL,EAAuB;MACrB,MAAM,IAAIM,4BAAJ,CAAiCD,SAAS,CAACF,GAA3C,CAAN;IACF;;IAEA,OAAOH,gBAAP;EACF;;EAEa,MAAPO,OAAO,CAKXF,SALW,EAK+C;IAAA,IAA5CG,OAA4C,uEAAhB,EAAgB;IAC1D,MAAMR,gBAAgB,GAAG,KAAKI,GAAL,CAAqBC,SAArB,CAAzB;IACA,MAAMI,MAAM,GAAGD,OAAO,CAACC,MAARD,IAAkB,IAAIE,eAAJ,GAAsBD,MAAvD;IAEA,OAAO,IAAIE,UAAJ,CAAeF,MAAf,EAAuBG,GAAvB,CAA4BC,KAAK,IACtCb,gBAAgB,CAACc,MAAjBd,CACEK,SADFL,EAEE,KAAKH,QAFPG,EAGE,KAAKe,iBAAL,CAAuBP,OAAvB,EAAgCK,KAAhC,CAHFb,CADK,CAAP;EAOF;;EAEUe,iBAAiB,CACzBP,OADyB,EAEzBK,KAFyB,EAGT;IAChB,IAAI,CAAC,CAACL,OAAO,CAACQ,UAAV,IAAwB,CAACR,OAAO,CAACS,cAArC,EAAqD;MACnDT,OAAO,CAACS,cAART,GAAyB;QAAEQ,UAAU,EAAER,OAAO,CAACQ;MAAtB,CAAzBR;IACF;;IAEA,MAAMU,KAAK,GAAGV,OAAO,CAACU,KAARV,IAAiB,KAAKX,QAAL,CAAcsB,GAAd,GAAoBC,kBAApB,EAA/B;IAEA,OAAO,EAAE,GAAGZ,OAAL;MAAc,GAAGK,KAAjB;MAAwBK;IAAxB,CAAP;EACF;;AAxE2B","sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport {\n  OperationConstructor,\n  Operation,\n  KeyOfOperation,\n  InputOfOperation,\n  OutputOfOperation,\n  OperationHandler,\n  OperationOptions,\n  OperationScope,\n} from '@/types';\nimport { Disposable, DisposableScope } from '@/utils';\nimport { OperationHandlerMissingError } from '@/errors';\n\n/**\n * @group Modules\n */\nexport class OperationClient {\n  /**\n   * Maps the name of an operation with its operation handler.\n   * Whilst the types on the Map are relatively loose, we ensure\n   * operations match with their handlers when registering them.\n   */\n  protected operationHandlers: Map<\n    string,\n    OperationHandler<any, any, any, any>\n  > = new Map();\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  register<\n    T extends Operation<K, I, O>,\n    K extends string = KeyOfOperation<T>,\n    I = InputOfOperation<T>,\n    O = OutputOfOperation<T>\n  >(\n    operationConstructor: OperationConstructor<T, K, I, O>,\n    operationHandler: OperationHandler<T, K, I, O>\n  ) {\n    this.operationHandlers.set(operationConstructor.key, operationHandler);\n\n    return this;\n  }\n\n  get<\n    T extends Operation<K, I, O>,\n    K extends string = KeyOfOperation<T>,\n    I = InputOfOperation<T>,\n    O = OutputOfOperation<T>\n  >(operation: T): OperationHandler<T, K, I, O> {\n    const operationHandler = this.operationHandlers.get(operation.key) as\n      | OperationHandler<T, K, I, O>\n      | undefined;\n\n    if (!operationHandler) {\n      throw new OperationHandlerMissingError(operation.key);\n    }\n\n    return operationHandler;\n  }\n\n  async execute<\n    T extends Operation<K, I, O>,\n    K extends string = KeyOfOperation<T>,\n    I = InputOfOperation<T>,\n    O = OutputOfOperation<T>\n  >(operation: T, options: OperationOptions = {}): Promise<O> {\n    const operationHandler = this.get<T, K, I, O>(operation);\n    const signal = options.signal ?? new AbortController().signal;\n\n    return new Disposable(signal).run((scope) =>\n      operationHandler.handle(\n        operation,\n        this.metaplex,\n        this.getOperationScope(options, scope)\n      )\n    );\n  }\n\n  protected getOperationScope(\n    options: OperationOptions,\n    scope: DisposableScope\n  ): OperationScope {\n    if (!!options.commitment && !options.confirmOptions) {\n      options.confirmOptions = { commitment: options.commitment };\n    }\n\n    const payer = options.payer ?? this.metaplex.rpc().getDefaultFeePayer();\n\n    return { ...options, ...scope, payer };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}