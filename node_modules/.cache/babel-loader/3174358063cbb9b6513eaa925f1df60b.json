{"ast":null,"code":"import { nftBurnBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { GuardMintSettingsMissingError } from '../errors.mjs';\nimport { createSerializerFromBeet } from '../../../types/Serializer.mjs';\n/**\n * The nftBurn guard restricts the mint to holders of a predefined\n * NFT Collection and burns the holder's NFT when minting.\n *\n * This means the mint address of the NFT to burn must be\n * passed when minting. This guard alone does not limit how many\n * times a holder can mint. A holder can mint as many times\n * as they have NFTs from the required collection to burn.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n *\n * @see {@link NftBurnGuardMintSettings} for more\n * information on the mint settings of this guard.\n */\n\n/** @internal */\n\nconst nftBurnGuardManifest = {\n  name: 'nftBurn',\n  settingsBytes: 32,\n  settingsSerializer: createSerializerFromBeet(nftBurnBeet),\n  mintSettingsParser: _ref => {\n    let {\n      metaplex,\n      settings,\n      mintSettings,\n      payer,\n      programs\n    } = _ref;\n\n    if (!mintSettings) {\n      throw new GuardMintSettingsMissingError('nftBurn');\n    }\n\n    const tokenAccount = mintSettings.tokenAccount ?? metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintSettings.mint,\n      owner: payer.publicKey,\n      programs\n    });\n    const tokenMetadata = metaplex.nfts().pdas().metadata({\n      mint: mintSettings.mint,\n      programs\n    });\n    const tokenEdition = metaplex.nfts().pdas().masterEdition({\n      mint: mintSettings.mint,\n      programs\n    });\n    const mintCollectionMetadata = metaplex.nfts().pdas().metadata({\n      mint: settings.requiredCollection,\n      programs\n    });\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts: [{\n        isSigner: false,\n        address: tokenAccount,\n        isWritable: true\n      }, {\n        isSigner: false,\n        address: tokenMetadata,\n        isWritable: true\n      }, {\n        isSigner: false,\n        address: tokenEdition,\n        isWritable: true\n      }, {\n        isSigner: false,\n        address: mintSettings.mint,\n        isWritable: true\n      }, {\n        isSigner: false,\n        address: mintCollectionMetadata,\n        isWritable: true\n      }]\n    };\n  }\n};\nexport { nftBurnGuardManifest };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineModule/guards/nftBurn.ts"],"names":["nftBurnGuardManifest","name","settingsBytes","settingsSerializer","createSerializerFromBeet","nftBurnBeet","mintSettingsParser","metaplex","settings","mintSettings","payer","programs","GuardMintSettingsMissingError","tokenAccount","tokens","pdas","associatedTokenAccount","mint","owner","publicKey","tokenMetadata","nfts","metadata","tokenEdition","masterEdition","mintCollectionMetadata","requiredCollection","arguments","Buffer","from","remainingAccounts","isSigner","address","isWritable"],"mappings":";;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA+BA;;AACO,MAAMA,oBAGZ,GAAG;EACFC,IAAI,EAAE,SADJ;EAEFC,aAAa,EAAE,EAFb;EAGFC,kBAAkB,EAAEC,wBAAwB,CAACC,WAAD,CAH1C;EAIFC,kBAAkB,EAAE,QAMd;IAAA,IANe;MACnBC,QADmB;MAEnBC,QAFmB;MAGnBC,YAHmB;MAInBC,KAJmB;MAKnBC;IALmB,CAMf;;IACJ,IAAI,CAACF,YAAL,EAAmB;MACjB,MAAM,IAAIG,6BAAJ,CAAkC,SAAlC,CAAN;IACF;;IAEA,MAAMC,YAAY,GAChBJ,YAAY,CAACI,YAAbJ,IACAF,QAAQ,CAACO,MAATP,GAAkBQ,IAAlBR,GAAyBS,sBAAzBT,CAAgD;MAC9CU,IAAI,EAAER,YAAY,CAACQ,IAD2B;MAE9CC,KAAK,EAAER,KAAK,CAACS,SAFiC;MAG9CR;IAH8C,CAAhDJ,CAFF;IAQA,MAAMa,aAAa,GAAGb,QAAQ,CAACc,IAATd,GAAgBQ,IAAhBR,GAAuBe,QAAvBf,CAAgC;MACpDU,IAAI,EAAER,YAAY,CAACQ,IADiC;MAEpDN;IAFoD,CAAhCJ,CAAtB;IAKA,MAAMgB,YAAY,GAAGhB,QAAQ,CAACc,IAATd,GAAgBQ,IAAhBR,GAAuBiB,aAAvBjB,CAAqC;MACxDU,IAAI,EAAER,YAAY,CAACQ,IADqC;MAExDN;IAFwD,CAArCJ,CAArB;IAKA,MAAMkB,sBAAsB,GAAGlB,QAAQ,CAACc,IAATd,GAAgBQ,IAAhBR,GAAuBe,QAAvBf,CAAgC;MAC7DU,IAAI,EAAET,QAAQ,CAACkB,kBAD8C;MAE7Df;IAF6D,CAAhCJ,CAA/B;IAKA,OAAO;MACLoB,SAAS,EAAEC,MAAM,CAACC,IAAPD,CAAY,EAAZA,CADN;MAELE,iBAAiB,EAAE,CACjB;QACEC,QAAQ,EAAE,KADZ;QAEEC,OAAO,EAAEnB,YAFX;QAGEoB,UAAU,EAAE;MAHd,CADiB,EAMjB;QACEF,QAAQ,EAAE,KADZ;QAEEC,OAAO,EAAEZ,aAFX;QAGEa,UAAU,EAAE;MAHd,CANiB,EAWjB;QACEF,QAAQ,EAAE,KADZ;QAEEC,OAAO,EAAET,YAFX;QAGEU,UAAU,EAAE;MAHd,CAXiB,EAgBjB;QACEF,QAAQ,EAAE,KADZ;QAEEC,OAAO,EAAEvB,YAAY,CAACQ,IAFxB;QAGEgB,UAAU,EAAE;MAHd,CAhBiB,EAqBjB;QACEF,QAAQ,EAAE,KADZ;QAEEC,OAAO,EAAEP,sBAFX;QAGEQ,UAAU,EAAE;MAHd,CArBiB;IAFd,CAAP;EA8BF;AApEE,CAHG","sourcesContent":["import { nftBurnBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { GuardMintSettingsMissingError } from '../errors';\nimport { CandyGuardManifest } from './core';\nimport { createSerializerFromBeet, PublicKey } from '@/types';\n\n/**\n * The nftBurn guard restricts the mint to holders of a predefined\n * NFT Collection and burns the holder's NFT when minting.\n *\n * This means the mint address of the NFT to burn must be\n * passed when minting. This guard alone does not limit how many\n * times a holder can mint. A holder can mint as many times\n * as they have NFTs from the required collection to burn.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n *\n * @see {@link NftBurnGuardMintSettings} for more\n * information on the mint settings of this guard.\n */\nexport type NftBurnGuardSettings = {\n  /** The mint address of the required NFT Collection. */\n  requiredCollection: PublicKey;\n};\n\n/**\n * The settings for the nftBurn guard that could\n * be provided when minting from the Candy Machine.\n *\n * @see {@link NftBurnGuardSettings} for more\n * information on the nftBurn guard itself.\n */\nexport type NftBurnGuardMintSettings = {\n  /**\n   * The mint address of the NFT to burn.\n   * This must be part of the required collection and must\n   * belong to the payer.\n   */\n  mint: PublicKey;\n\n  /**\n   * The token account linking the NFT with its owner.\n   *\n   * @defaultValue\n   * Defaults to the associated token address using the\n   * mint address of the NFT and the payer's address.\n   */\n  tokenAccount?: PublicKey;\n};\n\n/** @internal */\nexport const nftBurnGuardManifest: CandyGuardManifest<\n  NftBurnGuardSettings,\n  NftBurnGuardMintSettings\n> = {\n  name: 'nftBurn',\n  settingsBytes: 32,\n  settingsSerializer: createSerializerFromBeet(nftBurnBeet),\n  mintSettingsParser: ({\n    metaplex,\n    settings,\n    mintSettings,\n    payer,\n    programs,\n  }) => {\n    if (!mintSettings) {\n      throw new GuardMintSettingsMissingError('nftBurn');\n    }\n\n    const tokenAccount =\n      mintSettings.tokenAccount ??\n      metaplex.tokens().pdas().associatedTokenAccount({\n        mint: mintSettings.mint,\n        owner: payer.publicKey,\n        programs,\n      });\n\n    const tokenMetadata = metaplex.nfts().pdas().metadata({\n      mint: mintSettings.mint,\n      programs,\n    });\n\n    const tokenEdition = metaplex.nfts().pdas().masterEdition({\n      mint: mintSettings.mint,\n      programs,\n    });\n\n    const mintCollectionMetadata = metaplex.nfts().pdas().metadata({\n      mint: settings.requiredCollection,\n      programs,\n    });\n\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts: [\n        {\n          isSigner: false,\n          address: tokenAccount,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: tokenMetadata,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: tokenEdition,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: mintSettings.mint,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: mintCollectionMetadata,\n          isWritable: true,\n        },\n      ],\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}