{"ast":null,"code":"import { createThawAccountInstruction } from '@solana/spl-token';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { isSigner } from '../../../types/Signer.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'ThawTokensOperation';\n/**\n * Thaws a token account.\n *\n * ```ts\n * await metaplex.tokens().thaw({ mintAddress, freezeAuthority });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst thawTokensOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst thawTokensOperationHandler = {\n  async handle(operation, metaplex, scope) {\n    return thawTokensBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Thaws a token account.\n *\n * ```ts\n * const transactionBuilder = metaplex.tokens().builders().thaw({ mintAddress, freezeAuthority });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst thawTokensBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    mintAddress,\n    tokenOwner = metaplex.identity().publicKey,\n    tokenAddress,\n    multiSigners = [],\n    freezeAuthority\n  } = params;\n  const [authorityPublicKey, signers] = isSigner(freezeAuthority) ? [freezeAuthority.publicKey, [freezeAuthority]] : [freezeAuthority, multiSigners];\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenAddressOrAta = tokenAddress ?? metaplex.tokens().pdas().associatedTokenAccount({\n    mint: mintAddress,\n    owner: tokenOwner,\n    programs\n  });\n  return TransactionBuilder.make().setFeePayer(payer).add({\n    instruction: createThawAccountInstruction(tokenAddressOrAta, mintAddress, authorityPublicKey, multiSigners, tokenProgram.address),\n    signers,\n    key: params.instructionKey ?? 'thawTokens'\n  });\n};\n\nexport { thawTokensBuilder, thawTokensOperation, thawTokensOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/tokenModule/operations/thawTokens.ts"],"names":["Key","thawTokensOperation","useOperation","thawTokensOperationHandler","handle","operation","metaplex","scope","thawTokensBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","tokenOwner","identity","publicKey","tokenAddress","multiSigners","freezeAuthority","authorityPublicKey","signers","isSigner","tokenProgram","getToken","tokenAddressOrAta","tokens","pdas","associatedTokenAccount","mint","owner","TransactionBuilder","make","setFeePayer","add","instruction","createThawAccountInstruction","address","key","instructionKey"],"mappings":";;;4EAeA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,qBAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,mBAAmB,GAAGC,YAAY,CAAsBF,GAAtB,C;AAE/C;AACA;AACA;AACA;;AAuDA;AACA;AACA;AACA;;AACO,MAAMG,0BAAiE,GAC5E;EACE,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAI6B;IAC3B,OAAOC,iBAAiB,CAACF,QAAD,EAAWD,SAAS,CAACI,KAArB,EAA4BF,KAA5B,CAAjBC,CAAoDE,cAApDF,CACLF,QADKE,EAELD,KAAK,CAACI,cAFDH,CAAP;EAIF;;AAVF,CADK,C,CAcP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaA,MAAAA,iBAAiB,GAAG,UAC/BF,QAD+B,EAE/BM,MAF+B,EAIR;EAAA,IADvBC,OACuB,uEADc,EACd;EACvB,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGT,QAAQ,CAACU,GAATV,GAAeW,kBAAfX;EAApB,IAA4DO,OAAlE;EACA,MAAM;IACJK,WADI;IAEJC,UAAU,GAAGb,QAAQ,CAACc,QAATd,GAAoBe,SAF7B;IAGJC,YAHI;IAIJC,YAAY,GAAG,EAJX;IAKJC;EALI,IAMFZ,MANJ;EAQA,MAAM,CAACa,kBAAD,EAAqBC,OAArB,IAAgCC,QAAQ,CAACH,eAAD,CAARG,GAClC,CAACH,eAAe,CAACH,SAAjB,EAA4B,CAACG,eAAD,CAA5B,CADkCG,GAElC,CAACH,eAAD,EAAkBD,YAAlB,CAFJ;EAIA,MAAMK,YAAY,GAAGtB,QAAQ,CAACQ,QAATR,GAAoBuB,QAApBvB,CAA6BQ,QAA7BR,CAArB;EACA,MAAMwB,iBAAiB,GACrBR,YAAY,IACZhB,QAAQ,CAACyB,MAATzB,GAAkB0B,IAAlB1B,GAAyB2B,sBAAzB3B,CAAgD;IAC9C4B,IAAI,EAAEhB,WADwC;IAE9CiB,KAAK,EAAEhB,UAFuC;IAG9CL;EAH8C,CAAhDR,CAFF;EAQA,OAAO8B,kBAAkB,CAACC,IAAnBD,GACJE,WADIF,CACQrB,KADRqB,EAEJG,GAFIH,CAEA;IACHI,WAAW,EAAEC,4BAA4B,CACvCX,iBADuC,EAEvCZ,WAFuC,EAGvCO,kBAHuC,EAIvCF,YAJuC,EAKvCK,YAAY,CAACc,OAL0B,CADtC;IAQHhB,OARG;IASHiB,GAAG,EAAE/B,MAAM,CAACgC,cAAPhC,IAAyB;EAT3B,CAFAwB,CAAP;AAaF,CAxCa5B","sourcesContent":["import { createThawAccountInstruction } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ThawTokensOperation' as const;\n\n/**\n * Thaws a token account.\n *\n * ```ts\n * await metaplex.tokens().thaw({ mintAddress, freezeAuthority });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const thawTokensOperation = useOperation<ThawTokensOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ThawTokensOperation = Operation<\n  typeof Key,\n  ThawTokensInput,\n  ThawTokensOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type ThawTokensInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /**\n   * The freeze authority as a Signer.\n   *\n   * This may be provided as a PublicKey if and only if\n   * the `multiSigners` parameter is provided.\n   */\n  freezeAuthority: PublicKey | Signer;\n\n  /**\n   * The owner of the token account.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  tokenOwner?: PublicKey;\n\n  /**\n   * The address of the token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `tokenOwner` parameters.\n   */\n  tokenAddress?: PublicKey;\n\n  /**\n   * The signing accounts to use if the freeze authority is a multisig.\n   *\n   * @defaultValue `[]`\n   */\n  multiSigners?: KeypairSigner[];\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ThawTokensOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const thawTokensOperationHandler: OperationHandler<ThawTokensOperation> =\n  {\n    async handle(\n      operation: ThawTokensOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<ThawTokensOutput> {\n      return thawTokensBuilder(metaplex, operation.input, scope).sendAndConfirm(\n        metaplex,\n        scope.confirmOptions\n      );\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ThawTokensBuilderParams = Omit<\n  ThawTokensInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that thaws the token account. */\n  instructionKey?: string;\n};\n\n/**\n * Thaws a token account.\n *\n * ```ts\n * const transactionBuilder = metaplex.tokens().builders().thaw({ mintAddress, freezeAuthority });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const thawTokensBuilder = (\n  metaplex: Metaplex,\n  params: ThawTokensBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    tokenOwner = metaplex.identity().publicKey,\n    tokenAddress,\n    multiSigners = [],\n    freezeAuthority,\n  } = params;\n\n  const [authorityPublicKey, signers] = isSigner(freezeAuthority)\n    ? [freezeAuthority.publicKey, [freezeAuthority]]\n    : [freezeAuthority, multiSigners];\n\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenAddressOrAta =\n    tokenAddress ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: tokenOwner,\n      programs,\n    });\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createThawAccountInstruction(\n        tokenAddressOrAta,\n        mintAddress,\n        authorityPublicKey,\n        multiSigners,\n        tokenProgram.address\n      ),\n      signers,\n      key: params.instructionKey ?? 'thawTokens',\n    });\n};\n"]},"metadata":{},"sourceType":"module"}