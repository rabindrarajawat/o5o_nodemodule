{"ast":null,"code":"import { toCandyMachineV2Account, parseCandyMachineV2CollectionAccount } from '../accounts.mjs';\nimport { findCandyMachineV2CollectionPda } from '../pdas.mjs';\nimport { toCandyMachineV2 } from '../models/CandyMachineV2.mjs';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { assertAccountExists } from '../../../types/Account.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindCandyMachineV2ByAddressOperation';\n/**\n * Find an existing Candy Machine by its address.\n *\n * ```ts\n * const candyMachine = await metaplex.candyMachinesV2().findbyAddress({ address });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst findCandyMachineV2ByAddressOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst findCandyMachineV2ByAddressOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const {\n      commitment\n    } = scope;\n    const {\n      address\n    } = operation.input;\n    const collectionPda = findCandyMachineV2CollectionPda(address);\n    const accounts = await metaplex.rpc().getMultipleAccounts([address, collectionPda], commitment);\n    const unparsedAccount = accounts[0];\n    assertAccountExists(unparsedAccount);\n    const account = toCandyMachineV2Account(unparsedAccount);\n    const collectionAccount = parseCandyMachineV2CollectionAccount(accounts[1]);\n    const mint = account.data.tokenMint ? await metaplex.tokens().findMintByAddress({\n      address: account.data.tokenMint\n    }, scope) : null;\n    return toCandyMachineV2(account, unparsedAccount, collectionAccount, mint);\n  }\n};\nexport { findCandyMachineV2ByAddressOperation, findCandyMachineV2ByAddressOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineV2Module/operations/findCandyMachineV2ByAddress.ts"],"names":["Key","findCandyMachineV2ByAddressOperation","useOperation","findCandyMachineV2ByAddressOperationHandler","handle","operation","metaplex","scope","commitment","address","input","collectionPda","findCandyMachineV2CollectionPda","accounts","rpc","getMultipleAccounts","unparsedAccount","assertAccountExists","account","toCandyMachineV2Account","collectionAccount","parseCandyMachineV2CollectionAccount","mint","data","tokenMint","tokens","findMintByAddress","toCandyMachineV2"],"mappings":";;;;kEAgBA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,sCAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,oCAAoC,GAC/CC,YAAY,CAAuCF,GAAvC,C;AAEd;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;;AACO,MAAMG,2CAAmG,GAC9G;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MAAEC;IAAF,IAAiBD,KAAvB;IACA,MAAM;MAAEE;IAAF,IAAcJ,SAAS,CAACK,KAA9B;IACA,MAAMC,aAAa,GAAGC,+BAA+B,CAACH,OAAD,CAArD;IACA,MAAMI,QAAQ,GAAG,MAAMP,QAAQ,CAC5BQ,GADoBR,GAEpBS,mBAFoBT,CAEA,CAACG,OAAD,EAAUE,aAAV,CAFAL,EAE0BE,UAF1BF,CAAvB;IAIA,MAAMU,eAAe,GAAGH,QAAQ,CAAC,CAAD,CAAhC;IACAI,mBAAmB,CAACD,eAAD,CAAnBC;IACA,MAAMC,OAAO,GAAGC,uBAAuB,CAACH,eAAD,CAAvC;IACA,MAAMI,iBAAiB,GAAGC,oCAAoC,CAC5DR,QAAQ,CAAC,CAAD,CADoD,CAA9D;IAIA,MAAMS,IAAI,GAAGJ,OAAO,CAACK,IAARL,CAAaM,SAAbN,GACT,MAAMZ,QAAQ,CACXmB,MADGnB,GAEHoB,iBAFGpB,CAEe;MAAEG,OAAO,EAAES,OAAO,CAACK,IAARL,CAAaM;IAAxB,CAFflB,EAEoDC,KAFpDD,CADGY,GAIT,IAJJ;IAMA,OAAOS,gBAAgB,CACrBT,OADqB,EAErBF,eAFqB,EAGrBI,iBAHqB,EAIrBE,IAJqB,CAAvB;EAMF;AAhCF,CADK","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  parseCandyMachineV2CollectionAccount,\n  toCandyMachineV2Account,\n} from '../accounts';\nimport { CandyMachineV2, toCandyMachineV2 } from '../models';\nimport { findCandyMachineV2CollectionPda } from '../pdas';\nimport {\n  assertAccountExists,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindCandyMachineV2ByAddressOperation' as const;\n\n/**\n * Find an existing Candy Machine by its address.\n *\n * ```ts\n * const candyMachine = await metaplex.candyMachinesV2().findbyAddress({ address });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findCandyMachineV2ByAddressOperation =\n  useOperation<FindCandyMachineV2ByAddressOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindCandyMachineV2ByAddressOperation = Operation<\n  typeof Key,\n  FindCandyMachineV2ByAddressInput,\n  CandyMachineV2\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindCandyMachineV2ByAddressInput = {\n  /** The Candy Machine address. */\n  address: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findCandyMachineV2ByAddressOperationHandler: OperationHandler<FindCandyMachineV2ByAddressOperation> =\n  {\n    handle: async (\n      operation: FindCandyMachineV2ByAddressOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) => {\n      const { commitment } = scope;\n      const { address } = operation.input;\n      const collectionPda = findCandyMachineV2CollectionPda(address);\n      const accounts = await metaplex\n        .rpc()\n        .getMultipleAccounts([address, collectionPda], commitment);\n\n      const unparsedAccount = accounts[0];\n      assertAccountExists(unparsedAccount);\n      const account = toCandyMachineV2Account(unparsedAccount);\n      const collectionAccount = parseCandyMachineV2CollectionAccount(\n        accounts[1]\n      );\n\n      const mint = account.data.tokenMint\n        ? await metaplex\n            .tokens()\n            .findMintByAddress({ address: account.data.tokenMint }, scope)\n        : null;\n\n      return toCandyMachineV2(\n        account,\n        unparsedAccount,\n        collectionAccount,\n        mint\n      );\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}