{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transferChecked = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst transferChecked_js_1 = require(\"../instructions/transferChecked.js\");\n\nconst internal_js_1 = require(\"./internal.js\");\n/**\n * Transfer tokens from one account to another, asserting the token mint and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\n\nfunction transferChecked(connection, payer, source, mint, destination, owner, amount, decimals) {\n  let multiSigners = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : [];\n  let confirmOptions = arguments.length > 9 ? arguments[9] : undefined;\n  let programId = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : constants_js_1.TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);\n    const transaction = new web3_js_1.Transaction().add((0, transferChecked_js_1.createTransferCheckedInstruction)(source, mint, destination, ownerPublicKey, amount, decimals, multiSigners, programId));\n    return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);\n  });\n}\n\nexports.transferChecked = transferChecked;","map":{"version":3,"sources":["../../../src/actions/transferChecked.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,oBAAA,GAAA,OAAA,CAAA,oCAAA,CAAA;;AACA,MAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAEA;;;;;;;;;;;;;;;;AAgBG;;;AACH,SAAsB,eAAtB,CACI,UADJ,EAEI,KAFJ,EAGI,MAHJ,EAII,IAJJ,EAKI,WALJ,EAMI,KANJ,EAOI,MAPJ,EAQI,QARJ,EAWgC;EAAA,IAF5B,YAE4B,uEAFH,EAEG;EAAA,IAD5B,cAC4B;EAAA,IAA5B,SAA4B,0EAAhB,cAAA,CAAA,gBAAgB;;IAE5B,MAAM,CAAC,cAAD,EAAiB,OAAjB,IAA4B,CAAA,GAAA,aAAA,CAAA,UAAA,EAAW,KAAX,EAAkB,YAAlB,CAAlC;IAEA,MAAM,WAAW,GAAG,IAAI,SAAA,CAAA,WAAJ,GAAkB,GAAlB,CAChB,CAAA,GAAA,oBAAA,CAAA,gCAAA,EACI,MADJ,EAEI,IAFJ,EAGI,WAHJ,EAII,cAJJ,EAKI,MALJ,EAMI,QANJ,EAOI,YAPJ,EAQI,SARJ,CADgB,CAApB;IAaA,OAAO,MAAM,CAAA,GAAA,SAAA,CAAA,yBAAA,EAA0B,UAA1B,EAAsC,WAAtC,EAAmD,CAAC,KAAD,EAAQ,GAAG,OAAX,CAAnD,EAAwE,cAAxE,CAAb;EACH,C;AAAA;;AA7BD,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transferChecked = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst transferChecked_js_1 = require(\"../instructions/transferChecked.js\");\nconst internal_js_1 = require(\"./internal.js\");\n/**\n * Transfer tokens from one account to another, asserting the token mint and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction transferChecked(connection, payer, source, mint, destination, owner, amount, decimals, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);\n        const transaction = new web3_js_1.Transaction().add((0, transferChecked_js_1.createTransferCheckedInstruction)(source, mint, destination, ownerPublicKey, amount, decimals, multiSigners, programId));\n        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);\n    });\n}\nexports.transferChecked = transferChecked;\n//# sourceMappingURL=transferChecked.js.map"]},"metadata":{},"sourceType":"script"}