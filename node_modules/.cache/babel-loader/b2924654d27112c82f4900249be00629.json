{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey } from '@solana/buffer-layout-utils';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError } from '../errors.js';\n/** Buffer layout for de/serializing a multisig */\n\nexport const MultisigLayout = struct([u8('m'), u8('n'), bool('isInitialized'), publicKey('signer1'), publicKey('signer2'), publicKey('signer3'), publicKey('signer4'), publicKey('signer5'), publicKey('signer6'), publicKey('signer7'), publicKey('signer8'), publicKey('signer9'), publicKey('signer10'), publicKey('signer11')]);\n/** Byte length of a multisig */\n\nexport const MULTISIG_SIZE = MultisigLayout.span;\n/**\n * Retrieve information about a multisig\n *\n * @param connection Connection to use\n * @param address    Multisig account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Multisig information\n */\n\nexport async function getMultisig(connection, address, commitment) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_PROGRAM_ID;\n  const info = await connection.getAccountInfo(address, commitment);\n  return unpackMultisig(address, info, programId);\n}\n/**\n * Unpack a multisig\n *\n * @param address   Multisig account\n * @param info      Multisig account data\n * @param programId SPL Token program account\n *\n * @return Unpacked multisig\n */\n\nexport function unpackMultisig(address, info) {\n  let programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : TOKEN_PROGRAM_ID;\n  if (!info) throw new TokenAccountNotFoundError();\n  if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n  if (info.data.length != MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n  const multisig = MultisigLayout.decode(info.data);\n  return {\n    address: address,\n    ...multisig\n  };\n}\n/** Get the minimum lamport balance for a multisig to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\n\nexport async function getMinimumBalanceForRentExemptMultisig(connection, commitment) {\n  return await connection.getMinimumBalanceForRentExemption(MULTISIG_SIZE, commitment);\n}","map":{"version":3,"sources":["../../../src/state/multisig.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,EAAiB,EAAjB,QAA2B,uBAA3B;AACA,SAAS,IAAT,EAAe,SAAf,QAAgC,6BAAhC;AAEA,SAAS,gBAAT,QAAiC,iBAAjC;AACA,SAAS,yBAAT,EAAoC,6BAApC,EAAmE,4BAAnE,QAAuG,cAAvG;AA6BA;;AACA,OAAO,MAAM,cAAc,GAAG,MAAM,CAAc,CAC9C,EAAE,CAAC,GAAD,CAD4C,EAE9C,EAAE,CAAC,GAAD,CAF4C,EAG9C,IAAI,CAAC,eAAD,CAH0C,EAI9C,SAAS,CAAC,SAAD,CAJqC,EAK9C,SAAS,CAAC,SAAD,CALqC,EAM9C,SAAS,CAAC,SAAD,CANqC,EAO9C,SAAS,CAAC,SAAD,CAPqC,EAQ9C,SAAS,CAAC,SAAD,CARqC,EAS9C,SAAS,CAAC,SAAD,CATqC,EAU9C,SAAS,CAAC,SAAD,CAVqC,EAW9C,SAAS,CAAC,SAAD,CAXqC,EAY9C,SAAS,CAAC,SAAD,CAZqC,EAa9C,SAAS,CAAC,UAAD,CAbqC,EAc9C,SAAS,CAAC,UAAD,CAdqC,CAAd,CAA7B;AAiBP;;AACA,OAAO,MAAM,aAAa,GAAG,cAAc,CAAC,IAArC;AAEP;;;;;;;;;AASG;;AACH,OAAO,eAAe,WAAf,CACH,UADG,EAEH,OAFG,EAGH,UAHG,EAIyB;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,cAAX,CAA0B,OAA1B,EAAmC,UAAnC,CAAnB;EACA,OAAO,cAAc,CAAC,OAAD,EAAU,IAAV,EAAgB,SAAhB,CAArB;AACH;AAED;;;;;;;;AAQG;;AACH,OAAM,SAAU,cAAV,CACF,OADE,EAEF,IAFE,EAG0B;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B,IAAI,CAAC,IAAL,EAAW,MAAM,IAAI,yBAAJ,EAAN;EACX,IAAI,CAAC,IAAI,CAAC,KAAL,CAAW,MAAX,CAAkB,SAAlB,CAAL,EAAmC,MAAM,IAAI,6BAAJ,EAAN;EACnC,IAAI,IAAI,CAAC,IAAL,CAAU,MAAV,IAAoB,aAAxB,EAAuC,MAAM,IAAI,4BAAJ,EAAN;EAEvC,MAAM,QAAQ,GAAG,cAAc,CAAC,MAAf,CAAsB,IAAI,CAAC,IAA3B,CAAjB;EAEA,OAAO;IAAE,OAAO,EAAP,OAAF;IAAW,GAAG;EAAd,CAAP;AACH;AAED;;;;;;AAMG;;AACH,OAAO,eAAe,sCAAf,CACH,UADG,EAEH,UAFG,EAEoB;EAEvB,OAAO,MAAM,UAAU,CAAC,iCAAX,CAA6C,aAA7C,EAA4D,UAA5D,CAAb;AACH","sourceRoot":"","sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey } from '@solana/buffer-layout-utils';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError } from '../errors.js';\n/** Buffer layout for de/serializing a multisig */\nexport const MultisigLayout = struct([\n    u8('m'),\n    u8('n'),\n    bool('isInitialized'),\n    publicKey('signer1'),\n    publicKey('signer2'),\n    publicKey('signer3'),\n    publicKey('signer4'),\n    publicKey('signer5'),\n    publicKey('signer6'),\n    publicKey('signer7'),\n    publicKey('signer8'),\n    publicKey('signer9'),\n    publicKey('signer10'),\n    publicKey('signer11'),\n]);\n/** Byte length of a multisig */\nexport const MULTISIG_SIZE = MultisigLayout.span;\n/**\n * Retrieve information about a multisig\n *\n * @param connection Connection to use\n * @param address    Multisig account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Multisig information\n */\nexport async function getMultisig(connection, address, commitment, programId = TOKEN_PROGRAM_ID) {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMultisig(address, info, programId);\n}\n/**\n * Unpack a multisig\n *\n * @param address   Multisig account\n * @param info      Multisig account data\n * @param programId SPL Token program account\n *\n * @return Unpacked multisig\n */\nexport function unpackMultisig(address, info, programId = TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new TokenInvalidAccountOwnerError();\n    if (info.data.length != MULTISIG_SIZE)\n        throw new TokenInvalidAccountSizeError();\n    const multisig = MultisigLayout.decode(info.data);\n    return { address, ...multisig };\n}\n/** Get the minimum lamport balance for a multisig to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMultisig(connection, commitment) {\n    return await connection.getMinimumBalanceForRentExemption(MULTISIG_SIZE, commitment);\n}\n//# sourceMappingURL=multisig.js.map"]},"metadata":{},"sourceType":"module"}