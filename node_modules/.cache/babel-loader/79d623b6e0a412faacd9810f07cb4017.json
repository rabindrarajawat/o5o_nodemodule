{"ast":null,"code":"import assert from '../../../utils/assert.mjs';\nimport { removeEmptyChars } from '../../../utils/common.mjs';\nimport { Pda } from '../../../types/Pda.mjs';\nimport { toBigNumber } from '../../../types/BigNumber.mjs';\n/** @group Models */\n\n/** @group Model Helpers */\n\nconst isMetadata = value => typeof value === 'object' && value.model === 'metadata';\n/** @group Model Helpers */\n\n\nfunction assertMetadata(value) {\n  assert(isMetadata(value), `Expected Metadata model`);\n}\n/** @group Model Helpers */\n\n\nconst toMetadata = (account, json) => ({\n  model: 'metadata',\n  address: Pda.find(account.owner, [Buffer.from('metadata', 'utf8'), account.owner.toBuffer(), account.data.mint.toBuffer()]),\n  mintAddress: account.data.mint,\n  updateAuthorityAddress: account.data.updateAuthority,\n  json: json ?? null,\n  jsonLoaded: json !== undefined,\n  name: removeEmptyChars(account.data.data.name),\n  symbol: removeEmptyChars(account.data.data.symbol),\n  uri: removeEmptyChars(account.data.data.uri),\n  isMutable: account.data.isMutable,\n  primarySaleHappened: account.data.primarySaleHappened,\n  sellerFeeBasisPoints: account.data.data.sellerFeeBasisPoints,\n  editionNonce: account.data.editionNonce,\n  creators: account.data.data.creators ?? [],\n  tokenStandard: account.data.tokenStandard,\n  collection: account.data.collection ? { ...account.data.collection,\n    address: account.data.collection.key\n  } : null,\n  collectionDetails: account.data.collectionDetails ? {\n    version: account.data.collectionDetails.__kind,\n    size: toBigNumber(account.data.collectionDetails.size)\n  } : null,\n  uses: account.data.uses ? { ...account.data.uses,\n    remaining: toBigNumber(account.data.uses.remaining),\n    total: toBigNumber(account.data.uses.total)\n  } : null\n});\n\nexport { assertMetadata, isMetadata, toMetadata };","map":{"version":3,"sources":["../../../../../src/plugins/nftModule/models/Metadata.ts"],"names":["isMetadata","value","model","assertMetadata","assert","toMetadata","account","json","address","Pda","find","owner","Buffer","from","toBuffer","data","mint","mintAddress","updateAuthorityAddress","updateAuthority","jsonLoaded","undefined","name","removeEmptyChars","symbol","uri","isMutable","primarySaleHappened","sellerFeeBasisPoints","editionNonce","creators","tokenStandard","collection","key","collectionDetails","version","__kind","size","toBigNumber","uses","remaining","total"],"mappings":";;;;AAUA;;AAiIA;;AACaA,MAAAA,UAAU,GAAIC,KAAU,IACnC,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAND,KAAgB,UADlCD;AAGb;;;AACO,SAASG,cAAT,CAAwBF,KAAxB,EAA+D;EACpEG,MAAM,CAACJ,UAAU,CAACC,KAAD,CAAX,EAAqB,yBAArB,CAANG;AACF;AAEA;;;MACaC,UAAU,GAAG,CACxBC,OADwB,EAExBC,IAFwB,MAGV;EACdL,KAAK,EAAE,UADO;EAEdM,OAAO,EAAEC,GAAG,CAACC,IAAJD,CAASH,OAAO,CAACK,KAAjBF,EAAwB,CAC/BG,MAAM,CAACC,IAAPD,CAAY,UAAZA,EAAwB,MAAxBA,CAD+B,EAE/BN,OAAO,CAACK,KAARL,CAAcQ,QAAdR,EAF+B,EAG/BA,OAAO,CAACS,IAART,CAAaU,IAAbV,CAAkBQ,QAAlBR,EAH+B,CAAxBG,CAFK;EAOdQ,WAAW,EAAEX,OAAO,CAACS,IAART,CAAaU,IAPZ;EAQdE,sBAAsB,EAAEZ,OAAO,CAACS,IAART,CAAaa,eARvB;EASdZ,IAAI,EAAEA,IAAI,IAAI,IATA;EAUda,UAAU,EAAEb,IAAI,KAAKc,SAVP;EAWdC,IAAI,EAAEC,gBAAgB,CAACjB,OAAO,CAACS,IAART,CAAaS,IAAbT,CAAkBgB,IAAnB,CAXR;EAYdE,MAAM,EAAED,gBAAgB,CAACjB,OAAO,CAACS,IAART,CAAaS,IAAbT,CAAkBkB,MAAnB,CAZV;EAadC,GAAG,EAAEF,gBAAgB,CAACjB,OAAO,CAACS,IAART,CAAaS,IAAbT,CAAkBmB,GAAnB,CAbP;EAcdC,SAAS,EAAEpB,OAAO,CAACS,IAART,CAAaoB,SAdV;EAedC,mBAAmB,EAAErB,OAAO,CAACS,IAART,CAAaqB,mBAfpB;EAgBdC,oBAAoB,EAAEtB,OAAO,CAACS,IAART,CAAaS,IAAbT,CAAkBsB,oBAhB1B;EAiBdC,YAAY,EAAEvB,OAAO,CAACS,IAART,CAAauB,YAjBb;EAkBdC,QAAQ,EAAExB,OAAO,CAACS,IAART,CAAaS,IAAbT,CAAkBwB,QAAlBxB,IAA8B,EAlB1B;EAmBdyB,aAAa,EAAEzB,OAAO,CAACS,IAART,CAAayB,aAnBd;EAoBdC,UAAU,EAAE1B,OAAO,CAACS,IAART,CAAa0B,UAAb1B,GACR,EACE,GAAGA,OAAO,CAACS,IAART,CAAa0B,UADlB;IAEExB,OAAO,EAAEF,OAAO,CAACS,IAART,CAAa0B,UAAb1B,CAAwB2B;EAFnC,CADQ3B,GAKR,IAzBU;EA0Bd4B,iBAAiB,EAAE5B,OAAO,CAACS,IAART,CAAa4B,iBAAb5B,GACf;IACE6B,OAAO,EAAE7B,OAAO,CAACS,IAART,CAAa4B,iBAAb5B,CAA+B8B,MAD1C;IAEEC,IAAI,EAAEC,WAAW,CAAChC,OAAO,CAACS,IAART,CAAa4B,iBAAb5B,CAA+B+B,IAAhC;EAFnB,CADe/B,GAKf,IA/BU;EAgCdiC,IAAI,EAAEjC,OAAO,CAACS,IAART,CAAaiC,IAAbjC,GACF,EACE,GAAGA,OAAO,CAACS,IAART,CAAaiC,IADlB;IAEEC,SAAS,EAAEF,WAAW,CAAChC,OAAO,CAACS,IAART,CAAaiC,IAAbjC,CAAkBkC,SAAnB,CAFxB;IAGEC,KAAK,EAAEH,WAAW,CAAChC,OAAO,CAACS,IAART,CAAaiC,IAAbjC,CAAkBmC,KAAnB;EAHpB,CADEnC,GAMF;AAtCU,CAHU,C","sourcesContent":["import {\n  TokenStandard,\n  UseMethod,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { MetadataAccount } from '../accounts';\nimport { JsonMetadata } from './JsonMetadata';\nimport { assert, Option, removeEmptyChars } from '@/utils';\nimport { BigNumber, Creator, Pda, toBigNumber } from '@/types';\n\n/** @group Models */\nexport type Metadata<Json extends object = JsonMetadata> = {\n  /** A model identifier to distinguish models in the SDK. */\n  readonly model: 'metadata';\n\n  /** The address of the Metadata account. */\n  readonly address: Pda;\n\n  /** The address of the Mint account. */\n  readonly mintAddress: PublicKey;\n\n  /**\n   * The address of the authority that is allowed\n   * to make changes to the Metadata account.\n   */\n  readonly updateAuthorityAddress: PublicKey;\n\n  /** The JSON metadata associated with the metadata acount. */\n  readonly json: Option<Json>;\n\n  /**\n   * Whether or not the JSON metadata was loaded in the first place.\n   * When this is `false`, the `json` property is should be ignored.\n   */\n  readonly jsonLoaded: boolean;\n\n  /**\n   * The on-chain name of the asset, stored in the Metadata account.\n   * E.g. \"My NFT #123\"\n   */\n  readonly name: string;\n\n  /**\n   * The on-chain symbol of the asset, stored in the Metadata account.\n   * E.g. \"MYNFT\"\n   */\n  readonly symbol: string;\n\n  /**\n   * The URI that points to the JSON metadata of the asset.\n   * This URI is used to load the `json` property of this object.\n   */\n  readonly uri: string;\n\n  /**\n   * Whether or not the asset is mutable.\n   * When set to `false` no one can update the Metadata account,\n   * not even the update authority.\n   */\n  readonly isMutable: boolean;\n\n  /**\n   * Whether or not the asset has already been sold to its first buyer.\n   * When set to `false`, all royalties should be paid to the creators.\n   * When set to `true`, royalties should be calculate as usual.\n   */\n  readonly primarySaleHappened: boolean;\n\n  /**\n   * The royalties in percent basis point (i.e. 250 is 2.5%) that\n   * should be paid to the creators on each secondary sale.\n   */\n  readonly sellerFeeBasisPoints: number;\n\n  /** Stores the bump of the edition PDA. */\n  readonly editionNonce: Option<number>;\n\n  /**\n   * The creators of the asset.\n   * Each object within the array contains the address,\n   * the shares in percent (i.e. 5 is 5%) and whether or not the\n   * creator is verified (i.e. they signed the asset).\n   */\n  readonly creators: Creator[];\n\n  /**\n   * This enum indicates which type of asset we are dealing with.\n   * It can be an NFT, a limited edition of an original NFT,\n   * a fungible asset (i.e. it has zero decimals)\n   * or a fungible token (i.e. it has more than zero decimals).\n   */\n  readonly tokenStandard: Option<TokenStandard>;\n\n  /**\n   * The parent collection the asset belongs to.\n   */\n  readonly collection: Option<{\n    /** The mint address of the collection asset. */\n    address: PublicKey;\n\n    /**\n     * Whether a collection authority signed this asset to\n     * ensure it is part of the collection.\n     * If `verified` is `false`, you should not trust\n     * the asset as being part of the collection.\n     */\n    verified: boolean;\n  }>;\n\n  /**\n   * When this field is not `null`, it indicates that\n   * the asset is a collection. Everytime an asset is\n   * verified/unverified as part of this collection,\n   * the `size` field inside this object will be updated accordingly.\n   */\n  readonly collectionDetails: Option<{\n    /** The collection details version. For now, there's only one version. */\n    version: 'V1';\n\n    /** The size of the collection, automatically kept up-to-date by the program. */\n    size: BigNumber;\n  }>;\n\n  /**\n   * When this field is not `null`, it indicates that the asset\n   * can be \"used\" by its owner or any approved \"use authorities\".\n   */\n  readonly uses: Option<{\n    /** An enum selecting a strategy for using the asset. */\n    useMethod: UseMethod;\n\n    /** The amount of remaining uses. */\n    remaining: BigNumber;\n\n    /** The total amount of uses that was initially allowed. */\n    total: BigNumber;\n  }>;\n};\n\n/** @group Model Helpers */\nexport const isMetadata = (value: any): value is Metadata =>\n  typeof value === 'object' && value.model === 'metadata';\n\n/** @group Model Helpers */\nexport function assertMetadata(value: any): asserts value is Metadata {\n  assert(isMetadata(value), `Expected Metadata model`);\n}\n\n/** @group Model Helpers */\nexport const toMetadata = (\n  account: MetadataAccount,\n  json?: Option<JsonMetadata>\n): Metadata => ({\n  model: 'metadata',\n  address: Pda.find(account.owner, [\n    Buffer.from('metadata', 'utf8'),\n    account.owner.toBuffer(),\n    account.data.mint.toBuffer(),\n  ]),\n  mintAddress: account.data.mint,\n  updateAuthorityAddress: account.data.updateAuthority,\n  json: json ?? null,\n  jsonLoaded: json !== undefined,\n  name: removeEmptyChars(account.data.data.name),\n  symbol: removeEmptyChars(account.data.data.symbol),\n  uri: removeEmptyChars(account.data.data.uri),\n  isMutable: account.data.isMutable,\n  primarySaleHappened: account.data.primarySaleHappened,\n  sellerFeeBasisPoints: account.data.data.sellerFeeBasisPoints,\n  editionNonce: account.data.editionNonce,\n  creators: account.data.data.creators ?? [],\n  tokenStandard: account.data.tokenStandard,\n  collection: account.data.collection\n    ? {\n        ...account.data.collection,\n        address: account.data.collection.key,\n      }\n    : null,\n  collectionDetails: account.data.collectionDetails\n    ? {\n        version: account.data.collectionDetails.__kind,\n        size: toBigNumber(account.data.collectionDetails.size),\n      }\n    : null,\n  uses: account.data.uses\n    ? {\n        ...account.data.uses,\n        remaining: toBigNumber(account.data.uses.remaining),\n        total: toBigNumber(account.data.uses.total),\n      }\n    : null,\n});\n"]},"metadata":{},"sourceType":"module"}