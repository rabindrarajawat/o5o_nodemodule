{"ast":null,"code":"import { createWithdrawInstruction } from '@metaplex-foundation/mpl-candy-machine-core';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'DeleteCandyMachineOperation';\n/**\n * Deletes a Candy Machine account by withdrawing its rent-exempt balance.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .delete({\n *     candyMachine: candyMachine.address,\n *     candyGuard: candyMachine.candyGuard.address,\n *     authority,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst deleteCandyMachineOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst deleteCandyMachineOperationHandler = {\n  async handle(operation, metaplex, scope) {\n    return deleteCandyMachineBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Deletes a Candy Machine account by withdrawing its rent-exempt balance.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachines()\n *   .builders()\n *   .delete({\n *     candyMachine: candyMachine.address,\n *     candyGuard: candyMachine.candyGuard.address,\n *     authority,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst deleteCandyMachineBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    candyMachine,\n    candyGuard,\n    authority = metaplex.identity(),\n    candyGuardAuthority = authority\n  } = params;\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n  const builder = TransactionBuilder.make().setFeePayer(payer).add({\n    instruction: createWithdrawInstruction({\n      candyMachine,\n      authority: authority.publicKey\n    }, candyMachineProgram.address),\n    signers: [authority],\n    key: params.deleteCandyMachineInstructionKey ?? 'deleteCandyMachine'\n  });\n\n  if (candyGuard) {\n    builder.add(metaplex.candyMachines().builders().deleteCandyGuard({\n      candyGuard,\n      authority: candyGuardAuthority\n    }, {\n      payer,\n      programs\n    }));\n  }\n\n  return builder;\n};\n\nexport { deleteCandyMachineBuilder, deleteCandyMachineOperation, deleteCandyMachineOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineModule/operations/deleteCandyMachine.ts"],"names":["Key","deleteCandyMachineOperation","useOperation","deleteCandyMachineOperationHandler","handle","operation","metaplex","scope","deleteCandyMachineBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","candyMachine","candyGuard","authority","identity","candyGuardAuthority","candyMachineProgram","getCandyMachine","builder","TransactionBuilder","make","setFeePayer","add","instruction","createWithdrawInstruction","publicKey","address","signers","key","deleteCandyMachineInstructionKey","candyMachines","builders","deleteCandyGuard"],"mappings":";;4EAaA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,6BAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,2BAA2B,GACtCC,YAAY,CAA8BF,GAA9B,C;AAEd;AACA;AACA;AACA;;AAqDA;AACA;AACA;AACA;;AACO,MAAMG,kCAAiF,GAC5F;EACE,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAIqC;IACnC,OAAOC,yBAAyB,CAC9BF,QAD8B,EAE9BD,SAAS,CAACI,KAFoB,EAG9BF,KAH8B,CAAzBC,CAILE,cAJKF,CAIUF,QAJVE,EAIoBD,KAAK,CAACI,cAJ1BH,CAAP;EAKF;;AAXF,CADK,C,CAeP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaA,MAAAA,yBAAyB,GAAG,UACvCF,QADuC,EAEvCM,MAFuC,EAIhB;EAAA,IADvBC,OACuB,uEADc,EACd;EACvB,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGT,QAAQ,CAACU,GAATV,GAAeW,kBAAfX;EAApB,IAA4DO,OAAlE;EACA,MAAM;IACJK,YADI;IAEJC,UAFI;IAGJC,SAAS,GAAGd,QAAQ,CAACe,QAATf,EAHR;IAIJgB,mBAAmB,GAAGF;EAJlB,IAKFR,MALJ;EAOA,MAAMW,mBAAmB,GAAGjB,QAAQ,CAACQ,QAATR,GAAoBkB,eAApBlB,CAAoCQ,QAApCR,CAA5B;EAEA,MAAMmB,OAAO,GAAGC,kBAAkB,CAACC,IAAnBD,GACbE,WADaF,CACDX,KADCW,EAEbG,GAFaH,CAET;IACHI,WAAW,EAAEC,yBAAyB,CACpC;MACEb,YADF;MAEEE,SAAS,EAAEA,SAAS,CAACY;IAFvB,CADoC,EAKpCT,mBAAmB,CAACU,OALgB,CADnC;IAQHC,OAAO,EAAE,CAACd,SAAD,CARN;IASHe,GAAG,EAAEvB,MAAM,CAACwB,gCAAPxB,IAA2C;EAT7C,CAFSc,CAAhB;;EAcA,IAAIP,UAAJ,EAAgB;IACdM,OAAO,CAACI,GAARJ,CACEnB,QAAQ,CACL+B,aADH/B,GAEGgC,QAFHhC,GAGGiC,gBAHHjC,CAII;MAAEa,UAAF;MAAcC,SAAS,EAAEE;IAAzB,CAJJhB,EAKI;MAAES,KAAF;MAASD;IAAT,CALJR,CADFmB;EASF;;EAEA,OAAOA,OAAP;AACF,CA1CajB","sourcesContent":["import { createWithdrawInstruction } from '@metaplex-foundation/mpl-candy-machine-core';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  PublicKey,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'DeleteCandyMachineOperation' as const;\n\n/**\n * Deletes a Candy Machine account by withdrawing its rent-exempt balance.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .delete({\n *     candyMachine: candyMachine.address,\n *     candyGuard: candyMachine.candyGuard.address,\n *     authority,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const deleteCandyMachineOperation =\n  useOperation<DeleteCandyMachineOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type DeleteCandyMachineOperation = Operation<\n  typeof Key,\n  DeleteCandyMachineInput,\n  DeleteCandyMachineOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type DeleteCandyMachineInput = {\n  /** The address of the Candy Machine account to delete. */\n  candyMachine: PublicKey;\n\n  /**\n   * The address of the Candy Guard associated with the Candy Machine account.\n   * When provided the Candy Guard will be deleted as well.\n   *\n   * @defaultValue Defaults to not being deleted.\n   */\n  candyGuard?: PublicKey;\n\n  /**\n   * The authority of the Candy Machine account.\n   *\n   * This is the account that will received the rent-exemption\n   * lamports from the Candy Machine account.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /**\n   * The authority of the Candy Guard account to delete.\n   *\n   * This is only required if `candyGuard` is provided and the Candy\n   * Guard authority is not the same as the Candy Machine authority.\n   *\n   * @defaultValue `authority`\n   */\n  candyGuardAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type DeleteCandyMachineOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const deleteCandyMachineOperationHandler: OperationHandler<DeleteCandyMachineOperation> =\n  {\n    async handle(\n      operation: DeleteCandyMachineOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<DeleteCandyMachineOutput> {\n      return deleteCandyMachineBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type DeleteCandyMachineBuilderParams = Omit<\n  DeleteCandyMachineInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that deletes the Candy Machine account. */\n  deleteCandyMachineInstructionKey?: string;\n};\n\n/**\n * Deletes a Candy Machine account by withdrawing its rent-exempt balance.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachines()\n *   .builders()\n *   .delete({\n *     candyMachine: candyMachine.address,\n *     candyGuard: candyMachine.candyGuard.address,\n *     authority,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const deleteCandyMachineBuilder = (\n  metaplex: Metaplex,\n  params: DeleteCandyMachineBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    candyMachine,\n    candyGuard,\n    authority = metaplex.identity(),\n    candyGuardAuthority = authority,\n  } = params;\n\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n\n  const builder = TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createWithdrawInstruction(\n        {\n          candyMachine,\n          authority: authority.publicKey,\n        },\n        candyMachineProgram.address\n      ),\n      signers: [authority],\n      key: params.deleteCandyMachineInstructionKey ?? 'deleteCandyMachine',\n    });\n\n  if (candyGuard) {\n    builder.add(\n      metaplex\n        .candyMachines()\n        .builders()\n        .deleteCandyGuard(\n          { candyGuard, authority: candyGuardAuthority },\n          { payer, programs }\n        )\n    );\n  }\n\n  return builder;\n};\n"]},"metadata":{},"sourceType":"module"}