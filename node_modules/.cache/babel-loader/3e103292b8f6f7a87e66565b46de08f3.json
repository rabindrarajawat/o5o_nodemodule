{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createReallocateInstruction = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst internal_js_1 = require(\"./internal.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/**\n * Construct a Reallocate instruction\n *\n * @param account        Address of the token account\n * @param payer          Address paying for the reallocation\n * @param extensionTypes Extensions to reallocate for\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\n\nfunction createReallocateInstruction(account, payer, extensionTypes, owner) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n\n  const baseKeys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: web3_js_1.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  const keys = (0, internal_js_1.addSigners)(baseKeys, owner, multiSigners);\n  const reallocateInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.seq)((0, buffer_layout_1.u16)(), extensionTypes.length, 'extensionTypes')]);\n  const data = Buffer.alloc(reallocateInstructionData.span);\n  reallocateInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.Reallocate,\n    extensionTypes\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createReallocateInstruction = createReallocateInstruction;","map":{"version":3,"sources":["../../../src/instructions/reallocate.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAEA,MAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAQA;;;;;;;;;;;AAWG;;;AACH,SAAgB,2BAAhB,CACI,OADJ,EAEI,KAFJ,EAGI,cAHJ,EAII,KAJJ,EAMqC;EAAA,IADjC,YACiC,uEADR,EACQ;EAAA,IAAjC,SAAiC,uEAArB,cAAA,CAAA,qBAAqB;;EAEjC,IAAI,CAAC,CAAA,GAAA,cAAA,CAAA,yBAAA,EAA0B,SAA1B,CAAL,EAA2C;IACvC,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN;EACH;;EACD,MAAM,QAAQ,GAAG,CACb;IAAE,MAAM,EAAE,OAAV;IAAmB,QAAQ,EAAE,KAA7B;IAAoC,UAAU,EAAE;EAAhD,CADa,EAEb;IAAE,MAAM,EAAE,KAAV;IAAiB,QAAQ,EAAE,IAA3B;IAAiC,UAAU,EAAE;EAA7C,CAFa,EAGb;IAAE,MAAM,EAAE,SAAA,CAAA,aAAA,CAAc,SAAxB;IAAmC,QAAQ,EAAE,KAA7C;IAAoD,UAAU,EAAE;EAAhE,CAHa,CAAjB;EAKA,MAAM,IAAI,GAAG,CAAA,GAAA,aAAA,CAAA,UAAA,EAAW,QAAX,EAAqB,KAArB,EAA4B,YAA5B,CAAb;EAEA,MAAM,yBAAyB,GAAG,CAAA,GAAA,eAAA,CAAA,MAAA,EAAkC,CAChE,CAAA,GAAA,eAAA,CAAA,EAAA,EAAG,aAAH,CADgE,EAEhE,CAAA,GAAA,eAAA,CAAA,GAAA,EAAI,CAAA,GAAA,eAAA,CAAA,GAAA,GAAJ,EAAW,cAAc,CAAC,MAA1B,EAAkC,gBAAlC,CAFgE,CAAlC,CAAlC;EAIA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,yBAAyB,CAAC,IAAvC,CAAb;EACA,yBAAyB,CAAC,MAA1B,CAAiC;IAAE,WAAW,EAAE,UAAA,CAAA,gBAAA,CAAiB,UAAhC;IAA4C;EAA5C,CAAjC,EAA+F,IAA/F;EAEA,OAAO,IAAI,SAAA,CAAA,sBAAJ,CAA2B;IAAE,IAAF;IAAQ,SAAR;IAAmB;EAAnB,CAA3B,CAAP;AACH;;AA1BD,OAAA,CAAA,2BAAA,GAAA,2BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createReallocateInstruction = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst internal_js_1 = require(\"./internal.js\");\nconst types_js_1 = require(\"./types.js\");\n/**\n * Construct a Reallocate instruction\n *\n * @param account        Address of the token account\n * @param payer          Address paying for the reallocation\n * @param extensionTypes Extensions to reallocate for\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createReallocateInstruction(account, payer, extensionTypes, owner, multiSigners = [], programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n    if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n        throw new errors_js_1.TokenUnsupportedInstructionError();\n    }\n    const baseKeys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },\n    ];\n    const keys = (0, internal_js_1.addSigners)(baseKeys, owner, multiSigners);\n    const reallocateInstructionData = (0, buffer_layout_1.struct)([\n        (0, buffer_layout_1.u8)('instruction'),\n        (0, buffer_layout_1.seq)((0, buffer_layout_1.u16)(), extensionTypes.length, 'extensionTypes'),\n    ]);\n    const data = Buffer.alloc(reallocateInstructionData.span);\n    reallocateInstructionData.encode({ instruction: types_js_1.TokenInstruction.Reallocate, extensionTypes }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createReallocateInstruction = createReallocateInstruction;\n//# sourceMappingURL=reallocate.js.map"]},"metadata":{},"sourceType":"script"}