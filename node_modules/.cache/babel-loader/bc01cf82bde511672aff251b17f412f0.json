{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unpackAccount = exports.getMinimumBalanceForRentExemptAccountWithExtensions = exports.getMinimumBalanceForRentExemptAccount = exports.getMultipleAccounts = exports.getAccount = exports.ACCOUNT_SIZE = exports.AccountLayout = exports.AccountState = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst accountType_js_1 = require(\"../extensions/accountType.js\");\n\nconst extensionType_js_1 = require(\"../extensions/extensionType.js\");\n\nconst multisig_js_1 = require(\"./multisig.js\");\n/** Token account state as stored by the program */\n\n\nvar AccountState;\n\n(function (AccountState) {\n  AccountState[AccountState[\"Uninitialized\"] = 0] = \"Uninitialized\";\n  AccountState[AccountState[\"Initialized\"] = 1] = \"Initialized\";\n  AccountState[AccountState[\"Frozen\"] = 2] = \"Frozen\";\n})(AccountState = exports.AccountState || (exports.AccountState = {}));\n/** Buffer layout for de/serializing a token account */\n\n\nexports.AccountLayout = (0, buffer_layout_1.struct)([(0, buffer_layout_utils_1.publicKey)('mint'), (0, buffer_layout_utils_1.publicKey)('owner'), (0, buffer_layout_utils_1.u64)('amount'), (0, buffer_layout_1.u32)('delegateOption'), (0, buffer_layout_utils_1.publicKey)('delegate'), (0, buffer_layout_1.u8)('state'), (0, buffer_layout_1.u32)('isNativeOption'), (0, buffer_layout_utils_1.u64)('isNative'), (0, buffer_layout_utils_1.u64)('delegatedAmount'), (0, buffer_layout_1.u32)('closeAuthorityOption'), (0, buffer_layout_utils_1.publicKey)('closeAuthority')]);\n/** Byte length of a token account */\n\nexports.ACCOUNT_SIZE = exports.AccountLayout.span;\n/**\n * Retrieve information about a token account\n *\n * @param connection Connection to use\n * @param address    Token account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\n\nfunction getAccount(connection, address, commitment) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_js_1.TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const info = yield connection.getAccountInfo(address, commitment);\n    return unpackAccount(address, info, programId);\n  });\n}\n\nexports.getAccount = getAccount;\n/**\n * Retrieve information about multiple token accounts in a single RPC call\n *\n * @param connection Connection to use\n * @param addresses  Token accounts\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\n\nfunction getMultipleAccounts(connection, addresses, commitment) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_js_1.TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const infos = yield connection.getMultipleAccountsInfo(addresses, commitment);\n    return addresses.map((address, i) => unpackAccount(address, infos[i], programId));\n  });\n}\n\nexports.getMultipleAccounts = getMultipleAccounts;\n/** Get the minimum lamport balance for a base token account to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\n\nfunction getMinimumBalanceForRentExemptAccount(connection, commitment) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return yield getMinimumBalanceForRentExemptAccountWithExtensions(connection, [], commitment);\n  });\n}\n\nexports.getMinimumBalanceForRentExemptAccount = getMinimumBalanceForRentExemptAccount;\n/** Get the minimum lamport balance for a rent-exempt token account with extensions\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\n\nfunction getMinimumBalanceForRentExemptAccountWithExtensions(connection, extensions, commitment) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const accountLen = (0, extensionType_js_1.getAccountLen)(extensions);\n    return yield connection.getMinimumBalanceForRentExemption(accountLen, commitment);\n  });\n}\n\nexports.getMinimumBalanceForRentExemptAccountWithExtensions = getMinimumBalanceForRentExemptAccountWithExtensions;\n/**\n * Unpack a token account\n *\n * @param address   Token account\n * @param info      Token account data\n * @param programId SPL Token program account\n *\n * @return Unpacked token account\n */\n\nfunction unpackAccount(address, info) {\n  let programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!info) throw new errors_js_1.TokenAccountNotFoundError();\n  if (!info.owner.equals(programId)) throw new errors_js_1.TokenInvalidAccountOwnerError();\n  if (info.data.length < exports.ACCOUNT_SIZE) throw new errors_js_1.TokenInvalidAccountSizeError();\n  const rawAccount = exports.AccountLayout.decode(info.data.slice(0, exports.ACCOUNT_SIZE));\n  let tlvData = Buffer.alloc(0);\n\n  if (info.data.length > exports.ACCOUNT_SIZE) {\n    if (info.data.length === multisig_js_1.MULTISIG_SIZE) throw new errors_js_1.TokenInvalidAccountSizeError();\n    if (info.data[exports.ACCOUNT_SIZE] != accountType_js_1.AccountType.Account) throw new errors_js_1.TokenInvalidAccountError();\n    tlvData = info.data.slice(exports.ACCOUNT_SIZE + accountType_js_1.ACCOUNT_TYPE_SIZE);\n  }\n\n  return {\n    address,\n    mint: rawAccount.mint,\n    owner: rawAccount.owner,\n    amount: rawAccount.amount,\n    delegate: rawAccount.delegateOption ? rawAccount.delegate : null,\n    delegatedAmount: rawAccount.delegatedAmount,\n    isInitialized: rawAccount.state !== AccountState.Uninitialized,\n    isFrozen: rawAccount.state === AccountState.Frozen,\n    isNative: !!rawAccount.isNativeOption,\n    rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,\n    closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null,\n    tlvData\n  };\n}\n\nexports.unpackAccount = unpackAccount;","map":{"version":3,"sources":["../../../src/state/account.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unpackAccount = exports.getMinimumBalanceForRentExemptAccountWithExtensions = exports.getMinimumBalanceForRentExemptAccount = exports.getMultipleAccounts = exports.getAccount = exports.ACCOUNT_SIZE = exports.AccountLayout = exports.AccountState = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst accountType_js_1 = require(\"../extensions/accountType.js\");\nconst extensionType_js_1 = require(\"../extensions/extensionType.js\");\nconst multisig_js_1 = require(\"./multisig.js\");\n/** Token account state as stored by the program */\nvar AccountState;\n(function (AccountState) {\n    AccountState[AccountState[\"Uninitialized\"] = 0] = \"Uninitialized\";\n    AccountState[AccountState[\"Initialized\"] = 1] = \"Initialized\";\n    AccountState[AccountState[\"Frozen\"] = 2] = \"Frozen\";\n})(AccountState = exports.AccountState || (exports.AccountState = {}));\n/** Buffer layout for de/serializing a token account */\nexports.AccountLayout = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_utils_1.publicKey)('mint'),\n    (0, buffer_layout_utils_1.publicKey)('owner'),\n    (0, buffer_layout_utils_1.u64)('amount'),\n    (0, buffer_layout_1.u32)('delegateOption'),\n    (0, buffer_layout_utils_1.publicKey)('delegate'),\n    (0, buffer_layout_1.u8)('state'),\n    (0, buffer_layout_1.u32)('isNativeOption'),\n    (0, buffer_layout_utils_1.u64)('isNative'),\n    (0, buffer_layout_utils_1.u64)('delegatedAmount'),\n    (0, buffer_layout_1.u32)('closeAuthorityOption'),\n    (0, buffer_layout_utils_1.publicKey)('closeAuthority'),\n]);\n/** Byte length of a token account */\nexports.ACCOUNT_SIZE = exports.AccountLayout.span;\n/**\n * Retrieve information about a token account\n *\n * @param connection Connection to use\n * @param address    Token account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nfunction getAccount(connection, address, commitment, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const info = yield connection.getAccountInfo(address, commitment);\n        return unpackAccount(address, info, programId);\n    });\n}\nexports.getAccount = getAccount;\n/**\n * Retrieve information about multiple token accounts in a single RPC call\n *\n * @param connection Connection to use\n * @param addresses  Token accounts\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nfunction getMultipleAccounts(connection, addresses, commitment, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const infos = yield connection.getMultipleAccountsInfo(addresses, commitment);\n        return addresses.map((address, i) => unpackAccount(address, infos[i], programId));\n    });\n}\nexports.getMultipleAccounts = getMultipleAccounts;\n/** Get the minimum lamport balance for a base token account to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nfunction getMinimumBalanceForRentExemptAccount(connection, commitment) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield getMinimumBalanceForRentExemptAccountWithExtensions(connection, [], commitment);\n    });\n}\nexports.getMinimumBalanceForRentExemptAccount = getMinimumBalanceForRentExemptAccount;\n/** Get the minimum lamport balance for a rent-exempt token account with extensions\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nfunction getMinimumBalanceForRentExemptAccountWithExtensions(connection, extensions, commitment) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const accountLen = (0, extensionType_js_1.getAccountLen)(extensions);\n        return yield connection.getMinimumBalanceForRentExemption(accountLen, commitment);\n    });\n}\nexports.getMinimumBalanceForRentExemptAccountWithExtensions = getMinimumBalanceForRentExemptAccountWithExtensions;\n/**\n * Unpack a token account\n *\n * @param address   Token account\n * @param info      Token account data\n * @param programId SPL Token program account\n *\n * @return Unpacked token account\n */\nfunction unpackAccount(address, info, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new errors_js_1.TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new errors_js_1.TokenInvalidAccountOwnerError();\n    if (info.data.length < exports.ACCOUNT_SIZE)\n        throw new errors_js_1.TokenInvalidAccountSizeError();\n    const rawAccount = exports.AccountLayout.decode(info.data.slice(0, exports.ACCOUNT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > exports.ACCOUNT_SIZE) {\n        if (info.data.length === multisig_js_1.MULTISIG_SIZE)\n            throw new errors_js_1.TokenInvalidAccountSizeError();\n        if (info.data[exports.ACCOUNT_SIZE] != accountType_js_1.AccountType.Account)\n            throw new errors_js_1.TokenInvalidAccountError();\n        tlvData = info.data.slice(exports.ACCOUNT_SIZE + accountType_js_1.ACCOUNT_TYPE_SIZE);\n    }\n    return {\n        address,\n        mint: rawAccount.mint,\n        owner: rawAccount.owner,\n        amount: rawAccount.amount,\n        delegate: rawAccount.delegateOption ? rawAccount.delegate : null,\n        delegatedAmount: rawAccount.delegatedAmount,\n        isInitialized: rawAccount.state !== AccountState.Uninitialized,\n        isFrozen: rawAccount.state === AccountState.Frozen,\n        isNative: !!rawAccount.isNativeOption,\n        rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,\n        closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null,\n        tlvData,\n    };\n}\nexports.unpackAccount = unpackAccount;\n//# sourceMappingURL=account.js.map"]},"metadata":{},"sourceType":"script"}