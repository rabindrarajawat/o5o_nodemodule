{"ast":null,"code":"import { createInitializeInstruction } from '@metaplex-foundation/mpl-candy-guard';\nimport { Keypair } from '@solana/web3.js';\nimport { makeConfirmOptionsFinalizedOnMainnet } from '../../../types/Operation.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateCandyGuardOperation';\n/**\n * Creates a new Candy Guard account with the provided settings.\n *\n * ```ts\n * const { candyGuard } = await metaplex\n *   .candyMachines()\n *   .createCandyGuard({\n *     guards: {\n *       startDate: { date: toDateTime('2022-09-05T20:00:00.000Z') },\n *       solPayment: { amount: sol(1.5), },\n *       botTax: { lamports: sol(0.01), lastInstruction: true },\n *     },\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst createCandyGuardOperation = _createCandyGuardOperation; // eslint-disable-next-line @typescript-eslint/naming-convention\n\nfunction _createCandyGuardOperation(input) {\n  return {\n    key: Key,\n    input\n  };\n}\n\n_createCandyGuardOperation.key = Key;\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst createCandyGuardOperationHandler = {\n  async handle(operation, metaplex, scope) {\n    const builder = createCandyGuardBuilder(metaplex, operation.input, scope);\n    const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);\n    const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n    scope.throwIfCanceled();\n    const candyGuard = await metaplex.candyMachines().findCandyGuardByBaseAddress({\n      address: output.base.publicKey\n    }, scope);\n    return { ...output,\n      candyGuard\n    };\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Creates a new Candy Guard account with the provided settings.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachines()\n *   .builders()\n *   .createCandyGuard({\n *     guards: {\n *       startDate: { date: toDateTime('2022-09-05T20:00:00.000Z') },\n *       solPayment: { amount: sol(1.5), },\n *       botTax: { lamports: sol(0.01), lastInstruction: true },\n *     },\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst createCandyGuardBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const base = params.base ?? Keypair.generate();\n  const authority = params.authority ?? metaplex.identity().publicKey;\n  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);\n  const candyGuard = metaplex.candyMachines().pdas().candyGuard({\n    base: base.publicKey,\n    programs\n  });\n  const serializedSettings = metaplex.candyMachines().guards().serializeSettings(params.guards, params.groups ?? [], programs);\n  return TransactionBuilder.make().setFeePayer(payer).setContext({\n    base,\n    candyGuardAddress: candyGuard\n  }) // Create and initialize the candy guard account.\n  .add({\n    instruction: createInitializeInstruction({\n      candyGuard,\n      base: base.publicKey,\n      authority,\n      payer: payer.publicKey\n    }, {\n      data: serializedSettings\n    }, candyGuardProgram.address),\n    signers: [base, payer],\n    key: params.createCandyGuardInstructionKey ?? 'createCandyGuard'\n  });\n};\n\nexport { createCandyGuardBuilder, createCandyGuardOperation, createCandyGuardOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineModule/operations/createCandyGuard.ts"],"names":["Key","createCandyGuardOperation","_createCandyGuardOperation","input","key","createCandyGuardOperationHandler","handle","operation","metaplex","scope","builder","createCandyGuardBuilder","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","throwIfCanceled","candyGuard","candyMachines","findCandyGuardByBaseAddress","address","base","publicKey","params","options","programs","payer","rpc","getDefaultFeePayer","Keypair","generate","authority","identity","candyGuardProgram","getCandyGuard","pdas","serializedSettings","guards","serializeSettings","groups","TransactionBuilder","make","setFeePayer","setContext","candyGuardAddress","add","instruction","createInitializeInstruction","data","signers","createCandyGuardInstructionKey"],"mappings":"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","sourcesContent":["import { createInitializeInstruction } from '@metaplex-foundation/mpl-candy-guard';\nimport { Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { CandyGuardsSettings, DefaultCandyGuardSettings } from '../guards';\nimport { CandyGuard } from '../models/CandyGuard';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  makeConfirmOptionsFinalizedOnMainnet,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Pda,\n  Signer,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateCandyGuardOperation' as const;\n\n/**\n * Creates a new Candy Guard account with the provided settings.\n *\n * ```ts\n * const { candyGuard } = await metaplex\n *   .candyMachines()\n *   .createCandyGuard({\n *     guards: {\n *       startDate: { date: toDateTime('2022-09-05T20:00:00.000Z') },\n *       solPayment: { amount: sol(1.5), },\n *       botTax: { lamports: sol(0.01), lastInstruction: true },\n *     },\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createCandyGuardOperation = _createCandyGuardOperation;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _createCandyGuardOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(input: CreateCandyGuardInput<T>): CreateCandyGuardOperation<T> {\n  return { key: Key, input };\n}\n_createCandyGuardOperation.key = Key;\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateCandyGuardOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = Operation<typeof Key, CreateCandyGuardInput<T>, CreateCandyGuardOutput<T>>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateCandyGuardInput<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = {\n  /**\n   * The \"base\" address of the Candy Guard to create as a Signer.\n   *\n   * This address will be deterministically derived to obtain the real\n   * address of the Candy Guard account. It expects a brand new Keypair\n   * such that its derived address has no associated account.\n   *\n   * @defaultValue `Keypair.generate()`\n   */\n  base?: Signer;\n\n  /**\n   * The authority that will be allowed to update the Candy Guard.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  authority?: PublicKey;\n\n  /**\n   * The settings of all guards we wish to activate.\n   *\n   * Any guard not provided or set to `null` will be disabled.\n   */\n  guards: Partial<T>;\n\n  /**\n   * This parameter allows us to create multiple minting groups that have their\n   * own set of requirements â€” i.e. guards.\n   *\n   * When groups are provided, the `guards` parameter becomes a set of default\n   * guards that will be applied to all groups. If a specific group enables\n   * a guard that is also present in the default guards, the group's guard\n   * will override the default guard.\n   *\n   * For each group, any guard not provided or set to `null` will be disabled.\n   *\n   * @defaultValue `[]`\n   */\n  groups?: { label: string; guards: Partial<T> }[];\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateCandyGuardOutput<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n\n  /** The created Candy Guard. */\n  candyGuard: CandyGuard<T>;\n\n  /** The base address of the Candy Guard's account as a Signer. */\n  base: Signer;\n\n  /** The address of the created Candy Guard. */\n  candyGuardAddress: Pda;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createCandyGuardOperationHandler: OperationHandler<CreateCandyGuardOperation> =\n  {\n    async handle<T extends CandyGuardsSettings = DefaultCandyGuardSettings>(\n      operation: CreateCandyGuardOperation<T>,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<CreateCandyGuardOutput<T>> {\n      const builder = createCandyGuardBuilder<T>(\n        metaplex,\n        operation.input,\n        scope\n      );\n\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      const candyGuard = await metaplex\n        .candyMachines()\n        .findCandyGuardByBaseAddress<T>(\n          { address: output.base.publicKey },\n          scope\n        );\n\n      return { ...output, candyGuard };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateCandyGuardBuilderParams<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = Omit<CreateCandyGuardInput<T>, 'confirmOptions'> & {\n  /** A key to distinguish the instruction that creates and initializes the Candy Guard account. */\n  createCandyGuardInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateCandyGuardBuilderContext = Omit<\n  CreateCandyGuardOutput,\n  'response' | 'candyGuard'\n>;\n\n/**\n * Creates a new Candy Guard account with the provided settings.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachines()\n *   .builders()\n *   .createCandyGuard({\n *     guards: {\n *       startDate: { date: toDateTime('2022-09-05T20:00:00.000Z') },\n *       solPayment: { amount: sol(1.5), },\n *       botTax: { lamports: sol(0.01), lastInstruction: true },\n *     },\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createCandyGuardBuilder = <\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  metaplex: Metaplex,\n  params: CreateCandyGuardBuilderParams<T>,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<CreateCandyGuardBuilderContext> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const base = params.base ?? Keypair.generate();\n  const authority = params.authority ?? metaplex.identity().publicKey;\n  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);\n  const candyGuard = metaplex.candyMachines().pdas().candyGuard({\n    base: base.publicKey,\n    programs,\n  });\n\n  const serializedSettings = metaplex\n    .candyMachines()\n    .guards()\n    .serializeSettings<T>(params.guards, params.groups ?? [], programs);\n\n  return (\n    TransactionBuilder.make<CreateCandyGuardBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({ base, candyGuardAddress: candyGuard })\n\n      // Create and initialize the candy guard account.\n      .add({\n        instruction: createInitializeInstruction(\n          {\n            candyGuard,\n            base: base.publicKey,\n            authority,\n            payer: payer.publicKey,\n          },\n          { data: serializedSettings },\n          candyGuardProgram.address\n        ),\n        signers: [base, payer],\n        key: params.createCandyGuardInstructionKey ?? 'createCandyGuard',\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}