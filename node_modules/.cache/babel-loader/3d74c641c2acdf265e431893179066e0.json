{"ast":null,"code":"import { createCreateAuctionHouseInstruction, createDelegateAuctioneerInstruction } from '@metaplex-foundation/mpl-auction-house';\nimport { AUCTIONEER_ALL_SCOPES } from '../constants.mjs';\nimport { WRAPPED_SOL_MINT } from '../../tokenModule/constants.mjs';\nimport { useOperation, makeConfirmOptionsFinalizedOnMainnet } from '../../../types/Operation.mjs';\nimport { isSigner } from '../../../types/Signer.mjs';\nimport { ExpectedSignerError } from '../../../errors/SdkError.mjs';\nimport { toPublicKey } from '../../../types/PublicKey.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateAuctionHouseOperation';\n/**\n * Creates an Auction House.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .create({ sellerFeeBasisPoints: 500 }); // 5% fee\n * ```\n *\n * Provide `auctioneerAuthority` in case you want to enable Auctioneer.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .create({ sellerFeeBasisPoints: 500, auctioneerAuthority: mx.identity().publicKey };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst createAuctionHouseOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst createAuctionHouseOperationHandler = {\n  async handle(operation, metaplex, scope) {\n    const builder = createAuctionHouseBuilder(metaplex, operation.input, scope);\n    const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);\n    const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n    scope.throwIfCanceled();\n    const auctionHouse = await metaplex.auctionHouse().findByAddress({\n      address: output.auctionHouseAddress,\n      auctioneerAuthority: operation.input.auctioneerAuthority\n    }, scope);\n    return { ...output,\n      auctionHouse\n    };\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Creates an Auction House.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .createAuctionHouse({ sellerFeeBasisPoints: 500 }) // 5% fee\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst createAuctionHouseBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // Data.\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const canChangeSalePrice = params.canChangeSalePrice ?? false;\n  const requiresSignOff = params.requiresSignOff ?? canChangeSalePrice; // Accounts.\n\n  const authority = params.authority ?? metaplex.identity();\n  const treasuryMint = params.treasuryMint ?? WRAPPED_SOL_MINT;\n  const treasuryWithdrawalDestinationOwner = params.treasuryWithdrawalDestinationOwner ?? metaplex.identity().publicKey;\n  const feeWithdrawalDestination = params.feeWithdrawalDestination ?? metaplex.identity().publicKey; // Auctioneer delegate instruction needs to be signed by authority\n\n  if (params.auctioneerAuthority && !isSigner(authority)) {\n    throw new ExpectedSignerError('authority', 'PublicKey', 'You are trying to delegate to an Auctioneer authority which ' + 'requires the Auction House authority to sign a transaction. ' + 'But you provided the Auction House authority as a Public Key.');\n  } // PDAs.\n\n\n  const auctionHouse = metaplex.auctionHouse().pdas().auctionHouse({\n    creator: toPublicKey(authority),\n    treasuryMint,\n    programs\n  });\n  const auctionHouseFeeAccount = metaplex.auctionHouse().pdas().fee({\n    auctionHouse,\n    programs\n  });\n  const auctionHouseTreasury = metaplex.auctionHouse().pdas().treasury({\n    auctionHouse,\n    programs\n  });\n  const treasuryWithdrawalDestination = treasuryMint.equals(WRAPPED_SOL_MINT) ? treasuryWithdrawalDestinationOwner : metaplex.tokens().pdas().associatedTokenAccount({\n    mint: treasuryMint,\n    owner: treasuryWithdrawalDestinationOwner,\n    programs\n  });\n  return TransactionBuilder.make().setFeePayer(payer).setContext({\n    auctionHouseAddress: auctionHouse,\n    auctionHouseFeeAccountAddress: auctionHouseFeeAccount,\n    auctionHouseTreasuryAddress: auctionHouseTreasury,\n    treasuryWithdrawalDestinationAddress: treasuryWithdrawalDestination\n  }) // Create and initialize the Auction House account.\n  .add({\n    instruction: createCreateAuctionHouseInstruction({\n      treasuryMint,\n      payer: payer.publicKey,\n      authority: toPublicKey(authority),\n      feeWithdrawalDestination,\n      treasuryWithdrawalDestination,\n      treasuryWithdrawalDestinationOwner,\n      auctionHouse,\n      auctionHouseFeeAccount,\n      auctionHouseTreasury\n    }, {\n      bump: auctionHouse.bump,\n      feePayerBump: auctionHouseFeeAccount.bump,\n      treasuryBump: auctionHouseTreasury.bump,\n      sellerFeeBasisPoints: params.sellerFeeBasisPoints,\n      requiresSignOff,\n      canChangeSalePrice\n    }),\n    signers: [payer],\n    key: params.instructionKey ?? 'createAuctionHouse'\n  }) // Delegate to the Auctioneer authority when provided.\n  .when(Boolean(params.auctioneerAuthority), builder => {\n    const auctioneerAuthority = params.auctioneerAuthority;\n    return builder.add({\n      instruction: createDelegateAuctioneerInstruction({\n        auctionHouse,\n        authority: toPublicKey(authority),\n        auctioneerAuthority,\n        ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n          auctionHouse,\n          auctioneerAuthority,\n          programs\n        })\n      }, {\n        scopes: params.auctioneerScopes ?? AUCTIONEER_ALL_SCOPES\n      }),\n      signers: [authority],\n      key: params.delegateAuctioneerInstructionKey ?? 'delegateAuctioneer'\n    });\n  });\n};\n\nexport { createAuctionHouseBuilder, createAuctionHouseOperation, createAuctionHouseOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/operations/createAuctionHouse.ts"],"names":["Key","createAuctionHouseOperation","useOperation","createAuctionHouseOperationHandler","handle","operation","metaplex","scope","builder","createAuctionHouseBuilder","input","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","throwIfCanceled","auctionHouse","findByAddress","address","auctionHouseAddress","auctioneerAuthority","params","options","programs","payer","rpc","getDefaultFeePayer","canChangeSalePrice","requiresSignOff","authority","identity","treasuryMint","WRAPPED_SOL_MINT","treasuryWithdrawalDestinationOwner","publicKey","feeWithdrawalDestination","isSigner","ExpectedSignerError","pdas","creator","toPublicKey","auctionHouseFeeAccount","fee","auctionHouseTreasury","treasury","treasuryWithdrawalDestination","equals","tokens","associatedTokenAccount","mint","owner","TransactionBuilder","make","setFeePayer","setContext","auctionHouseFeeAccountAddress","auctionHouseTreasuryAddress","treasuryWithdrawalDestinationAddress","add","instruction","createCreateAuctionHouseInstruction","bump","feePayerBump","treasuryBump","sellerFeeBasisPoints","signers","key","instructionKey","when","Boolean","createDelegateAuctioneerInstruction","ahAuctioneerPda","auctioneer","scopes","auctioneerScopes","AUCTIONEER_ALL_SCOPES","delegateAuctioneerInstructionKey"],"mappings":";;;;;;;4EAyBA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,6BAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,2BAA2B,GACtCC,YAAY,CAA8BF,GAA9B,C;AAEd;AACA;AACA;AACA;;AAwGA;AACA;AACA;AACA;;AACO,MAAMG,kCAAiF,GAC5F;EACE,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAIqC;IACnC,MAAMC,OAAO,GAAGC,yBAAyB,CACvCH,QADuC,EAEvCD,SAAS,CAACK,KAF6B,EAGvCH,KAHuC,CAAzC;IAMA,MAAMI,cAAc,GAAGC,oCAAoC,CACzDN,QADyD,EAEzDC,KAAK,CAACI,cAFmD,CAA3D;IAIA,MAAME,MAAM,GAAG,MAAML,OAAO,CAACM,cAARN,CAAuBF,QAAvBE,EAAiCG,cAAjCH,CAArB;IACAD,KAAK,CAACQ,eAANR;IAEA,MAAMS,YAAY,GAAG,MAAMV,QAAQ,CAACU,YAATV,GAAwBW,aAAxBX,CACzB;MACEY,OAAO,EAAEL,MAAM,CAACM,mBADlB;MAEEC,mBAAmB,EAAEf,SAAS,CAACK,KAAVL,CAAgBe;IAFvC,CADyBd,EAKzBC,KALyBD,CAA3B;IAQA,OAAO,EAAE,GAAGO,MAAL;MAAaG;IAAb,CAAP;EACF;;AA5BF,CADK,C,CAgCP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaP,MAAAA,yBAAyB,GAAG,UACvCH,QADuC,EAEvCe,MAFuC,EAIkB;EAAA,IADzDC,OACyD,uEADpB,EACoB;EACzD;EACA,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGlB,QAAQ,CAACmB,GAATnB,GAAeoB,kBAAfpB;EAApB,IAA4DgB,OAAlE;EACA,MAAMK,kBAAkB,GAAGN,MAAM,CAACM,kBAAPN,IAA6B,KAAxD;EACA,MAAMO,eAAe,GAAGP,MAAM,CAACO,eAAPP,IAA0BM,kBAAlD,CAJyD,CAMzD;;EACA,MAAME,SAAS,GAAGR,MAAM,CAACQ,SAAPR,IAAoBf,QAAQ,CAACwB,QAATxB,EAAtC;EACA,MAAMyB,YAAY,GAAGV,MAAM,CAACU,YAAPV,IAAuBW,gBAA5C;EACA,MAAMC,kCAAkC,GACtCZ,MAAM,CAACY,kCAAPZ,IAA6Cf,QAAQ,CAACwB,QAATxB,GAAoB4B,SADnE;EAEA,MAAMC,wBAAwB,GAC5Bd,MAAM,CAACc,wBAAPd,IAAmCf,QAAQ,CAACwB,QAATxB,GAAoB4B,SADzD,CAXyD,CAczD;;EACA,IAAIb,MAAM,CAACD,mBAAPC,IAA8B,CAACe,QAAQ,CAACP,SAAD,CAA3C,EAAwD;IACtD,MAAM,IAAIQ,mBAAJ,CACJ,WADI,EAEJ,WAFI,EAGJ,iEACE,8DADF,GAEE,+DALE,CAAN;EAOF,CAvByD,CAyBzD;;;EACA,MAAMrB,YAAY,GAAGV,QAAQ,CAC1BU,YADkBV,GAElBgC,IAFkBhC,GAGlBU,YAHkBV,CAGL;IACZiC,OAAO,EAAEC,WAAW,CAACX,SAAD,CADR;IAEZE,YAFY;IAGZR;EAHY,CAHKjB,CAArB;EAQA,MAAMmC,sBAAsB,GAAGnC,QAAQ,CAACU,YAATV,GAAwBgC,IAAxBhC,GAA+BoC,GAA/BpC,CAAmC;IAChEU,YADgE;IAEhEO;EAFgE,CAAnCjB,CAA/B;EAIA,MAAMqC,oBAAoB,GAAGrC,QAAQ,CAACU,YAATV,GAAwBgC,IAAxBhC,GAA+BsC,QAA/BtC,CAAwC;IACnEU,YADmE;IAEnEO;EAFmE,CAAxCjB,CAA7B;EAIA,MAAMuC,6BAA6B,GAAGd,YAAY,CAACe,MAAbf,CAAoBC,gBAApBD,IAClCE,kCADkCF,GAElCzB,QAAQ,CAACyC,MAATzC,GAAkBgC,IAAlBhC,GAAyB0C,sBAAzB1C,CAAgD;IAC9C2C,IAAI,EAAElB,YADwC;IAE9CmB,KAAK,EAAEjB,kCAFuC;IAG9CV;EAH8C,CAAhDjB,CAFJ;EAQA,OACE6C,kBAAkB,CAACC,IAAnBD,GACGE,WADHF,CACe3B,KADf2B,EAEGG,UAFHH,CAEc;IACVhC,mBAAmB,EAAEH,YADX;IAEVuC,6BAA6B,EAAEd,sBAFrB;IAGVe,2BAA2B,EAAEb,oBAHnB;IAIVc,oCAAoC,EAAEZ;EAJ5B,CAFdM,EASE;EATFA,CAUGO,GAVHP,CAUO;IACHQ,WAAW,EAAEC,mCAAmC,CAC9C;MACE7B,YADF;MAEEP,KAAK,EAAEA,KAAK,CAACU,SAFf;MAGEL,SAAS,EAAEW,WAAW,CAACX,SAAD,CAHxB;MAIEM,wBAJF;MAKEU,6BALF;MAMEZ,kCANF;MAOEjB,YAPF;MAQEyB,sBARF;MASEE;IATF,CAD8C,EAY9C;MACEkB,IAAI,EAAE7C,YAAY,CAAC6C,IADrB;MAEEC,YAAY,EAAErB,sBAAsB,CAACoB,IAFvC;MAGEE,YAAY,EAAEpB,oBAAoB,CAACkB,IAHrC;MAIEG,oBAAoB,EAAE3C,MAAM,CAAC2C,oBAJ/B;MAKEpC,eALF;MAMED;IANF,CAZ8C,CAD7C;IAsBHsC,OAAO,EAAE,CAACzC,KAAD,CAtBN;IAuBH0C,GAAG,EAAE7C,MAAM,CAAC8C,cAAP9C,IAAyB;EAvB3B,CAVP8B,EAoCE;EApCFA,CAqCGiB,IArCHjB,CAqCQkB,OAAO,CAAChD,MAAM,CAACD,mBAAR,CArCf+B,EAqC8C3C,OAAO,IAAK;IACtD,MAAMY,mBAAmB,GAAGC,MAAM,CAACD,mBAAnC;IACA,OAAOZ,OAAO,CAACkD,GAARlD,CAAY;MACjBmD,WAAW,EAAEW,mCAAmC,CAC9C;QACEtD,YADF;QAEEa,SAAS,EAAEW,WAAW,CAACX,SAAD,CAFxB;QAGET,mBAHF;QAIEmD,eAAe,EAAEjE,QAAQ,CAACU,YAATV,GAAwBgC,IAAxBhC,GAA+BkE,UAA/BlE,CAA0C;UACzDU,YADyD;UAEzDI,mBAFyD;UAGzDG;QAHyD,CAA1CjB;MAJnB,CAD8C,EAW9C;QAAEmE,MAAM,EAAEpD,MAAM,CAACqD,gBAAPrD,IAA2BsD;MAArC,CAX8C,CAD/B;MAcjBV,OAAO,EAAE,CAACpC,SAAD,CAdQ;MAejBqC,GAAG,EAAE7C,MAAM,CAACuD,gCAAPvD,IAA2C;IAf/B,CAAZb,CAAP;EAiBD,CAxDH2C,CADF;AA2DF,CAjHa1C","sourcesContent":["import {\n  AuthorityScope,\n  createCreateAuctionHouseInstruction,\n  createDelegateAuctioneerInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { WRAPPED_SOL_MINT } from '../../tokenModule';\nimport { AUCTIONEER_ALL_SCOPES } from '../constants';\nimport { AuctionHouse } from '../models/AuctionHouse';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  isSigner,\n  makeConfirmOptionsFinalizedOnMainnet,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Pda,\n  Signer,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\nimport { ExpectedSignerError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateAuctionHouseOperation' as const;\n\n/**\n * Creates an Auction House.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .create({ sellerFeeBasisPoints: 500 }); // 5% fee\n * ```\n *\n * Provide `auctioneerAuthority` in case you want to enable Auctioneer.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .create({ sellerFeeBasisPoints: 500, auctioneerAuthority: mx.identity().publicKey };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createAuctionHouseOperation =\n  useOperation<CreateAuctionHouseOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateAuctionHouseOperation = Operation<\n  typeof Key,\n  CreateAuctionHouseInput,\n  CreateAuctionHouseOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateAuctionHouseInput = {\n  /** The share of the sale the auction house takes on all NFTs as a fee. */\n  sellerFeeBasisPoints: number;\n\n  /**\n   * This allows the centralised authority to gate which NFT can be listed, bought and sold.\n   *\n   * @defaultValue `canChangeSalePrice`\n   */\n  requiresSignOff?: boolean;\n\n  /**\n   * Is intended to be used with the Auction House that requires sign off.\n   * If the seller intentionally lists their NFT for a price of 0, a new FreeSellerTradeState is made.\n   * The Auction House can then change the price to match a matching Bid that is greater than 0.\n   *\n   * @defaultValue `false`\n   */\n  canChangeSalePrice?: boolean;\n\n  /**\n   * The list of scopes available to the user in the Auctioneer.\n   * For example Bid, List, Execute Sale.\n   *\n   * Only takes place when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue `All scopes available`\n   */\n  auctioneerScopes?: AuthorityScope[];\n\n  /**\n   * The address of the Auction House treasury mint.\n   * The token you accept as the purchase currency.\n   *\n   * @defaultValue `WRAPPED_SOL_MINT`\n   */\n  treasuryMint?: PublicKey;\n\n  /**\n   * The Authority wallet of the Auction House.\n   * It is used to sign off listings and bids in case `requiresSignOff` is true.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: PublicKey | Signer;\n\n  /**\n   * The account that is marked as a destination of withdrawal from the fee account.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  feeWithdrawalDestination?: PublicKey;\n\n  /**\n   * The account that is marked as the owner of treasury withdrawal destination.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  treasuryWithdrawalDestinationOwner?: PublicKey;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House is going to have Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateAuctionHouseOutput = {\n  /** The address of the Auction House. */\n  auctionHouseAddress: Pda;\n\n  /** The account that used to pay the fees for selling and buying. */\n  auctionHouseFeeAccountAddress: Pda;\n\n  /** The account that receives the AuctionHouse fees. */\n  auctionHouseTreasuryAddress: Pda;\n\n  /** The account that is marked as a destination of withdrawal from the treasury account. */\n  treasuryWithdrawalDestinationAddress: PublicKey;\n\n  /** Auction House model. */\n  auctionHouse: AuctionHouse;\n\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createAuctionHouseOperationHandler: OperationHandler<CreateAuctionHouseOperation> =\n  {\n    async handle(\n      operation: CreateAuctionHouseOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<CreateAuctionHouseOutput> {\n      const builder = createAuctionHouseBuilder(\n        metaplex,\n        operation.input,\n        scope\n      );\n\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      const auctionHouse = await metaplex.auctionHouse().findByAddress(\n        {\n          address: output.auctionHouseAddress,\n          auctioneerAuthority: operation.input.auctioneerAuthority,\n        },\n        scope\n      );\n\n      return { ...output, auctionHouse };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateAuctionHouseBuilderParams = Omit<\n  CreateAuctionHouseInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n  delegateAuctioneerInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateAuctionHouseBuilderContext = Omit<\n  CreateAuctionHouseOutput,\n  'response' | 'auctionHouse'\n>;\n\n/**\n * Creates an Auction House.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .createAuctionHouse({ sellerFeeBasisPoints: 500 }) // 5% fee\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createAuctionHouseBuilder = (\n  metaplex: Metaplex,\n  params: CreateAuctionHouseBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<CreateAuctionHouseBuilderContext> => {\n  // Data.\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const canChangeSalePrice = params.canChangeSalePrice ?? false;\n  const requiresSignOff = params.requiresSignOff ?? canChangeSalePrice;\n\n  // Accounts.\n  const authority = params.authority ?? metaplex.identity();\n  const treasuryMint = params.treasuryMint ?? WRAPPED_SOL_MINT;\n  const treasuryWithdrawalDestinationOwner =\n    params.treasuryWithdrawalDestinationOwner ?? metaplex.identity().publicKey;\n  const feeWithdrawalDestination =\n    params.feeWithdrawalDestination ?? metaplex.identity().publicKey;\n\n  // Auctioneer delegate instruction needs to be signed by authority\n  if (params.auctioneerAuthority && !isSigner(authority)) {\n    throw new ExpectedSignerError(\n      'authority',\n      'PublicKey',\n      'You are trying to delegate to an Auctioneer authority which ' +\n        'requires the Auction House authority to sign a transaction. ' +\n        'But you provided the Auction House authority as a Public Key.'\n    );\n  }\n\n  // PDAs.\n  const auctionHouse = metaplex\n    .auctionHouse()\n    .pdas()\n    .auctionHouse({\n      creator: toPublicKey(authority),\n      treasuryMint,\n      programs,\n    });\n  const auctionHouseFeeAccount = metaplex.auctionHouse().pdas().fee({\n    auctionHouse,\n    programs,\n  });\n  const auctionHouseTreasury = metaplex.auctionHouse().pdas().treasury({\n    auctionHouse,\n    programs,\n  });\n  const treasuryWithdrawalDestination = treasuryMint.equals(WRAPPED_SOL_MINT)\n    ? treasuryWithdrawalDestinationOwner\n    : metaplex.tokens().pdas().associatedTokenAccount({\n        mint: treasuryMint,\n        owner: treasuryWithdrawalDestinationOwner,\n        programs,\n      });\n\n  return (\n    TransactionBuilder.make<CreateAuctionHouseBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        auctionHouseAddress: auctionHouse,\n        auctionHouseFeeAccountAddress: auctionHouseFeeAccount,\n        auctionHouseTreasuryAddress: auctionHouseTreasury,\n        treasuryWithdrawalDestinationAddress: treasuryWithdrawalDestination,\n      })\n\n      // Create and initialize the Auction House account.\n      .add({\n        instruction: createCreateAuctionHouseInstruction(\n          {\n            treasuryMint,\n            payer: payer.publicKey,\n            authority: toPublicKey(authority),\n            feeWithdrawalDestination,\n            treasuryWithdrawalDestination,\n            treasuryWithdrawalDestinationOwner,\n            auctionHouse,\n            auctionHouseFeeAccount,\n            auctionHouseTreasury,\n          },\n          {\n            bump: auctionHouse.bump,\n            feePayerBump: auctionHouseFeeAccount.bump,\n            treasuryBump: auctionHouseTreasury.bump,\n            sellerFeeBasisPoints: params.sellerFeeBasisPoints,\n            requiresSignOff,\n            canChangeSalePrice,\n          }\n        ),\n        signers: [payer],\n        key: params.instructionKey ?? 'createAuctionHouse',\n      })\n\n      // Delegate to the Auctioneer authority when provided.\n      .when(Boolean(params.auctioneerAuthority), (builder) => {\n        const auctioneerAuthority = params.auctioneerAuthority as PublicKey;\n        return builder.add({\n          instruction: createDelegateAuctioneerInstruction(\n            {\n              auctionHouse,\n              authority: toPublicKey(authority as Signer),\n              auctioneerAuthority,\n              ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n                auctionHouse,\n                auctioneerAuthority,\n                programs,\n              }),\n            },\n            { scopes: params.auctioneerScopes ?? AUCTIONEER_ALL_SCOPES }\n          ),\n          signers: [authority as Signer],\n          key: params.delegateAuctioneerInstructionKey ?? 'delegateAuctioneer',\n        });\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}