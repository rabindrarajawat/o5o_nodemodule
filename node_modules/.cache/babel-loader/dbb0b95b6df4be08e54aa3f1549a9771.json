{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createReverseTwitterRegistry = exports.ReverseTwitterRegistryState = exports.getTwitterRegistryData = exports.getTwitterHandleandRegistryKeyViaFilters = exports.getHandleAndRegistryKey = exports.getTwitterRegistry = exports.getTwitterRegistryKey = exports.deleteTwitterRegistry = exports.changeVerifiedPubkey = exports.changeTwitterRegistryData = exports.createVerifiedTwitterRegistry = exports.TWITTER_ROOT_PARENT_REGISTRY_KEY = exports.TWITTER_VERIFICATION_AUTHORITY = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst borsh_1 = require(\"borsh\");\n\nconst bindings_1 = require(\"./bindings\");\n\nconst instructions_1 = require(\"./instructions\");\n\nconst state_1 = require(\"./state\");\n\nconst utils_1 = require(\"./utils\"); ////////////////////////////////////////////////////\n// Global Variables\n\n\nexports.TWITTER_VERIFICATION_AUTHORITY = new web3_js_1.PublicKey('FvPH7PrVrLGKPfqaf3xJodFTjZriqrAXXLTVWEorTFBi'); // The address of the name registry that will be a parent to all twitter handle registries,\n// it should be owned by the TWITTER_VERIFICATION_AUTHORITY and its name is irrelevant\n\nexports.TWITTER_ROOT_PARENT_REGISTRY_KEY = new web3_js_1.PublicKey('4YcexoW3r78zz16J2aqmukBLRwGq6rAvWzJpkYAXqebv'); ////////////////////////////////////////////////////\n// Bindings\n// Signed by the authority, the payer and the verified pubkey\n\nasync function createVerifiedTwitterRegistry(connection, twitterHandle, verifiedPubkey, space, // The space that the user will have to write data into the verified registry\npayerKey) {\n  // Create user facing registry\n  const hashedTwitterHandle = await (0, utils_1.getHashedName)(twitterHandle);\n  const twitterHandleRegistryKey = await (0, utils_1.getNameAccountKey)(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  let instructions = [(0, instructions_1.createInstruction)(bindings_1.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, twitterHandleRegistryKey, verifiedPubkey, payerKey, hashedTwitterHandle, new utils_1.Numberu64(await connection.getMinimumBalanceForRentExemption(space)), new utils_1.Numberu32(space), undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY, exports.TWITTER_VERIFICATION_AUTHORITY // Twitter authority acts as owner of the parent for all user-facing registries\n  )];\n  instructions = instructions.concat(await createReverseTwitterRegistry(connection, twitterHandle, twitterHandleRegistryKey, verifiedPubkey, payerKey));\n  return instructions;\n}\n\nexports.createVerifiedTwitterRegistry = createVerifiedTwitterRegistry; // Overwrite the data that is written in the user facing registry\n// Signed by the verified pubkey\n\nasync function changeTwitterRegistryData(twitterHandle, verifiedPubkey, offset, // The offset at which to write the input data into the NameRegistryData\ninput_data) {\n  const hashedTwitterHandle = await (0, utils_1.getHashedName)(twitterHandle);\n  const twitterHandleRegistryKey = await (0, utils_1.getNameAccountKey)(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  const instructions = [(0, instructions_1.updateInstruction)(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, new utils_1.Numberu32(offset), input_data, verifiedPubkey, undefined)];\n  return instructions;\n}\n\nexports.changeTwitterRegistryData = changeTwitterRegistryData; // Change the verified pubkey for a given twitter handle\n// Signed by the Authority, the verified pubkey and the payer\n\nasync function changeVerifiedPubkey(connection, twitterHandle, currentVerifiedPubkey, newVerifiedPubkey, payerKey) {\n  const hashedTwitterHandle = await (0, utils_1.getHashedName)(twitterHandle);\n  const twitterHandleRegistryKey = await (0, utils_1.getNameAccountKey)(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY); // Transfer the user-facing registry ownership\n\n  let instructions = [(0, instructions_1.transferInstruction)(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, newVerifiedPubkey, currentVerifiedPubkey, undefined)]; // Delete the current reverse registry\n\n  instructions.push(await (0, bindings_1.deleteNameRegistry)(connection, currentVerifiedPubkey.toString(), payerKey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY)); // Create the new reverse registry\n\n  instructions = instructions.concat(await createReverseTwitterRegistry(connection, twitterHandle, twitterHandleRegistryKey, newVerifiedPubkey, payerKey));\n  return instructions;\n}\n\nexports.changeVerifiedPubkey = changeVerifiedPubkey; // Delete the verified registry for a given twitter handle\n// Signed by the verified pubkey\n\nasync function deleteTwitterRegistry(twitterHandle, verifiedPubkey) {\n  const hashedTwitterHandle = await (0, utils_1.getHashedName)(twitterHandle);\n  const twitterHandleRegistryKey = await (0, utils_1.getNameAccountKey)(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  const hashedVerifiedPubkey = await (0, utils_1.getHashedName)(verifiedPubkey.toString());\n  const reverseRegistryKey = await (0, utils_1.getNameAccountKey)(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  const instructions = [// Delete the user facing registry\n  (0, instructions_1.deleteInstruction)(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, verifiedPubkey, verifiedPubkey), // Delete the reverse registry\n  (0, instructions_1.deleteInstruction)(bindings_1.NAME_PROGRAM_ID, reverseRegistryKey, verifiedPubkey, verifiedPubkey)];\n  return instructions;\n}\n\nexports.deleteTwitterRegistry = deleteTwitterRegistry; //////////////////////////////////////////\n// Getter Functions\n// Returns the key of the user-facing registry\n\nasync function getTwitterRegistryKey(twitter_handle) {\n  const hashedTwitterHandle = await (0, utils_1.getHashedName)(twitter_handle);\n  return await (0, utils_1.getNameAccountKey)(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n}\n\nexports.getTwitterRegistryKey = getTwitterRegistryKey;\n\nasync function getTwitterRegistry(connection, twitter_handle) {\n  const hashedTwitterHandle = await (0, utils_1.getHashedName)(twitter_handle);\n  const twitterHandleRegistryKey = await (0, utils_1.getNameAccountKey)(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  const registry = state_1.NameRegistryState.retrieve(connection, twitterHandleRegistryKey);\n  return registry;\n}\n\nexports.getTwitterRegistry = getTwitterRegistry;\n\nasync function getHandleAndRegistryKey(connection, verifiedPubkey) {\n  const hashedVerifiedPubkey = await (0, utils_1.getHashedName)(verifiedPubkey.toString());\n  const reverseRegistryKey = await (0, utils_1.getNameAccountKey)(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  const reverseRegistryState = await ReverseTwitterRegistryState.retrieve(connection, reverseRegistryKey);\n  return [reverseRegistryState.twitterHandle, new web3_js_1.PublicKey(reverseRegistryState.twitterRegistryKey)];\n}\n\nexports.getHandleAndRegistryKey = getHandleAndRegistryKey; // Uses the RPC node filtering feature, execution speed may vary\n\nasync function getTwitterHandleandRegistryKeyViaFilters(connection, verifiedPubkey) {\n  const filters = [{\n    memcmp: {\n      offset: 0,\n      bytes: exports.TWITTER_ROOT_PARENT_REGISTRY_KEY.toBase58()\n    }\n  }, {\n    memcmp: {\n      offset: 32,\n      bytes: verifiedPubkey.toBase58()\n    }\n  }, {\n    memcmp: {\n      offset: 64,\n      bytes: exports.TWITTER_VERIFICATION_AUTHORITY.toBase58()\n    }\n  }];\n  const filteredAccounts = await (0, utils_1.getFilteredProgramAccounts)(connection, bindings_1.NAME_PROGRAM_ID, filters);\n\n  for (const f of filteredAccounts) {\n    if (f.accountInfo.data.length > state_1.NameRegistryState.HEADER_LEN + 32) {\n      const data = f.accountInfo.data.slice(state_1.NameRegistryState.HEADER_LEN);\n      const state = (0, borsh_1.deserialize)(ReverseTwitterRegistryState.schema, ReverseTwitterRegistryState, data);\n      return [state.twitterHandle, new web3_js_1.PublicKey(state.twitterRegistryKey)];\n    }\n  }\n\n  throw new Error('Registry not found.');\n}\n\nexports.getTwitterHandleandRegistryKeyViaFilters = getTwitterHandleandRegistryKeyViaFilters; // Uses the RPC node filtering feature, execution speed may vary\n// Does not give you the handle, but is an alternative to getHandlesAndKeysFromVerifiedPubkey + getTwitterRegistry to get the data\n\nasync function getTwitterRegistryData(connection, verifiedPubkey) {\n  const filters = [{\n    memcmp: {\n      offset: 0,\n      bytes: exports.TWITTER_ROOT_PARENT_REGISTRY_KEY.toBytes()\n    }\n  }, {\n    memcmp: {\n      offset: 32,\n      bytes: verifiedPubkey.toBytes()\n    }\n  }, {\n    memcmp: {\n      offset: 64,\n      bytes: new web3_js_1.PublicKey(Buffer.alloc(32, 0)).toBase58()\n    }\n  }];\n  const filteredAccounts = await (0, utils_1.getFilteredProgramAccounts)(connection, bindings_1.NAME_PROGRAM_ID, filters);\n\n  if (filteredAccounts.length > 1) {\n    throw new Error('Found more than one registry.');\n  }\n\n  return filteredAccounts[0].accountInfo.data.slice(state_1.NameRegistryState.HEADER_LEN);\n}\n\nexports.getTwitterRegistryData = getTwitterRegistryData; //////////////////////////////////////////////\n// Utils\n\nclass ReverseTwitterRegistryState {\n  constructor(obj) {\n    this.twitterRegistryKey = obj.twitterRegistryKey;\n    this.twitterHandle = obj.twitterHandle;\n  }\n\n  static async retrieve(connection, reverseTwitterAccountKey) {\n    const reverseTwitterAccount = await connection.getAccountInfo(reverseTwitterAccountKey, 'processed');\n\n    if (!reverseTwitterAccount) {\n      throw new Error('Invalid reverse Twitter account provided');\n    }\n\n    const res = (0, borsh_1.deserializeUnchecked)(this.schema, ReverseTwitterRegistryState, reverseTwitterAccount.data.slice(state_1.NameRegistryState.HEADER_LEN));\n    return res;\n  }\n\n}\n\nexports.ReverseTwitterRegistryState = ReverseTwitterRegistryState;\nReverseTwitterRegistryState.schema = new Map([[ReverseTwitterRegistryState, {\n  kind: 'struct',\n  fields: [['twitterRegistryKey', [32]], ['twitterHandle', 'string']]\n}]]);\n\nasync function createReverseTwitterRegistry(connection, twitterHandle, twitterRegistryKey, verifiedPubkey, payerKey) {\n  // Create the reverse lookup registry\n  const hashedVerifiedPubkey = await (0, utils_1.getHashedName)(verifiedPubkey.toString());\n  const reverseRegistryKey = await (0, utils_1.getNameAccountKey)(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  const reverseTwitterRegistryStateBuff = (0, borsh_1.serialize)(ReverseTwitterRegistryState.schema, new ReverseTwitterRegistryState({\n    twitterRegistryKey: twitterRegistryKey.toBytes(),\n    twitterHandle: twitterHandle\n  }));\n  return [(0, instructions_1.createInstruction)(bindings_1.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, reverseRegistryKey, verifiedPubkey, payerKey, hashedVerifiedPubkey, new utils_1.Numberu64(await connection.getMinimumBalanceForRentExemption(reverseTwitterRegistryStateBuff.length)), new utils_1.Numberu32(reverseTwitterRegistryStateBuff.length), exports.TWITTER_VERIFICATION_AUTHORITY, // Twitter authority acts as class for all reverse-lookup registries\n  exports.TWITTER_ROOT_PARENT_REGISTRY_KEY, // Reverse registries are also children of the root\n  exports.TWITTER_VERIFICATION_AUTHORITY), (0, instructions_1.updateInstruction)(bindings_1.NAME_PROGRAM_ID, reverseRegistryKey, new utils_1.Numberu32(0), Buffer.from(reverseTwitterRegistryStateBuff), exports.TWITTER_VERIFICATION_AUTHORITY, undefined)];\n}\n\nexports.createReverseTwitterRegistry = createReverseTwitterRegistry;","map":{"version":3,"sources":["../src/twitter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createReverseTwitterRegistry = exports.ReverseTwitterRegistryState = exports.getTwitterRegistryData = exports.getTwitterHandleandRegistryKeyViaFilters = exports.getHandleAndRegistryKey = exports.getTwitterRegistry = exports.getTwitterRegistryKey = exports.deleteTwitterRegistry = exports.changeVerifiedPubkey = exports.changeTwitterRegistryData = exports.createVerifiedTwitterRegistry = exports.TWITTER_ROOT_PARENT_REGISTRY_KEY = exports.TWITTER_VERIFICATION_AUTHORITY = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst borsh_1 = require(\"borsh\");\nconst bindings_1 = require(\"./bindings\");\nconst instructions_1 = require(\"./instructions\");\nconst state_1 = require(\"./state\");\nconst utils_1 = require(\"./utils\");\n////////////////////////////////////////////////////\n// Global Variables\nexports.TWITTER_VERIFICATION_AUTHORITY = new web3_js_1.PublicKey('FvPH7PrVrLGKPfqaf3xJodFTjZriqrAXXLTVWEorTFBi');\n// The address of the name registry that will be a parent to all twitter handle registries,\n// it should be owned by the TWITTER_VERIFICATION_AUTHORITY and its name is irrelevant\nexports.TWITTER_ROOT_PARENT_REGISTRY_KEY = new web3_js_1.PublicKey('4YcexoW3r78zz16J2aqmukBLRwGq6rAvWzJpkYAXqebv');\n////////////////////////////////////////////////////\n// Bindings\n// Signed by the authority, the payer and the verified pubkey\nasync function createVerifiedTwitterRegistry(connection, twitterHandle, verifiedPubkey, space, // The space that the user will have to write data into the verified registry\npayerKey) {\n    // Create user facing registry\n    const hashedTwitterHandle = await (0, utils_1.getHashedName)(twitterHandle);\n    const twitterHandleRegistryKey = await (0, utils_1.getNameAccountKey)(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    let instructions = [\n        (0, instructions_1.createInstruction)(bindings_1.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, twitterHandleRegistryKey, verifiedPubkey, payerKey, hashedTwitterHandle, new utils_1.Numberu64(await connection.getMinimumBalanceForRentExemption(space)), new utils_1.Numberu32(space), undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY, exports.TWITTER_VERIFICATION_AUTHORITY // Twitter authority acts as owner of the parent for all user-facing registries\n        ),\n    ];\n    instructions = instructions.concat(await createReverseTwitterRegistry(connection, twitterHandle, twitterHandleRegistryKey, verifiedPubkey, payerKey));\n    return instructions;\n}\nexports.createVerifiedTwitterRegistry = createVerifiedTwitterRegistry;\n// Overwrite the data that is written in the user facing registry\n// Signed by the verified pubkey\nasync function changeTwitterRegistryData(twitterHandle, verifiedPubkey, offset, // The offset at which to write the input data into the NameRegistryData\ninput_data) {\n    const hashedTwitterHandle = await (0, utils_1.getHashedName)(twitterHandle);\n    const twitterHandleRegistryKey = await (0, utils_1.getNameAccountKey)(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const instructions = [\n        (0, instructions_1.updateInstruction)(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, new utils_1.Numberu32(offset), input_data, verifiedPubkey, undefined),\n    ];\n    return instructions;\n}\nexports.changeTwitterRegistryData = changeTwitterRegistryData;\n// Change the verified pubkey for a given twitter handle\n// Signed by the Authority, the verified pubkey and the payer\nasync function changeVerifiedPubkey(connection, twitterHandle, currentVerifiedPubkey, newVerifiedPubkey, payerKey) {\n    const hashedTwitterHandle = await (0, utils_1.getHashedName)(twitterHandle);\n    const twitterHandleRegistryKey = await (0, utils_1.getNameAccountKey)(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    // Transfer the user-facing registry ownership\n    let instructions = [\n        (0, instructions_1.transferInstruction)(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, newVerifiedPubkey, currentVerifiedPubkey, undefined),\n    ];\n    // Delete the current reverse registry\n    instructions.push(await (0, bindings_1.deleteNameRegistry)(connection, currentVerifiedPubkey.toString(), payerKey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY));\n    // Create the new reverse registry\n    instructions = instructions.concat(await createReverseTwitterRegistry(connection, twitterHandle, twitterHandleRegistryKey, newVerifiedPubkey, payerKey));\n    return instructions;\n}\nexports.changeVerifiedPubkey = changeVerifiedPubkey;\n// Delete the verified registry for a given twitter handle\n// Signed by the verified pubkey\nasync function deleteTwitterRegistry(twitterHandle, verifiedPubkey) {\n    const hashedTwitterHandle = await (0, utils_1.getHashedName)(twitterHandle);\n    const twitterHandleRegistryKey = await (0, utils_1.getNameAccountKey)(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const hashedVerifiedPubkey = await (0, utils_1.getHashedName)(verifiedPubkey.toString());\n    const reverseRegistryKey = await (0, utils_1.getNameAccountKey)(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const instructions = [\n        // Delete the user facing registry\n        (0, instructions_1.deleteInstruction)(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, verifiedPubkey, verifiedPubkey),\n        // Delete the reverse registry\n        (0, instructions_1.deleteInstruction)(bindings_1.NAME_PROGRAM_ID, reverseRegistryKey, verifiedPubkey, verifiedPubkey),\n    ];\n    return instructions;\n}\nexports.deleteTwitterRegistry = deleteTwitterRegistry;\n//////////////////////////////////////////\n// Getter Functions\n// Returns the key of the user-facing registry\nasync function getTwitterRegistryKey(twitter_handle) {\n    const hashedTwitterHandle = await (0, utils_1.getHashedName)(twitter_handle);\n    return await (0, utils_1.getNameAccountKey)(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n}\nexports.getTwitterRegistryKey = getTwitterRegistryKey;\nasync function getTwitterRegistry(connection, twitter_handle) {\n    const hashedTwitterHandle = await (0, utils_1.getHashedName)(twitter_handle);\n    const twitterHandleRegistryKey = await (0, utils_1.getNameAccountKey)(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const registry = state_1.NameRegistryState.retrieve(connection, twitterHandleRegistryKey);\n    return registry;\n}\nexports.getTwitterRegistry = getTwitterRegistry;\nasync function getHandleAndRegistryKey(connection, verifiedPubkey) {\n    const hashedVerifiedPubkey = await (0, utils_1.getHashedName)(verifiedPubkey.toString());\n    const reverseRegistryKey = await (0, utils_1.getNameAccountKey)(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const reverseRegistryState = await ReverseTwitterRegistryState.retrieve(connection, reverseRegistryKey);\n    return [\n        reverseRegistryState.twitterHandle,\n        new web3_js_1.PublicKey(reverseRegistryState.twitterRegistryKey),\n    ];\n}\nexports.getHandleAndRegistryKey = getHandleAndRegistryKey;\n// Uses the RPC node filtering feature, execution speed may vary\nasync function getTwitterHandleandRegistryKeyViaFilters(connection, verifiedPubkey) {\n    const filters = [\n        {\n            memcmp: {\n                offset: 0,\n                bytes: exports.TWITTER_ROOT_PARENT_REGISTRY_KEY.toBase58(),\n            },\n        },\n        {\n            memcmp: {\n                offset: 32,\n                bytes: verifiedPubkey.toBase58(),\n            },\n        },\n        {\n            memcmp: {\n                offset: 64,\n                bytes: exports.TWITTER_VERIFICATION_AUTHORITY.toBase58(),\n            },\n        },\n    ];\n    const filteredAccounts = await (0, utils_1.getFilteredProgramAccounts)(connection, bindings_1.NAME_PROGRAM_ID, filters);\n    for (const f of filteredAccounts) {\n        if (f.accountInfo.data.length > state_1.NameRegistryState.HEADER_LEN + 32) {\n            const data = f.accountInfo.data.slice(state_1.NameRegistryState.HEADER_LEN);\n            const state = (0, borsh_1.deserialize)(ReverseTwitterRegistryState.schema, ReverseTwitterRegistryState, data);\n            return [state.twitterHandle, new web3_js_1.PublicKey(state.twitterRegistryKey)];\n        }\n    }\n    throw new Error('Registry not found.');\n}\nexports.getTwitterHandleandRegistryKeyViaFilters = getTwitterHandleandRegistryKeyViaFilters;\n// Uses the RPC node filtering feature, execution speed may vary\n// Does not give you the handle, but is an alternative to getHandlesAndKeysFromVerifiedPubkey + getTwitterRegistry to get the data\nasync function getTwitterRegistryData(connection, verifiedPubkey) {\n    const filters = [\n        {\n            memcmp: {\n                offset: 0,\n                bytes: exports.TWITTER_ROOT_PARENT_REGISTRY_KEY.toBytes(),\n            },\n        },\n        {\n            memcmp: {\n                offset: 32,\n                bytes: verifiedPubkey.toBytes(),\n            },\n        },\n        {\n            memcmp: {\n                offset: 64,\n                bytes: new web3_js_1.PublicKey(Buffer.alloc(32, 0)).toBase58(),\n            },\n        },\n    ];\n    const filteredAccounts = await (0, utils_1.getFilteredProgramAccounts)(connection, bindings_1.NAME_PROGRAM_ID, filters);\n    if (filteredAccounts.length > 1) {\n        throw new Error('Found more than one registry.');\n    }\n    return filteredAccounts[0].accountInfo.data.slice(state_1.NameRegistryState.HEADER_LEN);\n}\nexports.getTwitterRegistryData = getTwitterRegistryData;\n//////////////////////////////////////////////\n// Utils\nclass ReverseTwitterRegistryState {\n    constructor(obj) {\n        this.twitterRegistryKey = obj.twitterRegistryKey;\n        this.twitterHandle = obj.twitterHandle;\n    }\n    static async retrieve(connection, reverseTwitterAccountKey) {\n        const reverseTwitterAccount = await connection.getAccountInfo(reverseTwitterAccountKey, 'processed');\n        if (!reverseTwitterAccount) {\n            throw new Error('Invalid reverse Twitter account provided');\n        }\n        const res = (0, borsh_1.deserializeUnchecked)(this.schema, ReverseTwitterRegistryState, reverseTwitterAccount.data.slice(state_1.NameRegistryState.HEADER_LEN));\n        return res;\n    }\n}\nexports.ReverseTwitterRegistryState = ReverseTwitterRegistryState;\nReverseTwitterRegistryState.schema = new Map([\n    [\n        ReverseTwitterRegistryState,\n        {\n            kind: 'struct',\n            fields: [\n                ['twitterRegistryKey', [32]],\n                ['twitterHandle', 'string'],\n            ],\n        },\n    ],\n]);\nasync function createReverseTwitterRegistry(connection, twitterHandle, twitterRegistryKey, verifiedPubkey, payerKey) {\n    // Create the reverse lookup registry\n    const hashedVerifiedPubkey = await (0, utils_1.getHashedName)(verifiedPubkey.toString());\n    const reverseRegistryKey = await (0, utils_1.getNameAccountKey)(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const reverseTwitterRegistryStateBuff = (0, borsh_1.serialize)(ReverseTwitterRegistryState.schema, new ReverseTwitterRegistryState({\n        twitterRegistryKey: twitterRegistryKey.toBytes(),\n        twitterHandle,\n    }));\n    return [\n        (0, instructions_1.createInstruction)(bindings_1.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, reverseRegistryKey, verifiedPubkey, payerKey, hashedVerifiedPubkey, new utils_1.Numberu64(await connection.getMinimumBalanceForRentExemption(reverseTwitterRegistryStateBuff.length)), new utils_1.Numberu32(reverseTwitterRegistryStateBuff.length), exports.TWITTER_VERIFICATION_AUTHORITY, // Twitter authority acts as class for all reverse-lookup registries\n        exports.TWITTER_ROOT_PARENT_REGISTRY_KEY, // Reverse registries are also children of the root\n        exports.TWITTER_VERIFICATION_AUTHORITY),\n        (0, instructions_1.updateInstruction)(bindings_1.NAME_PROGRAM_ID, reverseRegistryKey, new utils_1.Numberu32(0), Buffer.from(reverseTwitterRegistryStateBuff), exports.TWITTER_VERIFICATION_AUTHORITY, undefined),\n    ];\n}\nexports.createReverseTwitterRegistry = createReverseTwitterRegistry;\n//# sourceMappingURL=twitter.js.map"]},"metadata":{},"sourceType":"script"}