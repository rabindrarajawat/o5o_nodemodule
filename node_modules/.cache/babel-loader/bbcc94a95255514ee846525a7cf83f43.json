{"ast":null,"code":"import debug from 'debug';\nimport colors from 'ansicolors';\nimport { isElementCollectionFixedSizeBeet, isFixableBeet } from './types';\nconst {\n  brightBlack\n} = colors;\nexport const logError = debug('beet:error');\nexport const logInfo = debug('beet:info');\nexport const logDebug = debug('beet:debug');\nexport const logTrace = debug('beet:trace');\nexport function beetBytes(beet) {\n  let isFixable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let bytes;\n\n  if (isFixableBeet(beet)) {\n    bytes = '? B';\n  } else if (isElementCollectionFixedSizeBeet(beet)) {\n    const len = isFixable ? 'length' : beet.length;\n    const lenBytes = beet.lenPrefixByteSize;\n    bytes = lenBytes > 0 ? `${lenBytes} + (${beet.elementByteSize} * ${len}) B  (${beet.byteSize} B)` : `(${beet.elementByteSize} * ${len}) B (${beet.byteSize} B)`;\n  } else {\n    bytes = `${beet.byteSize} B`;\n  }\n\n  return brightBlack(bytes);\n}\nexport function bytes(n) {\n  return brightBlack(`${n} B`);\n}\nexport class UnreachableCaseError extends Error {\n  constructor(value) {\n    super(`Unreachable case: ${value}`);\n  }\n\n}","map":{"version":3,"sources":["../../../src/utils.ts"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAP,MAAmB,YAAnB;AACA,SAGE,gCAHF,EAIE,aAJF,QAKO,SALP;AAMA,MAAM;EAAE;AAAF,IAAkB,MAAxB;AAEA,OAAO,MAAM,QAAQ,GAAG,KAAK,CAAC,YAAD,CAAtB;AACP,OAAO,MAAM,OAAO,GAAG,KAAK,CAAC,WAAD,CAArB;AACP,OAAO,MAAM,QAAQ,GAAG,KAAK,CAAC,YAAD,CAAtB;AACP,OAAO,MAAM,QAAQ,GAAG,KAAK,CAAC,YAAD,CAAtB;AAEP,OAAM,SAAU,SAAV,CACJ,IADI,EAEa;EAAA,IAAjB,SAAiB,uEAAL,KAAK;EAEjB,IAAI,KAAJ;;EACA,IAAI,aAAa,CAAC,IAAD,CAAjB,EAAyB;IACvB,KAAK,GAAG,KAAR;EACD,CAFD,MAEO,IAAI,gCAAgC,CAAC,IAAD,CAApC,EAA4C;IACjD,MAAM,GAAG,GAAG,SAAS,GAAG,QAAH,GAAc,IAAI,CAAC,MAAxC;IACA,MAAM,QAAQ,GAAG,IAAI,CAAC,iBAAtB;IACA,KAAK,GACH,QAAQ,GAAG,CAAX,GACI,GAAG,QAAQ,OAAO,IAAI,CAAC,eAAe,MAAM,GAAG,SAAS,IAAI,CAAC,QAAQ,KADzE,GAEI,IAAI,IAAI,CAAC,eAAe,MAAM,GAAG,QAAQ,IAAI,CAAC,QAAQ,KAH5D;EAID,CAPM,MAOA;IACL,KAAK,GAAG,GAAG,IAAI,CAAC,QAAQ,IAAxB;EACD;;EACD,OAAO,WAAW,CAAC,KAAD,CAAlB;AACD;AAED,OAAM,SAAU,KAAV,CAAgB,CAAhB,EAAyB;EAC7B,OAAO,WAAW,CAAC,GAAG,CAAC,IAAL,CAAlB;AACD;AAED,OAAM,MAAO,oBAAP,SAAoC,KAApC,CAAyC;EAC7C,WAAA,CAAY,KAAZ,EAAwB;IACtB,MAAM,qBAAqB,KAAK,EAAhC;EACD;;AAH4C","sourceRoot":"","sourcesContent":["import debug from 'debug';\nimport colors from 'ansicolors';\nimport { isElementCollectionFixedSizeBeet, isFixableBeet, } from './types';\nconst { brightBlack } = colors;\nexport const logError = debug('beet:error');\nexport const logInfo = debug('beet:info');\nexport const logDebug = debug('beet:debug');\nexport const logTrace = debug('beet:trace');\nexport function beetBytes(beet, isFixable = false) {\n    let bytes;\n    if (isFixableBeet(beet)) {\n        bytes = '? B';\n    }\n    else if (isElementCollectionFixedSizeBeet(beet)) {\n        const len = isFixable ? 'length' : beet.length;\n        const lenBytes = beet.lenPrefixByteSize;\n        bytes =\n            lenBytes > 0\n                ? `${lenBytes} + (${beet.elementByteSize} * ${len}) B  (${beet.byteSize} B)`\n                : `(${beet.elementByteSize} * ${len}) B (${beet.byteSize} B)`;\n    }\n    else {\n        bytes = `${beet.byteSize} B`;\n    }\n    return brightBlack(bytes);\n}\nexport function bytes(n) {\n    return brightBlack(`${n} B`);\n}\nexport class UnreachableCaseError extends Error {\n    constructor(value) {\n        super(`Unreachable case: ${value}`);\n    }\n}\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}