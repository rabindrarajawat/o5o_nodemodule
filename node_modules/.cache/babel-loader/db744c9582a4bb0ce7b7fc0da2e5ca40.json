{"ast":null,"code":"import { useOperation } from '../../../types/Operation.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'LoadMetadataOperation';\n/**\n * Transforms a `Metadata` model into a `Nft` or `Sft` model.\n *\n * ```ts\n * const nfts = await metaplex\n *   .nfts()\n *   .load({ metadata };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst loadMetadataOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst loadMetadataOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const {\n      metadata,\n      loadJsonMetadata = true\n    } = operation.input;\n    let nftOrSft = await metaplex.nfts().findByMint({ ...operation.input,\n      mintAddress: metadata.mintAddress,\n      loadJsonMetadata: !metadata.jsonLoaded && loadJsonMetadata\n    }, scope);\n\n    if (!nftOrSft.jsonLoaded && metadata.jsonLoaded) {\n      nftOrSft = { ...nftOrSft,\n        json: metadata.json,\n        jsonLoaded: true\n      };\n    }\n\n    return nftOrSft;\n  }\n};\nexport { loadMetadataOperation, loadMetadataOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/nftModule/operations/loadMetadata.ts"],"names":["Key","loadMetadataOperation","useOperation","loadMetadataOperationHandler","handle","operation","metaplex","scope","metadata","loadJsonMetadata","input","nftOrSft","nfts","findByMint","mintAddress","jsonLoaded","json"],"mappings":"6DAUA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,uBAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,qBAAqB,GAAGC,YAAY,CAAwBF,GAAxB,C;AAEjD;AACA;AACA;AACA;;AAuDA;AACA;AACA;AACA;;AACO,MAAMG,4BAAqE,GAChF;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI0B;IAChC,MAAM;MAAEC,QAAF;MAAYC,gBAAgB,GAAG;IAA/B,IAAwCJ,SAAS,CAACK,KAAxD;IAEA,IAAIC,QAAQ,GAAG,MAAML,QAAQ,CAACM,IAATN,GAAgBO,UAAhBP,CACnB,EACE,GAAGD,SAAS,CAACK,KADf;MAEEI,WAAW,EAAEN,QAAQ,CAACM,WAFxB;MAGEL,gBAAgB,EAAE,CAACD,QAAQ,CAACO,UAAV,IAAwBN;IAH5C,CADmBH,EAMnBC,KANmBD,CAArB;;IASA,IAAI,CAACK,QAAQ,CAACI,UAAV,IAAwBP,QAAQ,CAACO,UAArC,EAAiD;MAC/CJ,QAAQ,GAAG,EAAE,GAAGA,QAAL;QAAeK,IAAI,EAAER,QAAQ,CAACQ,IAA9B;QAAoCD,UAAU,EAAE;MAAhD,CAAXJ;IACF;;IAEA,OAAOA,QAAP;EACF;AAtBF,CADK","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { Metadata, Nft, NftWithToken, Sft, SftWithToken } from '../models';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'LoadMetadataOperation' as const;\n\n/**\n * Transforms a `Metadata` model into a `Nft` or `Sft` model.\n *\n * ```ts\n * const nfts = await metaplex\n *   .nfts()\n *   .load({ metadata };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const loadMetadataOperation = useOperation<LoadMetadataOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type LoadMetadataOperation = Operation<\n  typeof Key,\n  LoadMetadataInput,\n  LoadMetadataOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type LoadMetadataInput = {\n  /** The address of the metadata account. */\n  metadata: Metadata;\n\n  /**\n   * The explicit token account to fetch with the NFT or SFT.\n   *\n   * If provided, and if that address is valid, the NFT or SFT returned\n   * will be of the type `NftWithToken` or `SftWithToken` respectively.\n   *\n   * Alternatively, you may use the `tokenOwner` parameter to fetch the\n   * associated token account.\n   *\n   * @defaultValue Defaults to not fetching the token account.\n   */\n  tokenAddress?: PublicKey;\n\n  /**\n   * The associated token account to fetch with the NFT or SFT.\n   *\n   * If provided, and if that account exists, the NFT or SFT returned\n   * will be of the type `NftWithToken` or `SftWithToken` respectively.\n   *\n   * Alternatively, you may use the `tokenAddress` parameter to fetch the\n   * token account at an explicit address.\n   *\n   * @defaultValue Defaults to not fetching the associated token account.\n   */\n  tokenOwner?: PublicKey;\n\n  /**\n   * Whether or not we should fetch the JSON Metadata for the NFT or SFT.\n   *\n   * @defaultValue `true`\n   */\n  loadJsonMetadata?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type LoadMetadataOutput = Nft | Sft | NftWithToken | SftWithToken;\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const loadMetadataOperationHandler: OperationHandler<LoadMetadataOperation> =\n  {\n    handle: async (\n      operation: LoadMetadataOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<LoadMetadataOutput> => {\n      const { metadata, loadJsonMetadata = true } = operation.input;\n\n      let nftOrSft = await metaplex.nfts().findByMint(\n        {\n          ...operation.input,\n          mintAddress: metadata.mintAddress,\n          loadJsonMetadata: !metadata.jsonLoaded && loadJsonMetadata,\n        },\n        scope\n      );\n\n      if (!nftOrSft.jsonLoaded && metadata.jsonLoaded) {\n        nftOrSft = { ...nftOrSft, json: metadata.json, jsonLoaded: true };\n      }\n\n      return nftOrSft;\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}