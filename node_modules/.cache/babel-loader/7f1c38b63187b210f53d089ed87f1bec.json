{"ast":null,"code":"import { tokenGateBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { mapSerializer, createSerializerFromBeet } from '../../../types/Serializer.mjs';\nimport { token } from '../../../types/Amount.mjs';\n/**\n * The tokenGate guard restricts minting to token holders\n * of a specified mint account. The `amount` determines\n * how many tokens are required.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n */\n\n/** @internal */\n\nconst tokenGateGuardManifest = {\n  name: 'tokenGate',\n  settingsBytes: 40,\n  settingsSerializer: mapSerializer(createSerializerFromBeet(tokenGateBeet), settings => ({ ...settings,\n    amount: token(settings.amount)\n  }), settings => ({ ...settings,\n    amount: settings.amount.basisPoints\n  })),\n  mintSettingsParser: _ref => {\n    let {\n      metaplex,\n      settings,\n      payer,\n      programs\n    } = _ref;\n    const tokenAccount = metaplex.tokens().pdas().associatedTokenAccount({\n      mint: settings.mint,\n      owner: payer.publicKey,\n      programs\n    });\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts: [{\n        isSigner: false,\n        address: tokenAccount,\n        isWritable: false\n      }]\n    };\n  }\n};\nexport { tokenGateGuardManifest };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineModule/guards/tokenGate.ts"],"names":["tokenGateGuardManifest","name","settingsBytes","settingsSerializer","mapSerializer","createSerializerFromBeet","tokenGateBeet","settings","amount","token","basisPoints","mintSettingsParser","metaplex","payer","programs","tokenAccount","tokens","pdas","associatedTokenAccount","mint","owner","publicKey","arguments","Buffer","from","remainingAccounts","isSigner","address","isWritable"],"mappings":";;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;;AACO,MAAMA,sBAAkE,GAC7E;EACEC,IAAI,EAAE,WADR;EAEEC,aAAa,EAAE,EAFjB;EAGEC,kBAAkB,EAAEC,aAAa,CAC/BC,wBAAwB,CAACC,aAAD,CADO,EAE9BC,QAAQ,KAAM,EAAE,GAAGA,QAAL;IAAeC,MAAM,EAAEC,KAAK,CAACF,QAAQ,CAACC,MAAV;EAA5B,CAAN,CAFsB,EAG9BD,QAAQ,KAAM,EAAE,GAAGA,QAAL;IAAeC,MAAM,EAAED,QAAQ,CAACC,MAATD,CAAgBG;EAAvC,CAAN,CAHsB,CAHnC;EAQEC,kBAAkB,EAAE,QAA6C;IAAA,IAA5C;MAAEC,QAAF;MAAYL,QAAZ;MAAsBM,KAAtB;MAA6BC;IAA7B,CAA4C;IAC/D,MAAMC,YAAY,GAAGH,QAAQ,CAACI,MAATJ,GAAkBK,IAAlBL,GAAyBM,sBAAzBN,CAAgD;MACnEO,IAAI,EAAEZ,QAAQ,CAACY,IADoD;MAEnEC,KAAK,EAAEP,KAAK,CAACQ,SAFsD;MAGnEP;IAHmE,CAAhDF,CAArB;IAMA,OAAO;MACLU,SAAS,EAAEC,MAAM,CAACC,IAAPD,CAAY,EAAZA,CADN;MAELE,iBAAiB,EAAE,CACjB;QACEC,QAAQ,EAAE,KADZ;QAEEC,OAAO,EAAEZ,YAFX;QAGEa,UAAU,EAAE;MAHd,CADiB;IAFd,CAAP;EAUF;AAzBF,CADK","sourcesContent":["import { TokenGate, tokenGateBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { CandyGuardManifest } from './core';\nimport {\n  createSerializerFromBeet,\n  mapSerializer,\n  PublicKey,\n  SplTokenAmount,\n  token,\n} from '@/types';\n\n/**\n * The tokenGate guard restricts minting to token holders\n * of a specified mint account. The `amount` determines\n * how many tokens are required.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n */\nexport type TokenGateGuardSettings = {\n  /** The mint address of the required tokens. */\n  mint: PublicKey;\n\n  /** The amount of tokens required to mint an NFT. */\n  amount: SplTokenAmount;\n};\n\n/** @internal */\nexport const tokenGateGuardManifest: CandyGuardManifest<TokenGateGuardSettings> =\n  {\n    name: 'tokenGate',\n    settingsBytes: 40,\n    settingsSerializer: mapSerializer<TokenGate, TokenGateGuardSettings>(\n      createSerializerFromBeet(tokenGateBeet),\n      (settings) => ({ ...settings, amount: token(settings.amount) }),\n      (settings) => ({ ...settings, amount: settings.amount.basisPoints })\n    ),\n    mintSettingsParser: ({ metaplex, settings, payer, programs }) => {\n      const tokenAccount = metaplex.tokens().pdas().associatedTokenAccount({\n        mint: settings.mint,\n        owner: payer.publicKey,\n        programs,\n      });\n\n      return {\n        arguments: Buffer.from([]),\n        remainingAccounts: [\n          {\n            isSigner: false,\n            address: tokenAccount,\n            isWritable: false,\n          },\n        ],\n      };\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}