{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createSetAuthorityInstruction } from '../instructions/setAuthority.js';\nimport { getSigners } from './internal.js';\n/**\n * Assign a new authority to the account\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param account          Address of the account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function setAuthority(connection, payer, account, currentAuthority, authorityType, newAuthority) {\n  let multiSigners = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n  let confirmOptions = arguments.length > 7 ? arguments[7] : undefined;\n  let programId = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : TOKEN_PROGRAM_ID;\n  const [currentAuthorityPublicKey, signers] = getSigners(currentAuthority, multiSigners);\n  const transaction = new Transaction().add(createSetAuthorityInstruction(account, currentAuthorityPublicKey, authorityType, newAuthority, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"sources":["../../../src/actions/setAuthority.ts"],"names":[],"mappings":"AACA,SAAS,yBAAT,EAAoC,WAApC,QAAuD,iBAAvD;AACA,SAAS,gBAAT,QAAiC,iBAAjC;AAEA,SAAS,6BAAT,QAA8C,iCAA9C;AACA,SAAS,UAAT,QAA2B,eAA3B;AAEA;;;;;;;;;;;;;;AAcG;;AACH,OAAO,eAAe,YAAf,CACH,UADG,EAEH,KAFG,EAGH,OAHG,EAIH,gBAJG,EAKH,aALG,EAMH,YANG,EASyB;EAAA,IAF5B,YAE4B,uEAFH,EAEG;EAAA,IAD5B,cAC4B;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B,MAAM,CAAC,yBAAD,EAA4B,OAA5B,IAAuC,UAAU,CAAC,gBAAD,EAAmB,YAAnB,CAAvD;EAEA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,6BAA6B,CACzB,OADyB,EAEzB,yBAFyB,EAGzB,aAHyB,EAIzB,YAJyB,EAKzB,YALyB,EAMzB,SANyB,CADb,CAApB;EAWA,OAAO,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,EAAQ,GAAG,OAAX,CAA1B,EAA+C,cAA/C,CAAtC;AACH","sourceRoot":"","sourcesContent":["import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createSetAuthorityInstruction } from '../instructions/setAuthority.js';\nimport { getSigners } from './internal.js';\n/**\n * Assign a new authority to the account\n *\n * @param connection       Connection to use\n * @param payer            Payer of the transaction fees\n * @param account          Address of the account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param confirmOptions   Options for confirming the transaction\n * @param programId        SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function setAuthority(connection, payer, account, currentAuthority, authorityType, newAuthority, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n    const [currentAuthorityPublicKey, signers] = getSigners(currentAuthority, multiSigners);\n    const transaction = new Transaction().add(createSetAuthorityInstruction(account, currentAuthorityPublicKey, authorityType, newAuthority, multiSigners, programId));\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n//# sourceMappingURL=setAuthority.js.map"]},"metadata":{},"sourceType":"module"}