{"ast":null,"code":"import { Buffer } from 'buffer';\nimport { Pda } from '../../types/Pda.mjs';\n/**\n * This client allows you to build PDAs related to the Auction House module.\n *\n * @see {@link AuctionHouseClient}\n * @group Module Pdas\n */\n\nclass AuctionHousePdasClient {\n  constructor(metaplex) {\n    this.metaplex = metaplex;\n  }\n  /** Finds the Auction House PDA for a creator and treasury tuple. */\n\n\n  auctionHouse(input) {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [Buffer.from('auction_house', 'utf8'), input.creator.toBuffer(), input.treasuryMint.toBuffer()]);\n  }\n  /** Finds the Auctioneer PDA of an Auction House. */\n\n\n  auctioneer(input) {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [Buffer.from('auctioneer', 'utf8'), input.auctionHouse.toBuffer(), input.auctioneerAuthority.toBuffer()]);\n  }\n  /**\n   * Finds the PDA of the Auction House Program\n   * itself used to sign transaction.\n   */\n\n\n  programAsSigner(input) {\n    const programId = this.programId(input?.programs);\n    return Pda.find(programId, [Buffer.from('auction_house', 'utf8'), Buffer.from('signer', 'utf8')]);\n  }\n  /** Finds the PDA of an Auction House's fee account. */\n\n\n  fee(input) {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [Buffer.from('auction_house', 'utf8'), input.auctionHouse.toBuffer(), Buffer.from('fee_payer', 'utf8')]);\n  }\n  /** Finds the PDA of an Auction House's treasury account. */\n\n\n  treasury(input) {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [Buffer.from('auction_house', 'utf8'), input.auctionHouse.toBuffer(), Buffer.from('treasury', 'utf8')]);\n  }\n  /** Finds the PDA of a buyer's escrow account. */\n\n\n  buyerEscrow(input) {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [Buffer.from('auction_house', 'utf8'), input.auctionHouse.toBuffer(), input.buyer.toBuffer()]);\n  }\n  /** Finds the trade state PDA of a bid or listing. */\n\n\n  tradeState(input) {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [Buffer.from('auction_house', 'utf8'), input.wallet.toBuffer(), input.auctionHouse.toBuffer(), ...(input.tokenAccount ? [input.tokenAccount.toBuffer()] : []), input.treasuryMint.toBuffer(), input.tokenMint.toBuffer(), input.price.toArrayLike(Buffer, 'le', 8), input.tokenSize.toArrayLike(Buffer, 'le', 8)]);\n  }\n  /** Finds the receipt PDA of a Listing trade state. */\n\n\n  listingReceipt(input) {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [Buffer.from('listing_receipt', 'utf8'), input.tradeState.toBuffer()]);\n  }\n  /** Finds the receipt PDA of a Bid trade state. */\n\n\n  bidReceipt(input) {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [Buffer.from('bid_receipt', 'utf8'), input.tradeState.toBuffer()]);\n  }\n  /** Finds the receipt PDA of a Purchase. */\n\n\n  purchaseReceipt(input) {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [Buffer.from('purchase_receipt', 'utf8'), input.listingTradeState.toBuffer(), input.bidTradeState.toBuffer()]);\n  }\n\n  programId(programs) {\n    return this.metaplex.programs().getAuctionHouse(programs).address;\n  }\n\n}\n\nexport { AuctionHousePdasClient };","map":{"version":3,"sources":["../../../../src/plugins/auctionHouseModule/AuctionHousePdasClient.ts"],"names":["AuctionHousePdasClient","constructor","metaplex","auctionHouse","input","programId","programs","Pda","find","Buffer","from","creator","toBuffer","treasuryMint","auctioneer","auctioneerAuthority","programAsSigner","fee","treasury","buyerEscrow","buyer","tradeState","wallet","tokenAccount","tokenMint","price","toArrayLike","tokenSize","listingReceipt","bidReceipt","purchaseReceipt","listingTradeState","bidTradeState","getAuctionHouse","address"],"mappings":"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","sourcesContent":["import { Buffer } from 'buffer';\nimport type { Metaplex } from '@/Metaplex';\nimport { BigNumber, Pda, Program, PublicKey } from '@/types';\nimport { Option } from '@/utils';\n\n/**\n * This client allows you to build PDAs related to the Auction House module.\n *\n * @see {@link AuctionHouseClient}\n * @group Module Pdas\n */\nexport class AuctionHousePdasClient {\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  /** Finds the Auction House PDA for a creator and treasury tuple. */\n  auctionHouse(input: {\n    /** The address of the Auction House's creator. */\n    creator: PublicKey;\n    /** The mint address of the Auction House's treasury. */\n    treasuryMint: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('auction_house', 'utf8'),\n      input.creator.toBuffer(),\n      input.treasuryMint.toBuffer(),\n    ]);\n  }\n\n  /** Finds the Auctioneer PDA of an Auction House. */\n  auctioneer(input: {\n    /** The Auction House address. */\n    auctionHouse: PublicKey;\n    /** The address of the Auctioneer authority. */\n    auctioneerAuthority: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('auctioneer', 'utf8'),\n      input.auctionHouse.toBuffer(),\n      input.auctioneerAuthority.toBuffer(),\n    ]);\n  }\n\n  /**\n   * Finds the PDA of the Auction House Program\n   * itself used to sign transaction.\n   */\n  programAsSigner(input?: {\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input?.programs);\n    return Pda.find(programId, [\n      Buffer.from('auction_house', 'utf8'),\n      Buffer.from('signer', 'utf8'),\n    ]);\n  }\n\n  /** Finds the PDA of an Auction House's fee account. */\n  fee(input: {\n    /** The Auction House address. */\n    auctionHouse: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('auction_house', 'utf8'),\n      input.auctionHouse.toBuffer(),\n      Buffer.from('fee_payer', 'utf8'),\n    ]);\n  }\n\n  /** Finds the PDA of an Auction House's treasury account. */\n  treasury(input: {\n    /** The Auction House address. */\n    auctionHouse: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('auction_house', 'utf8'),\n      input.auctionHouse.toBuffer(),\n      Buffer.from('treasury', 'utf8'),\n    ]);\n  }\n\n  /** Finds the PDA of a buyer's escrow account. */\n  buyerEscrow(input: {\n    /** The Auction House address. */\n    auctionHouse: PublicKey;\n    /** The address of the buyer. */\n    buyer: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('auction_house', 'utf8'),\n      input.auctionHouse.toBuffer(),\n      input.buyer.toBuffer(),\n    ]);\n  }\n\n  /** Finds the trade state PDA of a bid or listing. */\n  tradeState(input: {\n    /** The Auction House address. */\n    auctionHouse: PublicKey;\n    /** The address of the buyer or seller. */\n    wallet: PublicKey;\n    /** The mint address of the Auction House's treasury at the time of trade. */\n    treasuryMint: PublicKey;\n    /** The mint address of the token to trade. */\n    tokenMint: PublicKey;\n    /** The price of the trade in basis points. */\n    price: BigNumber;\n    /** The number of tokens to trade in basis points. */\n    tokenSize: BigNumber;\n    /** The token account from which to trade, unless it is a public bid. */\n    tokenAccount?: Option<PublicKey>;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('auction_house', 'utf8'),\n      input.wallet.toBuffer(),\n      input.auctionHouse.toBuffer(),\n      ...(input.tokenAccount ? [input.tokenAccount.toBuffer()] : []),\n      input.treasuryMint.toBuffer(),\n      input.tokenMint.toBuffer(),\n      input.price.toArrayLike(Buffer, 'le', 8),\n      input.tokenSize.toArrayLike(Buffer, 'le', 8),\n    ]);\n  }\n\n  /** Finds the receipt PDA of a Listing trade state. */\n  listingReceipt(input: {\n    /** The trade state PDA of the Listing. */\n    tradeState: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('listing_receipt', 'utf8'),\n      input.tradeState.toBuffer(),\n    ]);\n  }\n\n  /** Finds the receipt PDA of a Bid trade state. */\n  bidReceipt(input: {\n    /** The trade state PDA of the Bid. */\n    tradeState: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('bid_receipt', 'utf8'),\n      input.tradeState.toBuffer(),\n    ]);\n  }\n\n  /** Finds the receipt PDA of a Purchase. */\n  purchaseReceipt(input: {\n    /** The trade state PDA of the Listing. */\n    listingTradeState: PublicKey;\n    /** The trade state PDA of the Bid. */\n    bidTradeState: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('purchase_receipt', 'utf8'),\n      input.listingTradeState.toBuffer(),\n      input.bidTradeState.toBuffer(),\n    ]);\n  }\n\n  private programId(programs?: Program[]) {\n    return this.metaplex.programs().getAuctionHouse(programs).address;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}