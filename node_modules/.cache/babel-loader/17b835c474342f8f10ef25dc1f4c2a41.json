{"ast":null,"code":"import { defineProperty as _defineProperty } from '../_virtual/_rollupPluginBabelHelpers.mjs';\nimport { MetaplexError } from './MetaplexError.mjs';\n/** @group Errors */\n\nclass RpcError extends MetaplexError {\n  constructor(message, cause) {\n    super(message, 'rpc', undefined, cause);\n\n    _defineProperty(this, \"name\", 'RpcError');\n  }\n\n}\n/** @group Errors */\n\n\nclass FailedToSendTransactionError extends RpcError {\n  constructor(cause) {\n    const message = 'The transaction could not be sent successfully to the network. ' + 'Please check the underlying error below for more details.';\n    super(message, cause);\n\n    _defineProperty(this, \"name\", 'FailedToSendTransactionError');\n\n    if (this.errorLogs.length > 0) {\n      this.message = this.message + `\\nProgram Logs:\\n${this.errorLogs.map(log => '| ' + log).join('\\n')}\\n`;\n    }\n  }\n\n  asSendTransactionError() {\n    return this.cause;\n  }\n\n  get error() {\n    return this.asSendTransactionError().message;\n  }\n\n  get errorLogs() {\n    return this.asSendTransactionError().logs ?? [];\n  }\n\n}\n/** @group Errors */\n\n\nclass FailedToConfirmTransactionError extends RpcError {\n  constructor(cause) {\n    const message = 'The transaction could not be confirmed. ' + 'Please check the underlying error below for more details.';\n    super(message, cause);\n\n    _defineProperty(this, \"name\", 'FailedToConfirmTransactionError');\n  }\n\n}\n/** @group Errors */\n\n\nclass FailedToConfirmTransactionWithResponseError extends FailedToConfirmTransactionError {\n  constructor(response) {\n    const getMessage = error => {\n      if (!error) return 'Unknown error';\n      if (typeof error === 'string') return error;\n\n      try {\n        return JSON.stringify(error);\n      } catch (error) {\n        return 'Unknown error';\n      }\n    };\n\n    super(new Error(getMessage(response.value.err)));\n\n    _defineProperty(this, \"name\", 'FailedToConfirmTransactionWithResponseError');\n\n    this.response = response;\n  }\n\n  get error() {\n    return this.response.value.err ?? 'Unknown error';\n  }\n\n}\n\nexport { FailedToConfirmTransactionError, FailedToConfirmTransactionWithResponseError, FailedToSendTransactionError, RpcError };","map":{"version":3,"sources":["../../../src/errors/RpcError.ts"],"names":["RpcError","MetaplexError","constructor","message","cause","undefined","FailedToSendTransactionError","errorLogs","length","map","log","join","asSendTransactionError","error","logs","FailedToConfirmTransactionError","FailedToConfirmTransactionWithResponseError","response","getMessage","JSON","stringify","Error","value","err"],"mappings":";;AAIA;;AACO,MAAMA,QAAN,SAAuBC,aAAvB,CAAqC;EAE1CC,WAAW,CAACC,OAAD,EAAkBC,KAAlB,EAAiC;IAC1C,MAAMD,OAAN,EAAe,KAAf,EAAsBE,SAAtB,EAAiCD,KAAjC;;IAAwC,eAAA,CAAA,IAAA,EAAA,MAAA,EAFlB,UAEkB,CAAA;EAC1C;;AAJ0C;AAO5C;;;AACO,MAAME,4BAAN,SAA2CN,QAA3C,CAAoD;EAEzDE,WAAW,CAACE,KAAD,EAAe;IACxB,MAAMD,OAAO,GACX,oEACA,2DAFF;IAGA,MAAMA,OAAN,EAAeC,KAAf;;IAAsB,eAAA,CAAA,IAAA,EAAA,MAAA,EALA,8BAKA,CAAA;;IACtB,IAAI,KAAKG,SAAL,CAAeC,MAAf,GAAwB,CAA5B,EAA+B;MAC7B,KAAKL,OAAL,GACE,KAAKA,OAAL,GACC,oBAAmB,KAAKI,SAAL,CACjBE,GADiB,CACZC,GAAG,IAAK,OAAOA,GADH,EAEjBC,IAFiB,CAEZ,IAFY,CAEH,IAJnB;IAKF;EACF;;EAEOC,sBAAsB,GAAyB;IACpD,OAAO,KAAKR,KAAZ;EACF;;EAEgB,IAALS,KAAK,GAAG;IACjB,OAAO,KAAKD,sBAAL,GAA8BT,OAArC;EACF;;EAEoB,IAATI,SAAS,GAAG;IACrB,OAAO,KAAKK,sBAAL,GAA8BE,IAA9B,IAAsC,EAA7C;EACF;;AA1ByD;AA6B3D;;;AACO,MAAMC,+BAAN,SAA8Cf,QAA9C,CAAuD;EAE5DE,WAAW,CAACE,KAAD,EAAe;IACxB,MAAMD,OAAO,GACX,6CACA,2DAFF;IAGA,MAAMA,OAAN,EAAeC,KAAf;;IAAsB,eAAA,CAAA,IAAA,EAAA,MAAA,EALA,iCAKA,CAAA;EACxB;;AAP4D;AAU9D;;;AACO,MAAMY,2CAAN,SAA0DD,+BAA1D,CAA0F;EAI/Fb,WAAW,CAACe,QAAD,EAAuC;IAChD,MAAMC,UAAU,GAAIL,KAA8B,IAAa;MAC7D,IAAI,CAACA,KAAL,EAAY,OAAO,eAAP;MACZ,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAOA,KAAP;;MAC/B,IAAI;QACF,OAAOM,IAAI,CAACC,SAALD,CAAeN,KAAfM,CAAP;MACD,CAFD,CAEE,OAAON,KAAP,EAAc;QACd,OAAO,eAAP;MACF;IACD,CARD;;IAUA,MAAM,IAAIQ,KAAJ,CAAUH,UAAU,CAACD,QAAQ,CAACK,KAATL,CAAeM,GAAhB,CAApB,CAAN;;IAAiD,eAAA,CAAA,IAAA,EAAA,MAAA,EAd3B,6CAc2B,CAAA;;IACjD,KAAKN,QAAL,GAAgBA,QAAhB;EACF;;EAEgB,IAALJ,KAAK,GAAqB;IACnC,OAAO,KAAKI,QAAL,CAAcK,KAAd,CAAoBC,GAApB,IAA2B,eAAlC;EACF;;AArB+F","sourcesContent":["import { SendTransactionError, TransactionError } from '@solana/web3.js';\nimport { MetaplexError } from './MetaplexError';\nimport type { ConfirmTransactionResponse } from '@/plugins/rpcModule';\n\n/** @group Errors */\nexport class RpcError extends MetaplexError {\n  readonly name: string = 'RpcError';\n  constructor(message: string, cause?: Error) {\n    super(message, 'rpc', undefined, cause);\n  }\n}\n\n/** @group Errors */\nexport class FailedToSendTransactionError extends RpcError {\n  readonly name: string = 'FailedToSendTransactionError';\n  constructor(cause: Error) {\n    const message =\n      'The transaction could not be sent successfully to the network. ' +\n      'Please check the underlying error below for more details.';\n    super(message, cause);\n    if (this.errorLogs.length > 0) {\n      this.message =\n        this.message +\n        `\\nProgram Logs:\\n${this.errorLogs\n          .map((log) => '| ' + log)\n          .join('\\n')}\\n`;\n    }\n  }\n\n  public asSendTransactionError(): SendTransactionError {\n    return this.cause as SendTransactionError;\n  }\n\n  public get error() {\n    return this.asSendTransactionError().message;\n  }\n\n  public get errorLogs() {\n    return this.asSendTransactionError().logs ?? [];\n  }\n}\n\n/** @group Errors */\nexport class FailedToConfirmTransactionError extends RpcError {\n  readonly name: string = 'FailedToConfirmTransactionError';\n  constructor(cause: Error) {\n    const message =\n      'The transaction could not be confirmed. ' +\n      'Please check the underlying error below for more details.';\n    super(message, cause);\n  }\n}\n\n/** @group Errors */\nexport class FailedToConfirmTransactionWithResponseError extends FailedToConfirmTransactionError {\n  readonly name: string = 'FailedToConfirmTransactionWithResponseError';\n  readonly response: ConfirmTransactionResponse;\n\n  constructor(response: ConfirmTransactionResponse) {\n    const getMessage = (error: TransactionError | null): string => {\n      if (!error) return 'Unknown error';\n      if (typeof error === 'string') return error;\n      try {\n        return JSON.stringify(error);\n      } catch (error) {\n        return 'Unknown error';\n      }\n    };\n\n    super(new Error(getMessage(response.value.err)));\n    this.response = response;\n  }\n\n  public get error(): TransactionError {\n    return this.response.value.err ?? 'Unknown error';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}