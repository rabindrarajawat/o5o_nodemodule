{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _SolanaWalletAdapterWalletAccount_adapter, _SolanaWalletAdapterWallet_instances, _SolanaWalletAdapterWallet_listeners, _SolanaWalletAdapterWallet_adapter, _SolanaWalletAdapterWallet_supportedTransactionVersions, _SolanaWalletAdapterWallet_chain, _SolanaWalletAdapterWallet_endpoint, _SolanaWalletAdapterWallet_account, _SolanaWalletAdapterWallet_connected, _SolanaWalletAdapterWallet_disconnected, _SolanaWalletAdapterWallet_connect, _SolanaWalletAdapterWallet_disconnect, _SolanaWalletAdapterWallet_on, _SolanaWalletAdapterWallet_emit, _SolanaWalletAdapterWallet_off, _SolanaWalletAdapterWallet_deserializeTransaction, _SolanaWalletAdapterWallet_signAndSendTransaction, _SolanaWalletAdapterWallet_signTransaction, _SolanaWalletAdapterWallet_signMessage;\n\nimport { WalletReadyState } from '@solana/wallet-adapter-base';\nimport { isSolanaChain } from '@solana/wallet-standard-chains';\nimport { getEndpointForChain } from '@solana/wallet-standard-util';\nimport { Connection, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { getWallets } from '@wallet-standard/app';\nimport { arraysEqual, bytesEqual, ReadonlyWalletAccount } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\nimport { isVersionedTransaction } from './transaction.js';\n/** TODO: docs */\n\nexport class SolanaWalletAdapterWalletAccount extends ReadonlyWalletAccount {\n  constructor(_ref) {\n    let {\n      adapter: adapter,\n      address: address,\n      publicKey: publicKey,\n      chains: chains\n    } = _ref;\n    const features = ['solana:signAndSendTransaction'];\n\n    if ('signTransaction' in adapter) {\n      features.push('solana:signTransaction');\n    }\n\n    if ('signMessage' in adapter) {\n      features.push('solana:signMessage');\n    }\n\n    super({\n      address: address,\n      publicKey: publicKey,\n      chains: chains,\n      features: features\n    });\n\n    _SolanaWalletAdapterWalletAccount_adapter.set(this, void 0);\n\n    if (new.target === SolanaWalletAdapterWalletAccount) {\n      Object.freeze(this);\n    }\n\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWalletAccount_adapter, adapter, \"f\");\n  }\n\n}\n_SolanaWalletAdapterWalletAccount_adapter = new WeakMap();\n/** TODO: docs */\n\nexport class SolanaWalletAdapterWallet {\n  constructor(adapter, chain, endpoint) {\n    var _this = this;\n\n    _SolanaWalletAdapterWallet_instances.add(this);\n\n    _SolanaWalletAdapterWallet_listeners.set(this, {});\n\n    _SolanaWalletAdapterWallet_adapter.set(this, void 0);\n\n    _SolanaWalletAdapterWallet_supportedTransactionVersions.set(this, void 0);\n\n    _SolanaWalletAdapterWallet_chain.set(this, void 0);\n\n    _SolanaWalletAdapterWallet_endpoint.set(this, void 0);\n\n    _SolanaWalletAdapterWallet_account.set(this, void 0);\n\n    _SolanaWalletAdapterWallet_connect.set(this, async function () {\n      let {\n        silent: silent\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!silent && !__classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\").connected) {\n        await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\").connect();\n      }\n\n      __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected).call(_this);\n\n      return {\n        accounts: _this.accounts\n      };\n    });\n\n    _SolanaWalletAdapterWallet_disconnect.set(this, async () => {\n      await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").disconnect();\n    });\n\n    _SolanaWalletAdapterWallet_on.set(this, (event, listener) => {\n      var _classPrivateFieldGe;\n\n      ((_classPrivateFieldGe = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event]) === null || _classPrivateFieldGe === void 0 ? void 0 : _classPrivateFieldGe.push(listener)) || (__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event] = [listener]);\n      return () => __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_off).call(this, event, listener);\n    });\n\n    _SolanaWalletAdapterWallet_signAndSendTransaction.set(this, async function () {\n      const outputs = [];\n\n      for (var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++) {\n        inputs[_key] = arguments[_key];\n      }\n\n      if (inputs.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const input = inputs[0];\n        if (input.account !== __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_account, \"f\")) throw new Error('invalid account');\n        if (!isSolanaChain(input.chain)) throw new Error('invalid chain');\n\n        const transaction = __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_deserializeTransaction).call(_this, input.transaction);\n\n        const {\n          commitment: commitment,\n          preflightCommitment: preflightCommitment,\n          skipPreflight: skipPreflight,\n          maxRetries: maxRetries,\n          minContextSlot: minContextSlot\n        } = input.options || {};\n        const endpoint = getEndpointForChain(input.chain, __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_endpoint, \"f\"));\n        const connection = new Connection(endpoint, commitment || 'confirmed');\n        const latestBlockhash = commitment ? await connection.getLatestBlockhash({\n          commitment: preflightCommitment || commitment,\n          minContextSlot: minContextSlot\n        }) : undefined;\n        const signature = await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\").sendTransaction(transaction, connection, {\n          preflightCommitment: preflightCommitment,\n          skipPreflight: skipPreflight,\n          maxRetries: maxRetries,\n          minContextSlot: minContextSlot\n        });\n\n        if (latestBlockhash) {\n          await connection.confirmTransaction({ ...latestBlockhash,\n            signature: signature\n          }, commitment || 'confirmed');\n        }\n\n        outputs.push({\n          signature: bs58.decode(signature)\n        });\n      } else if (inputs.length > 1) {\n        // Adapters have no `sendAllTransactions` method, so just sign and send each transaction in serial.\n        for (const input of inputs) {\n          outputs.push(...(await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_signAndSendTransaction, \"f\").call(_this, input)));\n        }\n      }\n\n      return outputs;\n    });\n\n    _SolanaWalletAdapterWallet_signTransaction.set(this, async function () {\n      if (!('signTransaction' in __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\"))) throw new Error('signTransaction not implemented by adapter');\n      const outputs = [];\n\n      for (var _len2 = arguments.length, inputs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        inputs[_key2] = arguments[_key2];\n      }\n\n      if (inputs.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const input = inputs[0];\n        if (input.account !== __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_account, \"f\")) throw new Error('invalid account');\n        if (input.chain && !isSolanaChain(input.chain)) throw new Error('invalid chain');\n\n        const transaction = __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_deserializeTransaction).call(_this, input.transaction);\n\n        const signedTransaction = await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\").signTransaction(transaction);\n        const serializedTransaction = isVersionedTransaction(signedTransaction) ? signedTransaction.serialize() : new Uint8Array(signedTransaction.serialize({\n          requireAllSignatures: false,\n          verifySignatures: false\n        }));\n        outputs.push({\n          signedTransaction: serializedTransaction\n        });\n      } else if (inputs.length > 1) {\n        for (const input of inputs) {\n          if (input.account !== __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_account, \"f\")) throw new Error('invalid account');\n          if (input.chain && !isSolanaChain(input.chain)) throw new Error('invalid chain');\n        }\n\n        const transactions = inputs.map(_ref2 => {\n          let {\n            transaction: transaction\n          } = _ref2;\n          return __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_deserializeTransaction).call(_this, transaction);\n        });\n        const signedTransactions = await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\").signAllTransactions(transactions);\n        outputs.push(...signedTransactions.map(signedTransaction => {\n          const serializedTransaction = isVersionedTransaction(signedTransaction) ? signedTransaction.serialize() : new Uint8Array(signedTransaction.serialize({\n            requireAllSignatures: false,\n            verifySignatures: false\n          }));\n          return {\n            signedTransaction: serializedTransaction\n          };\n        }));\n      }\n\n      return outputs;\n    });\n\n    _SolanaWalletAdapterWallet_signMessage.set(this, async function () {\n      if (!('signMessage' in __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\"))) throw new Error('signMessage not implemented by adapter');\n      const outputs = [];\n\n      for (var _len3 = arguments.length, inputs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        inputs[_key3] = arguments[_key3];\n      }\n\n      if (inputs.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const input = inputs[0];\n        if (input.account !== __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_account, \"f\")) throw new Error('invalid account');\n        const signature = await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\").signMessage(input.message);\n        outputs.push({\n          signedMessage: input.message,\n          signature: signature\n        });\n      } else if (inputs.length > 1) {\n        // Adapters have no `signAllMessages` method, so just sign each message in serial.\n        for (const input of inputs) {\n          outputs.push(...(await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_signMessage, \"f\").call(_this, input)));\n        }\n      }\n\n      return outputs;\n    });\n\n    if (new.target === SolanaWalletAdapterWallet) {\n      Object.freeze(this);\n    }\n\n    const supportedTransactionVersions = [...(adapter.supportedTransactionVersions || ['legacy'])];\n\n    if (!supportedTransactionVersions.length) {\n      supportedTransactionVersions.push('legacy');\n    }\n\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_adapter, adapter, \"f\");\n\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, supportedTransactionVersions, \"f\");\n\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_chain, chain, \"f\");\n\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_endpoint, endpoint, \"f\");\n\n    adapter.on('connect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected), this);\n    adapter.on('disconnect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_disconnected), this);\n\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected).call(this);\n  }\n\n  get version() {\n    return '1.0.0';\n  }\n\n  get name() {\n    return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").name;\n  }\n\n  get icon() {\n    return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").icon;\n  }\n\n  get chains() {\n    return [__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_chain, \"f\")];\n  }\n\n  get features() {\n    const features = {\n      'standard:connect': {\n        version: '1.0.0',\n        connect: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_connect, \"f\")\n      },\n      'standard:disconnect': {\n        version: '1.0.0',\n        disconnect: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_disconnect, \"f\")\n      },\n      'standard:events': {\n        version: '1.0.0',\n        on: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_on, \"f\")\n      },\n      'solana:signAndSendTransaction': {\n        version: '1.0.0',\n        supportedTransactionVersions: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\"),\n        signAndSendTransaction: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signAndSendTransaction, \"f\")\n      }\n    };\n    let signTransactionFeature;\n\n    if ('signTransaction' in __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\")) {\n      signTransactionFeature = {\n        'solana:signTransaction': {\n          version: '1.0.0',\n          supportedTransactionVersions: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\"),\n          signTransaction: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signTransaction, \"f\")\n        }\n      };\n    }\n\n    let signMessageFeature;\n\n    if ('signMessage' in __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\")) {\n      signMessageFeature = {\n        'solana:signMessage': {\n          version: '1.0.0',\n          signMessage: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signMessage, \"f\")\n        }\n      };\n    }\n\n    return { ...features,\n      ...signTransactionFeature,\n      ...signMessageFeature\n    };\n  }\n\n  get accounts() {\n    return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\") ? [__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\")] : [];\n  }\n\n  get endpoint() {\n    return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_endpoint, \"f\");\n  }\n\n  destroy() {\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").off('connect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected), this);\n\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").off('disconnect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_disconnected), this);\n  }\n\n}\n_SolanaWalletAdapterWallet_listeners = new WeakMap(), _SolanaWalletAdapterWallet_adapter = new WeakMap(), _SolanaWalletAdapterWallet_supportedTransactionVersions = new WeakMap(), _SolanaWalletAdapterWallet_chain = new WeakMap(), _SolanaWalletAdapterWallet_endpoint = new WeakMap(), _SolanaWalletAdapterWallet_account = new WeakMap(), _SolanaWalletAdapterWallet_connect = new WeakMap(), _SolanaWalletAdapterWallet_disconnect = new WeakMap(), _SolanaWalletAdapterWallet_on = new WeakMap(), _SolanaWalletAdapterWallet_signAndSendTransaction = new WeakMap(), _SolanaWalletAdapterWallet_signTransaction = new WeakMap(), _SolanaWalletAdapterWallet_signMessage = new WeakMap(), _SolanaWalletAdapterWallet_instances = new WeakSet(), _SolanaWalletAdapterWallet_connected = function _SolanaWalletAdapterWallet_connected() {\n  var _classPrivateFieldGe2;\n\n  const publicKey = (_classPrivateFieldGe2 = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").publicKey) === null || _classPrivateFieldGe2 === void 0 ? void 0 : _classPrivateFieldGe2.toBytes();\n\n  if (publicKey) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const address = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").publicKey.toBase58();\n\n    const account = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\");\n\n    if (!account || account.address !== address || account.chains.includes(__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_chain, \"f\")) || !bytesEqual(account.publicKey, publicKey)) {\n      __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_account, new SolanaWalletAdapterWalletAccount({\n        adapter: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\"),\n        address: address,\n        publicKey: publicKey,\n        chains: [__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_chain, \"f\")]\n      }), \"f\");\n\n      __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_emit).call(this, 'change', {\n        accounts: this.accounts\n      });\n    }\n  }\n}, _SolanaWalletAdapterWallet_disconnected = function _SolanaWalletAdapterWallet_disconnected() {\n  if (__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\")) {\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_account, undefined, \"f\");\n\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_emit).call(this, 'change', {\n      accounts: this.accounts\n    });\n  }\n}, _SolanaWalletAdapterWallet_emit = function _SolanaWalletAdapterWallet_emit(event) {\n  var _classPrivateFieldGe3;\n\n  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    args[_key4 - 1] = arguments[_key4];\n  }\n\n  // eslint-disable-next-line prefer-spread\n  (_classPrivateFieldGe3 = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event]) === null || _classPrivateFieldGe3 === void 0 ? void 0 : _classPrivateFieldGe3.forEach(listener => listener.apply(null, args));\n}, _SolanaWalletAdapterWallet_off = function _SolanaWalletAdapterWallet_off(event, listener) {\n  var _classPrivateFieldGe4;\n\n  __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event] = (_classPrivateFieldGe4 = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event]) === null || _classPrivateFieldGe4 === void 0 ? void 0 : _classPrivateFieldGe4.filter(existingListener => listener !== existingListener);\n}, _SolanaWalletAdapterWallet_deserializeTransaction = function _SolanaWalletAdapterWallet_deserializeTransaction(serializedTransaction) {\n  const transaction = VersionedTransaction.deserialize(serializedTransaction);\n  if (!__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\").includes(transaction.version)) throw new Error('unsupported transaction version');\n  if (transaction.version === 'legacy' && arraysEqual(__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\"), ['legacy'])) return Transaction.from(serializedTransaction);\n  return transaction;\n};\n/** TODO: docs */\n\nexport function registerWalletAdapter(adapter, chain, endpoint) {\n  let match = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : wallet => wallet.name === adapter.name;\n  const {\n    register: register,\n    get: get,\n    on: on\n  } = getWallets();\n  const destructors = [];\n\n  function destroy() {\n    destructors.forEach(destroy => destroy());\n    destructors.length = 0;\n  }\n\n  function setup() {\n    // If the adapter is unsupported, or a standard wallet that matches it has already been registered, do nothing.\n    if (adapter.readyState === WalletReadyState.Unsupported || get().some(match)) return true; // If the adapter isn't ready, try again later.\n\n    const ready = adapter.readyState === WalletReadyState.Installed || adapter.readyState === WalletReadyState.Loadable;\n\n    if (ready) {\n      const wallet = new SolanaWalletAdapterWallet(adapter, chain, endpoint);\n      destructors.push(() => wallet.destroy()); // Register the adapter wrapped as a standard wallet, and receive a function to unregister the adapter.\n\n      destructors.push(register(wallet)); // Whenever a standard wallet is registered ...\n\n      destructors.push(on('register', function () {\n        for (var _len5 = arguments.length, wallets = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          wallets[_key5] = arguments[_key5];\n        }\n\n        // ... check if it matches the adapter.\n        if (wallets.some(match)) {\n          // If it does, remove the event listener and unregister the adapter.\n          destroy();\n        }\n      }));\n    }\n\n    return ready;\n  }\n\n  if (!setup()) {\n    function listener() {\n      if (setup()) {\n        adapter.off('readyStateChange', listener);\n      }\n    }\n\n    adapter.on('readyStateChange', listener);\n    destructors.push(() => adapter.off('readyStateChange', listener));\n  }\n\n  return destroy;\n}","map":{"version":3,"sources":["../../src/wallet.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SolanaWalletAdapterWalletAccount_adapter, _SolanaWalletAdapterWallet_instances, _SolanaWalletAdapterWallet_listeners, _SolanaWalletAdapterWallet_adapter, _SolanaWalletAdapterWallet_supportedTransactionVersions, _SolanaWalletAdapterWallet_chain, _SolanaWalletAdapterWallet_endpoint, _SolanaWalletAdapterWallet_account, _SolanaWalletAdapterWallet_connected, _SolanaWalletAdapterWallet_disconnected, _SolanaWalletAdapterWallet_connect, _SolanaWalletAdapterWallet_disconnect, _SolanaWalletAdapterWallet_on, _SolanaWalletAdapterWallet_emit, _SolanaWalletAdapterWallet_off, _SolanaWalletAdapterWallet_deserializeTransaction, _SolanaWalletAdapterWallet_signAndSendTransaction, _SolanaWalletAdapterWallet_signTransaction, _SolanaWalletAdapterWallet_signMessage;\nimport { WalletReadyState } from '@solana/wallet-adapter-base';\nimport { isSolanaChain } from '@solana/wallet-standard-chains';\nimport { getEndpointForChain } from '@solana/wallet-standard-util';\nimport { Connection, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { getWallets } from '@wallet-standard/app';\nimport { arraysEqual, bytesEqual, ReadonlyWalletAccount } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\nimport { isVersionedTransaction } from './transaction.js';\n/** TODO: docs */\nexport class SolanaWalletAdapterWalletAccount extends ReadonlyWalletAccount {\n    constructor({ adapter, address, publicKey, chains, }) {\n        const features = ['solana:signAndSendTransaction'];\n        if ('signTransaction' in adapter) {\n            features.push('solana:signTransaction');\n        }\n        if ('signMessage' in adapter) {\n            features.push('solana:signMessage');\n        }\n        super({ address, publicKey, chains, features });\n        _SolanaWalletAdapterWalletAccount_adapter.set(this, void 0);\n        if (new.target === SolanaWalletAdapterWalletAccount) {\n            Object.freeze(this);\n        }\n        __classPrivateFieldSet(this, _SolanaWalletAdapterWalletAccount_adapter, adapter, \"f\");\n    }\n}\n_SolanaWalletAdapterWalletAccount_adapter = new WeakMap();\n/** TODO: docs */\nexport class SolanaWalletAdapterWallet {\n    constructor(adapter, chain, endpoint) {\n        _SolanaWalletAdapterWallet_instances.add(this);\n        _SolanaWalletAdapterWallet_listeners.set(this, {});\n        _SolanaWalletAdapterWallet_adapter.set(this, void 0);\n        _SolanaWalletAdapterWallet_supportedTransactionVersions.set(this, void 0);\n        _SolanaWalletAdapterWallet_chain.set(this, void 0);\n        _SolanaWalletAdapterWallet_endpoint.set(this, void 0);\n        _SolanaWalletAdapterWallet_account.set(this, void 0);\n        _SolanaWalletAdapterWallet_connect.set(this, async ({ silent } = {}) => {\n            if (!silent && !__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").connected) {\n                await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").connect();\n            }\n            __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected).call(this);\n            return { accounts: this.accounts };\n        });\n        _SolanaWalletAdapterWallet_disconnect.set(this, async () => {\n            await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").disconnect();\n        });\n        _SolanaWalletAdapterWallet_on.set(this, (event, listener) => {\n            __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event]?.push(listener) || (__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event] = [listener]);\n            return () => __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_off).call(this, event, listener);\n        });\n        _SolanaWalletAdapterWallet_signAndSendTransaction.set(this, async (...inputs) => {\n            const outputs = [];\n            if (inputs.length === 1) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const input = inputs[0];\n                if (input.account !== __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\"))\n                    throw new Error('invalid account');\n                if (!isSolanaChain(input.chain))\n                    throw new Error('invalid chain');\n                const transaction = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_deserializeTransaction).call(this, input.transaction);\n                const { commitment, preflightCommitment, skipPreflight, maxRetries, minContextSlot } = input.options || {};\n                const endpoint = getEndpointForChain(input.chain, __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_endpoint, \"f\"));\n                const connection = new Connection(endpoint, commitment || 'confirmed');\n                const latestBlockhash = commitment\n                    ? await connection.getLatestBlockhash({\n                        commitment: preflightCommitment || commitment,\n                        minContextSlot,\n                    })\n                    : undefined;\n                const signature = await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").sendTransaction(transaction, connection, {\n                    preflightCommitment,\n                    skipPreflight,\n                    maxRetries,\n                    minContextSlot,\n                });\n                if (latestBlockhash) {\n                    await connection.confirmTransaction({\n                        ...latestBlockhash,\n                        signature,\n                    }, commitment || 'confirmed');\n                }\n                outputs.push({ signature: bs58.decode(signature) });\n            }\n            else if (inputs.length > 1) {\n                // Adapters have no `sendAllTransactions` method, so just sign and send each transaction in serial.\n                for (const input of inputs) {\n                    outputs.push(...(await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signAndSendTransaction, \"f\").call(this, input)));\n                }\n            }\n            return outputs;\n        });\n        _SolanaWalletAdapterWallet_signTransaction.set(this, async (...inputs) => {\n            if (!('signTransaction' in __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\")))\n                throw new Error('signTransaction not implemented by adapter');\n            const outputs = [];\n            if (inputs.length === 1) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const input = inputs[0];\n                if (input.account !== __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\"))\n                    throw new Error('invalid account');\n                if (input.chain && !isSolanaChain(input.chain))\n                    throw new Error('invalid chain');\n                const transaction = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_deserializeTransaction).call(this, input.transaction);\n                const signedTransaction = await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").signTransaction(transaction);\n                const serializedTransaction = isVersionedTransaction(signedTransaction)\n                    ? signedTransaction.serialize()\n                    : new Uint8Array(signedTransaction.serialize({\n                        requireAllSignatures: false,\n                        verifySignatures: false,\n                    }));\n                outputs.push({ signedTransaction: serializedTransaction });\n            }\n            else if (inputs.length > 1) {\n                for (const input of inputs) {\n                    if (input.account !== __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\"))\n                        throw new Error('invalid account');\n                    if (input.chain && !isSolanaChain(input.chain))\n                        throw new Error('invalid chain');\n                }\n                const transactions = inputs.map(({ transaction }) => __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_deserializeTransaction).call(this, transaction));\n                const signedTransactions = await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").signAllTransactions(transactions);\n                outputs.push(...signedTransactions.map((signedTransaction) => {\n                    const serializedTransaction = isVersionedTransaction(signedTransaction)\n                        ? signedTransaction.serialize()\n                        : new Uint8Array(signedTransaction.serialize({\n                            requireAllSignatures: false,\n                            verifySignatures: false,\n                        }));\n                    return { signedTransaction: serializedTransaction };\n                }));\n            }\n            return outputs;\n        });\n        _SolanaWalletAdapterWallet_signMessage.set(this, async (...inputs) => {\n            if (!('signMessage' in __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\")))\n                throw new Error('signMessage not implemented by adapter');\n            const outputs = [];\n            if (inputs.length === 1) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const input = inputs[0];\n                if (input.account !== __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\"))\n                    throw new Error('invalid account');\n                const signature = await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").signMessage(input.message);\n                outputs.push({ signedMessage: input.message, signature });\n            }\n            else if (inputs.length > 1) {\n                // Adapters have no `signAllMessages` method, so just sign each message in serial.\n                for (const input of inputs) {\n                    outputs.push(...(await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signMessage, \"f\").call(this, input)));\n                }\n            }\n            return outputs;\n        });\n        if (new.target === SolanaWalletAdapterWallet) {\n            Object.freeze(this);\n        }\n        const supportedTransactionVersions = [...(adapter.supportedTransactionVersions || ['legacy'])];\n        if (!supportedTransactionVersions.length) {\n            supportedTransactionVersions.push('legacy');\n        }\n        __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_adapter, adapter, \"f\");\n        __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, supportedTransactionVersions, \"f\");\n        __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_chain, chain, \"f\");\n        __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_endpoint, endpoint, \"f\");\n        adapter.on('connect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected), this);\n        adapter.on('disconnect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_disconnected), this);\n        __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected).call(this);\n    }\n    get version() {\n        return '1.0.0';\n    }\n    get name() {\n        return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").name;\n    }\n    get icon() {\n        return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").icon;\n    }\n    get chains() {\n        return [__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_chain, \"f\")];\n    }\n    get features() {\n        const features = {\n            'standard:connect': {\n                version: '1.0.0',\n                connect: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_connect, \"f\"),\n            },\n            'standard:disconnect': {\n                version: '1.0.0',\n                disconnect: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_disconnect, \"f\"),\n            },\n            'standard:events': {\n                version: '1.0.0',\n                on: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_on, \"f\"),\n            },\n            'solana:signAndSendTransaction': {\n                version: '1.0.0',\n                supportedTransactionVersions: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\"),\n                signAndSendTransaction: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signAndSendTransaction, \"f\"),\n            },\n        };\n        let signTransactionFeature;\n        if ('signTransaction' in __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\")) {\n            signTransactionFeature = {\n                'solana:signTransaction': {\n                    version: '1.0.0',\n                    supportedTransactionVersions: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\"),\n                    signTransaction: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signTransaction, \"f\"),\n                },\n            };\n        }\n        let signMessageFeature;\n        if ('signMessage' in __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\")) {\n            signMessageFeature = {\n                'solana:signMessage': {\n                    version: '1.0.0',\n                    signMessage: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signMessage, \"f\"),\n                },\n            };\n        }\n        return { ...features, ...signTransactionFeature, ...signMessageFeature };\n    }\n    get accounts() {\n        return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\") ? [__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\")] : [];\n    }\n    get endpoint() {\n        return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_endpoint, \"f\");\n    }\n    destroy() {\n        __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").off('connect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected), this);\n        __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").off('disconnect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_disconnected), this);\n    }\n}\n_SolanaWalletAdapterWallet_listeners = new WeakMap(), _SolanaWalletAdapterWallet_adapter = new WeakMap(), _SolanaWalletAdapterWallet_supportedTransactionVersions = new WeakMap(), _SolanaWalletAdapterWallet_chain = new WeakMap(), _SolanaWalletAdapterWallet_endpoint = new WeakMap(), _SolanaWalletAdapterWallet_account = new WeakMap(), _SolanaWalletAdapterWallet_connect = new WeakMap(), _SolanaWalletAdapterWallet_disconnect = new WeakMap(), _SolanaWalletAdapterWallet_on = new WeakMap(), _SolanaWalletAdapterWallet_signAndSendTransaction = new WeakMap(), _SolanaWalletAdapterWallet_signTransaction = new WeakMap(), _SolanaWalletAdapterWallet_signMessage = new WeakMap(), _SolanaWalletAdapterWallet_instances = new WeakSet(), _SolanaWalletAdapterWallet_connected = function _SolanaWalletAdapterWallet_connected() {\n    const publicKey = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").publicKey?.toBytes();\n    if (publicKey) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const address = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").publicKey.toBase58();\n        const account = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\");\n        if (!account ||\n            account.address !== address ||\n            account.chains.includes(__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_chain, \"f\")) ||\n            !bytesEqual(account.publicKey, publicKey)) {\n            __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_account, new SolanaWalletAdapterWalletAccount({\n                adapter: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\"),\n                address,\n                publicKey,\n                chains: [__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_chain, \"f\")],\n            }), \"f\");\n            __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_emit).call(this, 'change', { accounts: this.accounts });\n        }\n    }\n}, _SolanaWalletAdapterWallet_disconnected = function _SolanaWalletAdapterWallet_disconnected() {\n    if (__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\")) {\n        __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_account, undefined, \"f\");\n        __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_emit).call(this, 'change', { accounts: this.accounts });\n    }\n}, _SolanaWalletAdapterWallet_emit = function _SolanaWalletAdapterWallet_emit(event, ...args) {\n    // eslint-disable-next-line prefer-spread\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event]?.forEach((listener) => listener.apply(null, args));\n}, _SolanaWalletAdapterWallet_off = function _SolanaWalletAdapterWallet_off(event, listener) {\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event] = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event]?.filter((existingListener) => listener !== existingListener);\n}, _SolanaWalletAdapterWallet_deserializeTransaction = function _SolanaWalletAdapterWallet_deserializeTransaction(serializedTransaction) {\n    const transaction = VersionedTransaction.deserialize(serializedTransaction);\n    if (!__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\").includes(transaction.version))\n        throw new Error('unsupported transaction version');\n    if (transaction.version === 'legacy' && arraysEqual(__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\"), ['legacy']))\n        return Transaction.from(serializedTransaction);\n    return transaction;\n};\n/** TODO: docs */\nexport function registerWalletAdapter(adapter, chain, endpoint, match = (wallet) => wallet.name === adapter.name) {\n    const { register, get, on } = getWallets();\n    const destructors = [];\n    function destroy() {\n        destructors.forEach((destroy) => destroy());\n        destructors.length = 0;\n    }\n    function setup() {\n        // If the adapter is unsupported, or a standard wallet that matches it has already been registered, do nothing.\n        if (adapter.readyState === WalletReadyState.Unsupported || get().some(match))\n            return true;\n        // If the adapter isn't ready, try again later.\n        const ready = adapter.readyState === WalletReadyState.Installed || adapter.readyState === WalletReadyState.Loadable;\n        if (ready) {\n            const wallet = new SolanaWalletAdapterWallet(adapter, chain, endpoint);\n            destructors.push(() => wallet.destroy());\n            // Register the adapter wrapped as a standard wallet, and receive a function to unregister the adapter.\n            destructors.push(register(wallet));\n            // Whenever a standard wallet is registered ...\n            destructors.push(on('register', (...wallets) => {\n                // ... check if it matches the adapter.\n                if (wallets.some(match)) {\n                    // If it does, remove the event listener and unregister the adapter.\n                    destroy();\n                }\n            }));\n        }\n        return ready;\n    }\n    if (!setup()) {\n        function listener() {\n            if (setup()) {\n                adapter.off('readyStateChange', listener);\n            }\n        }\n        adapter.on('readyStateChange', listener);\n        destructors.push(() => adapter.off('readyStateChange', listener));\n    }\n    return destroy;\n}\n//# sourceMappingURL=wallet.js.map"]},"metadata":{},"sourceType":"module"}