{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createDisableRequiredMemoTransfersInstruction, createEnableRequiredMemoTransfersInstruction } from './instructions.js';\n/**\n * Enable memo transfers on the given account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to modify\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function enableRequiredMemoTransfers(connection, payer, account, owner) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let confirmOptions = arguments.length > 5 ? arguments[5] : undefined;\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : TOKEN_2022_PROGRAM_ID;\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createEnableRequiredMemoTransfersInstruction(account, ownerPublicKey, signers, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Disable memo transfers on the given account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to modify\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function disableRequiredMemoTransfers(connection, payer, account, owner) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let confirmOptions = arguments.length > 5 ? arguments[5] : undefined;\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : TOKEN_2022_PROGRAM_ID;\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createDisableRequiredMemoTransfersInstruction(account, ownerPublicKey, signers, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"sources":["../../../../src/extensions/memoTransfer/actions.ts"],"names":[],"mappings":"AACA,SAAS,yBAAT,EAAoC,WAApC,QAAuD,iBAAvD;AACA,SAAS,UAAT,QAA2B,2BAA3B;AACA,SAAS,qBAAT,QAAsC,oBAAtC;AACA,SACI,6CADJ,EAEI,4CAFJ,QAGO,mBAHP;AAKA;;;;;;;;;;;;AAYG;;AACH,OAAO,eAAe,2BAAf,CACH,UADG,EAEH,KAFG,EAGH,OAHG,EAIH,KAJG,EAO8B;EAAA,IAFjC,YAEiC,uEAFR,EAEQ;EAAA,IADjC,cACiC;EAAA,IAAjC,SAAiC,uEAArB,qBAAqB;EAEjC,MAAM,CAAC,cAAD,EAAiB,OAAjB,IAA4B,UAAU,CAAC,KAAD,EAAQ,YAAR,CAA5C;EAEA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,4CAA4C,CAAC,OAAD,EAAU,cAAV,EAA0B,OAA1B,EAAmC,SAAnC,CAD5B,CAApB;EAIA,OAAO,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,EAAQ,GAAG,OAAX,CAA1B,EAA+C,cAA/C,CAAtC;AACH;AAED;;;;;;;;;;;;AAYG;;AACH,OAAO,eAAe,4BAAf,CACH,UADG,EAEH,KAFG,EAGH,OAHG,EAIH,KAJG,EAO8B;EAAA,IAFjC,YAEiC,uEAFR,EAEQ;EAAA,IADjC,cACiC;EAAA,IAAjC,SAAiC,uEAArB,qBAAqB;EAEjC,MAAM,CAAC,cAAD,EAAiB,OAAjB,IAA4B,UAAU,CAAC,KAAD,EAAQ,YAAR,CAA5C;EAEA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,6CAA6C,CAAC,OAAD,EAAU,cAAV,EAA0B,OAA1B,EAAmC,SAAnC,CAD7B,CAApB;EAIA,OAAO,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,EAAQ,GAAG,OAAX,CAA1B,EAA+C,cAA/C,CAAtC;AACH","sourceRoot":"","sourcesContent":["import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { getSigners } from '../../actions/internal.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { createDisableRequiredMemoTransfersInstruction, createEnableRequiredMemoTransfersInstruction, } from './instructions.js';\n/**\n * Enable memo transfers on the given account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to modify\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function enableRequiredMemoTransfers(connection, payer, account, owner, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n    const transaction = new Transaction().add(createEnableRequiredMemoTransfersInstruction(account, ownerPublicKey, signers, programId));\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n/**\n * Disable memo transfers on the given account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to modify\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function disableRequiredMemoTransfers(connection, payer, account, owner, multiSigners = [], confirmOptions, programId = TOKEN_2022_PROGRAM_ID) {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n    const transaction = new Transaction().add(createDisableRequiredMemoTransfersInstruction(account, ownerPublicKey, signers, programId));\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n//# sourceMappingURL=actions.js.map"]},"metadata":{},"sourceType":"module"}