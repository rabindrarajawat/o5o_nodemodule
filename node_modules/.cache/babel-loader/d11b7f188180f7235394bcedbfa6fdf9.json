{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAssociatedTokenAccountIdempotentInstruction = exports.createAssociatedTokenAccountInstruction = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n/**\n * Construct a CreateAssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\n\n\nfunction createAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint) {\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.TOKEN_PROGRAM_ID;\n  let associatedTokenProgramId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID;\n  return buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, Buffer.alloc(0), programId, associatedTokenProgramId);\n}\n\nexports.createAssociatedTokenAccountInstruction = createAssociatedTokenAccountInstruction;\n/**\n * Construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createAssociatedTokenAccountIdempotentInstruction(payer, associatedToken, owner, mint) {\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.TOKEN_PROGRAM_ID;\n  let associatedTokenProgramId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID;\n  return buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, Buffer.from([1]), programId, associatedTokenProgramId);\n}\n\nexports.createAssociatedTokenAccountIdempotentInstruction = createAssociatedTokenAccountIdempotentInstruction;\n\nfunction buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, instructionData) {\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_js_1.TOKEN_PROGRAM_ID;\n  let associatedTokenProgramId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: associatedToken,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: owner,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId: associatedTokenProgramId,\n    data: instructionData\n  });\n}","map":{"version":3,"sources":["../../../src/instructions/associatedTokenAccount.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AAEA;;;;;;;;;;;AAWG;;;AACH,SAAgB,uCAAhB,CACI,KADJ,EAEI,eAFJ,EAGI,KAHJ,EAII,IAJJ,EAM0D;EAAA,IADtD,SACsD,uEAD1C,cAAA,CAAA,gBAC0C;EAAA,IAAtD,wBAAsD,uEAA3B,cAAA,CAAA,2BAA2B;EAEtD,OAAO,sCAAsC,CACzC,KADyC,EAEzC,eAFyC,EAGzC,KAHyC,EAIzC,IAJyC,EAKzC,MAAM,CAAC,KAAP,CAAa,CAAb,CALyC,EAMzC,SANyC,EAOzC,wBAPyC,CAA7C;AASH;;AAjBD,OAAA,CAAA,uCAAA,GAAA,uCAAA;AAmBA;;;;;;;;;;;AAWG;;AACH,SAAgB,iDAAhB,CACI,KADJ,EAEI,eAFJ,EAGI,KAHJ,EAII,IAJJ,EAM0D;EAAA,IADtD,SACsD,uEAD1C,cAAA,CAAA,gBAC0C;EAAA,IAAtD,wBAAsD,uEAA3B,cAAA,CAAA,2BAA2B;EAEtD,OAAO,sCAAsC,CACzC,KADyC,EAEzC,eAFyC,EAGzC,KAHyC,EAIzC,IAJyC,EAKzC,MAAM,CAAC,IAAP,CAAY,CAAC,CAAD,CAAZ,CALyC,EAMzC,SANyC,EAOzC,wBAPyC,CAA7C;AASH;;AAjBD,OAAA,CAAA,iDAAA,GAAA,iDAAA;;AAmBA,SAAS,sCAAT,CACI,KADJ,EAEI,eAFJ,EAGI,KAHJ,EAII,IAJJ,EAKI,eALJ,EAO0D;EAAA,IADtD,SACsD,uEAD1C,cAAA,CAAA,gBAC0C;EAAA,IAAtD,wBAAsD,uEAA3B,cAAA,CAAA,2BAA2B;EAEtD,MAAM,IAAI,GAAG,CACT;IAAE,MAAM,EAAE,KAAV;IAAiB,QAAQ,EAAE,IAA3B;IAAiC,UAAU,EAAE;EAA7C,CADS,EAET;IAAE,MAAM,EAAE,eAAV;IAA2B,QAAQ,EAAE,KAArC;IAA4C,UAAU,EAAE;EAAxD,CAFS,EAGT;IAAE,MAAM,EAAE,KAAV;IAAiB,QAAQ,EAAE,KAA3B;IAAkC,UAAU,EAAE;EAA9C,CAHS,EAIT;IAAE,MAAM,EAAE,IAAV;IAAgB,QAAQ,EAAE,KAA1B;IAAiC,UAAU,EAAE;EAA7C,CAJS,EAKT;IAAE,MAAM,EAAE,SAAA,CAAA,aAAA,CAAc,SAAxB;IAAmC,QAAQ,EAAE,KAA7C;IAAoD,UAAU,EAAE;EAAhE,CALS,EAMT;IAAE,MAAM,EAAE,SAAV;IAAqB,QAAQ,EAAE,KAA/B;IAAsC,UAAU,EAAE;EAAlD,CANS,CAAb;EASA,OAAO,IAAI,SAAA,CAAA,sBAAJ,CAA2B;IAC9B,IAD8B;IAE9B,SAAS,EAAE,wBAFmB;IAG9B,IAAI,EAAE;EAHwB,CAA3B,CAAP;AAKH","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createAssociatedTokenAccountIdempotentInstruction = exports.createAssociatedTokenAccountInstruction = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\n/**\n * Construct a CreateAssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, programId = constants_js_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID) {\n    return buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, Buffer.alloc(0), programId, associatedTokenProgramId);\n}\nexports.createAssociatedTokenAccountInstruction = createAssociatedTokenAccountInstruction;\n/**\n * Construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createAssociatedTokenAccountIdempotentInstruction(payer, associatedToken, owner, mint, programId = constants_js_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID) {\n    return buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, Buffer.from([1]), programId, associatedTokenProgramId);\n}\nexports.createAssociatedTokenAccountIdempotentInstruction = createAssociatedTokenAccountIdempotentInstruction;\nfunction buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, instructionData, programId = constants_js_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedToken, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: instructionData,\n    });\n}\n//# sourceMappingURL=associatedTokenAccount.js.map"]},"metadata":{},"sourceType":"script"}