{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeApproveCheckedInstructionUnchecked = exports.decodeApproveCheckedInstruction = exports.createApproveCheckedInstruction = exports.approveCheckedInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst internal_js_1 = require(\"./internal.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\n\n\nexports.approveCheckedInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_utils_1.u64)('amount'), (0, buffer_layout_1.u8)('decimals')]);\n/**\n * Construct an ApproveChecked instruction\n *\n * @param account      Account to set the delegate for\n * @param mint         Mint account\n * @param delegate     Account authorized to transfer of tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param decimals     Number of decimals in approve amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createApproveCheckedInstruction(account, mint, delegate, owner, amount, decimals) {\n  let multiSigners = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : constants_js_1.TOKEN_PROGRAM_ID;\n  const keys = (0, internal_js_1.addSigners)([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: delegate,\n    isSigner: false,\n    isWritable: false\n  }], owner, multiSigners);\n  const data = Buffer.alloc(exports.approveCheckedInstructionData.span);\n  exports.approveCheckedInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.ApproveChecked,\n    amount: BigInt(amount),\n    decimals\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createApproveCheckedInstruction = createApproveCheckedInstruction;\n/**\n * Decode an ApproveChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeApproveCheckedInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.approveCheckedInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeApproveCheckedInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.ApproveChecked) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account || !mint || !delegate || !owner) throw new errors_js_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n\nexports.decodeApproveCheckedInstruction = decodeApproveCheckedInstruction;\n/**\n * Decode an ApproveChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeApproveCheckedInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, mint, delegate, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data: exports.approveCheckedInstructionData.decode(data)\n  };\n}\n\nexports.decodeApproveCheckedInstructionUnchecked = decodeApproveCheckedInstructionUnchecked;","map":{"version":3,"sources":["../../../src/instructions/approveChecked.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeApproveCheckedInstructionUnchecked = exports.decodeApproveCheckedInstruction = exports.createApproveCheckedInstruction = exports.approveCheckedInstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst internal_js_1 = require(\"./internal.js\");\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.approveCheckedInstructionData = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('instruction'),\n    (0, buffer_layout_utils_1.u64)('amount'),\n    (0, buffer_layout_1.u8)('decimals'),\n]);\n/**\n * Construct an ApproveChecked instruction\n *\n * @param account      Account to set the delegate for\n * @param mint         Mint account\n * @param delegate     Account authorized to transfer of tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param decimals     Number of decimals in approve amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createApproveCheckedInstruction(account, mint, delegate, owner, amount, decimals, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    const keys = (0, internal_js_1.addSigners)([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: delegate, isSigner: false, isWritable: false },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(exports.approveCheckedInstructionData.span);\n    exports.approveCheckedInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.ApproveChecked,\n        amount: BigInt(amount),\n        decimals,\n    }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createApproveCheckedInstruction = createApproveCheckedInstruction;\n/**\n * Decode an ApproveChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeApproveCheckedInstruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.approveCheckedInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { account, mint, delegate, owner, multiSigners }, data, } = decodeApproveCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.ApproveChecked)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!account || !mint || !delegate || !owner)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\nexports.decodeApproveCheckedInstruction = decodeApproveCheckedInstruction;\n/**\n * Decode an ApproveChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeApproveCheckedInstructionUnchecked({ programId, keys: [account, mint, delegate, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data: exports.approveCheckedInstructionData.decode(data),\n    };\n}\nexports.decodeApproveCheckedInstructionUnchecked = decodeApproveCheckedInstructionUnchecked;\n//# sourceMappingURL=approveChecked.js.map"]},"metadata":{},"sourceType":"script"}