{"ast":null,"code":"import { toMetadataAccount } from '../accounts.mjs';\nimport { MetadataV1GpaBuilder } from '../gpaBuilders.mjs';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { toMetadata } from '../models/Metadata.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByUpdateAuthorityOperation';\n/**\n * Finds multiple NFTs and SFTs by a given update authority.\n *\n * ```ts\n * const nfts = await metaplex\n *   .nfts()\n *   .findAllByUpdateAuthority({ updateAuthority };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst findNftsByUpdateAuthorityOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst findNftsByUpdateAuthorityOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const {\n      updateAuthority\n    } = operation.input;\n    const gpaBuilder = new MetadataV1GpaBuilder(metaplex, metaplex.programs().getTokenMetadata(scope.programs).address);\n    const nfts = await gpaBuilder.whereUpdateAuthority(updateAuthority).get();\n    scope.throwIfCanceled();\n    return nfts.map(account => {\n      if (account == null) {\n        return null;\n      }\n\n      try {\n        return toMetadata(toMetadataAccount(account));\n      } catch (error) {\n        return null;\n      }\n    }).filter(nft => nft !== null);\n  }\n};\nexport { findNftsByUpdateAuthorityOperation, findNftsByUpdateAuthorityOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/nftModule/operations/findNftsByUpdateAuthority.ts"],"names":["Key","findNftsByUpdateAuthorityOperation","useOperation","findNftsByUpdateAuthorityOperationHandler","handle","operation","metaplex","scope","updateAuthority","input","gpaBuilder","MetadataV1GpaBuilder","programs","getTokenMetadata","address","nfts","whereUpdateAuthority","get","throwIfCanceled","map","account","toMetadata","toMetadataAccount","error","filter","nft"],"mappings":";;;qDAYA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,oCAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,kCAAkC,GAC7CC,YAAY,CAAqCF,GAArC,C;AAEd;AACA;AACA;AACA;;AAsBA;AACA;AACA;AACA;;AACO,MAAMG,yCAA+F,GAC1G;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIuC;IAC7C,MAAM;MAAEC;IAAF,IAAsBH,SAAS,CAACI,KAAtC;IAEA,MAAMC,UAAU,GAAG,IAAIC,oBAAJ,CACjBL,QADiB,EAEjBA,QAAQ,CAACM,QAATN,GAAoBO,gBAApBP,CAAqCC,KAAK,CAACK,QAA3CN,EAAqDQ,OAFpC,CAAnB;IAKA,MAAMC,IAAI,GAAG,MAAML,UAAU,CAACM,oBAAXN,CAAgCF,eAAhCE,EAAiDO,GAAjDP,EAAnB;IACAH,KAAK,CAACW,eAANX;IAEA,OAAOQ,IAAI,CACRI,GADIJ,CACkBK,OAAO,IAAK;MACjC,IAAIA,OAAO,IAAI,IAAf,EAAqB;QACnB,OAAO,IAAP;MACF;;MAEA,IAAI;QACF,OAAOC,UAAU,CAACC,iBAAiB,CAACF,OAAD,CAAlB,CAAjB;MACD,CAFD,CAEE,OAAOG,KAAP,EAAc;QACd,OAAO,IAAP;MACF;IACD,CAXIR,EAYJS,MAZIT,CAYIU,GAAG,IAAsBA,GAAG,KAAK,IAZrCV,CAAP;EAaF;AA7BF,CADK","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { toMetadataAccount } from '../accounts';\nimport { MetadataV1GpaBuilder } from '../gpaBuilders';\nimport { Metadata, Nft, Sft, toMetadata } from '../models';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByUpdateAuthorityOperation' as const;\n\n/**\n * Finds multiple NFTs and SFTs by a given update authority.\n *\n * ```ts\n * const nfts = await metaplex\n *   .nfts()\n *   .findAllByUpdateAuthority({ updateAuthority };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findNftsByUpdateAuthorityOperation =\n  useOperation<FindNftsByUpdateAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindNftsByUpdateAuthorityOperation = Operation<\n  typeof Key,\n  FindNftsByUpdateAuthorityInput,\n  FindNftsByUpdateAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindNftsByUpdateAuthorityInput = {\n  /** The address of the update authority. */\n  updateAuthority: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindNftsByUpdateAuthorityOutput = (Metadata | Nft | Sft)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findNftsByUpdateAuthorityOperationHandler: OperationHandler<FindNftsByUpdateAuthorityOperation> =\n  {\n    handle: async (\n      operation: FindNftsByUpdateAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindNftsByUpdateAuthorityOutput> => {\n      const { updateAuthority } = operation.input;\n\n      const gpaBuilder = new MetadataV1GpaBuilder(\n        metaplex,\n        metaplex.programs().getTokenMetadata(scope.programs).address\n      );\n\n      const nfts = await gpaBuilder.whereUpdateAuthority(updateAuthority).get();\n      scope.throwIfCanceled();\n\n      return nfts\n        .map<Metadata | null>((account) => {\n          if (account == null) {\n            return null;\n          }\n\n          try {\n            return toMetadata(toMetadataAccount(account));\n          } catch (error) {\n            return null;\n          }\n        })\n        .filter((nft): nft is Metadata => nft !== null);\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}