{"ast":null,"code":"import { toAuctionHouseAccount, toAuctioneerAccount } from '../accounts.mjs';\nimport { AuctioneerAuthorityRequiredError } from '../errors.mjs';\nimport { toAuctionHouse } from '../models/AuctionHouse.mjs';\nimport { useOperation } from '../../../types/Operation.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindAuctionHouseByAddressOperation';\n/**\n * Finds an Auction House by its address.\n *\n * ```ts\n * const nft = await metaplex\n *   .auctionHouse()\n *   .findByAddress({ address };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst findAuctionHouseByAddressOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst findAuctionHouseByAddressOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const {\n      programs,\n      commitment\n    } = scope;\n    const {\n      address,\n      auctioneerAuthority\n    } = operation.input;\n    const auctioneerPda = auctioneerAuthority ? metaplex.auctionHouse().pdas().auctioneer({\n      auctionHouse: address,\n      auctioneerAuthority,\n      programs\n    }) : undefined;\n    const accountsToFetch = [address, auctioneerPda].filter(account => !!account);\n    const accounts = await metaplex.rpc().getMultipleAccounts(accountsToFetch, commitment);\n    scope.throwIfCanceled();\n    const auctionHouseAccount = toAuctionHouseAccount(accounts[0]);\n    const mintModel = await metaplex.tokens().findMintByAddress({\n      address: auctionHouseAccount.data.treasuryMint\n    }, scope);\n    scope.throwIfCanceled();\n\n    if (!auctionHouseAccount.data.hasAuctioneer) {\n      return toAuctionHouse(auctionHouseAccount, mintModel);\n    }\n\n    if (!accounts[1] || !accounts[1].exists) {\n      throw new AuctioneerAuthorityRequiredError();\n    }\n\n    const auctioneerAccount = toAuctioneerAccount(accounts[1]);\n    return toAuctionHouse(auctionHouseAccount, mintModel, auctioneerAccount);\n  }\n};\nexport { findAuctionHouseByAddressOperation, findAuctionHouseByAddressOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/operations/findAuctionHouseByAddress.ts"],"names":["Key","findAuctionHouseByAddressOperation","useOperation","findAuctionHouseByAddressOperationHandler","handle","operation","metaplex","scope","programs","commitment","address","auctioneerAuthority","input","auctioneerPda","auctionHouse","pdas","auctioneer","undefined","accountsToFetch","filter","account","accounts","rpc","getMultipleAccounts","throwIfCanceled","auctionHouseAccount","toAuctionHouseAccount","mintModel","tokens","findMintByAddress","data","treasuryMint","hasAuctioneer","toAuctionHouse","exists","AuctioneerAuthorityRequiredError","auctioneerAccount","toAuctioneerAccount"],"mappings":";;;6DAYA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,oCAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,kCAAkC,GAC7CC,YAAY,CAAqCF,GAArC,C;AAEd;AACA;AACA;AACA;;AAwBA;AACA;AACA;AACA;;AACO,MAAMG,yCAA+F,GAC1G;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MAAEC,QAAF;MAAYC;IAAZ,IAA2BF,KAAjC;IACA,MAAM;MAAEG,OAAF;MAAWC;IAAX,IAAmCN,SAAS,CAACO,KAAnD;IACA,MAAMC,aAAa,GAAGF,mBAAmB,GACrCL,QAAQ,CAACQ,YAATR,GAAwBS,IAAxBT,GAA+BU,UAA/BV,CAA0C;MACxCQ,YAAY,EAAEJ,OAD0B;MAExCC,mBAFwC;MAGxCH;IAHwC,CAA1CF,CADqC,GAMrCW,SANJ;IAOA,MAAMC,eAAe,GAAG,CAACR,OAAD,EAAUG,aAAV,EAAyBM,MAAzB,CACrBC,OAAO,IAA2B,CAAC,CAACA,OADf,CAAxB;IAIA,MAAMC,QAAQ,GAAG,MAAMf,QAAQ,CAC5BgB,GADoBhB,GAEpBiB,mBAFoBjB,CAEAY,eAFAZ,EAEiBG,UAFjBH,CAAvB;IAGAC,KAAK,CAACiB,eAANjB;IAEA,MAAMkB,mBAAmB,GAAGC,qBAAqB,CAACL,QAAQ,CAAC,CAAD,CAAT,CAAjD;IACA,MAAMM,SAAS,GAAG,MAAMrB,QAAQ,CAC7BsB,MADqBtB,GAErBuB,iBAFqBvB,CAGpB;MAAEI,OAAO,EAAEe,mBAAmB,CAACK,IAApBL,CAAyBM;IAApC,CAHoBzB,EAIpBC,KAJoBD,CAAxB;IAMAC,KAAK,CAACiB,eAANjB;;IAEA,IAAI,CAACkB,mBAAmB,CAACK,IAApBL,CAAyBO,aAA9B,EAA6C;MAC3C,OAAOC,cAAc,CAACR,mBAAD,EAAsBE,SAAtB,CAArB;IACF;;IAEA,IAAI,CAACN,QAAQ,CAAC,CAAD,CAAT,IAAgB,CAACA,QAAQ,CAAC,CAAD,CAARA,CAAYa,MAAjC,EAAyC;MACvC,MAAM,IAAIC,gCAAJ,EAAN;IACF;;IAEA,MAAMC,iBAAiB,GAAGC,mBAAmB,CAAChB,QAAQ,CAAC,CAAD,CAAT,CAA7C;IACA,OAAOY,cAAc,CAACR,mBAAD,EAAsBE,SAAtB,EAAiCS,iBAAjC,CAArB;EACF;AA3CF,CADK","sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { toAuctioneerAccount, toAuctionHouseAccount } from '../accounts';\nimport { AuctioneerAuthorityRequiredError } from '../errors';\nimport { AuctionHouse, toAuctionHouse } from '../models/AuctionHouse';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindAuctionHouseByAddressOperation' as const;\n\n/**\n * Finds an Auction House by its address.\n *\n * ```ts\n * const nft = await metaplex\n *   .auctionHouse()\n *   .findByAddress({ address };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findAuctionHouseByAddressOperation =\n  useOperation<FindAuctionHouseByAddressOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindAuctionHouseByAddressOperation = Operation<\n  typeof Key,\n  FindAuctionHouseByAddressInput,\n  AuctionHouse\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindAuctionHouseByAddressInput = {\n  /** The address of the Auction House. */\n  address: PublicKey;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findAuctionHouseByAddressOperationHandler: OperationHandler<FindAuctionHouseByAddressOperation> =\n  {\n    handle: async (\n      operation: FindAuctionHouseByAddressOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) => {\n      const { programs, commitment } = scope;\n      const { address, auctioneerAuthority } = operation.input;\n      const auctioneerPda = auctioneerAuthority\n        ? metaplex.auctionHouse().pdas().auctioneer({\n            auctionHouse: address,\n            auctioneerAuthority,\n            programs,\n          })\n        : undefined;\n      const accountsToFetch = [address, auctioneerPda].filter(\n        (account): account is PublicKey => !!account\n      );\n\n      const accounts = await metaplex\n        .rpc()\n        .getMultipleAccounts(accountsToFetch, commitment);\n      scope.throwIfCanceled();\n\n      const auctionHouseAccount = toAuctionHouseAccount(accounts[0]);\n      const mintModel = await metaplex\n        .tokens()\n        .findMintByAddress(\n          { address: auctionHouseAccount.data.treasuryMint },\n          scope\n        );\n      scope.throwIfCanceled();\n\n      if (!auctionHouseAccount.data.hasAuctioneer) {\n        return toAuctionHouse(auctionHouseAccount, mintModel);\n      }\n\n      if (!accounts[1] || !accounts[1].exists) {\n        throw new AuctioneerAuthorityRequiredError();\n      }\n\n      const auctioneerAccount = toAuctioneerAccount(accounts[1]);\n      return toAuctionHouse(auctionHouseAccount, mintModel, auctioneerAccount);\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}