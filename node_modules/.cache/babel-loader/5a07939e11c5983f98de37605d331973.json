{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createReverseTwitterRegistry = exports.ReverseTwitterRegistryState = exports.getTwitterRegistryData = exports.getTwitterHandleandRegistryKeyViaFilters = exports.getHandleAndRegistryKey = exports.getTwitterRegistry = exports.getTwitterRegistryKey = exports.deleteTwitterRegistry = exports.changeVerifiedPubkey = exports.changeTwitterRegistryData = exports.createVerifiedTwitterRegistry = exports.TWITTER_ROOT_PARENT_REGISTRY_KEY = exports.TWITTER_VERIFICATION_AUTHORITY = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst borsh_1 = require(\"borsh\");\n\nconst bindings_1 = require(\"./bindings\");\n\nconst instructions_1 = require(\"./instructions\");\n\nconst state_1 = require(\"./state\");\n\nconst utils_1 = require(\"./utils\"); ////////////////////////////////////////////////////\n// Global Variables\n\n\nexports.TWITTER_VERIFICATION_AUTHORITY = new web3_js_1.PublicKey('FvPH7PrVrLGKPfqaf3xJodFTjZriqrAXXLTVWEorTFBi'); // The address of the name registry that will be a parent to all twitter handle registries,\n// it should be owned by the TWITTER_VERIFICATION_AUTHORITY and its name is irrelevant\n\nexports.TWITTER_ROOT_PARENT_REGISTRY_KEY = new web3_js_1.PublicKey('4YcexoW3r78zz16J2aqmukBLRwGq6rAvWzJpkYAXqebv'); ////////////////////////////////////////////////////\n// Bindings\n// Signed by the authority, the payer and the verified pubkey\n\nasync function createVerifiedTwitterRegistry(connection, twitterHandle, verifiedPubkey, space, // The space that the user will have to write data into the verified registry\npayerKey) {\n  // Create user facing registry\n  const hashedTwitterHandle = await (0, utils_1.getHashedName)(twitterHandle);\n  const twitterHandleRegistryKey = await (0, utils_1.getNameAccountKey)(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  let instructions = [(0, instructions_1.createInstruction)(bindings_1.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, twitterHandleRegistryKey, verifiedPubkey, payerKey, hashedTwitterHandle, new utils_1.Numberu64(await connection.getMinimumBalanceForRentExemption(space)), new utils_1.Numberu32(space), undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY, exports.TWITTER_VERIFICATION_AUTHORITY // Twitter authority acts as owner of the parent for all user-facing registries\n  )];\n  instructions = instructions.concat(await createReverseTwitterRegistry(connection, twitterHandle, twitterHandleRegistryKey, verifiedPubkey, payerKey));\n  return instructions;\n}\n\nexports.createVerifiedTwitterRegistry = createVerifiedTwitterRegistry; // Overwrite the data that is written in the user facing registry\n// Signed by the verified pubkey\n\nasync function changeTwitterRegistryData(twitterHandle, verifiedPubkey, offset, // The offset at which to write the input data into the NameRegistryData\ninput_data) {\n  const hashedTwitterHandle = await (0, utils_1.getHashedName)(twitterHandle);\n  const twitterHandleRegistryKey = await (0, utils_1.getNameAccountKey)(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  const instructions = [(0, instructions_1.updateInstruction)(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, new utils_1.Numberu32(offset), input_data, verifiedPubkey, undefined)];\n  return instructions;\n}\n\nexports.changeTwitterRegistryData = changeTwitterRegistryData; // Change the verified pubkey for a given twitter handle\n// Signed by the Authority, the verified pubkey and the payer\n\nasync function changeVerifiedPubkey(connection, twitterHandle, currentVerifiedPubkey, newVerifiedPubkey, payerKey) {\n  const hashedTwitterHandle = await (0, utils_1.getHashedName)(twitterHandle);\n  const twitterHandleRegistryKey = await (0, utils_1.getNameAccountKey)(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY); // Transfer the user-facing registry ownership\n\n  let instructions = [(0, instructions_1.transferInstruction)(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, newVerifiedPubkey, currentVerifiedPubkey, undefined)]; // Delete the current reverse registry\n\n  instructions.push(await (0, bindings_1.deleteNameRegistry)(connection, currentVerifiedPubkey.toString(), payerKey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY)); // Create the new reverse registry\n\n  instructions = instructions.concat(await createReverseTwitterRegistry(connection, twitterHandle, twitterHandleRegistryKey, newVerifiedPubkey, payerKey));\n  return instructions;\n}\n\nexports.changeVerifiedPubkey = changeVerifiedPubkey; // Delete the verified registry for a given twitter handle\n// Signed by the verified pubkey\n\nasync function deleteTwitterRegistry(twitterHandle, verifiedPubkey) {\n  const hashedTwitterHandle = await (0, utils_1.getHashedName)(twitterHandle);\n  const twitterHandleRegistryKey = await (0, utils_1.getNameAccountKey)(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  const hashedVerifiedPubkey = await (0, utils_1.getHashedName)(verifiedPubkey.toString());\n  const reverseRegistryKey = await (0, utils_1.getNameAccountKey)(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  const instructions = [// Delete the user facing registry\n  (0, instructions_1.deleteInstruction)(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, verifiedPubkey, verifiedPubkey), // Delete the reverse registry\n  (0, instructions_1.deleteInstruction)(bindings_1.NAME_PROGRAM_ID, reverseRegistryKey, verifiedPubkey, verifiedPubkey)];\n  return instructions;\n}\n\nexports.deleteTwitterRegistry = deleteTwitterRegistry; //////////////////////////////////////////\n// Getter Functions\n// Returns the key of the user-facing registry\n\nasync function getTwitterRegistryKey(twitter_handle) {\n  const hashedTwitterHandle = await (0, utils_1.getHashedName)(twitter_handle);\n  return await (0, utils_1.getNameAccountKey)(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n}\n\nexports.getTwitterRegistryKey = getTwitterRegistryKey;\n\nasync function getTwitterRegistry(connection, twitter_handle) {\n  const hashedTwitterHandle = await (0, utils_1.getHashedName)(twitter_handle);\n  const twitterHandleRegistryKey = await (0, utils_1.getNameAccountKey)(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  const registry = state_1.NameRegistryState.retrieve(connection, twitterHandleRegistryKey);\n  return registry;\n}\n\nexports.getTwitterRegistry = getTwitterRegistry;\n\nasync function getHandleAndRegistryKey(connection, verifiedPubkey) {\n  const hashedVerifiedPubkey = await (0, utils_1.getHashedName)(verifiedPubkey.toString());\n  const reverseRegistryKey = await (0, utils_1.getNameAccountKey)(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  const reverseRegistryState = await ReverseTwitterRegistryState.retrieve(connection, reverseRegistryKey);\n  return [reverseRegistryState.twitterHandle, new web3_js_1.PublicKey(reverseRegistryState.twitterRegistryKey)];\n}\n\nexports.getHandleAndRegistryKey = getHandleAndRegistryKey; // Uses the RPC node filtering feature, execution speed may vary\n\nasync function getTwitterHandleandRegistryKeyViaFilters(connection, verifiedPubkey) {\n  const filters = [{\n    memcmp: {\n      offset: 0,\n      bytes: exports.TWITTER_ROOT_PARENT_REGISTRY_KEY.toBase58()\n    }\n  }, {\n    memcmp: {\n      offset: 32,\n      bytes: verifiedPubkey.toBase58()\n    }\n  }, {\n    memcmp: {\n      offset: 64,\n      bytes: exports.TWITTER_VERIFICATION_AUTHORITY.toBase58()\n    }\n  }];\n  const filteredAccounts = await (0, utils_1.getFilteredProgramAccounts)(connection, bindings_1.NAME_PROGRAM_ID, filters);\n\n  for (const f of filteredAccounts) {\n    if (f.accountInfo.data.length > state_1.NameRegistryState.HEADER_LEN + 32) {\n      const data = f.accountInfo.data.slice(state_1.NameRegistryState.HEADER_LEN);\n      const state = (0, borsh_1.deserialize)(ReverseTwitterRegistryState.schema, ReverseTwitterRegistryState, data);\n      return [state.twitterHandle, new web3_js_1.PublicKey(state.twitterRegistryKey)];\n    }\n  }\n\n  throw new Error('Registry not found.');\n}\n\nexports.getTwitterHandleandRegistryKeyViaFilters = getTwitterHandleandRegistryKeyViaFilters; // Uses the RPC node filtering feature, execution speed may vary\n// Does not give you the handle, but is an alternative to getHandlesAndKeysFromVerifiedPubkey + getTwitterRegistry to get the data\n\nasync function getTwitterRegistryData(connection, verifiedPubkey) {\n  const filters = [{\n    memcmp: {\n      offset: 0,\n      bytes: exports.TWITTER_ROOT_PARENT_REGISTRY_KEY.toBytes()\n    }\n  }, {\n    memcmp: {\n      offset: 32,\n      bytes: verifiedPubkey.toBytes()\n    }\n  }, {\n    memcmp: {\n      offset: 64,\n      bytes: new web3_js_1.PublicKey(Buffer.alloc(32, 0)).toBase58()\n    }\n  }];\n  const filteredAccounts = await (0, utils_1.getFilteredProgramAccounts)(connection, bindings_1.NAME_PROGRAM_ID, filters);\n\n  if (filteredAccounts.length > 1) {\n    throw new Error('Found more than one registry.');\n  }\n\n  return filteredAccounts[0].accountInfo.data.slice(state_1.NameRegistryState.HEADER_LEN);\n}\n\nexports.getTwitterRegistryData = getTwitterRegistryData; //////////////////////////////////////////////\n// Utils\n\nclass ReverseTwitterRegistryState {\n  constructor(obj) {\n    this.twitterRegistryKey = obj.twitterRegistryKey;\n    this.twitterHandle = obj.twitterHandle;\n  }\n\n  static async retrieve(connection, reverseTwitterAccountKey) {\n    const reverseTwitterAccount = await connection.getAccountInfo(reverseTwitterAccountKey, 'processed');\n\n    if (!reverseTwitterAccount) {\n      throw new Error('Invalid reverse Twitter account provided');\n    }\n\n    const res = (0, borsh_1.deserializeUnchecked)(this.schema, ReverseTwitterRegistryState, reverseTwitterAccount.data.slice(state_1.NameRegistryState.HEADER_LEN));\n    return res;\n  }\n\n}\n\nexports.ReverseTwitterRegistryState = ReverseTwitterRegistryState;\nReverseTwitterRegistryState.schema = new Map([[ReverseTwitterRegistryState, {\n  kind: 'struct',\n  fields: [['twitterRegistryKey', [32]], ['twitterHandle', 'string']]\n}]]);\n\nasync function createReverseTwitterRegistry(connection, twitterHandle, twitterRegistryKey, verifiedPubkey, payerKey) {\n  // Create the reverse lookup registry\n  const hashedVerifiedPubkey = await (0, utils_1.getHashedName)(verifiedPubkey.toString());\n  const reverseRegistryKey = await (0, utils_1.getNameAccountKey)(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  const reverseTwitterRegistryStateBuff = (0, borsh_1.serialize)(ReverseTwitterRegistryState.schema, new ReverseTwitterRegistryState({\n    twitterRegistryKey: twitterRegistryKey.toBytes(),\n    twitterHandle\n  }));\n  return [(0, instructions_1.createInstruction)(bindings_1.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, reverseRegistryKey, verifiedPubkey, payerKey, hashedVerifiedPubkey, new utils_1.Numberu64(await connection.getMinimumBalanceForRentExemption(reverseTwitterRegistryStateBuff.length)), new utils_1.Numberu32(reverseTwitterRegistryStateBuff.length), exports.TWITTER_VERIFICATION_AUTHORITY, // Twitter authority acts as class for all reverse-lookup registries\n  exports.TWITTER_ROOT_PARENT_REGISTRY_KEY, // Reverse registries are also children of the root\n  exports.TWITTER_VERIFICATION_AUTHORITY), (0, instructions_1.updateInstruction)(bindings_1.NAME_PROGRAM_ID, reverseRegistryKey, new utils_1.Numberu32(0), Buffer.from(reverseTwitterRegistryStateBuff), exports.TWITTER_VERIFICATION_AUTHORITY, undefined)];\n}\n\nexports.createReverseTwitterRegistry = createReverseTwitterRegistry;","map":{"version":3,"mappings":"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","names":["exports","web3_js_1","createVerifiedTwitterRegistry","connection","twitterHandle","verifiedPubkey","space","payerKey","hashedTwitterHandle","twitterHandleRegistryKey","undefined","instructions","bindings_1","programId","utils_1","getMinimumBalanceForRentExemption","concat","createReverseTwitterRegistry","changeTwitterRegistryData","offset","input_data","changeVerifiedPubkey","currentVerifiedPubkey","newVerifiedPubkey","push","toString","deleteTwitterRegistry","hashedVerifiedPubkey","reverseRegistryKey","getTwitterRegistryKey","twitter_handle","getTwitterRegistry","registry","state_1","retrieve","getHandleAndRegistryKey","reverseRegistryState","ReverseTwitterRegistryState","twitterRegistryKey","getTwitterHandleandRegistryKeyViaFilters","filters","memcmp","bytes","toBase58","filteredAccounts","f","accountInfo","data","length","HEADER_LEN","slice","state","schema","Error","getTwitterRegistryData","toBytes","Buffer","alloc","constructor","obj","reverseTwitterAccountKey","reverseTwitterAccount","getAccountInfo","res","Map","kind","fields","reverseTwitterRegistryStateBuff","from"],"sourceRoot":"","sources":["../src/twitter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}