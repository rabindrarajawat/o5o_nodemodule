{"ast":null,"code":"import { Keypair, SystemProgram } from '@solana/web3.js';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { assertSol } from '../../../types/Amount.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateAccountOperation';\n/**\n * Creates a new uninitialized Solana account.\n *\n * ```ts\n * const { newAccount } = await metaplex\n *   .system()\n *   .createAccount({ space: 100 }); // 100 bytes\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst createAccountOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst createAccountOperationHandler = {\n  async handle(operation, metaplex, scope) {\n    const builder = await createAccountBuilder(metaplex, operation.input, scope);\n    scope.throwIfCanceled();\n    return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Creates a new uninitialized Solana account.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .system()\n *   .builders()\n *   .createAccount({ space: 100 }); // 100 bytes\n * ```\n *\n * Note that accessing this transaction builder is asynchronous\n * because we may need to contact the cluster to get the\n * rent-exemption for the provided space.\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst createAccountBuilder = async function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    space,\n    newAccount = Keypair.generate(),\n    program = SystemProgram.programId\n  } = params;\n  const lamports = params.lamports ?? (await metaplex.rpc().getRent(space));\n  assertSol(lamports);\n  return TransactionBuilder.make().setFeePayer(payer).setContext({\n    newAccount,\n    lamports\n  }).add({\n    instruction: SystemProgram.createAccount({\n      fromPubkey: payer.publicKey,\n      newAccountPubkey: newAccount.publicKey,\n      space,\n      lamports: lamports.basisPoints.toNumber(),\n      programId: program\n    }),\n    signers: [payer, newAccount],\n    key: params.instructionKey ?? 'createAccount'\n  });\n};\n\nexport { createAccountBuilder, createAccountOperation, createAccountOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/systemModule/operations/createAccount.ts"],"names":["Key","createAccountOperation","useOperation","createAccountOperationHandler","handle","operation","metaplex","scope","builder","createAccountBuilder","input","throwIfCanceled","sendAndConfirm","confirmOptions","params","options","payer","rpc","getDefaultFeePayer","space","newAccount","Keypair","generate","program","SystemProgram","programId","lamports","getRent","assertSol","TransactionBuilder","make","setFeePayer","setContext","add","instruction","createAccount","fromPubkey","publicKey","newAccountPubkey","basisPoints","toNumber","signers","key","instructionKey"],"mappings":";;;4EAcA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,wBAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,sBAAsB,GAAGC,YAAY,CAAyBF,GAAzB,C;AAElD;AACA;AACA;AACA;;AAsDA;AACA;AACA;AACA;;AACO,MAAMG,6BAAuE,GAClF;EACE,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAIgC;IAC9B,MAAMC,OAAO,GAAG,MAAMC,oBAAoB,CACxCH,QADwC,EAExCD,SAAS,CAACK,KAF8B,EAGxCH,KAHwC,CAA1C;IAKAA,KAAK,CAACI,eAANJ;IACA,OAAOC,OAAO,CAACI,cAARJ,CAAuBF,QAAvBE,EAAiCD,KAAK,CAACM,cAAvCL,CAAP;EACF;;AAbF,CADK,C,CAiBP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaC,MAAAA,oBAAoB,GAAG,gBAClCH,QADkC,EAElCQ,MAFkC,EAI2B;EAAA,IAD7DC,OAC6D,uEADxB,EACwB;EAC7D,MAAM;IAAEC,KAAK,GAAGV,QAAQ,CAACW,GAATX,GAAeY,kBAAfZ;EAAV,IAAkDS,OAAxD;EACA,MAAM;IACJI,KADI;IAEJC,UAAU,GAAGC,OAAO,CAACC,QAARD,EAFT;IAGJE,OAAO,GAAGC,aAAa,CAACC;EAHpB,IAIFX,MAJJ;EAMA,MAAMY,QAAQ,GAAGZ,MAAM,CAACY,QAAPZ,KAAoB,MAAMR,QAAQ,CAACW,GAATX,GAAeqB,OAAfrB,CAAuBa,KAAvBb,CAA1BQ,CAAjB;EACAc,SAAS,CAACF,QAAD,CAATE;EAEA,OAAOC,kBAAkB,CAACC,IAAnBD,GACJE,WADIF,CACQb,KADRa,EAEJG,UAFIH,CAEO;IACVT,UADU;IAEVM;EAFU,CAFPG,EAMJI,GANIJ,CAMA;IACHK,WAAW,EAAEV,aAAa,CAACW,aAAdX,CAA4B;MACvCY,UAAU,EAAEpB,KAAK,CAACqB,SADqB;MAEvCC,gBAAgB,EAAElB,UAAU,CAACiB,SAFU;MAGvClB,KAHuC;MAIvCO,QAAQ,EAAEA,QAAQ,CAACa,WAATb,CAAqBc,QAArBd,EAJ6B;MAKvCD,SAAS,EAAEF;IAL4B,CAA5BC,CADV;IAQHiB,OAAO,EAAE,CAACzB,KAAD,EAAQI,UAAR,CARN;IASHsB,GAAG,EAAE5B,MAAM,CAAC6B,cAAP7B,IAAyB;EAT3B,CANAe,CAAP;AAiBF,CAhCapB","sourcesContent":["import { Keypair, PublicKey, SystemProgram } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  assertSol,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SolAmount,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateAccountOperation' as const;\n\n/**\n * Creates a new uninitialized Solana account.\n *\n * ```ts\n * const { newAccount } = await metaplex\n *   .system()\n *   .createAccount({ space: 100 }); // 100 bytes\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createAccountOperation = useOperation<CreateAccountOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateAccountOperation = Operation<\n  typeof Key,\n  CreateAccountInput,\n  CreateAccountOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateAccountInput = {\n  /** The space in bytes of the account to create. */\n  space: number;\n\n  /**\n   * The initial balance of the account.\n   *\n   * @defaultValue By default, this will be the minumum amount of lamports\n   * required for the account to be rent-exempt.\n   * i.e. it will be equal to `await metaplex.rpc().getRent(space)`.\n   */\n  lamports?: SolAmount;\n\n  /**\n   * The new account as a Signer since it will be mutated on-chain.\n   *\n   * @defaultValue Defaults to a new generated Keypair, i.e. `Keypair.generate()`\n   */\n  newAccount?: Signer;\n\n  /**\n   * The address of the program that should own the new account.\n   *\n   * @defaultValue Defaults to the System Program.\n   */\n  program?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateAccountOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n\n  /** The new account created as a Signer. */\n  newAccount: Signer;\n\n  /** The lamports used to initialize the account's balance. */\n  lamports: SolAmount;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createAccountOperationHandler: OperationHandler<CreateAccountOperation> =\n  {\n    async handle(\n      operation: CreateAccountOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<CreateAccountOutput> {\n      const builder = await createAccountBuilder(\n        metaplex,\n        operation.input,\n        scope\n      );\n      scope.throwIfCanceled();\n      return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateAccountBuilderParams = Omit<\n  CreateAccountInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that creates the account. */\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateAccountBuilderContext = Omit<CreateAccountOutput, 'response'>;\n\n/**\n * Creates a new uninitialized Solana account.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .system()\n *   .builders()\n *   .createAccount({ space: 100 }); // 100 bytes\n * ```\n *\n * Note that accessing this transaction builder is asynchronous\n * because we may need to contact the cluster to get the\n * rent-exemption for the provided space.\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createAccountBuilder = async (\n  metaplex: Metaplex,\n  params: CreateAccountBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<CreateAccountBuilderContext>> => {\n  const { payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    space,\n    newAccount = Keypair.generate(),\n    program = SystemProgram.programId,\n  } = params;\n\n  const lamports = params.lamports ?? (await metaplex.rpc().getRent(space));\n  assertSol(lamports);\n\n  return TransactionBuilder.make<CreateAccountBuilderContext>()\n    .setFeePayer(payer)\n    .setContext({\n      newAccount,\n      lamports,\n    })\n    .add({\n      instruction: SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: newAccount.publicKey,\n        space,\n        lamports: lamports.basisPoints.toNumber(),\n        programId: program,\n      }),\n      signers: [payer, newAccount],\n      key: params.instructionKey ?? 'createAccount',\n    });\n};\n"]},"metadata":{},"sourceType":"module"}