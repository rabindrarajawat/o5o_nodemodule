{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFilteredProgramAccounts = exports.getNameOwner = exports.getNameAccountKey = exports.getHashedName = exports.signAndSendTransactionInstructions = exports.Numberu64 = exports.Numberu32 = void 0;\n\nconst assert_1 = __importDefault(require(\"assert\"));\n\nconst crypto_1 = require(\"crypto\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst bindings_1 = require(\"./bindings\");\n\nconst state_1 = require(\"./state\");\n\nclass Numberu32 extends bn_js_1.default {\n  /**\n   * Convert to Buffer representation\n   */\n  toBuffer() {\n    const a = super.toArray().reverse();\n    const b = Buffer.from(a);\n\n    if (b.length === 4) {\n      return b;\n    }\n\n    (0, assert_1.default)(b.length < 4, 'Numberu32 too large');\n    const zeroPad = Buffer.alloc(4);\n    b.copy(zeroPad);\n    return zeroPad;\n  }\n  /**\n   * Construct a Numberu64 from Buffer representation\n   */\n\n\n  static fromBuffer(buffer) {\n    (0, assert_1.default)(buffer.length === 4, `Invalid buffer length: ${buffer.length}`);\n    return new bn_js_1.default([...buffer].reverse().map(i => `00${i.toString(16)}`.slice(-2)).join(''), 16);\n  }\n\n}\n\nexports.Numberu32 = Numberu32;\n\nclass Numberu64 extends bn_js_1.default {\n  /**\n   * Convert to Buffer representation\n   */\n  toBuffer() {\n    const a = super.toArray().reverse();\n    const b = Buffer.from(a);\n\n    if (b.length === 8) {\n      return b;\n    }\n\n    (0, assert_1.default)(b.length < 8, 'Numberu64 too large');\n    const zeroPad = Buffer.alloc(8);\n    b.copy(zeroPad);\n    return zeroPad;\n  }\n  /**\n   * Construct a Numberu64 from Buffer representation\n   */\n\n\n  static fromBuffer(buffer) {\n    (0, assert_1.default)(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n    return new bn_js_1.default([...buffer].reverse().map(i => `00${i.toString(16)}`.slice(-2)).join(''), 16);\n  }\n\n}\n\nexports.Numberu64 = Numberu64;\n\nconst signAndSendTransactionInstructions = async ( // sign and send transaction\nconnection, signers, feePayer, txInstructions) => {\n  const tx = new web3_js_1.Transaction();\n  tx.feePayer = feePayer.publicKey;\n  signers.push(feePayer);\n  tx.add(...txInstructions);\n  return await connection.sendTransaction(tx, signers);\n};\n\nexports.signAndSendTransactionInstructions = signAndSendTransactionInstructions;\n\nasync function getHashedName(name) {\n  const input = bindings_1.HASH_PREFIX + name;\n  const buffer = (0, crypto_1.createHash)('sha256').update(input, 'utf8').digest();\n  return buffer;\n}\n\nexports.getHashedName = getHashedName;\n\nasync function getNameAccountKey(hashed_name, nameClass, nameParent) {\n  const seeds = [hashed_name];\n\n  if (nameClass) {\n    seeds.push(nameClass.toBuffer());\n  } else {\n    seeds.push(Buffer.alloc(32));\n  }\n\n  if (nameParent) {\n    seeds.push(nameParent.toBuffer());\n  } else {\n    seeds.push(Buffer.alloc(32));\n  }\n\n  const [nameAccountKey] = await web3_js_1.PublicKey.findProgramAddress(seeds, bindings_1.NAME_PROGRAM_ID);\n  return nameAccountKey;\n}\n\nexports.getNameAccountKey = getNameAccountKey;\n\nasync function getNameOwner(connection, nameAccountKey) {\n  const nameAccount = await connection.getAccountInfo(nameAccountKey);\n\n  if (!nameAccount) {\n    throw new Error('Unable to find the given account.');\n  }\n\n  return state_1.NameRegistryState.retrieve(connection, nameAccountKey);\n}\n\nexports.getNameOwner = getNameOwner; //Taken from Serum\n\nasync function getFilteredProgramAccounts(connection, programId, filters) {\n  const resp = await connection.getProgramAccounts(programId, {\n    commitment: connection.commitment,\n    filters,\n    encoding: 'base64'\n  });\n  return resp.map(_ref => {\n    let {\n      pubkey,\n      account: {\n        data,\n        executable,\n        owner,\n        lamports\n      }\n    } = _ref;\n    return {\n      publicKey: pubkey,\n      accountInfo: {\n        data: data,\n        executable,\n        owner: owner,\n        lamports\n      }\n    };\n  });\n}\n\nexports.getFilteredProgramAccounts = getFilteredProgramAccounts;","map":{"version":3,"mappings":"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","names":["Numberu32","bn_js_1","toBuffer","a","toArray","reverse","b","Buffer","from","length","zeroPad","alloc","copy","fromBuffer","buffer","map","i","toString","slice","join","exports","Numberu64","signAndSendTransactionInstructions","connection","signers","feePayer","txInstructions","tx","web3_js_1","publicKey","push","add","sendTransaction","getHashedName","name","input","bindings_1","update","digest","getNameAccountKey","hashed_name","nameClass","nameParent","seeds","nameAccountKey","findProgramAddress","getNameOwner","nameAccount","getAccountInfo","Error","state_1","retrieve","getFilteredProgramAccounts","programId","filters","resp","getProgramAccounts","commitment","encoding","pubkey","account","data","executable","owner","lamports","accountInfo"],"sourceRoot":"","sources":["../src/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}