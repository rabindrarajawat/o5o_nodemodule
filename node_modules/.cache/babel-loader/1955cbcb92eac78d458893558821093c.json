{"ast":null,"code":"/**\n * Error indicating that an assertion failed.\n * @group Errors\n */\nclass AssertionError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'AssertionError';\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n}\n/**\n * Assserts that the provided condition is true.\n * @internal\n */\n\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new AssertionError(message ?? 'Assertion failed');\n  }\n}\n/**\n * Asserts that both values are strictly equal.\n * @internal\n */\n\n\nassert.equal = function assertEqual(actual, expected, message) {\n  if (actual !== expected) {\n    throw new AssertionError((message ?? '') + ` ${actual} !== ${expected}`);\n  }\n};\n/**\n * Asserts that a given object contains the specified\n * keys such that their values are defined.\n */\n\n\nfunction assertObjectHasDefinedKeys(input, keys, onError) {\n  const missingKeys = keys.filter(property => input?.[property] === undefined);\n\n  if (missingKeys.length > 0) {\n    throw onError(missingKeys);\n  }\n}\n\nexport { AssertionError, assertObjectHasDefinedKeys, assert as default };","map":{"version":3,"sources":["../../../src/utils/assert.ts"],"names":["AssertionError","Error","constructor","message","name","captureStackTrace","assert","condition","equal","assertEqual","actual","expected","assertObjectHasDefinedKeys","input","keys","onError","missingKeys","filter","property","undefined","length"],"mappings":"AAEA;AACA;AACA;AACA;AACO,MAAMA,cAAN,SAA6BC,KAA7B,CAAmC;EACxCC,WAAW,CAACC,OAAD,EAAkB;IAC3B,MAAMA,OAAN;IACA,KAAKC,IAAL,GAAY,gBAAZ;;IACA,IAAIH,KAAK,CAACI,iBAAV,EAA6B;MAC3BJ,KAAK,CAACI,iBAANJ,CAAwB,IAAxBA,EAA8B,KAAKC,WAAnCD;IACF;EACF;;AAPwC;AAU1C;AACA;AACA;AACA;;;AACe,SAASK,MAAT,CACbC,SADa,EAEbJ,OAFa,EAGM;EACnB,IAAI,CAACI,SAAL,EAAgB;IACd,MAAM,IAAIP,cAAJ,CAAmBG,OAAO,IAAI,kBAA9B,CAAN;EACF;AACF;AAEA;AACA;AACA;AACA;;;AACAG,MAAM,CAACE,KAAPF,GAAe,SAASG,WAAT,CACbC,MADa,EAEbC,QAFa,EAGbR,OAHa,EAIQ;EACrB,IAAIO,MAAM,KAAKC,QAAf,EAAyB;IACvB,MAAM,IAAIX,cAAJ,CAAmB,CAACG,OAAO,IAAI,EAAZ,IAAsBO,IAAAA,MAAcC,QAAAA,QAAS,EAAhE,CAAN;EACF;AACD,CARDL;AAUA;AACA;AACA;AACA;;;AACO,SAASM,0BAAT,CAILC,KAJK,EAKLC,IALK,EAMLC,OANK,EAOqE;EAC1E,MAAMC,WAAW,GAAGF,IAAI,CAACG,MAALH,CACjBI,QAAQ,IAAKL,KAAK,GAAGK,QAAH,CAALL,KAAsBM,SADlBL,CAApB;;EAIA,IAAIE,WAAW,CAACI,MAAZJ,GAAqB,CAAzB,EAA4B;IAC1B,MAAMD,OAAO,CAACC,WAAD,CAAb;EACF;AACF","sourcesContent":["import { MetaplexError } from '../errors';\n\n/**\n * Error indicating that an assertion failed.\n * @group Errors\n */\nexport class AssertionError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AssertionError';\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\n/**\n * Assserts that the provided condition is true.\n * @internal\n */\nexport default function assert(\n  condition: boolean,\n  message?: string\n): asserts condition {\n  if (!condition) {\n    throw new AssertionError(message ?? 'Assertion failed');\n  }\n}\n\n/**\n * Asserts that both values are strictly equal.\n * @internal\n */\nassert.equal = function assertEqual<T>(\n  actual: unknown,\n  expected: T,\n  message?: string\n): asserts actual is T {\n  if (actual !== expected) {\n    throw new AssertionError((message ?? '') + ` ${actual} !== ${expected}`);\n  }\n};\n\n/**\n * Asserts that a given object contains the specified\n * keys such that their values are defined.\n */\nexport function assertObjectHasDefinedKeys<\n  T extends object,\n  K extends keyof T = keyof T\n>(\n  input: T,\n  keys: K[],\n  onError: (missingKeys: K[]) => MetaplexError\n): asserts input is { [key in keyof T]: T[key] } & { [key in K]-?: T[key] } {\n  const missingKeys = keys.filter(\n    (property) => input?.[property] === undefined\n  );\n\n  if (missingKeys.length > 0) {\n    throw onError(missingKeys);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}