{"ast":null,"code":"import { u64 } from '@solana/buffer-layout-utils';\nimport { Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createUiAmountToAmountInstruction } from '../instructions/uiAmountToAmount.js';\n/**\n * Amount as a string using mint-prescribed decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param amount         Ui Amount of tokens to be converted to Amount\n * @param programId      SPL Token program account\n *\n * @return Ui Amount generated\n */\n\nexport async function uiAmountToAmount(connection, payer, mint, amount) {\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_PROGRAM_ID;\n  const transaction = new Transaction().add(createUiAmountToAmountInstruction(mint, amount, programId));\n  const {\n    returnData: returnData,\n    err: err\n  } = (await connection.simulateTransaction(transaction, [payer], false)).value;\n\n  if (returnData) {\n    const data = Buffer.from(returnData.data[0], returnData.data[1]);\n    return u64().decode(data);\n  }\n\n  return err;\n}","map":{"version":3,"sources":["../../../src/actions/uiAmountToAmount.ts"],"names":[],"mappings":"AAAA,SAAS,GAAT,QAAoB,6BAApB;AAEA,SAAS,WAAT,QAA4B,iBAA5B;AACA,SAAS,gBAAT,QAAiC,iBAAjC;AACA,SAAS,iCAAT,QAAkD,qCAAlD;AAEA;;;;;;;;;;AAUG;;AACH,OAAO,eAAe,gBAAf,CACH,UADG,EAEH,KAFG,EAGH,IAHG,EAIH,MAJG,EAKyB;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAAsB,iCAAiC,CAAC,IAAD,EAAO,MAAP,EAAe,SAAf,CAAvD,CAApB;EACA,MAAM;IAAE,UAAU,EAAV,UAAF;IAAc,GAAG,EAAH;EAAd,IAAsB,CAAC,MAAM,UAAU,CAAC,mBAAX,CAA+B,WAA/B,EAA4C,CAAC,KAAD,CAA5C,EAAqD,KAArD,CAAP,EAAoE,KAAhG;;EACA,IAAI,UAAJ,EAAgB;IACZ,MAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,UAAU,CAAC,IAAX,CAAgB,CAAhB,CAAZ,EAAgC,UAAU,CAAC,IAAX,CAAgB,CAAhB,CAAhC,CAAb;IACA,OAAO,GAAG,GAAG,MAAN,CAAa,IAAb,CAAP;EACH;;EACD,OAAO,GAAP;AACH","sourceRoot":"","sourcesContent":["import { u64 } from '@solana/buffer-layout-utils';\nimport { Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createUiAmountToAmountInstruction } from '../instructions/uiAmountToAmount.js';\n/**\n * Amount as a string using mint-prescribed decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param amount         Ui Amount of tokens to be converted to Amount\n * @param programId      SPL Token program account\n *\n * @return Ui Amount generated\n */\nexport async function uiAmountToAmount(connection, payer, mint, amount, programId = TOKEN_PROGRAM_ID) {\n    const transaction = new Transaction().add(createUiAmountToAmountInstruction(mint, amount, programId));\n    const { returnData, err } = (await connection.simulateTransaction(transaction, [payer], false)).value;\n    if (returnData) {\n        const data = Buffer.from(returnData.data[0], returnData.data[1]);\n        return u64().decode(data);\n    }\n    return err;\n}\n//# sourceMappingURL=uiAmountToAmount.js.map"]},"metadata":{},"sourceType":"module"}