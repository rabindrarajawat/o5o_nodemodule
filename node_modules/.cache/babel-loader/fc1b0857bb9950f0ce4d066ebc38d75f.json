{"ast":null,"code":"import { createApproveCollectionAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'ApproveNftCollectionAuthorityOperation';\n/**\n * Approves a new collection authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .approveCollectionAuthority({\n *     mintAddress,\n *     collectionAuthority,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst approveNftCollectionAuthorityOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst approveNftCollectionAuthorityOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    return approveNftCollectionAuthorityBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Approves a new collection authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .approveCollectionAuthority({\n *     mintAddress,\n *     collectionAuthority,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst approveNftCollectionAuthorityBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    mintAddress,\n    collectionAuthority,\n    updateAuthority = metaplex.identity()\n  } = params; // Programs.\n\n  const systemProgram = metaplex.programs().getSystem(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs); // PDAs.\n\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs\n  });\n  const collectionAuthorityRecord = metaplex.nfts().pdas().collectionAuthorityRecord({\n    mint: mintAddress,\n    collectionAuthority,\n    programs\n  });\n  return TransactionBuilder.make().setFeePayer(payer) // Approve the collection authority.\n  .add({\n    instruction: createApproveCollectionAuthorityInstruction({\n      collectionAuthorityRecord,\n      newCollectionAuthority: collectionAuthority,\n      updateAuthority: updateAuthority.publicKey,\n      payer: payer.publicKey,\n      metadata,\n      mint: mintAddress,\n      systemProgram: systemProgram.address\n    }, tokenMetadataProgram.address),\n    signers: [payer, updateAuthority],\n    key: params.instructionKey ?? 'approveCollectionAuthority'\n  });\n};\n\nexport { approveNftCollectionAuthorityBuilder, approveNftCollectionAuthorityOperation, approveNftCollectionAuthorityOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/nftModule/operations/approveNftCollectionAuthority.ts"],"names":["Key","approveNftCollectionAuthorityOperation","useOperation","approveNftCollectionAuthorityOperationHandler","handle","operation","metaplex","scope","approveNftCollectionAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","collectionAuthority","updateAuthority","identity","systemProgram","getSystem","tokenMetadataProgram","getTokenMetadata","metadata","nfts","pdas","mint","collectionAuthorityRecord","TransactionBuilder","make","setFeePayer","add","instruction","createApproveCollectionAuthorityInstruction","newCollectionAuthority","publicKey","address","signers","key","instructionKey"],"mappings":";;4EAaA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,wCAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,sCAAsC,GACjDC,YAAY,CAAyCF,GAAzC,C;AAEd;AACA;AACA;AACA;;AAmCA;AACA;AACA;AACA;;AACO,MAAMG,6CAAuG,GAClH;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI2C;IACjD,OAAOC,oCAAoC,CACzCF,QADyC,EAEzCD,SAAS,CAACI,KAF+B,EAGzCF,KAHyC,CAApCC,CAILE,cAJKF,CAIUF,QAJVE,EAIoBD,KAAK,CAACI,cAJ1BH,CAAP;EAKF;AAXF,CADK,C,CAeP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaA,MAAAA,oCAAoC,GAAG,UAClDF,QADkD,EAElDM,MAFkD,EAI3B;EAAA,IADvBC,OACuB,uEADc,EACd;EACvB,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGT,QAAQ,CAACU,GAATV,GAAeW,kBAAfX;EAApB,IAA4DO,OAAlE;EACA,MAAM;IACJK,WADI;IAEJC,mBAFI;IAGJC,eAAe,GAAGd,QAAQ,CAACe,QAATf;EAHd,IAIFM,MAJJ,CAFuB,CAQvB;;EACA,MAAMU,aAAa,GAAGhB,QAAQ,CAACQ,QAATR,GAAoBiB,SAApBjB,CAA8BQ,QAA9BR,CAAtB;EACA,MAAMkB,oBAAoB,GAAGlB,QAAQ,CAACQ,QAATR,GAAoBmB,gBAApBnB,CAAqCQ,QAArCR,CAA7B,CAVuB,CAYvB;;EACA,MAAMoB,QAAQ,GAAGpB,QAAQ,CAACqB,IAATrB,GAAgBsB,IAAhBtB,GAAuBoB,QAAvBpB,CAAgC;IAC/CuB,IAAI,EAAEX,WADyC;IAE/CJ;EAF+C,CAAhCR,CAAjB;EAIA,MAAMwB,yBAAyB,GAAGxB,QAAQ,CACvCqB,IAD+BrB,GAE/BsB,IAF+BtB,GAG/BwB,yBAH+BxB,CAGL;IACzBuB,IAAI,EAAEX,WADmB;IAEzBC,mBAFyB;IAGzBL;EAHyB,CAHKR,CAAlC;EASA,OACEyB,kBAAkB,CAACC,IAAnBD,GACGE,WADHF,CACehB,KADfgB,EAGE;EAHFA,CAIGG,GAJHH,CAIO;IACHI,WAAW,EAAEC,2CAA2C,CACtD;MACEN,yBADF;MAEEO,sBAAsB,EAAElB,mBAF1B;MAGEC,eAAe,EAAEA,eAAe,CAACkB,SAHnC;MAIEvB,KAAK,EAAEA,KAAK,CAACuB,SAJf;MAKEZ,QALF;MAMEG,IAAI,EAAEX,WANR;MAOEI,aAAa,EAAEA,aAAa,CAACiB;IAP/B,CADsD,EAUtDf,oBAAoB,CAACe,OAViC,CADrD;IAaHC,OAAO,EAAE,CAACzB,KAAD,EAAQK,eAAR,CAbN;IAcHqB,GAAG,EAAE7B,MAAM,CAAC8B,cAAP9B,IAAyB;EAd3B,CAJPmB,CADF;AAsBF,CApDavB","sourcesContent":["import { createApproveCollectionAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ApproveNftCollectionAuthorityOperation' as const;\n\n/**\n * Approves a new collection authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .approveCollectionAuthority({\n *     mintAddress,\n *     collectionAuthority,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const approveNftCollectionAuthorityOperation =\n  useOperation<ApproveNftCollectionAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ApproveNftCollectionAuthorityOperation = Operation<\n  typeof Key,\n  ApproveNftCollectionAuthorityInput,\n  ApproveNftCollectionAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type ApproveNftCollectionAuthorityInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The address of the collection authority to approve. */\n  collectionAuthority: PublicKey;\n\n  /**\n   * The update authority of the NFT or SFT as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  updateAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ApproveNftCollectionAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const approveNftCollectionAuthorityOperationHandler: OperationHandler<ApproveNftCollectionAuthorityOperation> =\n  {\n    handle: async (\n      operation: ApproveNftCollectionAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<ApproveNftCollectionAuthorityOutput> => {\n      return approveNftCollectionAuthorityBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ApproveNftCollectionAuthorityBuilderParams = Omit<\n  ApproveNftCollectionAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that approves the collection authority. */\n  instructionKey?: string;\n};\n\n/**\n * Approves a new collection authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .approveCollectionAuthority({\n *     mintAddress,\n *     collectionAuthority,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const approveNftCollectionAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: ApproveNftCollectionAuthorityBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    collectionAuthority,\n    updateAuthority = metaplex.identity(),\n  } = params;\n\n  // Programs.\n  const systemProgram = metaplex.programs().getSystem(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  // PDAs.\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs,\n  });\n  const collectionAuthorityRecord = metaplex\n    .nfts()\n    .pdas()\n    .collectionAuthorityRecord({\n      mint: mintAddress,\n      collectionAuthority,\n      programs,\n    });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Approve the collection authority.\n      .add({\n        instruction: createApproveCollectionAuthorityInstruction(\n          {\n            collectionAuthorityRecord,\n            newCollectionAuthority: collectionAuthority,\n            updateAuthority: updateAuthority.publicKey,\n            payer: payer.publicKey,\n            metadata,\n            mint: mintAddress,\n            systemProgram: systemProgram.address,\n          },\n          tokenMetadataProgram.address\n        ),\n        signers: [payer, updateAuthority],\n        key: params.instructionKey ?? 'approveCollectionAuthority',\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}