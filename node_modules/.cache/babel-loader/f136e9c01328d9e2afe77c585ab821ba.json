{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.mjs';\nimport { addAmounts, subtractAmounts, multiplyAmount, lamports } from '../../types/Amount.mjs';\nconst TRANSACTION_FEE = 5000;\n/**\n * @group Modules\n */\n\nclass UtilsClient {\n  constructor(metaplex) {\n    _defineProperty(this, \"cachedRentPerEmptyAccount\", null);\n\n    _defineProperty(this, \"cachedRentPerByte\", null);\n\n    this.metaplex = metaplex;\n  }\n\n  async estimate(bytes) {\n    let numberOfAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let numberOfTransactions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let useCache = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const rent = await this.estimateRent(bytes, numberOfAccounts, useCache);\n    const transactionFees = this.estimateTransactionFee(numberOfTransactions);\n    return addAmounts(rent, transactionFees);\n  }\n\n  async estimateRent(bytes) {\n    let numberOfAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let useCache = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (!useCache || this.cachedRentPerEmptyAccount === null || this.cachedRentPerByte === null) {\n      const rentFor0Bytes = await this.metaplex.rpc().getRent(0); // TODO(loris): Infer from header size in bytes.\n\n      const rentFor1Byte = await this.metaplex.rpc().getRent(1);\n      this.cachedRentPerEmptyAccount = rentFor0Bytes;\n      this.cachedRentPerByte = subtractAmounts(rentFor1Byte, rentFor0Bytes);\n    }\n\n    const rentForAccounts = multiplyAmount(this.cachedRentPerEmptyAccount, numberOfAccounts);\n    const rentForBytes = multiplyAmount(this.cachedRentPerByte, bytes);\n    return addAmounts(rentForAccounts, rentForBytes);\n  }\n\n  estimateTransactionFee() {\n    let numberOfTransactions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    // TODO(loris): Improve with an RPC call to get the current transaction fee.\n    return lamports(numberOfTransactions * TRANSACTION_FEE);\n  }\n\n}\n\nexport { UtilsClient };","map":{"version":3,"sources":["../../../../src/plugins/utilsModule/UtilsClient.ts"],"names":["TRANSACTION_FEE","UtilsClient","constructor","metaplex","estimate","bytes","numberOfAccounts","numberOfTransactions","useCache","rent","estimateRent","transactionFees","estimateTransactionFee","addAmounts","cachedRentPerEmptyAccount","cachedRentPerByte","rentFor0Bytes","rpc","getRent","rentFor1Byte","subtractAmounts","rentForAccounts","multiplyAmount","rentForBytes","lamports"],"mappings":";;AASA,MAAMA,eAAe,GAAG,IAAxB;AAEA;AACA;AACA;;AACO,MAAMC,WAAN,CAAkB;EAKvBC,WAAW,CAACC,QAAD,EAAqB;IAAA,eAAA,CAAA,IAAA,EAAA,2BAAA,EAHwB,IAGxB,CAAA;;IAH4B,eAAA,CAAA,IAAA,EAAA,mBAAA,EACZ,IADY,CAAA;;IAI1D,KAAKA,QAAL,GAAgBA,QAAhB;EACF;;EAEc,MAARC,QAAQ,CACZC,KADY,EAKQ;IAAA,IAHpBC,gBAGoB,uEAHD,CAGC;IAAA,IAFpBC,oBAEoB,uEAFG,CAEH;IAAA,IADpBC,QACoB,uEADT,IACS;IACpB,MAAMC,IAAI,GAAG,MAAM,KAAKC,YAAL,CAAkBL,KAAlB,EAAyBC,gBAAzB,EAA2CE,QAA3C,CAAnB;IACA,MAAMG,eAAe,GAAG,KAAKC,sBAAL,CAA4BL,oBAA5B,CAAxB;IAEA,OAAOM,UAAU,CAACJ,IAAD,EAAOE,eAAP,CAAjB;EACF;;EAEkB,MAAZD,YAAY,CAChBL,KADgB,EAII;IAAA,IAFpBC,gBAEoB,uEAFD,CAEC;IAAA,IADpBE,QACoB,uEADT,IACS;;IACpB,IACE,CAACA,QAAD,IACA,KAAKM,yBAAL,KAAmC,IADnC,IAEA,KAAKC,iBAAL,KAA2B,IAH7B,EAIE;MACA,MAAMC,aAAa,GAAG,MAAM,KAAKb,QAAL,CAAcc,GAAd,GAAoBC,OAApB,CAA4B,CAA5B,CAA5B,CADA,CAGA;;MACA,MAAMC,YAAY,GAAG,MAAM,KAAKhB,QAAL,CAAcc,GAAd,GAAoBC,OAApB,CAA4B,CAA5B,CAA3B;MACA,KAAKJ,yBAAL,GAAiCE,aAAjC;MACA,KAAKD,iBAAL,GAAyBK,eAAe,CAACD,YAAD,EAAeH,aAAf,CAAxC;IACF;;IAEA,MAAMK,eAAe,GAAGC,cAAc,CACpC,KAAKR,yBAD+B,EAEpCR,gBAFoC,CAAtC;IAIA,MAAMiB,YAAY,GAAGD,cAAc,CAAC,KAAKP,iBAAN,EAAyBV,KAAzB,CAAnC;IAEA,OAAOQ,UAAU,CAACQ,eAAD,EAAkBE,YAAlB,CAAjB;EACF;;EAEAX,sBAAsB,GAAsC;IAAA,IAArCL,oBAAqC,uEAAd,CAAc;IAC1D;IACA,OAAOiB,QAAQ,CAACjB,oBAAoB,GAAGP,eAAxB,CAAf;EACF;;AAnDuB","sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport {\n  addAmounts,\n  lamports,\n  multiplyAmount,\n  SolAmount,\n  subtractAmounts,\n} from '@/types';\n\nconst TRANSACTION_FEE = 5000;\n\n/**\n * @group Modules\n */\nexport class UtilsClient {\n  protected readonly metaplex: Metaplex;\n  protected cachedRentPerEmptyAccount: SolAmount | null = null;\n  protected cachedRentPerByte: SolAmount | null = null;\n\n  constructor(metaplex: Metaplex) {\n    this.metaplex = metaplex;\n  }\n\n  async estimate(\n    bytes: number,\n    numberOfAccounts = 1,\n    numberOfTransactions = 1,\n    useCache = true\n  ): Promise<SolAmount> {\n    const rent = await this.estimateRent(bytes, numberOfAccounts, useCache);\n    const transactionFees = this.estimateTransactionFee(numberOfTransactions);\n\n    return addAmounts(rent, transactionFees);\n  }\n\n  async estimateRent(\n    bytes: number,\n    numberOfAccounts = 1,\n    useCache = true\n  ): Promise<SolAmount> {\n    if (\n      !useCache ||\n      this.cachedRentPerEmptyAccount === null ||\n      this.cachedRentPerByte === null\n    ) {\n      const rentFor0Bytes = await this.metaplex.rpc().getRent(0);\n\n      // TODO(loris): Infer from header size in bytes.\n      const rentFor1Byte = await this.metaplex.rpc().getRent(1);\n      this.cachedRentPerEmptyAccount = rentFor0Bytes;\n      this.cachedRentPerByte = subtractAmounts(rentFor1Byte, rentFor0Bytes);\n    }\n\n    const rentForAccounts = multiplyAmount(\n      this.cachedRentPerEmptyAccount,\n      numberOfAccounts\n    );\n    const rentForBytes = multiplyAmount(this.cachedRentPerByte, bytes);\n\n    return addAmounts(rentForAccounts, rentForBytes);\n  }\n\n  estimateTransactionFee(numberOfTransactions = 1): SolAmount {\n    // TODO(loris): Improve with an RPC call to get the current transaction fee.\n    return lamports(numberOfTransactions * TRANSACTION_FEE);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}