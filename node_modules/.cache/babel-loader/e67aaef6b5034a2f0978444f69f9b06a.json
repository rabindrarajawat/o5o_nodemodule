{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createWrappedNativeAccount = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst associatedTokenAccount_js_1 = require(\"../instructions/associatedTokenAccount.js\");\n\nconst initializeAccount_js_1 = require(\"../instructions/initializeAccount.js\");\n\nconst syncNative_js_1 = require(\"../instructions/syncNative.js\");\n\nconst account_js_1 = require(\"../state/account.js\");\n\nconst mint_js_1 = require(\"../state/mint.js\");\n\nconst createAccount_js_1 = require(\"./createAccount.js\");\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\n\n\nfunction createWrappedNativeAccount(connection, payer, owner, amount, keypair, confirmOptions) {\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_js_1.TOKEN_PROGRAM_ID;\n  let nativeMint = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : constants_js_1.NATIVE_MINT;\n  return __awaiter(this, void 0, void 0, function* () {\n    // If the amount provided is explicitly 0 or NaN, just create the account without funding it\n    if (!amount) return yield (0, createAccount_js_1.createAccount)(connection, payer, nativeMint, owner, keypair, confirmOptions, programId); // If a keypair isn't provided, create the account at the owner's ATA for the native mint and return its address\n\n    if (!keypair) {\n      const associatedToken = yield (0, mint_js_1.getAssociatedTokenAddress)(nativeMint, owner, false, programId, constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID);\n      const transaction = new web3_js_1.Transaction().add((0, associatedTokenAccount_js_1.createAssociatedTokenAccountInstruction)(payer.publicKey, associatedToken, owner, nativeMint, programId, constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID), web3_js_1.SystemProgram.transfer({\n        fromPubkey: payer.publicKey,\n        toPubkey: associatedToken,\n        lamports: amount\n      }), (0, syncNative_js_1.createSyncNativeInstruction)(associatedToken, programId));\n      yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);\n      return associatedToken;\n    } // Otherwise, create the account with the provided keypair and return its public key\n\n\n    const lamports = yield (0, account_js_1.getMinimumBalanceForRentExemptAccount)(connection);\n    const transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({\n      fromPubkey: payer.publicKey,\n      newAccountPubkey: keypair.publicKey,\n      space: account_js_1.ACCOUNT_SIZE,\n      lamports,\n      programId\n    }), web3_js_1.SystemProgram.transfer({\n      fromPubkey: payer.publicKey,\n      toPubkey: keypair.publicKey,\n      lamports: amount\n    }), (0, initializeAccount_js_1.createInitializeAccountInstruction)(keypair.publicKey, nativeMint, owner, programId));\n    yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);\n    return keypair.publicKey;\n  });\n}\n\nexports.createWrappedNativeAccount = createWrappedNativeAccount;","map":{"version":3,"sources":["../../../src/actions/createWrappedNativeAccount.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createWrappedNativeAccount = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst associatedTokenAccount_js_1 = require(\"../instructions/associatedTokenAccount.js\");\nconst initializeAccount_js_1 = require(\"../instructions/initializeAccount.js\");\nconst syncNative_js_1 = require(\"../instructions/syncNative.js\");\nconst account_js_1 = require(\"../state/account.js\");\nconst mint_js_1 = require(\"../state/mint.js\");\nconst createAccount_js_1 = require(\"./createAccount.js\");\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\nfunction createWrappedNativeAccount(connection, payer, owner, amount, keypair, confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID, nativeMint = constants_js_1.NATIVE_MINT) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // If the amount provided is explicitly 0 or NaN, just create the account without funding it\n        if (!amount)\n            return yield (0, createAccount_js_1.createAccount)(connection, payer, nativeMint, owner, keypair, confirmOptions, programId);\n        // If a keypair isn't provided, create the account at the owner's ATA for the native mint and return its address\n        if (!keypair) {\n            const associatedToken = yield (0, mint_js_1.getAssociatedTokenAddress)(nativeMint, owner, false, programId, constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID);\n            const transaction = new web3_js_1.Transaction().add((0, associatedTokenAccount_js_1.createAssociatedTokenAccountInstruction)(payer.publicKey, associatedToken, owner, nativeMint, programId, constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID), web3_js_1.SystemProgram.transfer({\n                fromPubkey: payer.publicKey,\n                toPubkey: associatedToken,\n                lamports: amount,\n            }), (0, syncNative_js_1.createSyncNativeInstruction)(associatedToken, programId));\n            yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);\n            return associatedToken;\n        }\n        // Otherwise, create the account with the provided keypair and return its public key\n        const lamports = yield (0, account_js_1.getMinimumBalanceForRentExemptAccount)(connection);\n        const transaction = new web3_js_1.Transaction().add(web3_js_1.SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: account_js_1.ACCOUNT_SIZE,\n            lamports,\n            programId,\n        }), web3_js_1.SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: keypair.publicKey,\n            lamports: amount,\n        }), (0, initializeAccount_js_1.createInitializeAccountInstruction)(keypair.publicKey, nativeMint, owner, programId));\n        yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);\n        return keypair.publicKey;\n    });\n}\nexports.createWrappedNativeAccount = createWrappedNativeAccount;\n//# sourceMappingURL=createWrappedNativeAccount.js.map"]},"metadata":{},"sourceType":"script"}