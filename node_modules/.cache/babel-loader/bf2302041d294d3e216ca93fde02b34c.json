{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeTransferCheckedInstructionUnchecked = exports.decodeTransferCheckedInstruction = exports.createTransferCheckedInstruction = exports.transferCheckedInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst internal_js_1 = require(\"./internal.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\n\n\nexports.transferCheckedInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_utils_1.u64)('amount'), (0, buffer_layout_1.u8)('decimals')]);\n/**\n * Construct a TransferChecked instruction\n *\n * @param source       Source account\n * @param mint         Mint account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param decimals     Number of decimals in transfer amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createTransferCheckedInstruction(source, mint, destination, owner, amount, decimals) {\n  let multiSigners = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : constants_js_1.TOKEN_PROGRAM_ID;\n  const keys = (0, internal_js_1.addSigners)([{\n    pubkey: source,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  const data = Buffer.alloc(exports.transferCheckedInstructionData.span);\n  exports.transferCheckedInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.TransferChecked,\n    amount: BigInt(amount),\n    decimals\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createTransferCheckedInstruction = createTransferCheckedInstruction;\n/**\n * Decode a TransferChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeTransferCheckedInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.transferCheckedInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      source,\n      mint,\n      destination,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeTransferCheckedInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.TransferChecked) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!source || !mint || !destination || !owner) throw new errors_js_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      source,\n      mint,\n      destination,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n\nexports.decodeTransferCheckedInstruction = decodeTransferCheckedInstruction;\n/**\n * Decode a TransferChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeTransferCheckedInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [source, mint, destination, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      source,\n      mint,\n      destination,\n      owner,\n      multiSigners\n    },\n    data: exports.transferCheckedInstructionData.decode(data)\n  };\n}\n\nexports.decodeTransferCheckedInstructionUnchecked = decodeTransferCheckedInstructionUnchecked;","map":{"version":3,"sources":["../../../src/instructions/transferChecked.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,MAAA,qBAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAMA,MAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AASA;;;AACa,OAAA,CAAA,8BAAA,GAAiC,CAAA,GAAA,eAAA,CAAA,MAAA,EAAuC,CACjF,CAAA,GAAA,eAAA,CAAA,EAAA,EAAG,aAAH,CADiF,EAEjF,CAAA,GAAA,qBAAA,CAAA,GAAA,EAAI,QAAJ,CAFiF,EAGjF,CAAA,GAAA,eAAA,CAAA,EAAA,EAAG,UAAH,CAHiF,CAAvC,CAAjC;AAMb;;;;;;;;;;;;;AAaG;;AACH,SAAgB,gCAAhB,CACI,MADJ,EAEI,IAFJ,EAGI,WAHJ,EAII,KAJJ,EAKI,MALJ,EAMI,QANJ,EAQgC;EAAA,IAD5B,YAC4B,uEADH,EACG;EAAA,IAA5B,SAA4B,uEAAhB,cAAA,CAAA,gBAAgB;EAE5B,MAAM,IAAI,GAAG,CAAA,GAAA,aAAA,CAAA,UAAA,EACT,CACI;IAAE,MAAM,EAAE,MAAV;IAAkB,QAAQ,EAAE,KAA5B;IAAmC,UAAU,EAAE;EAA/C,CADJ,EAEI;IAAE,MAAM,EAAE,IAAV;IAAgB,QAAQ,EAAE,KAA1B;IAAiC,UAAU,EAAE;EAA7C,CAFJ,EAGI;IAAE,MAAM,EAAE,WAAV;IAAuB,QAAQ,EAAE,KAAjC;IAAwC,UAAU,EAAE;EAApD,CAHJ,CADS,EAMT,KANS,EAOT,YAPS,CAAb;EAUA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,OAAA,CAAA,8BAAA,CAA+B,IAA5C,CAAb;EACA,OAAA,CAAA,8BAAA,CAA+B,MAA/B,CACI;IACI,WAAW,EAAE,UAAA,CAAA,gBAAA,CAAiB,eADlC;IAEI,MAAM,EAAE,MAAM,CAAC,MAAD,CAFlB;IAGI;EAHJ,CADJ,EAMI,IANJ;EASA,OAAO,IAAI,SAAA,CAAA,sBAAJ,CAA2B;IAAE,IAAF;IAAQ,SAAR;IAAmB;EAAnB,CAA3B,CAAP;AACH;;AA/BD,OAAA,CAAA,gCAAA,GAAA,gCAAA;AAkDA;;;;;;;AAOG;;AACH,SAAgB,gCAAhB,CACI,WADJ,EAEgC;EAAA,IAA5B,SAA4B,uEAAhB,cAAA,CAAA,gBAAgB;EAE5B,IAAI,CAAC,WAAW,CAAC,SAAZ,CAAsB,MAAtB,CAA6B,SAA7B,CAAL,EAA8C,MAAM,IAAI,WAAA,CAAA,mCAAJ,EAAN;EAC9C,IAAI,WAAW,CAAC,IAAZ,CAAiB,MAAjB,KAA4B,OAAA,CAAA,8BAAA,CAA+B,IAA/D,EAAqE,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN;EAErE,MAAM;IACF,IAAI,EAAE;MAAE,MAAF;MAAU,IAAV;MAAgB,WAAhB;MAA6B,KAA7B;MAAoC;IAApC,CADJ;IAEF;EAFE,IAGF,yCAAyC,CAAC,WAAD,CAH7C;EAIA,IAAI,IAAI,CAAC,WAAL,KAAqB,UAAA,CAAA,gBAAA,CAAiB,eAA1C,EAA2D,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN;EAC3D,IAAI,CAAC,MAAD,IAAW,CAAC,IAAZ,IAAoB,CAAC,WAArB,IAAoC,CAAC,KAAzC,EAAgD,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN,CAVpB,CAY5B;;EAEA,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF,MADE;MAEF,IAFE;MAGF,WAHE;MAIF,KAJE;MAKF;IALE,CAFH;IASH;EATG,CAAP;AAWH;;AA3BD,OAAA,CAAA,gCAAA,GAAA,gCAAA;AA8CA;;;;;;AAMG;;AACH,SAAgB,yCAAhB,OAIyB;EAAA,IAJiC;IACtD,SADsD;IAEtD,IAAI,EAAE,CAAC,MAAD,EAAS,IAAT,EAAe,WAAf,EAA4B,KAA5B,EAAmC,GAAG,YAAtC,CAFgD;IAGtD;EAHsD,CAIjC;EACrB,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF,MADE;MAEF,IAFE;MAGF,WAHE;MAIF,KAJE;MAKF;IALE,CAFH;IASH,IAAI,EAAE,OAAA,CAAA,8BAAA,CAA+B,MAA/B,CAAsC,IAAtC;EATH,CAAP;AAWH;;AAhBD,OAAA,CAAA,yCAAA,GAAA,yCAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeTransferCheckedInstructionUnchecked = exports.decodeTransferCheckedInstruction = exports.createTransferCheckedInstruction = exports.transferCheckedInstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst internal_js_1 = require(\"./internal.js\");\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.transferCheckedInstructionData = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('instruction'),\n    (0, buffer_layout_utils_1.u64)('amount'),\n    (0, buffer_layout_1.u8)('decimals'),\n]);\n/**\n * Construct a TransferChecked instruction\n *\n * @param source       Source account\n * @param mint         Mint account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param decimals     Number of decimals in transfer amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createTransferCheckedInstruction(source, mint, destination, owner, amount, decimals, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    const keys = (0, internal_js_1.addSigners)([\n        { pubkey: source, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(exports.transferCheckedInstructionData.span);\n    exports.transferCheckedInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.TransferChecked,\n        amount: BigInt(amount),\n        decimals,\n    }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createTransferCheckedInstruction = createTransferCheckedInstruction;\n/**\n * Decode a TransferChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeTransferCheckedInstruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.transferCheckedInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { source, mint, destination, owner, multiSigners }, data, } = decodeTransferCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.TransferChecked)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!source || !mint || !destination || !owner)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\nexports.decodeTransferCheckedInstruction = decodeTransferCheckedInstruction;\n/**\n * Decode a TransferChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeTransferCheckedInstructionUnchecked({ programId, keys: [source, mint, destination, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data: exports.transferCheckedInstructionData.decode(data),\n    };\n}\nexports.decodeTransferCheckedInstructionUnchecked = decodeTransferCheckedInstructionUnchecked;\n//# sourceMappingURL=transferChecked.js.map"]},"metadata":{},"sourceType":"script"}