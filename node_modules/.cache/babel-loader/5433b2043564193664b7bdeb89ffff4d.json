{"ast":null,"code":"import { BaseWalletAdapter } from './adapter.js';\nimport { WalletSendTransactionError, WalletSignTransactionError } from './errors.js';\nimport { isVersionedTransaction } from './types.js';\nexport class BaseSignerWalletAdapter extends BaseWalletAdapter {\n  async sendTransaction(transaction, connection) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let emit = true;\n\n    try {\n      if (isVersionedTransaction(transaction)) {\n        if (!this.supportedTransactionVersions) throw new WalletSendTransactionError(`Sending versioned transactions isn't supported by this wallet`);\n        if (!this.supportedTransactionVersions.has(transaction.version)) throw new WalletSendTransactionError(`Sending transaction version ${transaction.version} isn't supported by this wallet`);\n\n        try {\n          transaction = await this.signTransaction(transaction);\n          const rawTransaction = transaction.serialize();\n          return await connection.sendRawTransaction(rawTransaction, options);\n        } catch (error) {\n          // If the error was thrown by `signTransaction`, rethrow it and don't emit a duplicate event\n          if (error instanceof WalletSignTransactionError) {\n            emit = false;\n            throw error;\n          }\n\n          throw new WalletSendTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } else {\n        try {\n          const {\n            signers: signers,\n            ...sendOptions\n          } = options;\n          transaction = await this.prepareTransaction(transaction, connection, sendOptions);\n          (signers === null || signers === void 0 ? void 0 : signers.length) && transaction.partialSign(...signers);\n          transaction = await this.signTransaction(transaction);\n          const rawTransaction = transaction.serialize();\n          return await connection.sendRawTransaction(rawTransaction, sendOptions);\n        } catch (error) {\n          // If the error was thrown by `signTransaction`, rethrow it and don't emit a duplicate event\n          if (error instanceof WalletSignTransactionError) {\n            emit = false;\n            throw error;\n          }\n\n          throw new WalletSendTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      }\n    } catch (error) {\n      if (emit) {\n        this.emit('error', error);\n      }\n\n      throw error;\n    }\n  }\n\n  async signAllTransactions(transactions) {\n    for (const transaction of transactions) {\n      if (isVersionedTransaction(transaction)) {\n        if (!this.supportedTransactionVersions) throw new WalletSignTransactionError(`Signing versioned transactions isn't supported by this wallet`);\n        if (!this.supportedTransactionVersions.has(transaction.version)) throw new WalletSignTransactionError(`Signing transaction version ${transaction.version} isn't supported by this wallet`);\n      }\n    }\n\n    const signedTransactions = [];\n\n    for (const transaction of transactions) {\n      signedTransactions.push(await this.signTransaction(transaction));\n    }\n\n    return signedTransactions;\n  }\n\n}\nexport class BaseMessageSignerWalletAdapter extends BaseSignerWalletAdapter {}","map":{"version":3,"sources":["../../src/signer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BaseWalletAdapter } from './adapter.js';\nimport { WalletSendTransactionError, WalletSignTransactionError } from './errors.js';\nimport { isVersionedTransaction } from './types.js';\nexport class BaseSignerWalletAdapter extends BaseWalletAdapter {\n    async sendTransaction(transaction, connection, options = {}) {\n        let emit = true;\n        try {\n            if (isVersionedTransaction(transaction)) {\n                if (!this.supportedTransactionVersions)\n                    throw new WalletSendTransactionError(`Sending versioned transactions isn't supported by this wallet`);\n                if (!this.supportedTransactionVersions.has(transaction.version))\n                    throw new WalletSendTransactionError(`Sending transaction version ${transaction.version} isn't supported by this wallet`);\n                try {\n                    transaction = await this.signTransaction(transaction);\n                    const rawTransaction = transaction.serialize();\n                    return await connection.sendRawTransaction(rawTransaction, options);\n                }\n                catch (error) {\n                    // If the error was thrown by `signTransaction`, rethrow it and don't emit a duplicate event\n                    if (error instanceof WalletSignTransactionError) {\n                        emit = false;\n                        throw error;\n                    }\n                    throw new WalletSendTransactionError(error?.message, error);\n                }\n            }\n            else {\n                try {\n                    const { signers, ...sendOptions } = options;\n                    transaction = await this.prepareTransaction(transaction, connection, sendOptions);\n                    signers?.length && transaction.partialSign(...signers);\n                    transaction = await this.signTransaction(transaction);\n                    const rawTransaction = transaction.serialize();\n                    return await connection.sendRawTransaction(rawTransaction, sendOptions);\n                }\n                catch (error) {\n                    // If the error was thrown by `signTransaction`, rethrow it and don't emit a duplicate event\n                    if (error instanceof WalletSignTransactionError) {\n                        emit = false;\n                        throw error;\n                    }\n                    throw new WalletSendTransactionError(error?.message, error);\n                }\n            }\n        }\n        catch (error) {\n            if (emit) {\n                this.emit('error', error);\n            }\n            throw error;\n        }\n    }\n    async signAllTransactions(transactions) {\n        for (const transaction of transactions) {\n            if (isVersionedTransaction(transaction)) {\n                if (!this.supportedTransactionVersions)\n                    throw new WalletSignTransactionError(`Signing versioned transactions isn't supported by this wallet`);\n                if (!this.supportedTransactionVersions.has(transaction.version))\n                    throw new WalletSignTransactionError(`Signing transaction version ${transaction.version} isn't supported by this wallet`);\n            }\n        }\n        const signedTransactions = [];\n        for (const transaction of transactions) {\n            signedTransactions.push(await this.signTransaction(transaction));\n        }\n        return signedTransactions;\n    }\n}\nexport class BaseMessageSignerWalletAdapter extends BaseSignerWalletAdapter {\n}\n//# sourceMappingURL=signer.js.map"]},"metadata":{},"sourceType":"module"}