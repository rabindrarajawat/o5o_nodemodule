{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.mjs';\nimport { Buffer } from 'buffer';\nimport * as ed25519 from '@noble/ed25519';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { Keypair } from '@solana/web3.js';\nimport { UninitializedDerivedIdentityError } from './errors.mjs';\nimport { subtractAmounts } from '../../types/Amount.mjs';\nimport { isSigner } from '../../types/Signer.mjs';\n/**\n * @group Modules\n */\n\nclass DerivedIdentityClient {\n  constructor(metaplex) {\n    _defineProperty(this, \"originalSigner\", null);\n\n    _defineProperty(this, \"derivedKeypair\", null);\n\n    this.metaplex = metaplex;\n  }\n\n  get publicKey() {\n    this.assertInitialized();\n    return this.derivedKeypair.publicKey;\n  }\n\n  get secretKey() {\n    this.assertInitialized();\n    return this.derivedKeypair.secretKey;\n  }\n\n  get originalPublicKey() {\n    this.assertInitialized();\n    return this.originalSigner.publicKey;\n  }\n\n  async deriveFrom(message, originalSigner) {\n    this.originalSigner = originalSigner ?? this.metaplex.identity().driver();\n    const signature = await this.originalSigner.signMessage(Buffer.from(message));\n    const seeds = sha512(signature).slice(0, 32);\n    this.derivedKeypair = Keypair.fromSeed(seeds);\n  }\n\n  fund(amount) {\n    this.assertInitialized();\n    return this.metaplex.system().transferSol({\n      from: this.originalSigner,\n      to: this.derivedKeypair.publicKey,\n      amount\n    }, {\n      payer: this.originalSigner\n    });\n  }\n\n  withdraw(amount) {\n    this.assertInitialized();\n    return this.metaplex.system().transferSol({\n      from: this.derivedKeypair,\n      to: this.originalSigner.publicKey,\n      amount\n    }, {\n      payer: this.derivedKeypair\n    });\n  }\n\n  async withdrawAll() {\n    this.assertInitialized();\n    const balance = await this.metaplex.rpc().getBalance(this.derivedKeypair.publicKey);\n    const transactionFee = this.metaplex.utils().estimateTransactionFee();\n    return this.withdraw(subtractAmounts(balance, transactionFee));\n  }\n\n  close() {\n    this.originalSigner = null;\n    this.derivedKeypair = null;\n  }\n\n  async signMessage(message) {\n    return ed25519.sync.sign(message, this.secretKey);\n  }\n\n  async signTransaction(transaction) {\n    transaction.partialSign(this);\n    return transaction;\n  }\n\n  async signAllTransactions(transactions) {\n    return Promise.all(transactions.map(transaction => this.signTransaction(transaction)));\n  }\n\n  verifyMessage(message, signature) {\n    return ed25519.sync.verify(message, signature, this.publicKey.toBytes());\n  }\n\n  equals(that) {\n    if (isSigner(that)) {\n      that = that.publicKey;\n    }\n\n    return this.publicKey.equals(that);\n  }\n\n  assertInitialized() {\n    if (this.derivedKeypair === null || this.originalSigner === null) {\n      throw new UninitializedDerivedIdentityError();\n    }\n  }\n\n}\n\nexport { DerivedIdentityClient };","map":{"version":3,"sources":["../../../../src/plugins/derivedIdentity/DerivedIdentityClient.ts"],"names":["DerivedIdentityClient","constructor","metaplex","publicKey","assertInitialized","derivedKeypair","secretKey","originalPublicKey","originalSigner","deriveFrom","message","identity","driver","signature","signMessage","Buffer","from","seeds","sha512","slice","Keypair","fromSeed","fund","amount","system","transferSol","to","payer","withdraw","withdrawAll","balance","rpc","getBalance","transactionFee","utils","estimateTransactionFee","subtractAmounts","close","ed25519","sync","sign","signTransaction","transaction","partialSign","signAllTransactions","transactions","Promise","all","map","verifyMessage","verify","toBytes","equals","that","isSigner","UninitializedDerivedIdentityError"],"mappings":"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","sourcesContent":["import { Buffer } from 'buffer';\nimport * as ed25519 from '@noble/ed25519';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { Keypair, PublicKey, Transaction } from '@solana/web3.js';\nimport { UninitializedDerivedIdentityError } from './errors';\nimport {\n  IdentitySigner,\n  isSigner,\n  KeypairSigner,\n  Signer,\n  SolAmount,\n  subtractAmounts,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n/**\n * @group Modules\n */\nexport class DerivedIdentityClient implements IdentitySigner, KeypairSigner {\n  protected readonly metaplex: Metaplex;\n  protected originalSigner: Signer | null = null;\n  protected derivedKeypair: Keypair | null = null;\n\n  constructor(metaplex: Metaplex) {\n    this.metaplex = metaplex;\n  }\n\n  get publicKey(): PublicKey {\n    this.assertInitialized();\n\n    return this.derivedKeypair.publicKey;\n  }\n\n  get secretKey(): Uint8Array {\n    this.assertInitialized();\n\n    return this.derivedKeypair.secretKey;\n  }\n\n  get originalPublicKey(): PublicKey {\n    this.assertInitialized();\n\n    return this.originalSigner.publicKey;\n  }\n\n  async deriveFrom(\n    message: string | Uint8Array,\n    originalSigner?: IdentitySigner\n  ) {\n    this.originalSigner = originalSigner ?? this.metaplex.identity().driver();\n\n    const signature = await this.originalSigner.signMessage(\n      Buffer.from(message)\n    );\n\n    const seeds = sha512(signature).slice(0, 32);\n\n    this.derivedKeypair = Keypair.fromSeed(seeds);\n  }\n\n  fund(amount: SolAmount) {\n    this.assertInitialized();\n    return this.metaplex.system().transferSol(\n      {\n        from: this.originalSigner,\n        to: this.derivedKeypair.publicKey,\n        amount,\n      },\n      { payer: this.originalSigner }\n    );\n  }\n\n  withdraw(amount: SolAmount) {\n    this.assertInitialized();\n    return this.metaplex.system().transferSol(\n      {\n        from: this.derivedKeypair,\n        to: this.originalSigner.publicKey,\n        amount,\n      },\n      { payer: this.derivedKeypair }\n    );\n  }\n\n  async withdrawAll() {\n    this.assertInitialized();\n    const balance = await this.metaplex\n      .rpc()\n      .getBalance(this.derivedKeypair.publicKey);\n    const transactionFee = this.metaplex.utils().estimateTransactionFee();\n    return this.withdraw(subtractAmounts(balance, transactionFee));\n  }\n\n  close(): void {\n    this.originalSigner = null;\n    this.derivedKeypair = null;\n  }\n\n  async signMessage(message: Uint8Array): Promise<Uint8Array> {\n    return ed25519.sync.sign(message, this.secretKey);\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    transaction.partialSign(this);\n\n    return transaction;\n  }\n\n  async signAllTransactions(\n    transactions: Transaction[]\n  ): Promise<Transaction[]> {\n    return Promise.all(\n      transactions.map((transaction) => this.signTransaction(transaction))\n    );\n  }\n\n  verifyMessage(message: Uint8Array, signature: Uint8Array): boolean {\n    return ed25519.sync.verify(message, signature, this.publicKey.toBytes());\n  }\n\n  equals(that: Signer | PublicKey): boolean {\n    if (isSigner(that)) {\n      that = that.publicKey;\n    }\n\n    return this.publicKey.equals(that);\n  }\n\n  assertInitialized(): asserts this is {\n    originalSigner: Signer;\n    derivedKeypair: Keypair;\n  } {\n    if (this.derivedKeypair === null || this.originalSigner === null) {\n      throw new UninitializedDerivedIdentityError();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}