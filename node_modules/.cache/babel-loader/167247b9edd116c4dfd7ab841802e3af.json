{"ast":null,"code":"import { createDepositInstruction, createAuctioneerDepositInstruction } from '@metaplex-foundation/mpl-auction-house';\nimport { AuctioneerAuthorityRequiredError } from '../errors.mjs';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { toPublicKey } from '../../../types/PublicKey.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs';\nimport { isSigner } from '../../../types/Signer.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'DepositToBuyerAccountOperation';\n/**\n * Adds funds to the user's buyer escrow account for the given auction house.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .depositToBuyerAccount({ auctionHouse, buyer, amount };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst depositToBuyerAccountOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst depositToBuyerAccountOperationHandler = {\n  handle: async (operation, metaplex, scope) => depositToBuyerAccountBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions)\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Adds funds to the user's buyer escrow account for the given auction house.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .depositToBuyerAccount({ auctionHouse, buyer, amount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst depositToBuyerAccountBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // Data.\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    auctionHouse,\n    auctioneerAuthority,\n    amount,\n    instructionKey,\n    buyer = metaplex.identity()\n  } = params;\n\n  if (auctionHouse.hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  } // Accounts.\n\n\n  const paymentAccount = auctionHouse.isNative ? toPublicKey(buyer) : metaplex.tokens().pdas().associatedTokenAccount({\n    mint: auctionHouse.treasuryMint.address,\n    owner: toPublicKey(buyer),\n    programs\n  });\n  const escrowPayment = metaplex.auctionHouse().pdas().buyerEscrow({\n    auctionHouse: auctionHouse.address,\n    buyer: toPublicKey(buyer),\n    programs\n  });\n  const accounts = {\n    wallet: toPublicKey(buyer),\n    paymentAccount,\n    transferAuthority: toPublicKey(buyer),\n    escrowPaymentAccount: escrowPayment,\n    treasuryMint: auctionHouse.treasuryMint.address,\n    authority: auctionHouse.authorityAddress,\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress\n  }; // Args.\n\n  const args = {\n    escrowPaymentBump: escrowPayment.bump,\n    amount: amount.basisPoints\n  }; // Deposit Instruction.\n\n  let depositInstruction = createDepositInstruction(accounts, args);\n\n  if (auctioneerAuthority) {\n    const ahAuctioneerPda = metaplex.auctionHouse().pdas().auctioneer({\n      auctionHouse: auctionHouse.address,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      programs\n    });\n    const accountsWithAuctioneer = { ...accounts,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      ahAuctioneerPda\n    };\n    depositInstruction = createAuctioneerDepositInstruction({ ...accountsWithAuctioneer\n    }, args);\n  } // Signers.\n\n\n  const depositSigners = [buyer, auctioneerAuthority].filter(isSigner);\n  return TransactionBuilder.make().setFeePayer(payer) // Deposit.\n  .add({\n    instruction: depositInstruction,\n    signers: depositSigners,\n    key: instructionKey ?? 'depositToBuyerAccount'\n  });\n};\n\nexport { depositToBuyerAccountBuilder, depositToBuyerAccountOperation, depositToBuyerAccountOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/operations/depositToBuyerAccount.ts"],"names":["Key","depositToBuyerAccountOperation","useOperation","depositToBuyerAccountOperationHandler","handle","operation","metaplex","scope","depositToBuyerAccountBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","auctionHouse","auctioneerAuthority","amount","instructionKey","buyer","identity","hasAuctioneer","AuctioneerAuthorityRequiredError","paymentAccount","isNative","toPublicKey","tokens","pdas","associatedTokenAccount","mint","treasuryMint","address","owner","escrowPayment","buyerEscrow","accounts","wallet","transferAuthority","escrowPaymentAccount","authority","authorityAddress","auctionHouseFeeAccount","feeAccountAddress","args","escrowPaymentBump","bump","basisPoints","depositInstruction","createDepositInstruction","ahAuctioneerPda","auctioneer","publicKey","accountsWithAuctioneer","createAuctioneerDepositInstruction","depositSigners","filter","isSigner","TransactionBuilder","make","setFeePayer","add","instruction","signers","key"],"mappings":"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","sourcesContent":["import {\n  createAuctioneerDepositInstruction,\n  createDepositInstruction,\n  DepositInstructionAccounts,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AuctioneerAuthorityRequiredError } from '../errors';\nimport { AuctionHouse } from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  isSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'DepositToBuyerAccountOperation' as const;\n\n/**\n * Adds funds to the user's buyer escrow account for the given auction house.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .depositToBuyerAccount({ auctionHouse, buyer, amount };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const depositToBuyerAccountOperation =\n  useOperation<DepositToBuyerAccountOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type DepositToBuyerAccountOperation = Operation<\n  typeof Key,\n  DepositToBuyerAccountInput,\n  DepositToBuyerAccountOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type DepositToBuyerAccountInput = {\n  /**\n   * The Auction House in which escrow buyer deposits funds.\n   * We only need a subset of the `AuctionHouse` model but we\n   * need enough information regarding its settings to know how\n   * to deposit funds.\n   *\n   * This includes, its address, authority address, treasury mint, etc.\n   */\n  auctionHouse: Pick<\n    AuctionHouse,\n    | 'address'\n    | 'authorityAddress'\n    | 'hasAuctioneer'\n    | 'isNative'\n    | 'treasuryMint'\n    | 'feeAccountAddress'\n  >;\n\n  /**\n   * The buyer who deposits funds.\n   * This expects a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  buyer?: Signer;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue Defaults to not being used.\n   */\n  auctioneerAuthority?: Signer;\n\n  /**\n   * Amount of funds to deposit.\n   * This can either be in SOL or in the SPL token used by the Auction House as a currency.\n   */\n  amount: SolAmount | SplTokenAmount;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type DepositToBuyerAccountOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const depositToBuyerAccountOperationHandler: OperationHandler<DepositToBuyerAccountOperation> =\n  {\n    handle: async (\n      operation: DepositToBuyerAccountOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) =>\n      depositToBuyerAccountBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions),\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type DepositToBuyerAccountBuilderParams = Omit<\n  DepositToBuyerAccountInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type DepositToBuyerAccountBuilderContext = Omit<\n  DepositToBuyerAccountOutput,\n  'response'\n>;\n\n/**\n * Adds funds to the user's buyer escrow account for the given auction house.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .depositToBuyerAccount({ auctionHouse, buyer, amount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const depositToBuyerAccountBuilder = (\n  metaplex: Metaplex,\n  params: DepositToBuyerAccountBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<DepositToBuyerAccountBuilderContext> => {\n  // Data.\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    auctionHouse,\n    auctioneerAuthority,\n    amount,\n    instructionKey,\n    buyer = metaplex.identity(),\n  } = params;\n\n  if (auctionHouse.hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  // Accounts.\n  const paymentAccount = auctionHouse.isNative\n    ? toPublicKey(buyer)\n    : metaplex\n        .tokens()\n        .pdas()\n        .associatedTokenAccount({\n          mint: auctionHouse.treasuryMint.address,\n          owner: toPublicKey(buyer),\n          programs,\n        });\n  const escrowPayment = metaplex\n    .auctionHouse()\n    .pdas()\n    .buyerEscrow({\n      auctionHouse: auctionHouse.address,\n      buyer: toPublicKey(buyer),\n      programs,\n    });\n\n  const accounts: DepositInstructionAccounts = {\n    wallet: toPublicKey(buyer),\n    paymentAccount,\n    transferAuthority: toPublicKey(buyer),\n    escrowPaymentAccount: escrowPayment,\n    treasuryMint: auctionHouse.treasuryMint.address,\n    authority: auctionHouse.authorityAddress,\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n  };\n\n  // Args.\n  const args = {\n    escrowPaymentBump: escrowPayment.bump,\n    amount: amount.basisPoints,\n  };\n\n  // Deposit Instruction.\n  let depositInstruction = createDepositInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    const ahAuctioneerPda = metaplex.auctionHouse().pdas().auctioneer({\n      auctionHouse: auctionHouse.address,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      programs,\n    });\n\n    const accountsWithAuctioneer = {\n      ...accounts,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      ahAuctioneerPda,\n    };\n\n    depositInstruction = createAuctioneerDepositInstruction(\n      { ...accountsWithAuctioneer },\n      args\n    );\n  }\n\n  // Signers.\n  const depositSigners = [buyer, auctioneerAuthority].filter(isSigner);\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n      // Deposit.\n      .add({\n        instruction: depositInstruction,\n        signers: depositSigners,\n        key: instructionKey ?? 'depositToBuyerAccount',\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}