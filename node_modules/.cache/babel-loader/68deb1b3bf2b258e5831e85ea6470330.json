{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createApproveCheckedInstruction } from '../instructions/approveChecked.js';\nimport { getSigners } from './internal.js';\n/**\n * Approve a delegate to transfer up to a maximum number of tokens from an account, asserting the token mint and\n * decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Address of the account\n * @param delegate       Account authorized to perform a transfer tokens from the source account\n * @param owner          Owner of the source account\n * @param amount         Maximum number of tokens the delegate may transfer\n * @param decimals       Number of decimals in approve amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function approveChecked(connection, payer, mint, account, delegate, owner, amount, decimals) {\n  let multiSigners = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : [];\n  let confirmOptions = arguments.length > 9 ? arguments[9] : undefined;\n  let programId = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : TOKEN_PROGRAM_ID;\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createApproveCheckedInstruction(account, mint, delegate, ownerPublicKey, amount, decimals, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"sources":["../../../src/actions/approveChecked.ts"],"names":[],"mappings":"AACA,SAAS,yBAAT,EAAoC,WAApC,QAAuD,iBAAvD;AACA,SAAS,gBAAT,QAAiC,iBAAjC;AACA,SAAS,+BAAT,QAAgD,mCAAhD;AACA,SAAS,UAAT,QAA2B,eAA3B;AAEA;;;;;;;;;;;;;;;;AAgBG;;AACH,OAAO,eAAe,cAAf,CACH,UADG,EAEH,KAFG,EAGH,IAHG,EAIH,OAJG,EAKH,QALG,EAMH,KANG,EAOH,MAPG,EAQH,QARG,EAWyB;EAAA,IAF5B,YAE4B,uEAFH,EAEG;EAAA,IAD5B,cAC4B;EAAA,IAA5B,SAA4B,0EAAhB,gBAAgB;EAE5B,MAAM,CAAC,cAAD,EAAiB,OAAjB,IAA4B,UAAU,CAAC,KAAD,EAAQ,YAAR,CAA5C;EAEA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,+BAA+B,CAC3B,OAD2B,EAE3B,IAF2B,EAG3B,QAH2B,EAI3B,cAJ2B,EAK3B,MAL2B,EAM3B,QAN2B,EAO3B,YAP2B,EAQ3B,SAR2B,CADf,CAApB;EAaA,OAAO,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,EAAQ,GAAG,OAAX,CAA1B,EAA+C,cAA/C,CAAtC;AACH","sourceRoot":"","sourcesContent":["import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createApproveCheckedInstruction } from '../instructions/approveChecked.js';\nimport { getSigners } from './internal.js';\n/**\n * Approve a delegate to transfer up to a maximum number of tokens from an account, asserting the token mint and\n * decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Address of the account\n * @param delegate       Account authorized to perform a transfer tokens from the source account\n * @param owner          Owner of the source account\n * @param amount         Maximum number of tokens the delegate may transfer\n * @param decimals       Number of decimals in approve amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function approveChecked(connection, payer, mint, account, delegate, owner, amount, decimals, multiSigners = [], confirmOptions, programId = TOKEN_PROGRAM_ID) {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n    const transaction = new Transaction().add(createApproveCheckedInstruction(account, mint, delegate, ownerPublicKey, amount, decimals, multiSigners, programId));\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n//# sourceMappingURL=approveChecked.js.map"]},"metadata":{},"sourceType":"module"}