{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeApproveInstructionUnchecked = exports.decodeApproveInstruction = exports.createApproveInstruction = exports.approveInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst internal_js_1 = require(\"./internal.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\n\n\nexports.approveInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_utils_1.u64)('amount')]);\n/**\n * Construct an Approve instruction\n *\n * @param account      Account to set the delegate for\n * @param delegate     Account authorized to transfer tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createApproveInstruction(account, delegate, owner, amount) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_js_1.TOKEN_PROGRAM_ID;\n  const keys = (0, internal_js_1.addSigners)([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: delegate,\n    isSigner: false,\n    isWritable: false\n  }], owner, multiSigners);\n  const data = Buffer.alloc(exports.approveInstructionData.span);\n  exports.approveInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.Approve,\n    amount: BigInt(amount)\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createApproveInstruction = createApproveInstruction;\n/**\n * Decode an Approve instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeApproveInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.approveInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeApproveInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.Approve) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account || !delegate || !owner) throw new errors_js_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n\nexports.decodeApproveInstruction = decodeApproveInstruction;\n/**\n * Decode an Approve instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeApproveInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, delegate, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data: exports.approveInstructionData.decode(data)\n  };\n}\n\nexports.decodeApproveInstructionUnchecked = decodeApproveInstructionUnchecked;","map":{"version":3,"sources":["../../../src/instructions/approve.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeApproveInstructionUnchecked = exports.decodeApproveInstruction = exports.createApproveInstruction = exports.approveInstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst internal_js_1 = require(\"./internal.js\");\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.approveInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_utils_1.u64)('amount')]);\n/**\n * Construct an Approve instruction\n *\n * @param account      Account to set the delegate for\n * @param delegate     Account authorized to transfer tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createApproveInstruction(account, delegate, owner, amount, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    const keys = (0, internal_js_1.addSigners)([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: delegate, isSigner: false, isWritable: false },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(exports.approveInstructionData.span);\n    exports.approveInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.Approve,\n        amount: BigInt(amount),\n    }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createApproveInstruction = createApproveInstruction;\n/**\n * Decode an Approve instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeApproveInstruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.approveInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { account, delegate, owner, multiSigners }, data, } = decodeApproveInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.Approve)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!account || !delegate || !owner)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\nexports.decodeApproveInstruction = decodeApproveInstruction;\n/**\n * Decode an Approve instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeApproveInstructionUnchecked({ programId, keys: [account, delegate, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data: exports.approveInstructionData.decode(data),\n    };\n}\nexports.decodeApproveInstructionUnchecked = decodeApproveInstructionUnchecked;\n//# sourceMappingURL=approve.js.map"]},"metadata":{},"sourceType":"script"}