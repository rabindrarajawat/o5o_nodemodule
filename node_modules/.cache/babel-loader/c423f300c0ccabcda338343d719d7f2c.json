{"ast":null,"code":"import { AuctioneerAuthorityRequiredError } from '../errors.mjs';\nimport { isPrivateBid } from '../models/Bid.mjs';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { toPublicKey } from '../../../types/PublicKey.mjs';\nimport { now } from '../../../types/DateTime.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'DirectSellOperation';\n/**\n * Creates a listing on a given asset and then executes a sell on the created bid and listing.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .sell({ auctionHouse, bid };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst directSellOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst directSellOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const builder = await directSellBuilder(metaplex, operation.input, scope);\n    scope.throwIfCanceled();\n    return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Creates a listing on a given asset and executes a sale on the created listing and given bid.\n *\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .sell({ auctionHouse, bid, seller })\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst directSellBuilder = async function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // Data.\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    auctionHouse,\n    auctioneerAuthority,\n    bid,\n    seller = metaplex.identity(),\n    authority = auctionHouse.authorityAddress,\n    bookkeeper = metaplex.identity(),\n    createListingInstructionKey,\n    executeSaleInstructionKey\n  } = params;\n  const {\n    hasAuctioneer\n  } = auctionHouse;\n  const {\n    tokens,\n    price,\n    buyerAddress\n  } = bid;\n  const printReceipt = (params.printReceipt ?? true) && Boolean(bid.receiptAddress);\n\n  if (hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  const asset = isPrivateBid(bid) ? bid.asset : { ...bid.asset,\n    token: params.sellerToken\n  };\n  const listingBuilder = metaplex.auctionHouse().builders().list({\n    mintAccount: asset.mint.address,\n    price,\n    auctionHouse,\n    auctioneerAuthority,\n    seller,\n    authority,\n    tokenAccount: asset.token.address,\n    tokens,\n    printReceipt,\n    bookkeeper,\n    instructionKey: createListingInstructionKey\n  }, {\n    programs,\n    payer\n  });\n  const {\n    receipt,\n    sellerTradeState\n  } = listingBuilder.getContext();\n  const listing = {\n    model: 'listing',\n    lazy: false,\n    auctionHouse,\n    asset,\n    tradeStateAddress: sellerTradeState,\n    bookkeeperAddress: toPublicKey(bookkeeper),\n    sellerAddress: toPublicKey(seller),\n    receiptAddress: receipt,\n    purchaseReceiptAddress: null,\n    price,\n    tokens,\n    createdAt: now(),\n    canceledAt: null\n  };\n  const saleBuilder = metaplex.auctionHouse().builders().executeSale({\n    auctionHouse,\n    auctioneerAuthority,\n    bid,\n    listing,\n    printReceipt,\n    bookkeeper,\n    instructionKey: executeSaleInstructionKey\n  }, {\n    programs,\n    payer\n  });\n  const {\n    receipt: receiptAddress\n  } = saleBuilder.getContext();\n  const buyerTokenAccount = metaplex.tokens().pdas().associatedTokenAccount({\n    mint: asset.address,\n    owner: buyerAddress,\n    programs\n  });\n  const purchasedAsset = { ...asset,\n    token: { ...asset.token,\n      address: buyerTokenAccount,\n      ownerAddress: buyerAddress\n    }\n  };\n  const purchase = {\n    auctionHouse,\n    model: 'purchase',\n    lazy: false,\n    asset: purchasedAsset,\n    buyerAddress,\n    sellerAddress: toPublicKey(seller),\n    bookkeeperAddress: toPublicKey(bookkeeper),\n    receiptAddress,\n    price: bid.price,\n    tokens,\n    createdAt: now()\n  };\n  return TransactionBuilder.make().setFeePayer(payer).setContext({\n    listing,\n    purchase\n  }).add(listingBuilder).add(saleBuilder);\n};\n\nexport { directSellBuilder, directSellOperation, directSellOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/operations/directSell.ts"],"names":["Key","directSellOperation","useOperation","directSellOperationHandler","handle","operation","metaplex","scope","builder","directSellBuilder","input","throwIfCanceled","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","auctionHouse","auctioneerAuthority","bid","seller","identity","authority","authorityAddress","bookkeeper","createListingInstructionKey","executeSaleInstructionKey","hasAuctioneer","tokens","price","buyerAddress","printReceipt","Boolean","receiptAddress","AuctioneerAuthorityRequiredError","asset","isPrivateBid","token","sellerToken","listingBuilder","builders","list","mintAccount","mint","address","tokenAccount","instructionKey","receipt","sellerTradeState","getContext","listing","model","lazy","tradeStateAddress","bookkeeperAddress","toPublicKey","sellerAddress","purchaseReceiptAddress","createdAt","now","canceledAt","saleBuilder","executeSale","buyerTokenAccount","pdas","associatedTokenAccount","owner","purchasedAsset","ownerAddress","purchase","TransactionBuilder","make","setFeePayer","setContext","add"],"mappings":";;;;;4EA0BA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,qBAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,mBAAmB,GAAGC,YAAY,CAAsBF,GAAtB,C;AAE/C;AACA;AACA;AACA;;AAkHA;AACA;AACA;AACA;;AACO,MAAMG,0BAAiE,GAC5E;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAMC,OAAO,GAAG,MAAMC,iBAAiB,CAACH,QAAD,EAAWD,SAAS,CAACK,KAArB,EAA4BH,KAA5B,CAAvC;IACAA,KAAK,CAACI,eAANJ;IAEA,OAAOC,OAAO,CAACI,cAARJ,CAAuBF,QAAvBE,EAAiCD,KAAK,CAACM,cAAvCL,CAAP;EACF;AAVF,CADK,C,CAcP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaC,MAAAA,iBAAiB,GAAG,gBAC/BH,QAD+B,EAE/BQ,MAF+B,EAI2B;EAAA,IAD1DC,OAC0D,uEADrB,EACqB;EAC1D;EACA,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGX,QAAQ,CAACY,GAATZ,GAAea,kBAAfb;EAApB,IAA4DS,OAAlE;EACA,MAAM;IACJK,YADI;IAEJC,mBAFI;IAGJC,GAHI;IAIJC,MAAM,GAAGjB,QAAQ,CAACkB,QAATlB,EAJL;IAKJmB,SAAS,GAAGL,YAAY,CAACM,gBALrB;IAMJC,UAAU,GAAGrB,QAAQ,CAACkB,QAATlB,EANT;IAOJsB,2BAPI;IAQJC;EARI,IASFf,MATJ;EAUA,MAAM;IAAEgB;EAAF,IAAoBV,YAA1B;EACA,MAAM;IAAEW,MAAF;IAAUC,KAAV;IAAiBC;EAAjB,IAAkCX,GAAxC;EAEA,MAAMY,YAAY,GAChB,CAACpB,MAAM,CAACoB,YAAPpB,IAAuB,IAAxB,KAAiCqB,OAAO,CAACb,GAAG,CAACc,cAAL,CAD1C;;EAGA,IAAIN,aAAa,IAAI,CAACT,mBAAtB,EAA2C;IACzC,MAAM,IAAIgB,gCAAJ,EAAN;EACF;;EAEA,MAAMC,KAAK,GAAGC,YAAY,CAACjB,GAAD,CAAZiB,GACVjB,GAAG,CAACgB,KADMC,GAEV,EAAE,GAAGjB,GAAG,CAACgB,KAAT;IAAgBE,KAAK,EAAE1B,MAAM,CAAC2B;EAA9B,CAFJ;EAIA,MAAMC,cAA+D,GACnEpC,QAAQ,CAACc,YAATd,GAAwBqC,QAAxBrC,GAAmCsC,IAAnCtC,CACE;IACEuC,WAAW,EAAEP,KAAK,CAACQ,IAANR,CAAWS,OAD1B;IAEEf,KAFF;IAGEZ,YAHF;IAIEC,mBAJF;IAKEE,MALF;IAMEE,SANF;IAOEuB,YAAY,EAAEV,KAAK,CAACE,KAANF,CAAYS,OAP5B;IAQEhB,MARF;IASEG,YATF;IAUEP,UAVF;IAWEsB,cAAc,EAAErB;EAXlB,CADFtB,EAcE;IAAEU,QAAF;IAAYC;EAAZ,CAdFX,CADF;EAiBA,MAAM;IAAE4C,OAAF;IAAWC;EAAX,IAAgCT,cAAc,CAACU,UAAfV,EAAtC;EAEA,MAAMW,OAAgB,GAAG;IACvBC,KAAK,EAAE,SADgB;IAEvBC,IAAI,EAAE,KAFiB;IAGvBnC,YAHuB;IAIvBkB,KAJuB;IAKvBkB,iBAAiB,EAAEL,gBALI;IAMvBM,iBAAiB,EAAEC,WAAW,CAAC/B,UAAD,CANP;IAOvBgC,aAAa,EAAED,WAAW,CAACnC,MAAD,CAPH;IAQvBa,cAAc,EAAEc,OARO;IASvBU,sBAAsB,EAAE,IATD;IAUvB5B,KAVuB;IAWvBD,MAXuB;IAYvB8B,SAAS,EAAEC,GAAG,EAZS;IAavBC,UAAU,EAAE;EAbW,CAAzB;EAgBA,MAAMC,WAA0D,GAAG1D,QAAQ,CACxEc,YADgEd,GAEhEqC,QAFgErC,GAGhE2D,WAHgE3D,CAI/D;IACEc,YADF;IAEEC,mBAFF;IAGEC,GAHF;IAIE+B,OAJF;IAKEnB,YALF;IAMEP,UANF;IAOEsB,cAAc,EAAEpB;EAPlB,CAJ+DvB,EAa/D;IAAEU,QAAF;IAAYC;EAAZ,CAb+DX,CAAnE;EAeA,MAAM;IAAE4C,OAAO,EAAEd;EAAX,IAA8B4B,WAAW,CAACZ,UAAZY,EAApC;EAEA,MAAME,iBAAiB,GAAG5D,QAAQ,CAACyB,MAATzB,GAAkB6D,IAAlB7D,GAAyB8D,sBAAzB9D,CAAgD;IACxEwC,IAAI,EAAER,KAAK,CAACS,OAD4D;IAExEsB,KAAK,EAAEpC,YAFiE;IAGxEjB;EAHwE,CAAhDV,CAA1B;EAKA,MAAMgE,cAAc,GAAG,EACrB,GAAGhC,KADkB;IAErBE,KAAK,EAAE,EACL,GAAGF,KAAK,CAACE,KADJ;MAELO,OAAO,EAAEmB,iBAFJ;MAGLK,YAAY,EAAEtC;IAHT;EAFc,CAAvB;EASA,MAAMuC,QAAkB,GAAG;IACzBpD,YADyB;IAEzBkC,KAAK,EAAE,UAFkB;IAGzBC,IAAI,EAAE,KAHmB;IAIzBjB,KAAK,EAAEgC,cAJkB;IAKzBrC,YALyB;IAMzB0B,aAAa,EAAED,WAAW,CAACnC,MAAD,CAND;IAOzBkC,iBAAiB,EAAEC,WAAW,CAAC/B,UAAD,CAPL;IAQzBS,cARyB;IASzBJ,KAAK,EAAEV,GAAG,CAACU,KATc;IAUzBD,MAVyB;IAWzB8B,SAAS,EAAEC,GAAG;EAXW,CAA3B;EAcA,OAAOW,kBAAkB,CAACC,IAAnBD,GACJE,WADIF,CACQxD,KADRwD,EAEJG,UAFIH,CAEO;IACVpB,OADU;IAEVmB;EAFU,CAFPC,EAMJI,GANIJ,CAMA/B,cANA+B,EAOJI,GAPIJ,CAOAT,WAPAS,CAAP;AAQF,CAvHahE","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Token } from '../../tokenModule';\nimport { AuctioneerAuthorityRequiredError } from '../errors';\nimport {\n  AuctionHouse,\n  isPrivateBid,\n  Listing,\n  PrivateBid,\n  PublicBid,\n  Purchase,\n} from '../models';\nimport { CreateListingBuilderContext } from './createListing';\nimport { ExecuteSaleBuilderContext } from './executeSale';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  now,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'DirectSellOperation' as const;\n\n/**\n * Creates a listing on a given asset and then executes a sell on the created bid and listing.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .sell({ auctionHouse, bid };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const directSellOperation = useOperation<DirectSellOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type DirectSellOperation = Operation<\n  typeof Key,\n  DirectSellInput,\n  DirectSellOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type DirectSellInput = {\n  /** The Auction House in which to create a Listing and execute a Sale. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * The Auction House authority.\n   * If this is Signer the transaction fee\n   * will be paid from the Auction House Fee Account\n   *\n   * @defaultValue `auctionHouse.authority`\n   */\n  authority?: PublicKey | Signer;\n\n  /**\n   * Creator of a listing.\n   *\n   * There must be one and only one signer; Authority or Seller must sign.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  seller?: PublicKey | Signer;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n\n  /**\n   * The address of the bookkeeper wallet responsible for the receipt.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  bookkeeper?: Signer;\n\n  /**\n   * Prints the purchase receipt.\n   * The receipt holds information about the purchase,\n   * So it's important to print it if you want to use the `Purchase` model\n   *\n   * @defaultValue `true`\n   */\n  printReceipt?: boolean;\n} & (\n  | {\n      /**\n       * The Token Account of an asset to sell.\n       * Public Bid doesn't contain a token, so it must be provided externally via this parameter.\n       */\n      sellerToken: Token;\n\n      /**\n       * The Public Bid that is used in the sale.\n       * We only need a subset of the `Bid` model but we\n       * need enough information regarding its settings to know how\n       * to execute the sale.\n       *\n       * This includes its auction house address, buyer, receipt address, etc.\n       */\n      bid: Omit<\n        PublicBid,\n        'bookkeeperAddress' | 'purchaseReceiptAddress' | 'createdAt'\n      >;\n    }\n  | {\n      /**\n       * The Token Account of an asset to sell.\n       * Not needed for private bid.\n       */\n      sellerToken?: null;\n\n      /**\n       * The Private Bid that is used in the sale.\n       * We only need a subset of the `Bid` model but we\n       * need enough information regarding its settings to know how\n       * to execute the sale.\n       *\n       * This includes its asset, auction house address, buyer, receipt address, etc.\n       */\n      bid: Omit<\n        PrivateBid,\n        'bookkeeperAddress' | 'purchaseReceiptAddress' | 'createdAt'\n      >;\n    }\n);\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type DirectSellOutput = {\n  /** A model that keeps information about the Listing. */\n  listing: Listing;\n\n  /** A model that keeps information about the Purchase. */\n  purchase: Purchase;\n\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const directSellOperationHandler: OperationHandler<DirectSellOperation> =\n  {\n    handle: async (\n      operation: DirectSellOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) => {\n      const builder = await directSellBuilder(metaplex, operation.input, scope);\n      scope.throwIfCanceled();\n\n      return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type DirectSellBuilderParams = Omit<\n  DirectSellInput,\n  'confirmOptions'\n> & {\n  createListingInstructionKey?: string;\n  executeSaleInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type DirectSellBuilderContext = Omit<DirectSellOutput, 'response'>;\n\n/**\n * Creates a listing on a given asset and executes a sale on the created listing and given bid.\n *\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .sell({ auctionHouse, bid, seller })\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const directSellBuilder = async (\n  metaplex: Metaplex,\n  params: DirectSellBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<DirectSellBuilderContext>> => {\n  // Data.\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    auctionHouse,\n    auctioneerAuthority,\n    bid,\n    seller = metaplex.identity(),\n    authority = auctionHouse.authorityAddress,\n    bookkeeper = metaplex.identity(),\n    createListingInstructionKey,\n    executeSaleInstructionKey,\n  } = params;\n  const { hasAuctioneer } = auctionHouse;\n  const { tokens, price, buyerAddress } = bid;\n\n  const printReceipt =\n    (params.printReceipt ?? true) && Boolean(bid.receiptAddress);\n\n  if (hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  const asset = isPrivateBid(bid)\n    ? bid.asset\n    : { ...bid.asset, token: params.sellerToken as Token };\n\n  const listingBuilder: TransactionBuilder<CreateListingBuilderContext> =\n    metaplex.auctionHouse().builders().list(\n      {\n        mintAccount: asset.mint.address,\n        price,\n        auctionHouse,\n        auctioneerAuthority,\n        seller,\n        authority,\n        tokenAccount: asset.token.address,\n        tokens,\n        printReceipt,\n        bookkeeper,\n        instructionKey: createListingInstructionKey,\n      },\n      { programs, payer }\n    );\n  const { receipt, sellerTradeState } = listingBuilder.getContext();\n\n  const listing: Listing = {\n    model: 'listing',\n    lazy: false,\n    auctionHouse,\n    asset,\n    tradeStateAddress: sellerTradeState,\n    bookkeeperAddress: toPublicKey(bookkeeper),\n    sellerAddress: toPublicKey(seller),\n    receiptAddress: receipt,\n    purchaseReceiptAddress: null,\n    price,\n    tokens,\n    createdAt: now(),\n    canceledAt: null,\n  };\n\n  const saleBuilder: TransactionBuilder<ExecuteSaleBuilderContext> = metaplex\n    .auctionHouse()\n    .builders()\n    .executeSale(\n      {\n        auctionHouse,\n        auctioneerAuthority,\n        bid,\n        listing,\n        printReceipt,\n        bookkeeper,\n        instructionKey: executeSaleInstructionKey,\n      },\n      { programs, payer }\n    );\n  const { receipt: receiptAddress } = saleBuilder.getContext();\n\n  const buyerTokenAccount = metaplex.tokens().pdas().associatedTokenAccount({\n    mint: asset.address,\n    owner: buyerAddress,\n    programs,\n  });\n  const purchasedAsset = {\n    ...asset,\n    token: {\n      ...asset.token,\n      address: buyerTokenAccount,\n      ownerAddress: buyerAddress,\n    },\n  };\n\n  const purchase: Purchase = {\n    auctionHouse,\n    model: 'purchase',\n    lazy: false,\n    asset: purchasedAsset,\n    buyerAddress,\n    sellerAddress: toPublicKey(seller),\n    bookkeeperAddress: toPublicKey(bookkeeper),\n    receiptAddress,\n    price: bid.price,\n    tokens,\n    createdAt: now(),\n  };\n\n  return TransactionBuilder.make<DirectSellBuilderContext>()\n    .setFeePayer(payer)\n    .setContext({\n      listing,\n      purchase,\n    })\n    .add(listingBuilder)\n    .add(saleBuilder);\n};\n"]},"metadata":{},"sourceType":"module"}