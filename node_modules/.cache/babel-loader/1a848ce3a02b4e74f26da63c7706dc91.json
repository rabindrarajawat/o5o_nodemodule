{"ast":null,"code":"import { TokenBuildersClient } from './TokenBuildersClient.mjs';\nimport { TokenPdasClient } from './TokenPdasClient.mjs';\nimport { findMintByAddressOperation } from './operations/findMintByAddress.mjs';\nimport { findTokenByAddressOperation } from './operations/findTokenByAddress.mjs';\nimport { findTokenWithMintByAddressOperation } from './operations/findTokenWithMintByAddress.mjs';\nimport { findTokenWithMintByMintOperation } from './operations/findTokenWithMintByMint.mjs';\nimport { createMintOperation } from './operations/createMint.mjs';\nimport { createTokenOperation } from './operations/createToken.mjs';\nimport { createTokenWithMintOperation } from './operations/createTokenWithMint.mjs';\nimport { mintTokensOperation } from './operations/mintTokens.mjs';\nimport { sendTokensOperation } from './operations/sendTokens.mjs';\nimport { freezeTokensOperation } from './operations/freezeTokens.mjs';\nimport { thawTokensOperation } from './operations/thawTokens.mjs';\nimport { approveTokenDelegateAuthorityOperation } from './operations/approveTokenDelegateAuthority.mjs';\nimport { revokeTokenDelegateAuthorityOperation } from './operations/revokeTokenDelegateAuthority.mjs';\n/**\n * This is a client for the Token module.\n *\n * It enables us to interact with the SPL Token program in order to\n * create, send, freeze, thaw, and mint tokens.\n *\n * You may access this client via the `tokens()` method of your `Metaplex` instance.\n *\n * ```ts\n * const tokenClient = metaplex.tokens();\n * ```\n *\n * @example\n * You can create a new mint account with an associated token account like so.\n * The owner of this token account will, by default, be the current identity\n * of the metaplex instance.\n *\n * ```ts\n * const { token } = await metaplex.tokens().createTokenWithMint();\n * ```\n *\n * @group Modules\n */\n\nclass TokenClient {\n  constructor(metaplex) {\n    this.metaplex = metaplex;\n  }\n  /**\n   * You may use the `builders()` client to access the\n   * underlying Transaction Builders of this module.\n   *\n   * ```ts\n   * const buildersClient = metaplex.tokens().builders();\n   * ```\n   */\n\n\n  builders() {\n    return new TokenBuildersClient(this.metaplex);\n  }\n  /**\n   * You may use the `pdas()` client to build PDAs related to this module.\n   *\n   * ```ts\n   * const pdasClient = metaplex.tokens().pdas();\n   * ```\n   */\n\n\n  pdas() {\n    return new TokenPdasClient(this.metaplex);\n  } // -----------------\n  // Queries\n  // -----------------\n\n  /** {@inheritDoc findMintByAddressOperation} */\n\n\n  findMintByAddress(input, options) {\n    return this.metaplex.operations().execute(findMintByAddressOperation(input), options);\n  }\n  /** {@inheritDoc findTokenByAddressOperation} */\n\n\n  findTokenByAddress(input, options) {\n    return this.metaplex.operations().execute(findTokenByAddressOperation(input), options);\n  }\n  /** {@inheritDoc findTokenWithMintByAddressOperation} */\n\n\n  findTokenWithMintByAddress(input, options) {\n    return this.metaplex.operations().execute(findTokenWithMintByAddressOperation(input), options);\n  }\n  /** {@inheritDoc findTokenWithMintByMintOperation} */\n\n\n  findTokenWithMintByMint(input, options) {\n    return this.metaplex.operations().execute(findTokenWithMintByMintOperation(input), options);\n  } // -----------------\n  // Create\n  // -----------------\n\n  /** {@inheritDoc createMintOperation} */\n\n\n  createMint() {\n    let input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    return this.metaplex.operations().execute(createMintOperation(input), options);\n  }\n  /**\n   * Create a new Token account from the provided input\n   * and returns the newly created `Token` model.\n   */\n\n  /** {@inheritDoc createTokenOperation} */\n\n\n  createToken(input, options) {\n    return this.metaplex.operations().execute(createTokenOperation(input), options);\n  }\n  /** {@inheritDoc createTokenWithMintOperation} */\n\n\n  createTokenWithMint() {\n    let input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    return this.metaplex.operations().execute(createTokenWithMintOperation(input), options);\n  } // -----------------\n  // Update\n  // -----------------\n\n  /** {@inheritDoc mintTokensOperation} */\n\n\n  mint(input, options) {\n    return this.metaplex.operations().execute(mintTokensOperation(input), options);\n  }\n  /** {@inheritDoc sendTokensOperation} */\n\n\n  send(input, options) {\n    return this.metaplex.operations().execute(sendTokensOperation(input), options);\n  }\n  /** {@inheritDoc freezeTokensOperation} */\n\n\n  freeze(input, options) {\n    return this.metaplex.operations().execute(freezeTokensOperation(input), options);\n  }\n  /** {@inheritDoc thawTokensOperation} */\n\n\n  thaw(input, options) {\n    return this.metaplex.operations().execute(thawTokensOperation(input), options);\n  } // -----------------\n  // Delegate\n  // -----------------\n\n  /** {@inheritDoc approveTokenDelegateAuthorityOperation} */\n\n\n  approveDelegateAuthority(input, options) {\n    return this.metaplex.operations().execute(approveTokenDelegateAuthorityOperation(input), options);\n  }\n  /** {@inheritDoc revokeTokenDelegateAuthorityOperation} */\n\n\n  revokeDelegateAuthority(input, options) {\n    return this.metaplex.operations().execute(revokeTokenDelegateAuthorityOperation(input), options);\n  }\n\n}\n\nexport { TokenClient };","map":{"version":3,"sources":["../../../../src/plugins/tokenModule/TokenClient.ts"],"names":["TokenClient","constructor","metaplex","builders","TokenBuildersClient","pdas","TokenPdasClient","findMintByAddress","input","options","operations","execute","findMintByAddressOperation","findTokenByAddress","findTokenByAddressOperation","findTokenWithMintByAddress","findTokenWithMintByAddressOperation","findTokenWithMintByMint","findTokenWithMintByMintOperation","createMint","createMintOperation","createToken","createTokenOperation","createTokenWithMint","createTokenWithMintOperation","mint","mintTokensOperation","send","sendTokensOperation","freeze","freezeTokensOperation","thaw","thawTokensOperation","approveDelegateAuthority","approveTokenDelegateAuthorityOperation","revokeDelegateAuthority","revokeTokenDelegateAuthorityOperation"],"mappings":"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","sourcesContent":["import {\n  ApproveTokenDelegateAuthorityInput,\n  approveTokenDelegateAuthorityOperation,\n  CreateMintInput,\n  createMintOperation,\n  CreateTokenInput,\n  createTokenOperation,\n  CreateTokenWithMintInput,\n  createTokenWithMintOperation,\n  FindMintByAddressInput,\n  findMintByAddressOperation,\n  FindTokenByAddressInput,\n  findTokenByAddressOperation,\n  FindTokenWithMintByAddressInput,\n  findTokenWithMintByAddressOperation,\n  FindTokenWithMintByMintInput,\n  findTokenWithMintByMintOperation,\n  FreezeTokensInput,\n  freezeTokensOperation,\n  MintTokensInput,\n  mintTokensOperation,\n  RevokeTokenDelegateAuthorityInput,\n  revokeTokenDelegateAuthorityOperation,\n  SendTokensInput,\n  sendTokensOperation,\n  ThawTokensInput,\n  thawTokensOperation,\n} from './operations';\nimport { TokenBuildersClient } from './TokenBuildersClient';\nimport { TokenPdasClient } from './TokenPdasClient';\nimport type { Metaplex } from '@/Metaplex';\nimport { OperationOptions } from '@/types';\n\n/**\n * This is a client for the Token module.\n *\n * It enables us to interact with the SPL Token program in order to\n * create, send, freeze, thaw, and mint tokens.\n *\n * You may access this client via the `tokens()` method of your `Metaplex` instance.\n *\n * ```ts\n * const tokenClient = metaplex.tokens();\n * ```\n *\n * @example\n * You can create a new mint account with an associated token account like so.\n * The owner of this token account will, by default, be the current identity\n * of the metaplex instance.\n *\n * ```ts\n * const { token } = await metaplex.tokens().createTokenWithMint();\n * ```\n *\n * @group Modules\n */\nexport class TokenClient {\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  /**\n   * You may use the `builders()` client to access the\n   * underlying Transaction Builders of this module.\n   *\n   * ```ts\n   * const buildersClient = metaplex.tokens().builders();\n   * ```\n   */\n  builders() {\n    return new TokenBuildersClient(this.metaplex);\n  }\n\n  /**\n   * You may use the `pdas()` client to build PDAs related to this module.\n   *\n   * ```ts\n   * const pdasClient = metaplex.tokens().pdas();\n   * ```\n   */\n  pdas() {\n    return new TokenPdasClient(this.metaplex);\n  }\n\n  // -----------------\n  // Queries\n  // -----------------\n\n  /** {@inheritDoc findMintByAddressOperation} */\n  findMintByAddress(input: FindMintByAddressInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(findMintByAddressOperation(input), options);\n  }\n\n  /** {@inheritDoc findTokenByAddressOperation} */\n  findTokenByAddress(\n    input: FindTokenByAddressInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(findTokenByAddressOperation(input), options);\n  }\n\n  /** {@inheritDoc findTokenWithMintByAddressOperation} */\n  findTokenWithMintByAddress(\n    input: FindTokenWithMintByAddressInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(findTokenWithMintByAddressOperation(input), options);\n  }\n\n  /** {@inheritDoc findTokenWithMintByMintOperation} */\n  findTokenWithMintByMint(\n    input: FindTokenWithMintByMintInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(findTokenWithMintByMintOperation(input), options);\n  }\n\n  // -----------------\n  // Create\n  // -----------------\n\n  /** {@inheritDoc createMintOperation} */\n  createMint(input: CreateMintInput = {}, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(createMintOperation(input), options);\n  }\n\n  /**\n   * Create a new Token account from the provided input\n   * and returns the newly created `Token` model.\n   */\n  /** {@inheritDoc createTokenOperation} */\n  createToken(input: CreateTokenInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(createTokenOperation(input), options);\n  }\n\n  /** {@inheritDoc createTokenWithMintOperation} */\n  createTokenWithMint(\n    input: CreateTokenWithMintInput = {},\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(createTokenWithMintOperation(input), options);\n  }\n\n  // -----------------\n  // Update\n  // -----------------\n\n  /** {@inheritDoc mintTokensOperation} */\n  mint(input: MintTokensInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(mintTokensOperation(input), options);\n  }\n\n  /** {@inheritDoc sendTokensOperation} */\n  send(input: SendTokensInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(sendTokensOperation(input), options);\n  }\n\n  /** {@inheritDoc freezeTokensOperation} */\n  freeze(input: FreezeTokensInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(freezeTokensOperation(input), options);\n  }\n\n  /** {@inheritDoc thawTokensOperation} */\n  thaw(input: ThawTokensInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(thawTokensOperation(input), options);\n  }\n\n  // -----------------\n  // Delegate\n  // -----------------\n\n  /** {@inheritDoc approveTokenDelegateAuthorityOperation} */\n  approveDelegateAuthority(\n    input: ApproveTokenDelegateAuthorityInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(approveTokenDelegateAuthorityOperation(input), options);\n  }\n\n  /** {@inheritDoc revokeTokenDelegateAuthorityOperation} */\n  revokeDelegateAuthority(\n    input: RevokeTokenDelegateAuthorityInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(revokeTokenDelegateAuthorityOperation(input), options);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}