{"ast":null,"code":"import { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createInitializeMultisigInstruction } from '../instructions/initializeMultisig.js';\nimport { getMinimumBalanceForRentExemptMultisig, MULTISIG_SIZE } from '../state/multisig.js';\n/**\n * Create and initialize a new multisig\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param signers        Full set of signers\n * @param m              Number of required signatures\n * @param keypair        Optional keypair, defaulting to a new random one\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new multisig\n */\n\nexport async function createMultisig(connection, payer, signers, m) {\n  let keypair = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Keypair.generate();\n  let confirmOptions = arguments.length > 5 ? arguments[5] : undefined;\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : TOKEN_PROGRAM_ID;\n  const lamports = await getMinimumBalanceForRentExemptMultisig(connection);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: MULTISIG_SIZE,\n    lamports,\n    programId\n  }), createInitializeMultisigInstruction(keypair.publicKey, signers, m, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}","map":{"version":3,"sources":["../../../src/actions/createMultisig.ts"],"names":[],"mappings":"AACA,SAAS,OAAT,EAAkB,yBAAlB,EAA6C,aAA7C,EAA4D,WAA5D,QAA+E,iBAA/E;AACA,SAAS,gBAAT,QAAiC,iBAAjC;AACA,SAAS,mCAAT,QAAoD,uCAApD;AACA,SAAS,sCAAT,EAAiD,aAAjD,QAAsE,sBAAtE;AAEA;;;;;;;;;;;;AAYG;;AACH,OAAO,eAAe,cAAf,CACH,UADG,EAEH,KAFG,EAGH,OAHG,EAIH,CAJG,EAOyB;EAAA,IAF5B,OAE4B,uEAFlB,OAAO,CAAC,QAAR,EAEkB;EAAA,IAD5B,cAC4B;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B,MAAM,QAAQ,GAAG,MAAM,sCAAsC,CAAC,UAAD,CAA7D;EAEA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,aAAa,CAAC,aAAd,CAA4B;IACxB,UAAU,EAAE,KAAK,CAAC,SADM;IAExB,gBAAgB,EAAE,OAAO,CAAC,SAFF;IAGxB,KAAK,EAAE,aAHiB;IAIxB,QAJwB;IAKxB;EALwB,CAA5B,CADgB,EAQhB,mCAAmC,CAAC,OAAO,CAAC,SAAT,EAAoB,OAApB,EAA6B,CAA7B,EAAgC,SAAhC,CARnB,CAApB;EAWA,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,EAAQ,OAAR,CAA1B,EAA4C,cAA5C,CAA/B;EAEA,OAAO,OAAO,CAAC,SAAf;AACH","sourceRoot":"","sourcesContent":["import { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createInitializeMultisigInstruction } from '../instructions/initializeMultisig.js';\nimport { getMinimumBalanceForRentExemptMultisig, MULTISIG_SIZE } from '../state/multisig.js';\n/**\n * Create and initialize a new multisig\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param signers        Full set of signers\n * @param m              Number of required signatures\n * @param keypair        Optional keypair, defaulting to a new random one\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new multisig\n */\nexport async function createMultisig(connection, payer, signers, m, keypair = Keypair.generate(), confirmOptions, programId = TOKEN_PROGRAM_ID) {\n    const lamports = await getMinimumBalanceForRentExemptMultisig(connection);\n    const transaction = new Transaction().add(SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: keypair.publicKey,\n        space: MULTISIG_SIZE,\n        lamports,\n        programId,\n    }), createInitializeMultisigInstruction(keypair.publicKey, signers, m, programId));\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n    return keypair.publicKey;\n}\n//# sourceMappingURL=createMultisig.js.map"]},"metadata":{},"sourceType":"module"}