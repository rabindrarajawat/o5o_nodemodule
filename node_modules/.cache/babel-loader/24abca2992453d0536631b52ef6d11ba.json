{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\n\nexport const closeAccountInstructionData = struct([u8('instruction')]);\n/**\n * Construct a CloseAccount instruction\n *\n * @param account      Account to close\n * @param destination  Account to receive the remaining balance of the closed account\n * @param authority    Account close authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createCloseAccountInstruction(account, destination, authority) {\n  let multiSigners = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(closeAccountInstructionData.span);\n  closeAccountInstructionData.encode({\n    instruction: TokenInstruction.CloseAccount\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a CloseAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeCloseAccountInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== closeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      destination,\n      authority,\n      multiSigners\n    },\n    data\n  } = decodeCloseAccountInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.CloseAccount) throw new TokenInvalidInstructionTypeError();\n  if (!account || !destination || !authority) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      destination,\n      authority,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode a CloseAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeCloseAccountInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, destination, authority, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      destination,\n      authority,\n      multiSigners\n    },\n    data: closeAccountInstructionData.decode(data)\n  };\n}","map":{"version":3,"sources":["../../../src/instructions/closeAccount.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,EAAiB,EAAjB,QAA2B,uBAA3B;AAEA,SAAS,sBAAT,QAAuC,iBAAvC;AACA,SAAS,gBAAT,QAAiC,iBAAjC;AACA,SACI,gCADJ,EAEI,gCAFJ,EAGI,mCAHJ,EAII,gCAJJ,QAKO,cALP;AAMA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,gBAAT,QAAiC,YAAjC;AAOA;;AACA,OAAO,MAAM,2BAA2B,GAAG,MAAM,CAA8B,CAAC,EAAE,CAAC,aAAD,CAAH,CAA9B,CAA1C;AAEP;;;;;;;;;;AAUG;;AACH,OAAM,SAAU,6BAAV,CACF,OADE,EAEF,WAFE,EAGF,SAHE,EAK0B;EAAA,IAD5B,YAC4B,uEADH,EACG;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B,MAAM,IAAI,GAAG,UAAU,CACnB,CACI;IAAE,MAAM,EAAE,OAAV;IAAmB,QAAQ,EAAE,KAA7B;IAAoC,UAAU,EAAE;EAAhD,CADJ,EAEI;IAAE,MAAM,EAAE,WAAV;IAAuB,QAAQ,EAAE,KAAjC;IAAwC,UAAU,EAAE;EAApD,CAFJ,CADmB,EAKnB,SALmB,EAMnB,YANmB,CAAvB;EASA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,2BAA2B,CAAC,IAAzC,CAAb;EACA,2BAA2B,CAAC,MAA5B,CAAmC;IAAE,WAAW,EAAE,gBAAgB,CAAC;EAAhC,CAAnC,EAAmF,IAAnF;EAEA,OAAO,IAAI,sBAAJ,CAA2B;IAAE,IAAF;IAAQ,SAAR;IAAmB;EAAnB,CAA3B,CAAP;AACH;AAgBD;;;;;;;AAOG;;AACH,OAAM,SAAU,6BAAV,CACF,WADE,EAE0B;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B,IAAI,CAAC,WAAW,CAAC,SAAZ,CAAsB,MAAtB,CAA6B,SAA7B,CAAL,EAA8C,MAAM,IAAI,mCAAJ,EAAN;EAC9C,IAAI,WAAW,CAAC,IAAZ,CAAiB,MAAjB,KAA4B,2BAA2B,CAAC,IAA5D,EAAkE,MAAM,IAAI,gCAAJ,EAAN;EAElE,MAAM;IACF,IAAI,EAAE;MAAE,OAAF;MAAW,WAAX;MAAwB,SAAxB;MAAmC;IAAnC,CADJ;IAEF;EAFE,IAGF,sCAAsC,CAAC,WAAD,CAH1C;EAIA,IAAI,IAAI,CAAC,WAAL,KAAqB,gBAAgB,CAAC,YAA1C,EAAwD,MAAM,IAAI,gCAAJ,EAAN;EACxD,IAAI,CAAC,OAAD,IAAY,CAAC,WAAb,IAA4B,CAAC,SAAjC,EAA4C,MAAM,IAAI,gCAAJ,EAAN,CAVhB,CAY5B;;EAEA,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF,OADE;MAEF,WAFE;MAGF,SAHE;MAIF;IAJE,CAFH;IAQH;EARG,CAAP;AAUH;AAgBD;;;;;;AAMG;;AACH,OAAM,SAAU,sCAAV,OAImB;EAAA,IAJ8B;IACnD,SADmD;IAEnD,IAAI,EAAE,CAAC,OAAD,EAAU,WAAV,EAAuB,SAAvB,EAAkC,GAAG,YAArC,CAF6C;IAGnD;EAHmD,CAI9B;EACrB,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF,OADE;MAEF,WAFE;MAGF,SAHE;MAIF;IAJE,CAFH;IAQH,IAAI,EAAE,2BAA2B,CAAC,MAA5B,CAAmC,IAAnC;EARH,CAAP;AAUH","sourceRoot":"","sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const closeAccountInstructionData = struct([u8('instruction')]);\n/**\n * Construct a CloseAccount instruction\n *\n * @param account      Account to close\n * @param destination  Account to receive the remaining balance of the closed account\n * @param authority    Account close authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createCloseAccountInstruction(account, destination, authority, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], authority, multiSigners);\n    const data = Buffer.alloc(closeAccountInstructionData.span);\n    closeAccountInstructionData.encode({ instruction: TokenInstruction.CloseAccount }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a CloseAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeCloseAccountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== closeAccountInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, destination, authority, multiSigners }, data, } = decodeCloseAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.CloseAccount)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !destination || !authority)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode a CloseAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeCloseAccountInstructionUnchecked({ programId, keys: [account, destination, authority, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: closeAccountInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=closeAccount.js.map"]},"metadata":{},"sourceType":"module"}