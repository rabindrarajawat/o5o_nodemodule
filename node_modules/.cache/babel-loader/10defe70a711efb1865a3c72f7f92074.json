{"ast":null,"code":"import { createWithdrawFromFeeInstruction } from '@metaplex-foundation/mpl-auction-house';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'WithdrawFromFeeAccountOperation';\n/**\n * Transfers funds from Auction House Fee Wallet to the Fee Withdrawal Destination Wallet.\n * By default Fee Withdrawal Destination Wallet is set to `metaplex.identity()`.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .withdrawFromFeeAccount({ auctionHouse, amount };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst withdrawFromFeeAccountOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst withdrawFromFeeAccountOperationHandler = {\n  handle: async (operation, metaplex, scope) => withdrawFromFeeAccountBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions)\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Transfers funds from Auction House Fee Wallet to the Fee Withdrawal Destination Wallet.\n * By default Fee Withdrawal Destination Wallet is set to `metaplex.identity()`.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .withdrawFromFeeAccount({ auctionHouse, amount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst withdrawFromFeeAccountBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // Data.\n  const {\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    auctionHouse,\n    amount,\n    instructionKey,\n    authority = metaplex.identity()\n  } = params; // Accounts.\n\n  const accounts = {\n    authority: auctionHouse.authorityAddress,\n    feeWithdrawalDestination: auctionHouse.feeWithdrawalDestinationAddress,\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress\n  }; // Withdraw From Fee Instruction.\n\n  const withdrawFromFeeInstruction = createWithdrawFromFeeInstruction(accounts, {\n    amount: amount.basisPoints\n  }); // Signers.\n\n  return TransactionBuilder.make().setFeePayer(payer) // Withdraw From Fee.\n  .add({\n    instruction: withdrawFromFeeInstruction,\n    signers: [authority],\n    key: instructionKey ?? 'withdrawFromFeeAccount'\n  });\n};\n\nexport { withdrawFromFeeAccountBuilder, withdrawFromFeeAccountOperation, withdrawFromFeeAccountOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/operations/withdrawFromFeeAccount.ts"],"names":["Key","withdrawFromFeeAccountOperation","useOperation","withdrawFromFeeAccountOperationHandler","handle","operation","metaplex","scope","withdrawFromFeeAccountBuilder","input","sendAndConfirm","confirmOptions","params","options","payer","rpc","getDefaultFeePayer","auctionHouse","amount","instructionKey","authority","identity","accounts","authorityAddress","feeWithdrawalDestination","feeWithdrawalDestinationAddress","address","auctionHouseFeeAccount","feeAccountAddress","withdrawFromFeeInstruction","createWithdrawFromFeeInstruction","basisPoints","TransactionBuilder","make","setFeePayer","add","instruction","signers","key"],"mappings":";;4EAkBA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,iCAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,+BAA+B,GAC1CC,YAAY,CAAkCF,GAAlC,C;AAEd;AACA;AACA;AACA;;AA+CA;AACA;AACA;AACA;;AACO,MAAMG,sCAAyF,GACpG;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAKNC,6BAA6B,CAC3BF,QAD2B,EAE3BD,SAAS,CAACI,KAFiB,EAG3BF,KAH2B,CAA7BC,CAIEE,cAJFF,CAIiBF,QAJjBE,EAI2BD,KAAK,CAACI,cAJjCH;AANJ,CADK,C,CAcP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaA,MAAAA,6BAA6B,GAAG,UAC3CF,QAD2C,EAE3CM,MAF2C,EAIkB;EAAA,IAD7DC,OAC6D,uEADxB,EACwB;EAC7D;EACA,MAAM;IAAEC,KAAK,GAAGR,QAAQ,CAACS,GAATT,GAAeU,kBAAfV;EAAV,IAAkDO,OAAxD;EACA,MAAM;IACJI,YADI;IAEJC,MAFI;IAGJC,cAHI;IAIJC,SAAS,GAAGd,QAAQ,CAACe,QAATf;EAJR,IAKFM,MALJ,CAH6D,CAU7D;;EACA,MAAMU,QAA4C,GAAG;IACnDF,SAAS,EAAEH,YAAY,CAACM,gBAD2B;IAEnDC,wBAAwB,EAAEP,YAAY,CAACQ,+BAFY;IAGnDR,YAAY,EAAEA,YAAY,CAACS,OAHwB;IAInDC,sBAAsB,EAAEV,YAAY,CAACW;EAJc,CAArD,CAX6D,CAkB7D;;EACA,MAAMC,0BAA0B,GAAGC,gCAAgC,CACjER,QADiE,EAEjE;IAAEJ,MAAM,EAAEA,MAAM,CAACa;EAAjB,CAFiE,CAAnE,CAnB6D,CAwB7D;;EACA,OACEC,kBAAkB,CAACC,IAAnBD,GACGE,WADHF,CACelB,KADfkB,EAGE;EAHFA,CAIGG,GAJHH,CAIO;IACHI,WAAW,EAAEP,0BADV;IAEHQ,OAAO,EAAE,CAACjB,SAAD,CAFN;IAGHkB,GAAG,EAAEnB,cAAc,IAAI;EAHpB,CAJPa,CADF;AAWF,CAxCaxB","sourcesContent":["import {\n  createWithdrawFromFeeInstruction,\n  WithdrawFromFeeInstructionAccounts,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AuctionHouse } from '../models';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'WithdrawFromFeeAccountOperation' as const;\n\n/**\n * Transfers funds from Auction House Fee Wallet to the Fee Withdrawal Destination Wallet.\n * By default Fee Withdrawal Destination Wallet is set to `metaplex.identity()`.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .withdrawFromFeeAccount({ auctionHouse, amount };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const withdrawFromFeeAccountOperation =\n  useOperation<WithdrawFromFeeAccountOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type WithdrawFromFeeAccountOperation = Operation<\n  typeof Key,\n  WithdrawFromFeeAccountInput,\n  WithdrawFromFeeAccountOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type WithdrawFromFeeAccountInput = {\n  /**\n   * The Auction House from which to transfer funds from the fee wallet to the fee withdrawal destination wallet.\n   * `feeWithdrawalDestinationAddress` is set on Auction House creation, but you can also change it via the `update` operation.\n   * */\n  auctionHouse: Pick<\n    AuctionHouse,\n    | 'address'\n    | 'authorityAddress'\n    | 'feeWithdrawalDestinationAddress'\n    | 'feeAccountAddress'\n  >;\n\n  /**\n   * The Auction House authority.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /**\n   * Amount of funds to withdraw.\n   * This can either be in SOL or in the SPL token used by the Auction House as a currency.\n   */\n  amount: SolAmount | SplTokenAmount;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type WithdrawFromFeeAccountOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const withdrawFromFeeAccountOperationHandler: OperationHandler<WithdrawFromFeeAccountOperation> =\n  {\n    handle: async (\n      operation: WithdrawFromFeeAccountOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) =>\n      withdrawFromFeeAccountBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions),\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type WithdrawFromFeeAccountBuilderParams = Omit<\n  WithdrawFromFeeAccountInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type WithdrawFromFeeAccountBuilderContext = Omit<\n  WithdrawFromFeeAccountOutput,\n  'response'\n>;\n\n/**\n * Transfers funds from Auction House Fee Wallet to the Fee Withdrawal Destination Wallet.\n * By default Fee Withdrawal Destination Wallet is set to `metaplex.identity()`.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .withdrawFromFeeAccount({ auctionHouse, amount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const withdrawFromFeeAccountBuilder = (\n  metaplex: Metaplex,\n  params: WithdrawFromFeeAccountBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<WithdrawFromFeeAccountBuilderContext> => {\n  // Data.\n  const { payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    auctionHouse,\n    amount,\n    instructionKey,\n    authority = metaplex.identity(),\n  } = params;\n\n  // Accounts.\n  const accounts: WithdrawFromFeeInstructionAccounts = {\n    authority: auctionHouse.authorityAddress,\n    feeWithdrawalDestination: auctionHouse.feeWithdrawalDestinationAddress,\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n  };\n\n  // Withdraw From Fee Instruction.\n  const withdrawFromFeeInstruction = createWithdrawFromFeeInstruction(\n    accounts,\n    { amount: amount.basisPoints }\n  );\n\n  // Signers.\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Withdraw From Fee.\n      .add({\n        instruction: withdrawFromFeeInstruction,\n        signers: [authority],\n        key: instructionKey ?? 'withdrawFromFeeAccount',\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}