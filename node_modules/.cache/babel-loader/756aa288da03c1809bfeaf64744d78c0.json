{"ast":null,"code":"import { resolveClusterFromConnection } from './types/Cluster.mjs';\nimport { corePlugins } from './plugins/corePlugins/plugin.mjs';\n\nclass Metaplex {\n  /** The connection object from Solana's SDK. */\n\n  /** The cluster in which the connection endpoint belongs to. */\n  constructor(connection) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.connection = connection;\n    this.cluster = options.cluster ?? resolveClusterFromConnection(connection);\n    this.use(corePlugins());\n  }\n\n  static make(connection) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new this(connection, options);\n  }\n\n  use(plugin) {\n    plugin.install(this);\n    return this;\n  }\n\n}\n\nexport { Metaplex };","map":{"version":3,"sources":["../../src/Metaplex.ts"],"names":["Metaplex","constructor","connection","options","cluster","resolveClusterFromConnection","use","corePlugins","make","plugin","install"],"mappings":";;;AAQO,MAAMA,QAAN,CAAe;EACpB;;EAGA;EAGAC,WAAW,CAACC,UAAD,EAAwD;IAAA,IAA/BC,OAA+B,uEAAJ,EAAI;IACjE,KAAKD,UAAL,GAAkBA,UAAlB;IACA,KAAKE,OAAL,GAAeD,OAAO,CAACC,OAARD,IAAmBE,4BAA4B,CAACH,UAAD,CAA9D;IACA,KAAKI,GAAL,CAASC,WAAW,EAApB;EACF;;EAEW,OAAJC,IAAI,CAACN,UAAD,EAAwD;IAAA,IAA/BC,OAA+B,uEAAJ,EAAI;IACjE,OAAO,IAAI,IAAJ,CAASD,UAAT,EAAqBC,OAArB,CAAP;EACF;;EAEAG,GAAG,CAACG,MAAD,EAAyB;IAC1BA,MAAM,CAACC,OAAPD,CAAe,IAAfA;IAEA,OAAO,IAAP;EACF;;AArBoB","sourcesContent":["import { Connection } from '@solana/web3.js';\nimport { MetaplexPlugin, Cluster, resolveClusterFromConnection } from '@/types';\nimport { corePlugins } from '@/plugins/corePlugins';\n\nexport type MetaplexOptions = {\n  cluster?: Cluster;\n};\n\nexport class Metaplex {\n  /** The connection object from Solana's SDK. */\n  public readonly connection: Connection;\n\n  /** The cluster in which the connection endpoint belongs to. */\n  public readonly cluster: Cluster;\n\n  constructor(connection: Connection, options: MetaplexOptions = {}) {\n    this.connection = connection;\n    this.cluster = options.cluster ?? resolveClusterFromConnection(connection);\n    this.use(corePlugins());\n  }\n\n  static make(connection: Connection, options: MetaplexOptions = {}) {\n    return new this(connection, options);\n  }\n\n  use(plugin: MetaplexPlugin) {\n    plugin.install(this);\n\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}