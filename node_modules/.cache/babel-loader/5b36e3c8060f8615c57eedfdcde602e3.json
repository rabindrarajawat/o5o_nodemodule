{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\n\nexport const initializeMint2InstructionData = struct([u8('instruction'), u8('decimals'), publicKey('mintAuthority'), u8('freezeAuthorityOption'), publicKey('freezeAuthority')]);\n/**\n * Construct an InitializeMint2 instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createInitializeMint2Instruction(mint, decimals, mintAuthority, freezeAuthority) {\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(initializeMint2InstructionData.span);\n  initializeMint2InstructionData.encode({\n    instruction: TokenInstruction.InitializeMint2,\n    decimals: decimals,\n    mintAuthority: mintAuthority,\n    freezeAuthorityOption: freezeAuthority ? 1 : 0,\n    freezeAuthority: freezeAuthority || new PublicKey(0)\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode an InitializeMint2 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeInitializeMint2Instruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeMint2InstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint: mint\n    },\n    data: data\n  } = decodeInitializeMint2InstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.InitializeMint2) throw new TokenInvalidInstructionTypeError();\n  if (!mint) throw new TokenInvalidInstructionKeysError();\n  return {\n    programId: programId,\n    keys: {\n      mint: mint\n    },\n    data: data\n  };\n}\n/**\n * Decode an InitializeMint2 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeInitializeMint2InstructionUnchecked(_ref) {\n  let {\n    programId: programId,\n    keys: [mint],\n    data: data\n  } = _ref;\n  const {\n    instruction: instruction,\n    decimals: decimals,\n    mintAuthority: mintAuthority,\n    freezeAuthorityOption: freezeAuthorityOption,\n    freezeAuthority: freezeAuthority\n  } = initializeMint2InstructionData.decode(data);\n  return {\n    programId: programId,\n    keys: {\n      mint: mint\n    },\n    data: {\n      instruction: instruction,\n      decimals: decimals,\n      mintAuthority: mintAuthority,\n      freezeAuthority: freezeAuthorityOption ? freezeAuthority : null\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/instructions/initializeMint2.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,EAAiB,EAAjB,QAA2B,uBAA3B;AACA,SAAS,SAAT,QAA0B,6BAA1B;AAEA,SAAS,SAAT,EAAoB,sBAApB,QAAkD,iBAAlD;AACA,SAAS,gBAAT,QAAiC,iBAAjC;AACA,SACI,gCADJ,EAEI,gCAFJ,EAGI,mCAHJ,EAII,gCAJJ,QAKO,cALP;AAMA,SAAS,gBAAT,QAAiC,YAAjC;AAWA;;AACA,OAAO,MAAM,8BAA8B,GAAG,MAAM,CAAiC,CACjF,EAAE,CAAC,aAAD,CAD+E,EAEjF,EAAE,CAAC,UAAD,CAF+E,EAGjF,SAAS,CAAC,eAAD,CAHwE,EAIjF,EAAE,CAAC,uBAAD,CAJ+E,EAKjF,SAAS,CAAC,iBAAD,CALwE,CAAjC,CAA7C;AAQP;;;;;;;;;;AAUG;;AACH,OAAM,SAAU,gCAAV,CACF,IADE,EAEF,QAFE,EAGF,aAHE,EAIF,eAJE,EAK0B;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B,MAAM,IAAI,GAAG,CAAC;IAAE,MAAM,EAAE,IAAV;IAAgB,QAAQ,EAAE,KAA1B;IAAiC,UAAU,EAAE;EAA7C,CAAD,CAAb;EAEA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,8BAA8B,CAAC,IAA5C,CAAb;EACA,8BAA8B,CAAC,MAA/B,CACI;IACI,WAAW,EAAE,gBAAgB,CAAC,eADlC;IAEI,QAAQ,EAAR,QAFJ;IAGI,aAAa,EAAb,aAHJ;IAII,qBAAqB,EAAE,eAAe,GAAG,CAAH,GAAO,CAJjD;IAKI,eAAe,EAAE,eAAe,IAAI,IAAI,SAAJ,CAAc,CAAd;EALxC,CADJ,EAQI,IARJ;EAWA,OAAO,IAAI,sBAAJ,CAA2B;IAAE,IAAI,EAAJ,IAAF;IAAQ,SAAS,EAAT,SAAR;IAAmB,IAAI,EAAJ;EAAnB,CAA3B,CAAP;AACH;AAgBD;;;;;;;AAOG;;AACH,OAAM,SAAU,gCAAV,CACF,WADE,EAE0B;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B,IAAI,CAAC,WAAW,CAAC,SAAZ,CAAsB,MAAtB,CAA6B,SAA7B,CAAL,EAA8C,MAAM,IAAI,mCAAJ,EAAN;EAC9C,IAAI,WAAW,CAAC,IAAZ,CAAiB,MAAjB,KAA4B,8BAA8B,CAAC,IAA/D,EAAqE,MAAM,IAAI,gCAAJ,EAAN;EAErE,MAAM;IACF,IAAI,EAAE;MAAE,IAAI,EAAJ;IAAF,CADJ;IAEF,IAAI,EAAJ;EAFE,IAGF,yCAAyC,CAAC,WAAD,CAH7C;EAIA,IAAI,IAAI,CAAC,WAAL,KAAqB,gBAAgB,CAAC,eAA1C,EAA2D,MAAM,IAAI,gCAAJ,EAAN;EAC3D,IAAI,CAAC,IAAL,EAAW,MAAM,IAAI,gCAAJ,EAAN;EAEX,OAAO;IACH,SAAS,EAAT,SADG;IAEH,IAAI,EAAE;MACF,IAAI,EAAJ;IADE,CAFH;IAKH,IAAI,EAAJ;EALG,CAAP;AAOH;AAgBD;;;;;;AAMG;;AACH,OAAM,SAAU,yCAAV,OAImB;EAAA,IAJiC;IACtD,SAAS,EAAT,SADsD;IAEtD,IAAI,EAAE,CAAC,IAAD,CAFgD;IAGtD,IAAI,EAAJ;EAHsD,CAIjC;EACrB,MAAM;IAAE,WAAW,EAAX,WAAF;IAAe,QAAQ,EAAR,QAAf;IAAyB,aAAa,EAAb,aAAzB;IAAwC,qBAAqB,EAArB,qBAAxC;IAA+D,eAAe,EAAf;EAA/D,IACF,8BAA8B,CAAC,MAA/B,CAAsC,IAAtC,CADJ;EAGA,OAAO;IACH,SAAS,EAAT,SADG;IAEH,IAAI,EAAE;MACF,IAAI,EAAJ;IADE,CAFH;IAKH,IAAI,EAAE;MACF,WAAW,EAAX,WADE;MAEF,QAAQ,EAAR,QAFE;MAGF,aAAa,EAAb,aAHE;MAIF,eAAe,EAAE,qBAAqB,GAAG,eAAH,GAAqB;IAJzD;EALH,CAAP;AAYH","sourceRoot":"","sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const initializeMint2InstructionData = struct([\n    u8('instruction'),\n    u8('decimals'),\n    publicKey('mintAuthority'),\n    u8('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n/**\n * Construct an InitializeMint2 instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMint2Instruction(mint, decimals, mintAuthority, freezeAuthority, programId = TOKEN_PROGRAM_ID) {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(initializeMint2InstructionData.span);\n    initializeMint2InstructionData.encode({\n        instruction: TokenInstruction.InitializeMint2,\n        decimals,\n        mintAuthority,\n        freezeAuthorityOption: freezeAuthority ? 1 : 0,\n        freezeAuthority: freezeAuthority || new PublicKey(0),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeMint2 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMint2Instruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMint2InstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint }, data, } = decodeInitializeMint2InstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMint2)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeMint2 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMint2InstructionUnchecked({ programId, keys: [mint], data, }) {\n    const { instruction, decimals, mintAuthority, freezeAuthorityOption, freezeAuthority } = initializeMint2InstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: {\n            instruction,\n            decimals,\n            mintAuthority,\n            freezeAuthority: freezeAuthorityOption ? freezeAuthority : null,\n        },\n    };\n}\n//# sourceMappingURL=initializeMint2.js.map"]},"metadata":{},"sourceType":"module"}