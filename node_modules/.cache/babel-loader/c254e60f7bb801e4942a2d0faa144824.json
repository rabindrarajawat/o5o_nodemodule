{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAssociatedTokenAccount = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst associatedTokenAccount_js_1 = require(\"../instructions/associatedTokenAccount.js\");\n\nconst mint_js_1 = require(\"../state/mint.js\");\n/**\n * Create and initialize a new associated token account\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\n\n\nfunction createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions) {\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : constants_js_1.TOKEN_PROGRAM_ID;\n  let associatedTokenProgramId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const associatedToken = yield (0, mint_js_1.getAssociatedTokenAddress)(mint, owner, false, programId, associatedTokenProgramId);\n    const transaction = new web3_js_1.Transaction().add((0, associatedTokenAccount_js_1.createAssociatedTokenAccountInstruction)(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n    yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);\n    return associatedToken;\n  });\n}\n\nexports.createAssociatedTokenAccount = createAssociatedTokenAccount;","map":{"version":3,"sources":["../../../src/actions/createAssociatedTokenAccount.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,2BAAA,GAAA,OAAA,CAAA,2CAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AAEA;;;;;;;;;;;;AAYG;;;AACH,SAAsB,4BAAtB,CACI,UADJ,EAEI,KAFJ,EAGI,IAHJ,EAII,KAJJ,EAKI,cALJ,EAO0D;EAAA,IADtD,SACsD,uEAD1C,cAAA,CAAA,gBAC0C;EAAA,IAAtD,wBAAsD,uEAA3B,cAAA,CAAA,2BAA2B;;IAEtD,MAAM,eAAe,GAAG,MAAM,CAAA,GAAA,SAAA,CAAA,yBAAA,EAA0B,IAA1B,EAAgC,KAAhC,EAAuC,KAAvC,EAA8C,SAA9C,EAAyD,wBAAzD,CAA9B;IAEA,MAAM,WAAW,GAAG,IAAI,SAAA,CAAA,WAAJ,GAAkB,GAAlB,CAChB,CAAA,GAAA,2BAAA,CAAA,uCAAA,EACI,KAAK,CAAC,SADV,EAEI,eAFJ,EAGI,KAHJ,EAII,IAJJ,EAKI,SALJ,EAMI,wBANJ,CADgB,CAApB;IAWA,MAAM,CAAA,GAAA,SAAA,CAAA,yBAAA,EAA0B,UAA1B,EAAsC,WAAtC,EAAmD,CAAC,KAAD,CAAnD,EAA4D,cAA5D,CAAN;IAEA,OAAO,eAAP;EACH,C;AAAA;;AAzBD,OAAA,CAAA,4BAAA,GAAA,4BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createAssociatedTokenAccount = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst associatedTokenAccount_js_1 = require(\"../instructions/associatedTokenAccount.js\");\nconst mint_js_1 = require(\"../state/mint.js\");\n/**\n * Create and initialize a new associated token account\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\nfunction createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions, programId = constants_js_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const associatedToken = yield (0, mint_js_1.getAssociatedTokenAddress)(mint, owner, false, programId, associatedTokenProgramId);\n        const transaction = new web3_js_1.Transaction().add((0, associatedTokenAccount_js_1.createAssociatedTokenAccountInstruction)(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n        yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);\n        return associatedToken;\n    });\n}\nexports.createAssociatedTokenAccount = createAssociatedTokenAccount;\n//# sourceMappingURL=createAssociatedTokenAccount.js.map"]},"metadata":{},"sourceType":"script"}