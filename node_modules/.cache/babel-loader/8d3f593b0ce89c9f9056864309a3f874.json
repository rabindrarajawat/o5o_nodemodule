{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeInitializeMultisigInstructionUnchecked = exports.decodeInitializeMultisigInstruction = exports.createInitializeMultisigInstruction = exports.initializeMultisigInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\n\n\nexports.initializeMultisigInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('m')]);\n/**\n * Construct an InitializeMultisig instruction\n *\n * @param account   Multisig account\n * @param signers   Full set of signers\n * @param m         Number of required signatures\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createInitializeMultisigInstruction(account, signers, m) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_js_1.TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n\n  for (const signer of signers) {\n    keys.push({\n      pubkey: signer,\n      isSigner: false,\n      isWritable: false\n    });\n  }\n\n  const data = Buffer.alloc(exports.initializeMultisigInstructionData.span);\n  exports.initializeMultisigInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InitializeMultisig,\n    m\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createInitializeMultisigInstruction = createInitializeMultisigInstruction;\n/**\n * Decode an InitializeMultisig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeInitializeMultisigInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializeMultisigInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      rent,\n      signers\n    },\n    data\n  } = decodeInitializeMultisigInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.InitializeMultisig) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account || !rent || !signers.length) throw new errors_js_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      rent,\n      signers\n    },\n    data\n  };\n}\n\nexports.decodeInitializeMultisigInstruction = decodeInitializeMultisigInstruction;\n/**\n * Decode an InitializeMultisig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeInitializeMultisigInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, rent, ...signers],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      rent,\n      signers\n    },\n    data: exports.initializeMultisigInstructionData.decode(data)\n  };\n}\n\nexports.decodeInitializeMultisigInstructionUnchecked = decodeInitializeMultisigInstructionUnchecked;","map":{"version":3,"sources":["../../../src/instructions/initializeMultisig.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAMA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAQA;;;AACa,OAAA,CAAA,iCAAA,GAAoC,CAAA,GAAA,eAAA,CAAA,MAAA,EAA0C,CACvF,CAAA,GAAA,eAAA,CAAA,EAAA,EAAG,aAAH,CADuF,EAEvF,CAAA,GAAA,eAAA,CAAA,EAAA,EAAG,GAAH,CAFuF,CAA1C,CAApC;AAKb;;;;;;;;;AASG;;AACH,SAAgB,mCAAhB,CACI,OADJ,EAEI,OAFJ,EAGI,CAHJ,EAIgC;EAAA,IAA5B,SAA4B,uEAAhB,cAAA,CAAA,gBAAgB;EAE5B,MAAM,IAAI,GAAG,CACT;IAAE,MAAM,EAAE,OAAV;IAAmB,QAAQ,EAAE,KAA7B;IAAoC,UAAU,EAAE;EAAhD,CADS,EAET;IAAE,MAAM,EAAE,SAAA,CAAA,kBAAV;IAA8B,QAAQ,EAAE,KAAxC;IAA+C,UAAU,EAAE;EAA3D,CAFS,CAAb;;EAIA,KAAK,MAAM,MAAX,IAAqB,OAArB,EAA8B;IAC1B,IAAI,CAAC,IAAL,CAAU;MAAE,MAAM,EAAE,MAAV;MAAkB,QAAQ,EAAE,KAA5B;MAAmC,UAAU,EAAE;IAA/C,CAAV;EACH;;EAED,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,OAAA,CAAA,iCAAA,CAAkC,IAA/C,CAAb;EACA,OAAA,CAAA,iCAAA,CAAkC,MAAlC,CACI;IACI,WAAW,EAAE,UAAA,CAAA,gBAAA,CAAiB,kBADlC;IAEI;EAFJ,CADJ,EAKI,IALJ;EAQA,OAAO,IAAI,SAAA,CAAA,sBAAJ,CAA2B;IAAE,IAAF;IAAQ,SAAR;IAAmB;EAAnB,CAA3B,CAAP;AACH;;AAxBD,OAAA,CAAA,mCAAA,GAAA,mCAAA;AAwCA;;;;;;;AAOG;;AACH,SAAgB,mCAAhB,CACI,WADJ,EAEgC;EAAA,IAA5B,SAA4B,uEAAhB,cAAA,CAAA,gBAAgB;EAE5B,IAAI,CAAC,WAAW,CAAC,SAAZ,CAAsB,MAAtB,CAA6B,SAA7B,CAAL,EAA8C,MAAM,IAAI,WAAA,CAAA,mCAAJ,EAAN;EAC9C,IAAI,WAAW,CAAC,IAAZ,CAAiB,MAAjB,KAA4B,OAAA,CAAA,iCAAA,CAAkC,IAAlE,EACI,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN;EAEJ,MAAM;IACF,IAAI,EAAE;MAAE,OAAF;MAAW,IAAX;MAAiB;IAAjB,CADJ;IAEF;EAFE,IAGF,4CAA4C,CAAC,WAAD,CAHhD;EAIA,IAAI,IAAI,CAAC,WAAL,KAAqB,UAAA,CAAA,gBAAA,CAAiB,kBAA1C,EAA8D,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN;EAC9D,IAAI,CAAC,OAAD,IAAY,CAAC,IAAb,IAAqB,CAAC,OAAO,CAAC,MAAlC,EAA0C,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN,CAXd,CAa5B;;EAEA,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF,OADE;MAEF,IAFE;MAGF;IAHE,CAFH;IAOH;EAPG,CAAP;AASH;;AA1BD,OAAA,CAAA,mCAAA,GAAA,mCAAA;AA0CA;;;;;;AAMG;;AACH,SAAgB,4CAAhB,OAIyB;EAAA,IAJoC;IACzD,SADyD;IAEzD,IAAI,EAAE,CAAC,OAAD,EAAU,IAAV,EAAgB,GAAG,OAAnB,CAFmD;IAGzD;EAHyD,CAIpC;EACrB,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF,OADE;MAEF,IAFE;MAGF;IAHE,CAFH;IAOH,IAAI,EAAE,OAAA,CAAA,iCAAA,CAAkC,MAAlC,CAAyC,IAAzC;EAPH,CAAP;AASH;;AAdD,OAAA,CAAA,4CAAA,GAAA,4CAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeInitializeMultisigInstructionUnchecked = exports.decodeInitializeMultisigInstruction = exports.createInitializeMultisigInstruction = exports.initializeMultisigInstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.initializeMultisigInstructionData = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('instruction'),\n    (0, buffer_layout_1.u8)('m'),\n]);\n/**\n * Construct an InitializeMultisig instruction\n *\n * @param account   Multisig account\n * @param signers   Full set of signers\n * @param m         Number of required signatures\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeMultisigInstruction(account, signers, m, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    for (const signer of signers) {\n        keys.push({ pubkey: signer, isSigner: false, isWritable: false });\n    }\n    const data = Buffer.alloc(exports.initializeMultisigInstructionData.span);\n    exports.initializeMultisigInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.InitializeMultisig,\n        m,\n    }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createInitializeMultisigInstruction = createInitializeMultisigInstruction;\n/**\n * Decode an InitializeMultisig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeInitializeMultisigInstruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.initializeMultisigInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { account, rent, signers }, data, } = decodeInitializeMultisigInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.InitializeMultisig)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!account || !rent || !signers.length)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data,\n    };\n}\nexports.decodeInitializeMultisigInstruction = decodeInitializeMultisigInstruction;\n/**\n * Decode an InitializeMultisig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeInitializeMultisigInstructionUnchecked({ programId, keys: [account, rent, ...signers], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data: exports.initializeMultisigInstructionData.decode(data),\n    };\n}\nexports.decodeInitializeMultisigInstructionUnchecked = decodeInitializeMultisigInstructionUnchecked;\n//# sourceMappingURL=initializeMultisig.js.map"]},"metadata":{},"sourceType":"script"}