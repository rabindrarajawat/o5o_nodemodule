{"ast":null,"code":"import { toMetadataAccount } from '../accounts.mjs';\nimport { MetadataV1GpaBuilder } from '../gpaBuilders.mjs';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { toMetadata } from '../models/Metadata.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByCreatorOperation';\n/**\n * Finds multiple NFTs and SFTs by their creator at a given position.\n *\n * ```ts\n * // Find all by first creator.\n * const nfts = await metaplex\n *   .nfts()\n *   .findAllByCreator({ creator };\n *\n * // Find all by second creator.\n * const nfts = await metaplex\n *   .nfts()\n *   .findAllByCreator({ creator, position: 2 };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst findNftsByCreatorOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst findNftsByCreatorOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const {\n      programs\n    } = scope;\n    const {\n      creator,\n      position = 1\n    } = operation.input;\n    const gpaBuilder = new MetadataV1GpaBuilder(metaplex, metaplex.programs().getTokenMetadata(programs).address);\n    const nfts = await gpaBuilder.whereCreator(position, creator).get();\n    scope.throwIfCanceled();\n    return nfts.map(account => {\n      if (account == null) {\n        return null;\n      }\n\n      try {\n        return toMetadata(toMetadataAccount(account));\n      } catch (error) {\n        return null;\n      }\n    }).filter(nft => nft !== null);\n  }\n};\nexport { findNftsByCreatorOperation, findNftsByCreatorOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/nftModule/operations/findNftsByCreator.ts"],"names":["Key","findNftsByCreatorOperation","useOperation","findNftsByCreatorOperationHandler","handle","operation","metaplex","scope","programs","creator","position","input","gpaBuilder","MetadataV1GpaBuilder","getTokenMetadata","address","nfts","whereCreator","get","throwIfCanceled","map","account","toMetadata","toMetadataAccount","error","filter","nft"],"mappings":";;;qDAYA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,4BAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,0BAA0B,GACrCC,YAAY,CAA6BF,GAA7B,C;AAEd;AACA;AACA;AACA;;AA+BA;AACA;AACA;AACA;;AACO,MAAMG,iCAA+E,GAC1F;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI+B;IACrC,MAAM;MAAEC;IAAF,IAAeD,KAArB;IACA,MAAM;MAAEE,OAAF;MAAWC,QAAQ,GAAG;IAAtB,IAA4BL,SAAS,CAACM,KAA5C;IAEA,MAAMC,UAAU,GAAG,IAAIC,oBAAJ,CACjBP,QADiB,EAEjBA,QAAQ,CAACE,QAATF,GAAoBQ,gBAApBR,CAAqCE,QAArCF,EAA+CS,OAF9B,CAAnB;IAKA,MAAMC,IAAI,GAAG,MAAMJ,UAAU,CAACK,YAAXL,CAAwBF,QAAxBE,EAAkCH,OAAlCG,EAA2CM,GAA3CN,EAAnB;IACAL,KAAK,CAACY,eAANZ;IAEA,OAAOS,IAAI,CACRI,GADIJ,CACkBK,OAAO,IAAK;MACjC,IAAIA,OAAO,IAAI,IAAf,EAAqB;QACnB,OAAO,IAAP;MACF;;MAEA,IAAI;QACF,OAAOC,UAAU,CAACC,iBAAiB,CAACF,OAAD,CAAlB,CAAjB;MACD,CAFD,CAEE,OAAOG,KAAP,EAAc;QACd,OAAO,IAAP;MACF;IACD,CAXIR,EAYJS,MAZIT,CAYIU,GAAG,IAAsBA,GAAG,KAAK,IAZrCV,CAAP;EAaF;AA9BF,CADK","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { toMetadataAccount } from '../accounts';\nimport { MetadataV1GpaBuilder } from '../gpaBuilders';\nimport { Metadata, Nft, Sft, toMetadata } from '../models';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByCreatorOperation' as const;\n\n/**\n * Finds multiple NFTs and SFTs by their creator at a given position.\n *\n * ```ts\n * // Find all by first creator.\n * const nfts = await metaplex\n *   .nfts()\n *   .findAllByCreator({ creator };\n *\n * // Find all by second creator.\n * const nfts = await metaplex\n *   .nfts()\n *   .findAllByCreator({ creator, position: 2 };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findNftsByCreatorOperation =\n  useOperation<FindNftsByCreatorOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindNftsByCreatorOperation = Operation<\n  typeof Key,\n  FindNftsByCreatorInput,\n  FindNftsByCreatorOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindNftsByCreatorInput = {\n  /** The address of the creator. */\n  creator: PublicKey;\n\n  /**\n   * The position in which the provided creator should be located at.\n   * E.g. `1` for searching the first creator, `2` for searching the\n   * second creator, etc.\n   *\n   * @defaultValue `1`\n   */\n  position?: number;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindNftsByCreatorOutput = (Metadata | Nft | Sft)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findNftsByCreatorOperationHandler: OperationHandler<FindNftsByCreatorOperation> =\n  {\n    handle: async (\n      operation: FindNftsByCreatorOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindNftsByCreatorOutput> => {\n      const { programs } = scope;\n      const { creator, position = 1 } = operation.input;\n\n      const gpaBuilder = new MetadataV1GpaBuilder(\n        metaplex,\n        metaplex.programs().getTokenMetadata(programs).address\n      );\n\n      const nfts = await gpaBuilder.whereCreator(position, creator).get();\n      scope.throwIfCanceled();\n\n      return nfts\n        .map<Metadata | null>((account) => {\n          if (account == null) {\n            return null;\n          }\n\n          try {\n            return toMetadata(toMetadataAccount(account));\n          } catch (error) {\n            return null;\n          }\n        })\n        .filter((nft): nft is Metadata => nft !== null);\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}