{"ast":null,"code":"import { Buffer } from 'buffer';\nimport { PROGRAM_ID } from '@metaplex-foundation/mpl-token-metadata';\nimport { Pda } from '../../types/Pda.mjs';\nimport { toBigNumber } from '../../types/BigNumber.mjs';\n/**\n * @group Pdas\n * @deprecated Please use `metaplex.nfts().pdas().metadata(...)` instead.\n */\n\nconst findMetadataPda = function (mint) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PROGRAM_ID;\n  return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), mint.toBuffer()]);\n};\n/**\n * @group Pdas\n * @deprecated Please use `metaplex.nfts().pdas().masterEdition(...)` instead.\n */\n\n\nconst findMasterEditionV2Pda = function (mint) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PROGRAM_ID;\n  return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), mint.toBuffer(), Buffer.from('edition', 'utf8')]);\n};\n/**\n * @group Pdas\n * @deprecated Please use `metaplex.nfts().pdas().edition(...)` instead.\n */\n\n\nconst findEditionPda = function (mint) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PROGRAM_ID;\n  return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), mint.toBuffer(), Buffer.from('edition', 'utf8')]);\n};\n/**\n * @group Pdas\n * @deprecated Please use `metaplex.nfts().pdas().editionMarker(...)` instead.\n */\n\n\nconst findEditionMarkerPda = function (mint, edition) {\n  let programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PROGRAM_ID;\n  return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), mint.toBuffer(), Buffer.from('edition', 'utf8'), Buffer.from(edition.div(toBigNumber(248)).toString())]);\n};\n/**\n * @group Pdas\n * @deprecated Please use `metaplex.nfts().pdas().collectionAuthorityRecord(...)` instead.\n */\n\n\nconst findCollectionAuthorityRecordPda = function (mint, collectionAuthority) {\n  let programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PROGRAM_ID;\n  return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), mint.toBuffer(), Buffer.from('collection_authority', 'utf8'), collectionAuthority.toBuffer()]);\n};\n/**\n * @group Pdas\n * @deprecated Please use `metaplex.nfts().pdas().useAuthorityRecord(...)` instead.\n */\n\n\nconst findUseAuthorityRecordPda = function (mint, useAuthority) {\n  let programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PROGRAM_ID;\n  return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), mint.toBuffer(), Buffer.from('user', 'utf8'), useAuthority.toBuffer()]);\n};\n/**\n * @group Pdas\n * @deprecated Please use `metaplex.nfts().pdas().burner(...)` instead.\n */\n\n\nconst findProgramAsBurnerPda = function () {\n  let programId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : PROGRAM_ID;\n  return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), Buffer.from('burn', 'utf8')]);\n};\n\nexport { findCollectionAuthorityRecordPda, findEditionMarkerPda, findEditionPda, findMasterEditionV2Pda, findMetadataPda, findProgramAsBurnerPda, findUseAuthorityRecordPda };","map":{"version":3,"sources":["../../../../src/plugins/nftModule/pdas.ts"],"names":["findMetadataPda","mint","programId","PROGRAM_ID","Pda","find","Buffer","from","toBuffer","findMasterEditionV2Pda","findEditionPda","findEditionMarkerPda","edition","div","toBigNumber","toString","findCollectionAuthorityRecordPda","collectionAuthority","findUseAuthorityRecordPda","useAuthority","findProgramAsBurnerPda"],"mappings":"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","sourcesContent":["import { Buffer } from 'buffer';\nimport { PublicKey } from '@solana/web3.js';\nimport { PROGRAM_ID } from '@metaplex-foundation/mpl-token-metadata';\nimport { BigNumber, Pda, toBigNumber } from '@/types';\n\n/**\n * @group Pdas\n * @deprecated Please use `metaplex.nfts().pdas().metadata(...)` instead.\n */\nexport const findMetadataPda = (\n  mint: PublicKey,\n  programId: PublicKey = PROGRAM_ID\n): Pda => {\n  return Pda.find(programId, [\n    Buffer.from('metadata', 'utf8'),\n    programId.toBuffer(),\n    mint.toBuffer(),\n  ]);\n};\n\n/**\n * @group Pdas\n * @deprecated Please use `metaplex.nfts().pdas().masterEdition(...)` instead.\n */\nexport const findMasterEditionV2Pda = (\n  mint: PublicKey,\n  programId: PublicKey = PROGRAM_ID\n): Pda => {\n  return Pda.find(programId, [\n    Buffer.from('metadata', 'utf8'),\n    programId.toBuffer(),\n    mint.toBuffer(),\n    Buffer.from('edition', 'utf8'),\n  ]);\n};\n\n/**\n * @group Pdas\n * @deprecated Please use `metaplex.nfts().pdas().edition(...)` instead.\n */\nexport const findEditionPda = (\n  mint: PublicKey,\n  programId: PublicKey = PROGRAM_ID\n): Pda => {\n  return Pda.find(programId, [\n    Buffer.from('metadata', 'utf8'),\n    programId.toBuffer(),\n    mint.toBuffer(),\n    Buffer.from('edition', 'utf8'),\n  ]);\n};\n\n/**\n * @group Pdas\n * @deprecated Please use `metaplex.nfts().pdas().editionMarker(...)` instead.\n */\nexport const findEditionMarkerPda = (\n  mint: PublicKey,\n  edition: BigNumber,\n  programId: PublicKey = PROGRAM_ID\n): Pda => {\n  return Pda.find(programId, [\n    Buffer.from('metadata', 'utf8'),\n    programId.toBuffer(),\n    mint.toBuffer(),\n    Buffer.from('edition', 'utf8'),\n    Buffer.from(edition.div(toBigNumber(248)).toString()),\n  ]);\n};\n\n/**\n * @group Pdas\n * @deprecated Please use `metaplex.nfts().pdas().collectionAuthorityRecord(...)` instead.\n */\nexport const findCollectionAuthorityRecordPda = (\n  mint: PublicKey,\n  collectionAuthority: PublicKey,\n  programId: PublicKey = PROGRAM_ID\n): Pda => {\n  return Pda.find(programId, [\n    Buffer.from('metadata', 'utf8'),\n    programId.toBuffer(),\n    mint.toBuffer(),\n    Buffer.from('collection_authority', 'utf8'),\n    collectionAuthority.toBuffer(),\n  ]);\n};\n\n/**\n * @group Pdas\n * @deprecated Please use `metaplex.nfts().pdas().useAuthorityRecord(...)` instead.\n */\nexport const findUseAuthorityRecordPda = (\n  mint: PublicKey,\n  useAuthority: PublicKey,\n  programId: PublicKey = PROGRAM_ID\n): Pda => {\n  return Pda.find(programId, [\n    Buffer.from('metadata', 'utf8'),\n    programId.toBuffer(),\n    mint.toBuffer(),\n    Buffer.from('user', 'utf8'),\n    useAuthority.toBuffer(),\n  ]);\n};\n\n/**\n * @group Pdas\n * @deprecated Please use `metaplex.nfts().pdas().burner(...)` instead.\n */\nexport const findProgramAsBurnerPda = (\n  programId: PublicKey = PROGRAM_ID\n): Pda => {\n  return Pda.find(programId, [\n    Buffer.from('metadata', 'utf8'),\n    programId.toBuffer(),\n    Buffer.from('burn', 'utf8'),\n  ]);\n};\n"]},"metadata":{},"sourceType":"module"}