{"ast":null,"code":"import { Buffer } from 'buffer';\nimport { mintLimitBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { createSerializerFromBeet } from '../../../types/Serializer.mjs';\n/**\n * The mintLimit guard allows to specify a limit on the\n * number of mints for each individual wallet.\n *\n * The limit is set per wallet, per candy machine and per\n * identified (provided in the settings) to allow multiple\n * mint limits within a Candy Machine. This is particularly\n * useful when using groups of guards and we want each of them\n * to have a different mint limit.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n */\n\n/** @internal */\n\nconst mintLimitGuardManifest = {\n  name: 'mintLimit',\n  settingsBytes: 3,\n  settingsSerializer: createSerializerFromBeet(mintLimitBeet),\n  mintSettingsParser: _ref => {\n    let {\n      metaplex,\n      settings,\n      payer,\n      candyMachine,\n      candyGuard,\n      programs\n    } = _ref;\n    const counterPda = metaplex.candyMachines().pdas().mintLimitCounter({\n      id: settings.id,\n      user: payer.publicKey,\n      candyMachine,\n      candyGuard,\n      programs\n    });\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts: [{\n        address: counterPda,\n        isSigner: false,\n        isWritable: true\n      }]\n    };\n  }\n};\nexport { mintLimitGuardManifest };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineModule/guards/mintLimit.ts"],"names":["mintLimitGuardManifest","name","settingsBytes","settingsSerializer","createSerializerFromBeet","mintLimitBeet","mintSettingsParser","metaplex","settings","payer","candyMachine","candyGuard","programs","counterPda","candyMachines","pdas","mintLimitCounter","id","user","publicKey","arguments","Buffer","from","remainingAccounts","address","isSigner","isWritable"],"mappings":";;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA;;AACO,MAAMA,sBAAkE,GAC7E;EACEC,IAAI,EAAE,WADR;EAEEC,aAAa,EAAE,CAFjB;EAGEC,kBAAkB,EAAEC,wBAAwB,CAACC,aAAD,CAH9C;EAIEC,kBAAkB,EAAE,QAOd;IAAA,IAPe;MACnBC,QADmB;MAEnBC,QAFmB;MAGnBC,KAHmB;MAInBC,YAJmB;MAKnBC,UALmB;MAMnBC;IANmB,CAOf;IACJ,MAAMC,UAAU,GAAGN,QAAQ,CAACO,aAATP,GAAyBQ,IAAzBR,GAAgCS,gBAAhCT,CAAiD;MAClEU,EAAE,EAAET,QAAQ,CAACS,EADqD;MAElEC,IAAI,EAAET,KAAK,CAACU,SAFsD;MAGlET,YAHkE;MAIlEC,UAJkE;MAKlEC;IALkE,CAAjDL,CAAnB;IAQA,OAAO;MACLa,SAAS,EAAEC,MAAM,CAACC,IAAPD,CAAY,EAAZA,CADN;MAELE,iBAAiB,EAAE,CACjB;QACEC,OAAO,EAAEX,UADX;QAEEY,QAAQ,EAAE,KAFZ;QAGEC,UAAU,EAAE;MAHd,CADiB;IAFd,CAAP;EAUF;AA9BF,CADK","sourcesContent":["import { Buffer } from 'buffer';\nimport { mintLimitBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { CandyGuardManifest } from './core';\nimport { createSerializerFromBeet } from '@/types';\n\n/**\n * The mintLimit guard allows to specify a limit on the\n * number of mints for each individual wallet.\n *\n * The limit is set per wallet, per candy machine and per\n * identified (provided in the settings) to allow multiple\n * mint limits within a Candy Machine. This is particularly\n * useful when using groups of guards and we want each of them\n * to have a different mint limit.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n */\nexport type MintLimitGuardSettings = {\n  /**\n   * A unique identitifer for the limit\n   * for a given wallet and candy machine.\n   */\n  id: number;\n\n  /** The maximum number of mints allowed. */\n  limit: number;\n};\n\n/** @internal */\nexport const mintLimitGuardManifest: CandyGuardManifest<MintLimitGuardSettings> =\n  {\n    name: 'mintLimit',\n    settingsBytes: 3,\n    settingsSerializer: createSerializerFromBeet(mintLimitBeet),\n    mintSettingsParser: ({\n      metaplex,\n      settings,\n      payer,\n      candyMachine,\n      candyGuard,\n      programs,\n    }) => {\n      const counterPda = metaplex.candyMachines().pdas().mintLimitCounter({\n        id: settings.id,\n        user: payer.publicKey,\n        candyMachine,\n        candyGuard,\n        programs,\n      });\n\n      return {\n        arguments: Buffer.from([]),\n        remainingAccounts: [\n          {\n            address: counterPda,\n            isSigner: false,\n            isWritable: true,\n          },\n        ],\n      };\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}