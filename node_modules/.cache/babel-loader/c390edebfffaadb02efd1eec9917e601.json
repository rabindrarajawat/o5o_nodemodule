{"ast":null,"code":"import { Buffer } from 'buffer';\nimport { solPaymentBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { mapSerializer, createSerializerFromBeet } from '../../../types/Serializer.mjs';\nimport { lamports } from '../../../types/Amount.mjs';\n/**\n * The solPayment guard is used to charge an\n * amount in SOL for the minted NFT.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n */\n\n/** @internal */\n\nconst solPaymentGuardManifest = {\n  name: 'solPayment',\n  settingsBytes: 40,\n  settingsSerializer: mapSerializer(createSerializerFromBeet(solPaymentBeet), settings => ({ ...settings,\n    amount: lamports(settings.lamports)\n  }), settings => ({ ...settings,\n    lamports: settings.amount.basisPoints\n  })),\n  mintSettingsParser: _ref => {\n    let {\n      settings\n    } = _ref;\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts: [{\n        isSigner: false,\n        address: settings.destination,\n        isWritable: true\n      }]\n    };\n  }\n};\nexport { solPaymentGuardManifest };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineModule/guards/solPayment.ts"],"names":["solPaymentGuardManifest","name","settingsBytes","settingsSerializer","mapSerializer","createSerializerFromBeet","solPaymentBeet","settings","amount","lamports","basisPoints","mintSettingsParser","arguments","Buffer","from","remainingAccounts","isSigner","address","destination","isWritable"],"mappings":";;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;;AACO,MAAMA,uBAAoE,GAC/E;EACEC,IAAI,EAAE,YADR;EAEEC,aAAa,EAAE,EAFjB;EAGEC,kBAAkB,EAAEC,aAAa,CAC/BC,wBAAwB,CAACC,cAAD,CADO,EAE9BC,QAAQ,KAAM,EAAE,GAAGA,QAAL;IAAeC,MAAM,EAAEC,QAAQ,CAACF,QAAQ,CAACE,QAAV;EAA/B,CAAN,CAFsB,EAG9BF,QAAQ,KAAM,EAAE,GAAGA,QAAL;IAAeE,QAAQ,EAAEF,QAAQ,CAACC,MAATD,CAAgBG;EAAzC,CAAN,CAHsB,CAHnC;EAQEC,kBAAkB,EAAE,QAAkB;IAAA,IAAjB;MAAEJ;IAAF,CAAiB;IACpC,OAAO;MACLK,SAAS,EAAEC,MAAM,CAACC,IAAPD,CAAY,EAAZA,CADN;MAELE,iBAAiB,EAAE,CACjB;QACEC,QAAQ,EAAE,KADZ;QAEEC,OAAO,EAAEV,QAAQ,CAACW,WAFpB;QAGEC,UAAU,EAAE;MAHd,CADiB;IAFd,CAAP;EAUF;AAnBF,CADK","sourcesContent":["import { Buffer } from 'buffer';\nimport {\n  SolPayment,\n  solPaymentBeet,\n} from '@metaplex-foundation/mpl-candy-guard';\nimport { CandyGuardManifest } from './core';\nimport {\n  createSerializerFromBeet,\n  lamports,\n  mapSerializer,\n  PublicKey,\n  SolAmount,\n} from '@/types';\n\n/**\n * The solPayment guard is used to charge an\n * amount in SOL for the minted NFT.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n */\nexport type SolPaymentGuardSettings = {\n  /** The amount in SOL to charge for. */\n  amount: SolAmount;\n\n  /** The configured destination address to send the funds to. */\n  destination: PublicKey;\n};\n\n/** @internal */\nexport const solPaymentGuardManifest: CandyGuardManifest<SolPaymentGuardSettings> =\n  {\n    name: 'solPayment',\n    settingsBytes: 40,\n    settingsSerializer: mapSerializer<SolPayment, SolPaymentGuardSettings>(\n      createSerializerFromBeet(solPaymentBeet),\n      (settings) => ({ ...settings, amount: lamports(settings.lamports) }),\n      (settings) => ({ ...settings, lamports: settings.amount.basisPoints })\n    ),\n    mintSettingsParser: ({ settings }) => {\n      return {\n        arguments: Buffer.from([]),\n        remainingAccounts: [\n          {\n            isSigner: false,\n            address: settings.destination,\n            isWritable: true,\n          },\n        ],\n      };\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}