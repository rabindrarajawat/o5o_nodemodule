{"ast":null,"code":"import { createApproveInstruction } from '@solana/spl-token';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { token } from '../../../types/Amount.mjs';\nimport { isSigner } from '../../../types/Signer.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'ApproveTokenDelegateAuthorityOperation';\n/**\n * Approves a delegate authority for a token account.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .approveDelegateAuthority({\n *     delegateAuthority,\n *     mintAddress,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst approveTokenDelegateAuthorityOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst approveTokenDelegateAuthorityOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    return approveTokenDelegateAuthorityBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Approves a delegate authority for a token account.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .tokens()\n *   .builders()\n *   .approveDelegateAuthority({\n *     delegateAuthority,\n *     mintAddress,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst approveTokenDelegateAuthorityBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    mintAddress,\n    delegateAuthority,\n    amount = token(1),\n    owner = metaplex.identity(),\n    tokenAddress,\n    multiSigners = []\n  } = params;\n  const [ownerPublicKey, signers] = isSigner(owner) ? [owner.publicKey, [owner]] : [owner, multiSigners];\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenAddressOrAta = tokenAddress ?? metaplex.tokens().pdas().associatedTokenAccount({\n    mint: mintAddress,\n    owner: ownerPublicKey,\n    programs\n  });\n  return TransactionBuilder.make().setFeePayer(payer).add({\n    instruction: createApproveInstruction(tokenAddressOrAta, delegateAuthority, ownerPublicKey, amount.basisPoints.toNumber(), multiSigners, tokenProgram.address),\n    signers,\n    key: params.instructionKey ?? 'approveDelegateAuthority'\n  });\n};\n\nexport { approveTokenDelegateAuthorityBuilder, approveTokenDelegateAuthorityOperation, approveTokenDelegateAuthorityOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/tokenModule/operations/approveTokenDelegateAuthority.ts"],"names":["Key","approveTokenDelegateAuthorityOperation","useOperation","approveTokenDelegateAuthorityOperationHandler","handle","operation","metaplex","scope","approveTokenDelegateAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","delegateAuthority","amount","token","owner","identity","tokenAddress","multiSigners","ownerPublicKey","signers","isSigner","publicKey","tokenProgram","getToken","tokenAddressOrAta","tokens","pdas","associatedTokenAccount","mint","TransactionBuilder","make","setFeePayer","add","instruction","createApproveInstruction","basisPoints","toNumber","address","key","instructionKey"],"mappings":";;;;4EAiBA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,wCAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,sCAAsC,GACjDC,YAAY,CAAyCF,GAAzC,C;AAEd;AACA;AACA;AACA;;AA6DA;AACA;AACA;AACA;;AACO,MAAMG,6CAAuG,GAClH;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI2C;IACjD,OAAOC,oCAAoC,CACzCF,QADyC,EAEzCD,SAAS,CAACI,KAF+B,EAGzCF,KAHyC,CAApCC,CAILE,cAJKF,CAIUF,QAJVE,EAIoBD,KAAK,CAACI,cAJ1BH,CAAP;EAKF;AAXF,CADK,C,CAeP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaA,MAAAA,oCAAoC,GAAG,UAClDF,QADkD,EAElDM,MAFkD,EAI3B;EAAA,IADvBC,OACuB,uEADc,EACd;EACvB,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGT,QAAQ,CAACU,GAATV,GAAeW,kBAAfX;EAApB,IAA4DO,OAAlE;EACA,MAAM;IACJK,WADI;IAEJC,iBAFI;IAGJC,MAAM,GAAGC,KAAK,CAAC,CAAD,CAHV;IAIJC,KAAK,GAAGhB,QAAQ,CAACiB,QAATjB,EAJJ;IAKJkB,YALI;IAMJC,YAAY,GAAG;EANX,IAOFb,MAPJ;EASA,MAAM,CAACc,cAAD,EAAiBC,OAAjB,IAA4BC,QAAQ,CAACN,KAAD,CAARM,GAC9B,CAACN,KAAK,CAACO,SAAP,EAAkB,CAACP,KAAD,CAAlB,CAD8BM,GAE9B,CAACN,KAAD,EAAQG,YAAR,CAFJ;EAIA,MAAMK,YAAY,GAAGxB,QAAQ,CAACQ,QAATR,GAAoByB,QAApBzB,CAA6BQ,QAA7BR,CAArB;EACA,MAAM0B,iBAAiB,GACrBR,YAAY,IACZlB,QAAQ,CAAC2B,MAAT3B,GAAkB4B,IAAlB5B,GAAyB6B,sBAAzB7B,CAAgD;IAC9C8B,IAAI,EAAElB,WADwC;IAE9CI,KAAK,EAAEI,cAFuC;IAG9CZ;EAH8C,CAAhDR,CAFF;EAQA,OAAO+B,kBAAkB,CAACC,IAAnBD,GACJE,WADIF,CACQtB,KADRsB,EAEJG,GAFIH,CAEA;IACHI,WAAW,EAAEC,wBAAwB,CACnCV,iBADmC,EAEnCb,iBAFmC,EAGnCO,cAHmC,EAInCN,MAAM,CAACuB,WAAPvB,CAAmBwB,QAAnBxB,EAJmC,EAKnCK,YALmC,EAMnCK,YAAY,CAACe,OANsB,CADlC;IASHlB,OATG;IAUHmB,GAAG,EAAElC,MAAM,CAACmC,cAAPnC,IAAyB;EAV3B,CAFAyB,CAAP;AAcF,CA1Ca7B","sourcesContent":["import { createApproveInstruction } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SplTokenAmount,\n  token,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ApproveTokenDelegateAuthorityOperation' as const;\n\n/**\n * Approves a delegate authority for a token account.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .approveDelegateAuthority({\n *     delegateAuthority,\n *     mintAddress,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const approveTokenDelegateAuthorityOperation =\n  useOperation<ApproveTokenDelegateAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ApproveTokenDelegateAuthorityOperation = Operation<\n  typeof Key,\n  ApproveTokenDelegateAuthorityInput,\n  ApproveTokenDelegateAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n * */\nexport type ApproveTokenDelegateAuthorityInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The address of the new delegate authority. */\n  delegateAuthority: PublicKey;\n\n  /**\n   * The maximum amount of tokens that can be manipulated\n   * by the new delegate authority.\n   *\n   * @defaultValue `token(1)`\n   */\n  amount?: SplTokenAmount;\n\n  /**\n   * The owner of the token account as a Signer.\n   *\n   * This may be provided as a PublicKey if and only if\n   * the `multiSigners` parameter is provided.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  owner?: Signer | PublicKey;\n\n  /**\n   * The address of the token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `owner` parameters.\n   */\n  tokenAddress?: PublicKey;\n\n  /**\n   * The signing accounts to use if the token owner is a multisig.\n   *\n   * @defaultValue `[]`\n   */\n  multiSigners?: KeypairSigner[];\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ApproveTokenDelegateAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const approveTokenDelegateAuthorityOperationHandler: OperationHandler<ApproveTokenDelegateAuthorityOperation> =\n  {\n    handle: async (\n      operation: ApproveTokenDelegateAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<ApproveTokenDelegateAuthorityOutput> => {\n      return approveTokenDelegateAuthorityBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ApproveTokenDelegateAuthorityBuilderParams = Omit<\n  ApproveTokenDelegateAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that approves the delegate authority. */\n  instructionKey?: string;\n};\n\n/**\n * Approves a delegate authority for a token account.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .tokens()\n *   .builders()\n *   .approveDelegateAuthority({\n *     delegateAuthority,\n *     mintAddress,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const approveTokenDelegateAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: ApproveTokenDelegateAuthorityBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    delegateAuthority,\n    amount = token(1),\n    owner = metaplex.identity(),\n    tokenAddress,\n    multiSigners = [],\n  } = params;\n\n  const [ownerPublicKey, signers] = isSigner(owner)\n    ? [owner.publicKey, [owner]]\n    : [owner, multiSigners];\n\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenAddressOrAta =\n    tokenAddress ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: ownerPublicKey,\n      programs,\n    });\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createApproveInstruction(\n        tokenAddressOrAta,\n        delegateAuthority,\n        ownerPublicKey,\n        amount.basisPoints.toNumber(),\n        multiSigners,\n        tokenProgram.address\n      ),\n      signers,\n      key: params.instructionKey ?? 'approveDelegateAuthority',\n    });\n};\n"]},"metadata":{},"sourceType":"module"}