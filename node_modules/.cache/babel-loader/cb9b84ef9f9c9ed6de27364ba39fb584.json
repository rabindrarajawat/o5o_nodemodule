{"ast":null,"code":"import { blob, struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\n\n/**\n * Construct a UiAmountToAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       UiAmount of tokens to be converted to Amount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createUiAmountToAmountInstruction(mint, amount) {\n  let programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }];\n  const buf = Buffer.from(amount, 'utf8');\n  const uiAmountToAmountInstructionData = struct([u8('instruction'), blob(buf.length, 'amount')]);\n  const data = Buffer.alloc(uiAmountToAmountInstructionData.span);\n  uiAmountToAmountInstructionData.encode({\n    instruction: TokenInstruction.UiAmountToAmount,\n    amount: buf\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode a UiAmountToAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeUiAmountToAmountInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  const uiAmountToAmountInstructionData = struct([u8('instruction'), blob(instruction.data.length - 1, 'amount')]);\n  if (instruction.data.length !== uiAmountToAmountInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint: mint\n    },\n    data: data\n  } = decodeUiAmountToAmountInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.UiAmountToAmount) throw new TokenInvalidInstructionTypeError();\n  if (!mint) throw new TokenInvalidInstructionKeysError();\n  return {\n    programId: programId,\n    keys: {\n      mint: mint\n    },\n    data: data\n  };\n}\n/**\n * Decode a UiAmountToAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeUiAmountToAmountInstructionUnchecked(_ref) {\n  let {\n    programId: programId,\n    keys: [mint],\n    data: data\n  } = _ref;\n  const uiAmountToAmountInstructionData = struct([u8('instruction'), blob(data.length - 1, 'amount')]);\n  return {\n    programId: programId,\n    keys: {\n      mint: mint\n    },\n    data: uiAmountToAmountInstructionData.decode(data)\n  };\n}","map":{"version":3,"sources":["../../../src/instructions/uiAmountToAmount.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,EAAe,MAAf,EAAuB,EAAvB,QAAiC,uBAAjC;AAEA,SAAS,sBAAT,QAAuC,iBAAvC;AACA,SAAS,gBAAT,QAAiC,iBAAjC;AACA,SACI,gCADJ,EAEI,gCAFJ,EAGI,mCAHJ,EAII,gCAJJ,QAKO,cALP;AAMA,SAAS,gBAAT,QAAiC,YAAjC;AAQA;;AAEA;;;;;;;;AAQG;;AACH,OAAM,SAAU,iCAAV,CACF,IADE,EAEF,MAFE,EAG0B;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B,MAAM,IAAI,GAAG,CAAC;IAAE,MAAM,EAAE,IAAV;IAAgB,QAAQ,EAAE,KAA1B;IAAiC,UAAU,EAAE;EAA7C,CAAD,CAAb;EACA,MAAM,GAAG,GAAG,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,MAApB,CAAZ;EACA,MAAM,+BAA+B,GAAG,MAAM,CAAkC,CAC5E,EAAE,CAAC,aAAD,CAD0E,EAE5E,IAAI,CAAC,GAAG,CAAC,MAAL,EAAa,QAAb,CAFwE,CAAlC,CAA9C;EAKA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,+BAA+B,CAAC,IAA7C,CAAb;EACA,+BAA+B,CAAC,MAAhC,CACI;IACI,WAAW,EAAE,gBAAgB,CAAC,gBADlC;IAEI,MAAM,EAAE;EAFZ,CADJ,EAKI,IALJ;EAQA,OAAO,IAAI,sBAAJ,CAA2B;IAAE,IAAI,EAAJ,IAAF;IAAQ,SAAS,EAAT,SAAR;IAAmB,IAAI,EAAJ;EAAnB,CAA3B,CAAP;AACH;AAcD;;;;;;;AAOG;;AACH,OAAM,SAAU,iCAAV,CACF,WADE,EAE0B;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B,IAAI,CAAC,WAAW,CAAC,SAAZ,CAAsB,MAAtB,CAA6B,SAA7B,CAAL,EAA8C,MAAM,IAAI,mCAAJ,EAAN;EAC9C,MAAM,+BAA+B,GAAG,MAAM,CAAkC,CAC5E,EAAE,CAAC,aAAD,CAD0E,EAE5E,IAAI,CAAC,WAAW,CAAC,IAAZ,CAAiB,MAAjB,GAA0B,CAA3B,EAA8B,QAA9B,CAFwE,CAAlC,CAA9C;EAIA,IAAI,WAAW,CAAC,IAAZ,CAAiB,MAAjB,KAA4B,+BAA+B,CAAC,IAAhE,EAAsE,MAAM,IAAI,gCAAJ,EAAN;EAEtE,MAAM;IACF,IAAI,EAAE;MAAE,IAAI,EAAJ;IAAF,CADJ;IAEF,IAAI,EAAJ;EAFE,IAGF,0CAA0C,CAAC,WAAD,CAH9C;EAIA,IAAI,IAAI,CAAC,WAAL,KAAqB,gBAAgB,CAAC,gBAA1C,EAA4D,MAAM,IAAI,gCAAJ,EAAN;EAC5D,IAAI,CAAC,IAAL,EAAW,MAAM,IAAI,gCAAJ,EAAN;EAEX,OAAO;IACH,SAAS,EAAT,SADG;IAEH,IAAI,EAAE;MACF,IAAI,EAAJ;IADE,CAFH;IAKH,IAAI,EAAJ;EALG,CAAP;AAOH;AAcD;;;;;;AAMG;;AACH,OAAM,SAAU,0CAAV,OAImB;EAAA,IAJkC;IACvD,SAAS,EAAT,SADuD;IAEvD,IAAI,EAAE,CAAC,IAAD,CAFiD;IAGvD,IAAI,EAAJ;EAHuD,CAIlC;EACrB,MAAM,+BAA+B,GAAG,MAAM,CAAkC,CAC5E,EAAE,CAAC,aAAD,CAD0E,EAE5E,IAAI,CAAC,IAAI,CAAC,MAAL,GAAc,CAAf,EAAkB,QAAlB,CAFwE,CAAlC,CAA9C;EAIA,OAAO;IACH,SAAS,EAAT,SADG;IAEH,IAAI,EAAE;MACF,IAAI,EAAJ;IADE,CAFH;IAKH,IAAI,EAAE,+BAA+B,CAAC,MAAhC,CAAuC,IAAvC;EALH,CAAP;AAOH","sourceRoot":"","sourcesContent":["import { blob, struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\n/**\n * Construct a UiAmountToAmount instruction\n *\n * @param mint         Public key of the mint\n * @param amount       UiAmount of tokens to be converted to Amount\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUiAmountToAmountInstruction(mint, amount, programId = TOKEN_PROGRAM_ID) {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: false }];\n    const buf = Buffer.from(amount, 'utf8');\n    const uiAmountToAmountInstructionData = struct([\n        u8('instruction'),\n        blob(buf.length, 'amount'),\n    ]);\n    const data = Buffer.alloc(uiAmountToAmountInstructionData.span);\n    uiAmountToAmountInstructionData.encode({\n        instruction: TokenInstruction.UiAmountToAmount,\n        amount: buf,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode a UiAmountToAmount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeUiAmountToAmountInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    const uiAmountToAmountInstructionData = struct([\n        u8('instruction'),\n        blob(instruction.data.length - 1, 'amount'),\n    ]);\n    if (instruction.data.length !== uiAmountToAmountInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint }, data, } = decodeUiAmountToAmountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.UiAmountToAmount)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\n/**\n * Decode a UiAmountToAmount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeUiAmountToAmountInstructionUnchecked({ programId, keys: [mint], data, }) {\n    const uiAmountToAmountInstructionData = struct([\n        u8('instruction'),\n        blob(data.length - 1, 'amount'),\n    ]);\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: uiAmountToAmountInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=uiAmountToAmount.js.map"]},"metadata":{},"sourceType":"module"}