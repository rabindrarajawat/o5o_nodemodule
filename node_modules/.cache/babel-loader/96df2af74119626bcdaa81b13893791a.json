{"ast":null,"code":"import cloneDeep from 'lodash.clonedeep';\nimport { walk } from '../../../utils/common.mjs';\nimport { isMetaplexFile } from '../../storageModule/MetaplexFile.mjs';\nimport { useOperation } from '../../../types/Operation.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'UploadMetadataOperation';\n/**\n * Uploads a JSON Metadata object to the current storage provider.\n *\n * ```ts\n * const { uri } = await metaplex\n *   .nfts()\n *   .uploadMetadata({\n *     name: \"My NFT\",\n *     description: \"My description\",\n *     image: \"https://arweave.net/123\",\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst uploadMetadataOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst uploadMetadataOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const rawMetadata = operation.input;\n    const files = getAssetsFromJsonMetadata(rawMetadata);\n    const assetUris = await metaplex.storage().uploadAll(files);\n    scope.throwIfCanceled();\n    const metadata = replaceAssetsWithUris(rawMetadata, assetUris);\n    const uri = await metaplex.storage().uploadJson(metadata);\n    return {\n      uri,\n      metadata,\n      assetUris\n    };\n  }\n};\n\nconst getAssetsFromJsonMetadata = input => {\n  const files = [];\n  walk(input, (next, value) => {\n    if (isMetaplexFile(value)) {\n      files.push(value);\n    } else {\n      next(value);\n    }\n  });\n  return files;\n};\n\nconst replaceAssetsWithUris = (input, replacements) => {\n  const clone = cloneDeep(input);\n  let index = 0;\n  walk(clone, (next, value, key, parent) => {\n    if (isMetaplexFile(value)) {\n      if (index < replacements.length) {\n        parent[key] = replacements[index++];\n      }\n    } else {\n      next(value);\n    }\n  });\n  return clone;\n};\n\nexport { getAssetsFromJsonMetadata, replaceAssetsWithUris, uploadMetadataOperation, uploadMetadataOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/nftModule/operations/uploadMetadata.ts"],"names":["Key","uploadMetadataOperation","useOperation","uploadMetadataOperationHandler","handle","operation","metaplex","scope","rawMetadata","input","files","getAssetsFromJsonMetadata","assetUris","storage","uploadAll","throwIfCanceled","metadata","replaceAssetsWithUris","uri","uploadJson","walk","next","value","isMetaplexFile","push","replacements","clone","cloneDeep","index","key","parent","length"],"mappings":";;;6DAYA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,yBAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,uBAAuB,GAClCC,YAAY,CAA0BF,GAA1B,C;AAEd;AACA;AACA;AACA;;AA+BA;AACA;AACA;AACA;;AACO,MAAMG,8BAAyE,GACpF;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI4B;IAClC,MAAMC,WAAW,GAAGH,SAAS,CAACI,KAA9B;IACA,MAAMC,KAAK,GAAGC,yBAAyB,CAACH,WAAD,CAAvC;IACA,MAAMI,SAAS,GAAG,MAAMN,QAAQ,CAACO,OAATP,GAAmBQ,SAAnBR,CAA6BI,KAA7BJ,CAAxB;IACAC,KAAK,CAACQ,eAANR;IAEA,MAAMS,QAAQ,GAAGC,qBAAqB,CAACT,WAAD,EAAcI,SAAd,CAAtC;IACA,MAAMM,GAAG,GAAG,MAAMZ,QAAQ,CAACO,OAATP,GAAmBa,UAAnBb,CAA8BU,QAA9BV,CAAlB;IAEA,OAAO;MAAEY,GAAF;MAAOF,QAAP;MAAiBJ;IAAjB,CAAP;EACF;AAfF,CADK;;AAmBMD,MAAAA,yBAAyB,GACpCF,KAA0B,IACP;EACnB,MAAMC,KAAqB,GAAG,EAA9B;EAEAU,IAAI,CAACX,KAAD,EAAQ,CAACY,IAAD,EAAOC,KAAP,KAAiB;IAC3B,IAAIC,cAAc,CAACD,KAAD,CAAlB,EAA2B;MACzBZ,KAAK,CAACc,IAANd,CAAWY,KAAXZ;IACD,CAFD,MAEO;MACLW,IAAI,CAACC,KAAD,CAAJD;IACF;EACD,CANG,CAAJD;EAQA,OAAOV,KAAP;AACF,CAdaC;;MAgBAM,qBAAqB,GAAG,CACnCR,KADmC,EAEnCgB,YAFmC,KAGlB;EACjB,MAAMC,KAAK,GAAGC,SAAS,CAAClB,KAAD,CAAvB;EACA,IAAImB,KAAK,GAAG,CAAZ;EAEAR,IAAI,CAACM,KAAD,EAAQ,CAACL,IAAD,EAAOC,KAAP,EAAcO,GAAd,EAAmBC,MAAnB,KAA8B;IACxC,IAAIP,cAAc,CAACD,KAAD,CAAlB,EAA2B;MACzB,IAAIM,KAAK,GAAGH,YAAY,CAACM,MAAzB,EAAiC;QAC/BD,MAAM,CAACD,GAAD,CAANC,GAAcL,YAAY,CAACG,KAAK,EAAN,CAA1BE;MACF;IACD,CAJD,MAIO;MACLT,IAAI,CAACC,KAAD,CAAJD;IACF;EACD,CARG,CAAJD;EAUA,OAAOM,KAAP;AACF,C","sourcesContent":["import cloneDeep from 'lodash.clonedeep';\nimport { isMetaplexFile, MetaplexFile } from '../../storageModule';\nimport { JsonMetadata } from '../models';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { walk } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UploadMetadataOperation' as const;\n\n/**\n * Uploads a JSON Metadata object to the current storage provider.\n *\n * ```ts\n * const { uri } = await metaplex\n *   .nfts()\n *   .uploadMetadata({\n *     name: \"My NFT\",\n *     description: \"My description\",\n *     image: \"https://arweave.net/123\",\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const uploadMetadataOperation =\n  useOperation<UploadMetadataOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UploadMetadataOperation = Operation<\n  typeof Key,\n  UploadMetadataInput,\n  UploadMetadataOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UploadMetadataInput = JsonMetadata<MetaplexFile | string>;\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UploadMetadataOutput = {\n  /** The uploaded JSON metadata. */\n  metadata: JsonMetadata;\n\n  /**\n   * The URIs of all assets that were uploaded\n   * within the provided metadata.\n   */\n  assetUris: string[];\n\n  /** The URI of the uploaded JSON metadata. */\n  uri: string;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const uploadMetadataOperationHandler: OperationHandler<UploadMetadataOperation> =\n  {\n    handle: async (\n      operation: UploadMetadataOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<UploadMetadataOutput> => {\n      const rawMetadata = operation.input;\n      const files = getAssetsFromJsonMetadata(rawMetadata);\n      const assetUris = await metaplex.storage().uploadAll(files);\n      scope.throwIfCanceled();\n\n      const metadata = replaceAssetsWithUris(rawMetadata, assetUris);\n      const uri = await metaplex.storage().uploadJson(metadata);\n\n      return { uri, metadata, assetUris };\n    },\n  };\n\nexport const getAssetsFromJsonMetadata = (\n  input: UploadMetadataInput\n): MetaplexFile[] => {\n  const files: MetaplexFile[] = [];\n\n  walk(input, (next, value) => {\n    if (isMetaplexFile(value)) {\n      files.push(value);\n    } else {\n      next(value);\n    }\n  });\n\n  return files;\n};\n\nexport const replaceAssetsWithUris = (\n  input: UploadMetadataInput,\n  replacements: string[]\n): JsonMetadata => {\n  const clone = cloneDeep(input);\n  let index = 0;\n\n  walk(clone, (next, value, key, parent) => {\n    if (isMetaplexFile(value)) {\n      if (index < replacements.length) {\n        parent[key] = replacements[index++];\n      }\n    } else {\n      next(value);\n    }\n  });\n\n  return clone as JsonMetadata;\n};\n"]},"metadata":{},"sourceType":"module"}