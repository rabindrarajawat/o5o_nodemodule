{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\n\nexport const initializeMultisigInstructionData = struct([u8('instruction'), u8('m')]);\n/**\n * Construct an InitializeMultisig instruction\n *\n * @param account   Multisig account\n * @param signers   Full set of signers\n * @param m         Number of required signatures\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createInitializeMultisigInstruction(account, signers, m) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n\n  for (const signer of signers) {\n    keys.push({\n      pubkey: signer,\n      isSigner: false,\n      isWritable: false\n    });\n  }\n\n  const data = Buffer.alloc(initializeMultisigInstructionData.span);\n  initializeMultisigInstructionData.encode({\n    instruction: TokenInstruction.InitializeMultisig,\n    m: m\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Decode an InitializeMultisig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeInitializeMultisigInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeMultisigInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account: account,\n      rent: rent,\n      signers: signers\n    },\n    data: data\n  } = decodeInitializeMultisigInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.InitializeMultisig) throw new TokenInvalidInstructionTypeError();\n  if (!account || !rent || !signers.length) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      rent: rent,\n      signers: signers\n    },\n    data: data\n  };\n}\n/**\n * Decode an InitializeMultisig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeInitializeMultisigInstructionUnchecked(_ref) {\n  let {\n    programId: programId,\n    keys: [account, rent, ...signers],\n    data: data\n  } = _ref;\n  return {\n    programId: programId,\n    keys: {\n      account: account,\n      rent: rent,\n      signers: signers\n    },\n    data: initializeMultisigInstructionData.decode(data)\n  };\n}","map":{"version":3,"sources":["../../../src/instructions/initializeMultisig.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const initializeMultisigInstructionData = struct([\n    u8('instruction'),\n    u8('m'),\n]);\n/**\n * Construct an InitializeMultisig instruction\n *\n * @param account   Multisig account\n * @param signers   Full set of signers\n * @param m         Number of required signatures\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMultisigInstruction(account, signers, m, programId = TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    for (const signer of signers) {\n        keys.push({ pubkey: signer, isSigner: false, isWritable: false });\n    }\n    const data = Buffer.alloc(initializeMultisigInstructionData.span);\n    initializeMultisigInstructionData.encode({\n        instruction: TokenInstruction.InitializeMultisig,\n        m,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeMultisig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMultisigInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMultisigInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, rent, signers }, data, } = decodeInitializeMultisigInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMultisig)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !rent || !signers.length)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeMultisig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMultisigInstructionUnchecked({ programId, keys: [account, rent, ...signers], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data: initializeMultisigInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=initializeMultisig.js.map"]},"metadata":{},"sourceType":"module"}