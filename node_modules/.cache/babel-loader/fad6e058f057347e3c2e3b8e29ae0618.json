{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _StandardWalletAdapter_instances, _StandardWalletAdapter_account, _StandardWalletAdapter_publicKey, _StandardWalletAdapter_connecting, _StandardWalletAdapter_off, _StandardWalletAdapter_wallet, _StandardWalletAdapter_supportedTransactionVersions, _StandardWalletAdapter_readyState, _StandardWalletAdapter_connected, _StandardWalletAdapter_disconnected, _StandardWalletAdapter_changed, _StandardWalletAdapter_signTransaction, _StandardWalletAdapter_signAllTransactions, _StandardWalletAdapter_signMessage;\n\nimport { BaseWalletAdapter, WalletAccountError, WalletConfigError, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletError, WalletNotConnectedError, WalletNotReadyError, WalletPublicKeyError, WalletReadyState, WalletSendTransactionError, WalletSignMessageError, WalletSignTransactionError } from '@solana/wallet-adapter-base';\nimport { getChainForEndpoint, getCommitment } from '@solana/wallet-standard-util';\nimport { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { arraysEqual } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\nimport { isVersionedTransaction } from './transaction.js';\n/** TODO: docs */\n\nexport function isWalletAdapterCompatibleWallet(wallet) {\n  return 'standard:connect' in wallet.features && 'standard:events' in wallet.features && ('solana:signAndSendTransaction' in wallet.features || 'solana:signTransaction' in wallet.features);\n}\n/** TODO: docs */\n\nexport class StandardWalletAdapter extends BaseWalletAdapter {\n  constructor(_ref) {\n    let {\n      wallet: wallet\n    } = _ref;\n    super();\n\n    _StandardWalletAdapter_instances.add(this);\n\n    _StandardWalletAdapter_account.set(this, void 0);\n\n    _StandardWalletAdapter_publicKey.set(this, void 0);\n\n    _StandardWalletAdapter_connecting.set(this, void 0);\n\n    _StandardWalletAdapter_off.set(this, void 0);\n\n    _StandardWalletAdapter_wallet.set(this, void 0);\n\n    _StandardWalletAdapter_supportedTransactionVersions.set(this, void 0);\n\n    _StandardWalletAdapter_readyState.set(this, typeof window === 'undefined' || typeof document === 'undefined' ? WalletReadyState.Unsupported : WalletReadyState.Installed);\n\n    _StandardWalletAdapter_changed.set(this, properties => {\n      // If the adapter isn't connected or the change doesn't include accounts, do nothing.\n      if (!__classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\") || !__classPrivateFieldGet(this, _StandardWalletAdapter_publicKey, \"f\") || !('accounts' in properties)) return;\n\n      const account = __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts[0]; // If there's no connected account, disconnect the adapter.\n\n\n      if (!account) {\n        __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(this);\n\n        this.emit('error', new WalletDisconnectedError());\n        this.emit('disconnect');\n        return;\n      } // If the account hasn't actually changed, do nothing.\n\n\n      if (account === __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\")) return;\n      let publicKey; // If the account public key isn't valid, disconnect the adapter.\n\n      try {\n        publicKey = new PublicKey(account.publicKey);\n      } catch (error) {\n        __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(this);\n\n        this.emit('error', new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message));\n        this.emit('disconnect');\n        return;\n      } // Change the adapter's account and public key and emit an event.\n\n\n      __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, account, publicKey);\n\n      this.emit('connect', publicKey);\n    });\n\n    __classPrivateFieldSet(this, _StandardWalletAdapter_wallet, wallet, \"f\");\n\n    const supportedTransactionVersions = 'solana:signAndSendTransaction' in wallet.features ? wallet.features['solana:signAndSendTransaction'].supportedTransactionVersions : wallet.features['solana:signTransaction'].supportedTransactionVersions;\n\n    __classPrivateFieldSet(this, _StandardWalletAdapter_supportedTransactionVersions, arraysEqual(supportedTransactionVersions, ['legacy']) ? null : new Set(supportedTransactionVersions), \"f\");\n\n    __classPrivateFieldSet(this, _StandardWalletAdapter_account, null, \"f\");\n\n    __classPrivateFieldSet(this, _StandardWalletAdapter_publicKey, null, \"f\");\n\n    __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, false, \"f\");\n  }\n\n  get supportedTransactionVersions() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_supportedTransactionVersions, \"f\");\n  }\n\n  get name() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").name;\n  }\n\n  get icon() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").icon;\n  }\n\n  get url() {\n    return 'https://github.com/wallet-standard';\n  }\n\n  get publicKey() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_publicKey, \"f\");\n  }\n\n  get connecting() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_connecting, \"f\");\n  }\n\n  get readyState() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_readyState, \"f\");\n  }\n\n  get wallet() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\");\n  }\n\n  get standard() {\n    return true;\n  }\n\n  async connect() {\n    try {\n      if (this.connected || this.connecting) return;\n      if (__classPrivateFieldGet(this, _StandardWalletAdapter_readyState, \"f\") !== WalletReadyState.Installed) throw new WalletNotReadyError();\n\n      __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, true, \"f\");\n\n      if (!__classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts.length) {\n        try {\n          await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['standard:connect'].connect();\n        } catch (error) {\n          throw new WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      }\n\n      if (!__classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts.length) throw new WalletAccountError(); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n      const account = __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts[0];\n\n      let publicKey;\n\n      try {\n        publicKey = new PublicKey(account.publicKey);\n      } catch (error) {\n        throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n      }\n\n      __classPrivateFieldSet(this, _StandardWalletAdapter_off, __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['standard:events'].on('change', __classPrivateFieldGet(this, _StandardWalletAdapter_changed, \"f\")), \"f\");\n\n      __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, account, publicKey);\n\n      this.emit('connect', publicKey);\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    } finally {\n      __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, false, \"f\");\n    }\n  }\n\n  async disconnect() {\n    if ('standard:disconnect' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n      try {\n        await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['standard:disconnect'].disconnect();\n      } catch (error) {\n        this.emit('error', new WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));\n      }\n    }\n\n    __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(this);\n\n    this.emit('disconnect');\n  }\n\n  async sendTransaction(transaction, connection) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    try {\n      const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n\n      if (!account) throw new WalletNotConnectedError();\n      let feature;\n\n      if ('solana:signAndSendTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n        if (account.features.includes('solana:signAndSendTransaction')) {\n          feature = 'solana:signAndSendTransaction';\n        } else if ('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features && account.features.includes('solana:signTransaction')) {\n          feature = 'solana:signTransaction';\n        } else {\n          throw new WalletAccountError();\n        }\n      } else if ('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n        if (!account.features.includes('solana:signTransaction')) throw new WalletAccountError();\n        feature = 'solana:signTransaction';\n      } else {\n        throw new WalletConfigError();\n      }\n\n      const chain = getChainForEndpoint(connection.rpcEndpoint);\n      if (!account.chains.includes(chain)) throw new WalletSendTransactionError();\n\n      try {\n        const {\n          signers: signers,\n          ...sendOptions\n        } = options;\n        let serializedTransaction;\n\n        if (isVersionedTransaction(transaction)) {\n          (signers === null || signers === void 0 ? void 0 : signers.length) && transaction.sign(signers);\n          serializedTransaction = transaction.serialize();\n        } else {\n          transaction = await this.prepareTransaction(transaction, connection, sendOptions);\n          (signers === null || signers === void 0 ? void 0 : signers.length) && transaction.partialSign(...signers);\n          serializedTransaction = new Uint8Array(transaction.serialize({\n            requireAllSignatures: false,\n            verifySignatures: false\n          }));\n        }\n\n        if (feature === 'solana:signAndSendTransaction') {\n          const [output] = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signAndSendTransaction'].signAndSendTransaction({\n            account: account,\n            chain: chain,\n            transaction: serializedTransaction,\n            options: {\n              preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment),\n              skipPreflight: sendOptions.skipPreflight,\n              maxRetries: sendOptions.maxRetries,\n              minContextSlot: sendOptions.minContextSlot\n            }\n          }); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n          return bs58.encode(output.signature);\n        } else {\n          const [output] = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signTransaction'].signTransaction({\n            account: account,\n            chain: chain,\n            transaction: serializedTransaction,\n            options: {\n              preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment),\n              minContextSlot: sendOptions.minContextSlot\n            }\n          }); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n          return await connection.sendRawTransaction(output.signedTransaction, { ...sendOptions,\n            preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment)\n          });\n        }\n      } catch (error) {\n        if (error instanceof WalletError) throw error;\n        throw new WalletSendTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n      }\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n}\n_StandardWalletAdapter_account = new WeakMap(), _StandardWalletAdapter_publicKey = new WeakMap(), _StandardWalletAdapter_connecting = new WeakMap(), _StandardWalletAdapter_off = new WeakMap(), _StandardWalletAdapter_wallet = new WeakMap(), _StandardWalletAdapter_supportedTransactionVersions = new WeakMap(), _StandardWalletAdapter_readyState = new WeakMap(), _StandardWalletAdapter_changed = new WeakMap(), _StandardWalletAdapter_instances = new WeakSet(), _StandardWalletAdapter_connected = function _StandardWalletAdapter_connected(account, publicKey) {\n  __classPrivateFieldSet(this, _StandardWalletAdapter_account, account, \"f\");\n\n  __classPrivateFieldSet(this, _StandardWalletAdapter_publicKey, publicKey, \"f\");\n\n  if (account !== null && account !== void 0 && account.features.includes('solana:signTransaction')) {\n    this.signTransaction = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signTransaction);\n    this.signAllTransactions = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signAllTransactions);\n  } else {\n    delete this.signTransaction;\n    delete this.signAllTransactions;\n  }\n\n  if (account !== null && account !== void 0 && account.features.includes('solana:signMessage')) {\n    this.signMessage = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signMessage);\n  } else {\n    delete this.signMessage;\n  }\n}, _StandardWalletAdapter_disconnected = function _StandardWalletAdapter_disconnected() {\n  const off = __classPrivateFieldGet(this, _StandardWalletAdapter_off, \"f\");\n\n  if (off) {\n    __classPrivateFieldSet(this, _StandardWalletAdapter_off, undefined, \"f\");\n\n    off();\n  }\n\n  __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, null, null);\n}, _StandardWalletAdapter_signTransaction = async function _StandardWalletAdapter_signTransaction(transaction) {\n  try {\n    const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n\n    if (!account) throw new WalletNotConnectedError();\n    if (!('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) throw new WalletConfigError();\n    if (!account.features.includes('solana:signTransaction')) throw new WalletAccountError();\n\n    try {\n      const signedTransactions = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signTransaction'].signTransaction({\n        account: account,\n        transaction: isVersionedTransaction(transaction) ? transaction.serialize() : new Uint8Array(transaction.serialize({\n          requireAllSignatures: false,\n          verifySignatures: false\n        }))\n      }); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n      const serializedTransaction = signedTransactions[0].signedTransaction;\n      return isVersionedTransaction(transaction) ? VersionedTransaction.deserialize(serializedTransaction) : Transaction.from(serializedTransaction);\n    } catch (error) {\n      if (error instanceof WalletError) throw error;\n      throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n    }\n  } catch (error) {\n    this.emit('error', error);\n    throw error;\n  }\n}, _StandardWalletAdapter_signAllTransactions = async function _StandardWalletAdapter_signAllTransactions(transactions) {\n  try {\n    const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n\n    if (!account) throw new WalletNotConnectedError();\n    if (!('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) throw new WalletConfigError();\n    if (!account.features.includes('solana:signTransaction')) throw new WalletSignTransactionError();\n\n    try {\n      const signedTransactions = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signTransaction'].signTransaction(...transactions.map(transaction => ({\n        account: account,\n        transaction: isVersionedTransaction(transaction) ? transaction.serialize() : new Uint8Array(transaction.serialize({\n          requireAllSignatures: false,\n          verifySignatures: false\n        }))\n      })));\n      return transactions.map((transaction, index) => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const signedTransaction = signedTransactions[index].signedTransaction;\n        return isVersionedTransaction(transaction) ? VersionedTransaction.deserialize(signedTransaction) : Transaction.from(signedTransaction);\n      });\n    } catch (error) {\n      throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n    }\n  } catch (error) {\n    this.emit('error', error);\n    throw error;\n  }\n}, _StandardWalletAdapter_signMessage = async function _StandardWalletAdapter_signMessage(message) {\n  try {\n    const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n\n    if (!account) throw new WalletNotConnectedError();\n    if (!('solana:signMessage' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) throw new WalletConfigError();\n    if (!account.features.includes('solana:signMessage')) throw new WalletSignMessageError();\n\n    try {\n      const signedMessages = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signMessage'].signMessage({\n        account: account,\n        message: message\n      }); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n      return signedMessages[0].signature;\n    } catch (error) {\n      throw new WalletSignMessageError(error === null || error === void 0 ? void 0 : error.message, error);\n    }\n  } catch (error) {\n    this.emit('error', error);\n    throw error;\n  }\n};","map":{"version":3,"sources":["../../src/adapter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _StandardWalletAdapter_instances, _StandardWalletAdapter_account, _StandardWalletAdapter_publicKey, _StandardWalletAdapter_connecting, _StandardWalletAdapter_off, _StandardWalletAdapter_wallet, _StandardWalletAdapter_supportedTransactionVersions, _StandardWalletAdapter_readyState, _StandardWalletAdapter_connected, _StandardWalletAdapter_disconnected, _StandardWalletAdapter_changed, _StandardWalletAdapter_signTransaction, _StandardWalletAdapter_signAllTransactions, _StandardWalletAdapter_signMessage;\nimport { BaseWalletAdapter, WalletAccountError, WalletConfigError, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletError, WalletNotConnectedError, WalletNotReadyError, WalletPublicKeyError, WalletReadyState, WalletSendTransactionError, WalletSignMessageError, WalletSignTransactionError, } from '@solana/wallet-adapter-base';\nimport { getChainForEndpoint, getCommitment } from '@solana/wallet-standard-util';\nimport { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { arraysEqual } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\nimport { isVersionedTransaction } from './transaction.js';\n/** TODO: docs */\nexport function isWalletAdapterCompatibleWallet(wallet) {\n    return ('standard:connect' in wallet.features &&\n        'standard:events' in wallet.features &&\n        ('solana:signAndSendTransaction' in wallet.features || 'solana:signTransaction' in wallet.features));\n}\n/** TODO: docs */\nexport class StandardWalletAdapter extends BaseWalletAdapter {\n    constructor({ wallet }) {\n        super();\n        _StandardWalletAdapter_instances.add(this);\n        _StandardWalletAdapter_account.set(this, void 0);\n        _StandardWalletAdapter_publicKey.set(this, void 0);\n        _StandardWalletAdapter_connecting.set(this, void 0);\n        _StandardWalletAdapter_off.set(this, void 0);\n        _StandardWalletAdapter_wallet.set(this, void 0);\n        _StandardWalletAdapter_supportedTransactionVersions.set(this, void 0);\n        _StandardWalletAdapter_readyState.set(this, typeof window === 'undefined' || typeof document === 'undefined'\n            ? WalletReadyState.Unsupported\n            : WalletReadyState.Installed);\n        _StandardWalletAdapter_changed.set(this, (properties) => {\n            // If the adapter isn't connected or the change doesn't include accounts, do nothing.\n            if (!__classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\") || !__classPrivateFieldGet(this, _StandardWalletAdapter_publicKey, \"f\") || !('accounts' in properties))\n                return;\n            const account = __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts[0];\n            // If there's no connected account, disconnect the adapter.\n            if (!account) {\n                __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(this);\n                this.emit('error', new WalletDisconnectedError());\n                this.emit('disconnect');\n                return;\n            }\n            // If the account hasn't actually changed, do nothing.\n            if (account === __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\"))\n                return;\n            let publicKey;\n            // If the account public key isn't valid, disconnect the adapter.\n            try {\n                publicKey = new PublicKey(account.publicKey);\n            }\n            catch (error) {\n                __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(this);\n                this.emit('error', new WalletPublicKeyError(error?.message));\n                this.emit('disconnect');\n                return;\n            }\n            // Change the adapter's account and public key and emit an event.\n            __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, account, publicKey);\n            this.emit('connect', publicKey);\n        });\n        __classPrivateFieldSet(this, _StandardWalletAdapter_wallet, wallet, \"f\");\n        const supportedTransactionVersions = 'solana:signAndSendTransaction' in wallet.features\n            ? wallet.features['solana:signAndSendTransaction'].supportedTransactionVersions\n            : wallet.features['solana:signTransaction'].supportedTransactionVersions;\n        __classPrivateFieldSet(this, _StandardWalletAdapter_supportedTransactionVersions, arraysEqual(supportedTransactionVersions, ['legacy'])\n            ? null\n            : new Set(supportedTransactionVersions), \"f\");\n        __classPrivateFieldSet(this, _StandardWalletAdapter_account, null, \"f\");\n        __classPrivateFieldSet(this, _StandardWalletAdapter_publicKey, null, \"f\");\n        __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, false, \"f\");\n    }\n    get supportedTransactionVersions() {\n        return __classPrivateFieldGet(this, _StandardWalletAdapter_supportedTransactionVersions, \"f\");\n    }\n    get name() {\n        return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").name;\n    }\n    get icon() {\n        return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").icon;\n    }\n    get url() {\n        return 'https://github.com/wallet-standard';\n    }\n    get publicKey() {\n        return __classPrivateFieldGet(this, _StandardWalletAdapter_publicKey, \"f\");\n    }\n    get connecting() {\n        return __classPrivateFieldGet(this, _StandardWalletAdapter_connecting, \"f\");\n    }\n    get readyState() {\n        return __classPrivateFieldGet(this, _StandardWalletAdapter_readyState, \"f\");\n    }\n    get wallet() {\n        return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\");\n    }\n    get standard() {\n        return true;\n    }\n    async connect() {\n        try {\n            if (this.connected || this.connecting)\n                return;\n            if (__classPrivateFieldGet(this, _StandardWalletAdapter_readyState, \"f\") !== WalletReadyState.Installed)\n                throw new WalletNotReadyError();\n            __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, true, \"f\");\n            if (!__classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts.length) {\n                try {\n                    await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['standard:connect'].connect();\n                }\n                catch (error) {\n                    throw new WalletConnectionError(error?.message, error);\n                }\n            }\n            if (!__classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts.length)\n                throw new WalletAccountError();\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const account = __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts[0];\n            let publicKey;\n            try {\n                publicKey = new PublicKey(account.publicKey);\n            }\n            catch (error) {\n                throw new WalletPublicKeyError(error?.message, error);\n            }\n            __classPrivateFieldSet(this, _StandardWalletAdapter_off, __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['standard:events'].on('change', __classPrivateFieldGet(this, _StandardWalletAdapter_changed, \"f\")), \"f\");\n            __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, account, publicKey);\n            this.emit('connect', publicKey);\n        }\n        catch (error) {\n            this.emit('error', error);\n            throw error;\n        }\n        finally {\n            __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, false, \"f\");\n        }\n    }\n    async disconnect() {\n        if ('standard:disconnect' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n            try {\n                await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['standard:disconnect'].disconnect();\n            }\n            catch (error) {\n                this.emit('error', new WalletDisconnectionError(error?.message, error));\n            }\n        }\n        __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(this);\n        this.emit('disconnect');\n    }\n    async sendTransaction(transaction, connection, options = {}) {\n        try {\n            const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n            if (!account)\n                throw new WalletNotConnectedError();\n            let feature;\n            if ('solana:signAndSendTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n                if (account.features.includes('solana:signAndSendTransaction')) {\n                    feature = 'solana:signAndSendTransaction';\n                }\n                else if ('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features &&\n                    account.features.includes('solana:signTransaction')) {\n                    feature = 'solana:signTransaction';\n                }\n                else {\n                    throw new WalletAccountError();\n                }\n            }\n            else if ('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n                if (!account.features.includes('solana:signTransaction'))\n                    throw new WalletAccountError();\n                feature = 'solana:signTransaction';\n            }\n            else {\n                throw new WalletConfigError();\n            }\n            const chain = getChainForEndpoint(connection.rpcEndpoint);\n            if (!account.chains.includes(chain))\n                throw new WalletSendTransactionError();\n            try {\n                const { signers, ...sendOptions } = options;\n                let serializedTransaction;\n                if (isVersionedTransaction(transaction)) {\n                    signers?.length && transaction.sign(signers);\n                    serializedTransaction = transaction.serialize();\n                }\n                else {\n                    transaction = (await this.prepareTransaction(transaction, connection, sendOptions));\n                    signers?.length && transaction.partialSign(...signers);\n                    serializedTransaction = new Uint8Array(transaction.serialize({\n                        requireAllSignatures: false,\n                        verifySignatures: false,\n                    }));\n                }\n                if (feature === 'solana:signAndSendTransaction') {\n                    const [output] = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signAndSendTransaction'].signAndSendTransaction({\n                        account,\n                        chain,\n                        transaction: serializedTransaction,\n                        options: {\n                            preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment),\n                            skipPreflight: sendOptions.skipPreflight,\n                            maxRetries: sendOptions.maxRetries,\n                            minContextSlot: sendOptions.minContextSlot,\n                        },\n                    });\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    return bs58.encode(output.signature);\n                }\n                else {\n                    const [output] = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signTransaction'].signTransaction({\n                        account,\n                        chain,\n                        transaction: serializedTransaction,\n                        options: {\n                            preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment),\n                            minContextSlot: sendOptions.minContextSlot,\n                        },\n                    });\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    return await connection.sendRawTransaction(output.signedTransaction, {\n                        ...sendOptions,\n                        preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment),\n                    });\n                }\n            }\n            catch (error) {\n                if (error instanceof WalletError)\n                    throw error;\n                throw new WalletSendTransactionError(error?.message, error);\n            }\n        }\n        catch (error) {\n            this.emit('error', error);\n            throw error;\n        }\n    }\n}\n_StandardWalletAdapter_account = new WeakMap(), _StandardWalletAdapter_publicKey = new WeakMap(), _StandardWalletAdapter_connecting = new WeakMap(), _StandardWalletAdapter_off = new WeakMap(), _StandardWalletAdapter_wallet = new WeakMap(), _StandardWalletAdapter_supportedTransactionVersions = new WeakMap(), _StandardWalletAdapter_readyState = new WeakMap(), _StandardWalletAdapter_changed = new WeakMap(), _StandardWalletAdapter_instances = new WeakSet(), _StandardWalletAdapter_connected = function _StandardWalletAdapter_connected(account, publicKey) {\n    __classPrivateFieldSet(this, _StandardWalletAdapter_account, account, \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_publicKey, publicKey, \"f\");\n    if (account?.features.includes('solana:signTransaction')) {\n        this.signTransaction = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signTransaction);\n        this.signAllTransactions = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signAllTransactions);\n    }\n    else {\n        delete this.signTransaction;\n        delete this.signAllTransactions;\n    }\n    if (account?.features.includes('solana:signMessage')) {\n        this.signMessage = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signMessage);\n    }\n    else {\n        delete this.signMessage;\n    }\n}, _StandardWalletAdapter_disconnected = function _StandardWalletAdapter_disconnected() {\n    const off = __classPrivateFieldGet(this, _StandardWalletAdapter_off, \"f\");\n    if (off) {\n        __classPrivateFieldSet(this, _StandardWalletAdapter_off, undefined, \"f\");\n        off();\n    }\n    __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, null, null);\n}, _StandardWalletAdapter_signTransaction = async function _StandardWalletAdapter_signTransaction(transaction) {\n    try {\n        const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n        if (!account)\n            throw new WalletNotConnectedError();\n        if (!('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features))\n            throw new WalletConfigError();\n        if (!account.features.includes('solana:signTransaction'))\n            throw new WalletAccountError();\n        try {\n            const signedTransactions = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signTransaction'].signTransaction({\n                account,\n                transaction: isVersionedTransaction(transaction)\n                    ? transaction.serialize()\n                    : new Uint8Array(transaction.serialize({\n                        requireAllSignatures: false,\n                        verifySignatures: false,\n                    })),\n            });\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const serializedTransaction = signedTransactions[0].signedTransaction;\n            return (isVersionedTransaction(transaction)\n                ? VersionedTransaction.deserialize(serializedTransaction)\n                : Transaction.from(serializedTransaction));\n        }\n        catch (error) {\n            if (error instanceof WalletError)\n                throw error;\n            throw new WalletSignTransactionError(error?.message, error);\n        }\n    }\n    catch (error) {\n        this.emit('error', error);\n        throw error;\n    }\n}, _StandardWalletAdapter_signAllTransactions = async function _StandardWalletAdapter_signAllTransactions(transactions) {\n    try {\n        const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n        if (!account)\n            throw new WalletNotConnectedError();\n        if (!('solana:signTransaction' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features))\n            throw new WalletConfigError();\n        if (!account.features.includes('solana:signTransaction'))\n            throw new WalletSignTransactionError();\n        try {\n            const signedTransactions = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signTransaction'].signTransaction(...transactions.map((transaction) => ({\n                account,\n                transaction: isVersionedTransaction(transaction)\n                    ? transaction.serialize()\n                    : new Uint8Array(transaction.serialize({\n                        requireAllSignatures: false,\n                        verifySignatures: false,\n                    })),\n            })));\n            return transactions.map((transaction, index) => {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const signedTransaction = signedTransactions[index].signedTransaction;\n                return (isVersionedTransaction(transaction)\n                    ? VersionedTransaction.deserialize(signedTransaction)\n                    : Transaction.from(signedTransaction));\n            });\n        }\n        catch (error) {\n            throw new WalletSignTransactionError(error?.message, error);\n        }\n    }\n    catch (error) {\n        this.emit('error', error);\n        throw error;\n    }\n}, _StandardWalletAdapter_signMessage = async function _StandardWalletAdapter_signMessage(message) {\n    try {\n        const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n        if (!account)\n            throw new WalletNotConnectedError();\n        if (!('solana:signMessage' in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features))\n            throw new WalletConfigError();\n        if (!account.features.includes('solana:signMessage'))\n            throw new WalletSignMessageError();\n        try {\n            const signedMessages = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features['solana:signMessage'].signMessage({\n                account,\n                message,\n            });\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return signedMessages[0].signature;\n        }\n        catch (error) {\n            throw new WalletSignMessageError(error?.message, error);\n        }\n    }\n    catch (error) {\n        this.emit('error', error);\n        throw error;\n    }\n};\n//# sourceMappingURL=adapter.js.map"]},"metadata":{},"sourceType":"module"}