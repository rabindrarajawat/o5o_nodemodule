{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { NATIVE_MINT_2022, programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { TokenUnsupportedInstructionError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\n\nexport const createNativeMintInstructionData = struct([u8('instruction')]);\n/**\n * Construct a CreateNativeMint instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createCreateNativeMintInstruction(payer) {\n  let nativeMintId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NATIVE_MINT_2022;\n  let programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : TOKEN_2022_PROGRAM_ID;\n\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n\n  const keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: nativeMintId,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = Buffer.alloc(createNativeMintInstructionData.span);\n  createNativeMintInstructionData.encode({\n    instruction: TokenInstruction.CreateNativeMint\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}","map":{"version":3,"sources":["../../../src/instructions/createNativeMint.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,EAAiB,EAAjB,QAA2B,uBAA3B;AAEA,SAAS,aAAT,EAAwB,sBAAxB,QAAsD,iBAAtD;AACA,SAAS,gBAAT,EAA2B,yBAA3B,EAAsD,qBAAtD,QAAmF,iBAAnF;AACA,SAAS,gCAAT,QAAiD,cAAjD;AACA,SAAS,gBAAT,QAAiC,YAAjC;AAOA;;AACA,OAAO,MAAM,+BAA+B,GAAG,MAAM,CAAkC,CAAC,EAAE,CAAC,aAAD,CAAH,CAAlC,CAA9C;AAEP;;;;;;;;;AASG;;AACH,OAAM,SAAU,iCAAV,CACF,KADE,EAG+B;EAAA,IADjC,YACiC,uEADlB,gBACkB;EAAA,IAAjC,SAAiC,uEAArB,qBAAqB;;EAEjC,IAAI,CAAC,yBAAyB,CAAC,SAAD,CAA9B,EAA2C;IACvC,MAAM,IAAI,gCAAJ,EAAN;EACH;;EACD,MAAM,IAAI,GAAG,CACT;IAAE,MAAM,EAAE,KAAV;IAAiB,QAAQ,EAAE,IAA3B;IAAiC,UAAU,EAAE;EAA7C,CADS,EAET;IAAE,MAAM,EAAE,YAAV;IAAwB,QAAQ,EAAE,KAAlC;IAAyC,UAAU,EAAE;EAArD,CAFS,EAGT;IAAE,MAAM,EAAE,aAAa,CAAC,SAAxB;IAAmC,QAAQ,EAAE,KAA7C;IAAoD,UAAU,EAAE;EAAhE,CAHS,CAAb;EAMA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,+BAA+B,CAAC,IAA7C,CAAb;EACA,+BAA+B,CAAC,MAAhC,CAAuC;IAAE,WAAW,EAAE,gBAAgB,CAAC;EAAhC,CAAvC,EAA2F,IAA3F;EAEA,OAAO,IAAI,sBAAJ,CAA2B;IAAE,IAAI,EAAJ,IAAF;IAAQ,SAAS,EAAT,SAAR;IAAmB,IAAI,EAAJ;EAAnB,CAA3B,CAAP;AACH","sourceRoot":"","sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { NATIVE_MINT_2022, programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../constants.js';\nimport { TokenUnsupportedInstructionError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const createNativeMintInstructionData = struct([u8('instruction')]);\n/**\n * Construct a CreateNativeMint instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createCreateNativeMintInstruction(payer, nativeMintId = NATIVE_MINT_2022, programId = TOKEN_2022_PROGRAM_ID) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: nativeMintId, isSigner: false, isWritable: true },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.alloc(createNativeMintInstructionData.span);\n    createNativeMintInstructionData.encode({ instruction: TokenInstruction.CreateNativeMint }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n//# sourceMappingURL=createNativeMint.js.map"]},"metadata":{},"sourceType":"module"}