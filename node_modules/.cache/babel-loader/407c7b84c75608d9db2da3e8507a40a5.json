{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getImmutableOwner = exports.IMMUTABLE_OWNER_SIZE = exports.ImmutableOwnerLayout = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst extensionType_js_1 = require(\"./extensionType.js\");\n/** Buffer layout for de/serializing an account */\n\n\nexports.ImmutableOwnerLayout = (0, buffer_layout_1.struct)([]);\nexports.IMMUTABLE_OWNER_SIZE = exports.ImmutableOwnerLayout.span;\n\nfunction getImmutableOwner(account) {\n  const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.ImmutableOwner, account.tlvData);\n\n  if (extensionData !== null) {\n    return exports.ImmutableOwnerLayout.decode(extensionData);\n  } else {\n    return null;\n  }\n}\n\nexports.getImmutableOwner = getImmutableOwner;","map":{"version":3,"sources":["../../../src/extensions/immutableOwner.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAEA,MAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;AAKA;;;AACa,OAAA,CAAA,oBAAA,GAAuB,CAAA,GAAA,eAAA,CAAA,MAAA,EAAuB,EAAvB,CAAvB;AAEA,OAAA,CAAA,oBAAA,GAAuB,OAAA,CAAA,oBAAA,CAAqB,IAA5C;;AAEb,SAAgB,iBAAhB,CAAkC,OAAlC,EAAkD;EAC9C,MAAM,aAAa,GAAG,CAAA,GAAA,kBAAA,CAAA,gBAAA,EAAiB,kBAAA,CAAA,aAAA,CAAc,cAA/B,EAA+C,OAAO,CAAC,OAAvD,CAAtB;;EACA,IAAI,aAAa,KAAK,IAAtB,EAA4B;IACxB,OAAO,OAAA,CAAA,oBAAA,CAAqB,MAArB,CAA4B,aAA5B,CAAP;EACH,CAFD,MAEO;IACH,OAAO,IAAP;EACH;AACJ;;AAPD,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getImmutableOwner = exports.IMMUTABLE_OWNER_SIZE = exports.ImmutableOwnerLayout = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst extensionType_js_1 = require(\"./extensionType.js\");\n/** Buffer layout for de/serializing an account */\nexports.ImmutableOwnerLayout = (0, buffer_layout_1.struct)([]);\nexports.IMMUTABLE_OWNER_SIZE = exports.ImmutableOwnerLayout.span;\nfunction getImmutableOwner(account) {\n    const extensionData = (0, extensionType_js_1.getExtensionData)(extensionType_js_1.ExtensionType.ImmutableOwner, account.tlvData);\n    if (extensionData !== null) {\n        return exports.ImmutableOwnerLayout.decode(extensionData);\n    }\n    else {\n        return null;\n    }\n}\nexports.getImmutableOwner = getImmutableOwner;\n//# sourceMappingURL=immutableOwner.js.map"]},"metadata":{},"sourceType":"script"}