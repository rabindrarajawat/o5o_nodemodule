{"ast":null,"code":"import { toListingReceiptAccount } from '../accounts.mjs';\nimport { toLazyListing } from '../models/Listing.mjs';\nimport { useOperation } from '../../../types/Operation.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindListingByReceiptOperation';\n/**\n * Finds a Listing by its receipt address.\n *\n * ```ts\n * const nft = await metaplex\n *   .auctionHouse()\n *   .findListingByReceipt({ receiptAddress, auctionHouse };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst findListingByReceiptOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst findListingByReceiptOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const {\n      receiptAddress,\n      auctionHouse\n    } = operation.input;\n    const account = toListingReceiptAccount(await metaplex.rpc().getAccount(receiptAddress, scope.commitment));\n    scope.throwIfCanceled();\n    const lazyListing = toLazyListing(account, auctionHouse);\n    return metaplex.auctionHouse().loadListing({\n      lazyListing,\n      ...operation.input\n    }, scope);\n  }\n};\nexport { findListingByReceiptOperation, findListingByReceiptOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/operations/findListingByReceipt.ts"],"names":["Key","findListingByReceiptOperation","useOperation","findListingByReceiptOperationHandler","handle","operation","metaplex","scope","receiptAddress","auctionHouse","input","account","toListingReceiptAccount","rpc","getAccount","commitment","throwIfCanceled","lazyListing","toLazyListing","loadListing"],"mappings":";;6DAWA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,+BAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,6BAA6B,GACxCC,YAAY,CAAgCF,GAAhC,C;AAEd;AACA;AACA;AACA;;AA8BA;AACA;AACA;AACA;;AACO,MAAMG,oCAAqF,GAChG;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MAAEC,cAAF;MAAkBC;IAAlB,IAAmCJ,SAAS,CAACK,KAAnD;IAEA,MAAMC,OAAO,GAAGC,uBAAuB,CACrC,MAAMN,QAAQ,CAACO,GAATP,GAAeQ,UAAfR,CAA0BE,cAA1BF,EAA0CC,KAAK,CAACQ,UAAhDT,CAD+B,CAAvC;IAGAC,KAAK,CAACS,eAANT;IAEA,MAAMU,WAAW,GAAGC,aAAa,CAACP,OAAD,EAAUF,YAAV,CAAjC;IACA,OAAOH,QAAQ,CACZG,YADIH,GAEJa,WAFIb,CAEQ;MAAEW,WAAF;MAAe,GAAGZ,SAAS,CAACK;IAA5B,CAFRJ,EAE6CC,KAF7CD,CAAP;EAGF;AAjBF,CADK","sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { toListingReceiptAccount } from '../accounts';\nimport { AuctionHouse, Listing, toLazyListing } from '../models';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  OperationScope,\n} from '@/types';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindListingByReceiptOperation' as const;\n\n/**\n * Finds a Listing by its receipt address.\n *\n * ```ts\n * const nft = await metaplex\n *   .auctionHouse()\n *   .findListingByReceipt({ receiptAddress, auctionHouse };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findListingByReceiptOperation =\n  useOperation<FindListingByReceiptOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindListingByReceiptOperation = Operation<\n  typeof Key,\n  FindListingByReceiptInput,\n  Listing\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindListingByReceiptInput = {\n  /**\n   * The address of the listing receipt account.\n   * This is the account that stores information about this listing.\n   * The Listing model is built on top of this account.\n   */\n  receiptAddress: PublicKey;\n\n  /** A model of the Auction House related to this listing. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * Whether or not we should fetch the JSON Metadata for the NFT or SFT.\n   *\n   * @defaultValue `true`\n   */\n  loadJsonMetadata?: boolean;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findListingByReceiptOperationHandler: OperationHandler<FindListingByReceiptOperation> =\n  {\n    handle: async (\n      operation: FindListingByReceiptOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) => {\n      const { receiptAddress, auctionHouse } = operation.input;\n\n      const account = toListingReceiptAccount(\n        await metaplex.rpc().getAccount(receiptAddress, scope.commitment)\n      );\n      scope.throwIfCanceled();\n\n      const lazyListing = toLazyListing(account, auctionHouse);\n      return metaplex\n        .auctionHouse()\n        .loadListing({ lazyListing, ...operation.input }, scope);\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}