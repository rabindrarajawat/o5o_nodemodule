{"ast":null,"code":"import { blob } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base.mjs';\nexport const bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n\n  return bigIntLayout;\n};\nexport const bigIntBE = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntBE(Buffer.from(src));\n  };\n\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferBE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n\n  return bigIntLayout;\n};\nexport const u64 = bigInt(8);\nexport const u64be = bigIntBE(8);\nexport const u128 = bigInt(16);\nexport const u128be = bigIntBE(16);\nexport const u192 = bigInt(24);\nexport const u192be = bigIntBE(24);\nexport const u256 = bigInt(32);\nexport const u256be = bigIntBE(32);","map":{"version":3,"sources":["../../src/bigint.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,QAA6B,uBAA7B;AACA,SAAS,UAAT,EAAqB,UAArB,EAAiC,UAAjC,EAA6C,UAA7C,QAA+D,eAA/D;AACA,SAAS,YAAT,QAA6B,YAA7B;AAEA,OAAO,MAAM,MAAM,GACd,MAAD,IACC,QAAD,IAAsC;EAClC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAD,EAAS,QAAT,CAAnB;EACA,MAAM;IAAE,MAAF;IAAU;EAAV,IAAqB,YAAY,CAAC,MAAD,CAAvC;EAEA,MAAM,YAAY,GAAG,MAArB;;EAEA,YAAY,CAAC,MAAb,GAAsB,CAAC,MAAD,EAAiB,MAAjB,KAAmC;IACrD,MAAM,GAAG,GAAG,MAAM,CAAC,MAAD,EAAS,MAAT,CAAlB;IACA,OAAO,UAAU,CAAC,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAD,CAAjB;EACH,CAHD;;EAKA,YAAY,CAAC,MAAb,GAAsB,CAAC,MAAD,EAAiB,MAAjB,EAAiC,MAAjC,KAAmD;IACrE,MAAM,GAAG,GAAG,UAAU,CAAC,MAAD,EAAS,MAAT,CAAtB;IACA,OAAO,MAAM,CAAC,GAAD,EAAM,MAAN,EAAc,MAAd,CAAb;EACH,CAHD;;EAKA,OAAO,YAAP;AACH,CAnBE;AAqBP,OAAO,MAAM,QAAQ,GAChB,MAAD,IACC,QAAD,IAAsC;EAClC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAD,EAAS,QAAT,CAAnB;EACA,MAAM;IAAE,MAAF;IAAU;EAAV,IAAqB,YAAY,CAAC,MAAD,CAAvC;EAEA,MAAM,YAAY,GAAG,MAArB;;EAEA,YAAY,CAAC,MAAb,GAAsB,CAAC,MAAD,EAAiB,MAAjB,KAAmC;IACrD,MAAM,GAAG,GAAG,MAAM,CAAC,MAAD,EAAS,MAAT,CAAlB;IACA,OAAO,UAAU,CAAC,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAD,CAAjB;EACH,CAHD;;EAKA,YAAY,CAAC,MAAb,GAAsB,CAAC,MAAD,EAAiB,MAAjB,EAAiC,MAAjC,KAAmD;IACrE,MAAM,GAAG,GAAG,UAAU,CAAC,MAAD,EAAS,MAAT,CAAtB;IACA,OAAO,MAAM,CAAC,GAAD,EAAM,MAAN,EAAc,MAAd,CAAb;EACH,CAHD;;EAKA,OAAO,YAAP;AACH,CAnBE;AAqBP,OAAO,MAAM,GAAG,GAAG,MAAM,CAAC,CAAD,CAAlB;AAEP,OAAO,MAAM,KAAK,GAAG,QAAQ,CAAC,CAAD,CAAtB;AAEP,OAAO,MAAM,IAAI,GAAG,MAAM,CAAC,EAAD,CAAnB;AAEP,OAAO,MAAM,MAAM,GAAG,QAAQ,CAAC,EAAD,CAAvB;AAEP,OAAO,MAAM,IAAI,GAAG,MAAM,CAAC,EAAD,CAAnB;AAEP,OAAO,MAAM,MAAM,GAAG,QAAQ,CAAC,EAAD,CAAvB;AAEP,OAAO,MAAM,IAAI,GAAG,MAAM,CAAC,EAAD,CAAnB;AAEP,OAAO,MAAM,MAAM,GAAG,QAAQ,CAAC,EAAD,CAAvB","sourceRoot":"","sourcesContent":["import { blob } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base.mjs';\nexport const bigInt = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntLE(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferLE(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexport const bigIntBE = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntBE(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferBE(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexport const u64 = bigInt(8);\nexport const u64be = bigIntBE(8);\nexport const u128 = bigInt(16);\nexport const u128be = bigIntBE(16);\nexport const u192 = bigInt(24);\nexport const u192be = bigIntBE(24);\nexport const u256 = bigInt(32);\nexport const u256be = bigIntBE(32);\n//# sourceMappingURL=bigint.js.map"]},"metadata":{},"sourceType":"module"}