{"ast":null,"code":"import { Metadata, Edition, Key, MasterEditionV1, MasterEditionV2 } from '@metaplex-foundation/mpl-token-metadata';\nimport { getAccountParsingFunction, getAccountParsingAndAssertingFunction } from '../../types/Account.mjs';\nimport { NotYetImplementedError } from '../../errors/SdkError.mjs';\n/** @group Accounts */\n\n/** @group Account Helpers */\n\nconst parseMetadataAccount = getAccountParsingFunction(Metadata);\n/** @group Account Helpers */\n\nconst toMetadataAccount = getAccountParsingAndAssertingFunction(Metadata);\n/** @group Accounts */\n\nconst originalOrPrintEditionAccountParser = {\n  name: 'MasterEditionV1 | MasterEditionV2 | Edition',\n  deserialize: function (data) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (data?.[0] === Key.MasterEditionV1) {\n      return MasterEditionV1.deserialize(data, offset);\n    } else if (data?.[0] === Key.MasterEditionV2) {\n      return MasterEditionV2.deserialize(data, offset);\n    }\n\n    return Edition.deserialize(data, offset);\n  },\n\n  fromArgs() {\n    throw new NotYetImplementedError();\n  }\n\n};\n/** @group Account Helpers */\n\nconst parseOriginalOrPrintEditionAccount = getAccountParsingFunction(originalOrPrintEditionAccountParser);\n/** @group Account Helpers */\n\nconst toOriginalOrPrintEditionAccount = getAccountParsingAndAssertingFunction(originalOrPrintEditionAccountParser);\n/** @group Account Helpers */\n\nconst isOriginalEditionAccount = account => {\n  return 'maxSupply' in account.data;\n};\n/** @group Account Helpers */\n\n\nconst isPrintEditionAccount = account => {\n  return !isOriginalEditionAccount(account);\n};\n/** @group Accounts */\n\n\nconst originalEditionAccountParser = {\n  name: 'MasterEditionV1 | MasterEditionV2',\n  deserialize: function (data) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (data?.[0] === Key.MasterEditionV1) {\n      return MasterEditionV1.deserialize(data, offset);\n    }\n\n    return MasterEditionV2.deserialize(data, offset);\n  },\n\n  fromArgs() {\n    throw new NotYetImplementedError();\n  }\n\n};\n/** @group Account Helpers */\n\nconst parseOriginalEditionAccount = getAccountParsingFunction(originalEditionAccountParser);\n/** @group Account Helpers */\n\nconst toOriginalEditionAccount = getAccountParsingAndAssertingFunction(originalEditionAccountParser);\n/** @group Accounts */\n\n/** @group Account Helpers */\n\nconst parsePrintEditionAccount = getAccountParsingFunction(Edition);\n/** @group Account Helpers */\n\nconst toPrintEditionAccount = getAccountParsingAndAssertingFunction(Edition);\nexport { isOriginalEditionAccount, isPrintEditionAccount, parseMetadataAccount, parseOriginalEditionAccount, parseOriginalOrPrintEditionAccount, parsePrintEditionAccount, toMetadataAccount, toOriginalEditionAccount, toOriginalOrPrintEditionAccount, toPrintEditionAccount };","map":{"version":3,"sources":["../../../../src/plugins/nftModule/accounts.ts"],"names":["parseMetadataAccount","getAccountParsingFunction","Metadata","toMetadataAccount","getAccountParsingAndAssertingFunction","originalOrPrintEditionAccountParser","name","deserialize","data","offset","Key","MasterEditionV1","MasterEditionV2","Edition","fromArgs","NotYetImplementedError","parseOriginalOrPrintEditionAccount","toOriginalOrPrintEditionAccount","isOriginalEditionAccount","account","isPrintEditionAccount","originalEditionAccountParser","parseOriginalEditionAccount","toOriginalEditionAccount","parsePrintEditionAccount","toPrintEditionAccount"],"mappings":";;;AAgBA;;AAGA;;MACaA,oBAAoB,GAAGC,yBAAyB,CAACC,QAAD,C;AAE7D;;MACaC,iBAAiB,GAC5BC,qCAAqC,CAACF,QAAD,C;AAEvC;;AASA,MAAMG,mCAAkF,GACtF;EACEC,IAAI,EAAE,6CADR;EAEEC,WAAW,EAAE,UAACC,IAAD,EAA8B;IAAA,IAAfC,MAAe,uEAAN,CAAM;;IACzC,IAAID,IAAI,GAAG,CAAH,CAAJA,KAAcE,GAAG,CAACC,eAAtB,EAAuC;MACrC,OAAOA,eAAe,CAACJ,WAAhBI,CAA4BH,IAA5BG,EAAkCF,MAAlCE,CAAP;IACD,CAFD,MAEO,IAAIH,IAAI,GAAG,CAAH,CAAJA,KAAcE,GAAG,CAACE,eAAtB,EAAuC;MAC5C,OAAOA,eAAe,CAACL,WAAhBK,CAA4BJ,IAA5BI,EAAkCH,MAAlCG,CAAP;IACF;;IACA,OAAOC,OAAO,CAACN,WAARM,CAAoBL,IAApBK,EAA0BJ,MAA1BI,CAAP;EACD,CATH;;EAUEC,QAAQ,GAAG;IACT,MAAM,IAAIC,sBAAJ,EAAN;EACF;;AAZF,CADF;AAgBA;;MACaC,kCAAkC,GAC7Cf,yBAAyB,CACvBI,mCADuB,C;AAI3B;;MACaY,+BAA+B,GAC1Cb,qCAAqC,CACnCC,mCADmC,C;AAIvC;;AACaa,MAAAA,wBAAwB,GACnCC,OAAsC,IACA;EACtC,OAAO,eAAeA,OAAO,CAACX,IAA9B;AACF,CAJaU;AAMb;;;AACaE,MAAAA,qBAAqB,GAChCD,OAAsC,IACH;EACnC,OAAO,CAACD,wBAAwB,CAACC,OAAD,CAAhC;AACF,CAJaC;AAMb;;;AAMA,MAAMC,4BAAoE,GAAG;EAC3Ef,IAAI,EAAE,mCADqE;EAE3EC,WAAW,EAAE,UAACC,IAAD,EAA8B;IAAA,IAAfC,MAAe,uEAAN,CAAM;;IACzC,IAAID,IAAI,GAAG,CAAH,CAAJA,KAAcE,GAAG,CAACC,eAAtB,EAAuC;MACrC,OAAOA,eAAe,CAACJ,WAAhBI,CAA4BH,IAA5BG,EAAkCF,MAAlCE,CAAP;IACF;;IACA,OAAOC,eAAe,CAACL,WAAhBK,CAA4BJ,IAA5BI,EAAkCH,MAAlCG,CAAP;EACD,CAP0E;;EAQ3EE,QAAQ,GAAG;IACT,MAAM,IAAIC,sBAAJ,EAAN;EACF;;AAV2E,CAA7E;AAaA;;MACaO,2BAA2B,GACtCrB,yBAAyB,CACvBoB,4BADuB,C;AAI3B;;MACaE,wBAAwB,GACnCnB,qCAAqC,CACnCiB,4BADmC,C;AAIvC;;AAMA;;MACaG,wBAAwB,GAAGvB,yBAAyB,CAACY,OAAD,C;AAEjE;;MACaY,qBAAqB,GAChCrB,qCAAqC,CAACS,OAAD,C","sourcesContent":["import { Buffer } from 'buffer';\nimport {\n  Edition,\n  Key,\n  MasterEditionV1,\n  MasterEditionV2,\n  Metadata,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport {\n  Account,\n  SolitaType,\n  getAccountParsingAndAssertingFunction,\n  getAccountParsingFunction,\n} from '@/types';\nimport { NotYetImplementedError } from '@/errors';\n\n/** @group Accounts */\nexport type MetadataAccount = Account<Metadata>;\n\n/** @group Account Helpers */\nexport const parseMetadataAccount = getAccountParsingFunction(Metadata);\n\n/** @group Account Helpers */\nexport const toMetadataAccount =\n  getAccountParsingAndAssertingFunction(Metadata);\n\n/** @group Accounts */\nexport type OriginalOrPrintEditionAccountData =\n  | OriginalEditionAccountData\n  | PrintEditionAccountData;\n\n/** @group Accounts */\nexport type OriginalOrPrintEditionAccount =\n  Account<OriginalOrPrintEditionAccountData>;\n\nconst originalOrPrintEditionAccountParser: SolitaType<OriginalOrPrintEditionAccountData> =\n  {\n    name: 'MasterEditionV1 | MasterEditionV2 | Edition',\n    deserialize: (data: Buffer, offset = 0) => {\n      if (data?.[0] === Key.MasterEditionV1) {\n        return MasterEditionV1.deserialize(data, offset);\n      } else if (data?.[0] === Key.MasterEditionV2) {\n        return MasterEditionV2.deserialize(data, offset);\n      }\n      return Edition.deserialize(data, offset);\n    },\n    fromArgs() {\n      throw new NotYetImplementedError();\n    },\n  };\n\n/** @group Account Helpers */\nexport const parseOriginalOrPrintEditionAccount =\n  getAccountParsingFunction<OriginalOrPrintEditionAccountData>(\n    originalOrPrintEditionAccountParser\n  );\n\n/** @group Account Helpers */\nexport const toOriginalOrPrintEditionAccount =\n  getAccountParsingAndAssertingFunction<OriginalOrPrintEditionAccountData>(\n    originalOrPrintEditionAccountParser\n  );\n\n/** @group Account Helpers */\nexport const isOriginalEditionAccount = (\n  account: OriginalOrPrintEditionAccount\n): account is OriginalEditionAccount => {\n  return 'maxSupply' in account.data;\n};\n\n/** @group Account Helpers */\nexport const isPrintEditionAccount = (\n  account: OriginalOrPrintEditionAccount\n): account is PrintEditionAccount => {\n  return !isOriginalEditionAccount(account);\n};\n\n/** @group Accounts */\nexport type OriginalEditionAccountData = MasterEditionV1 | MasterEditionV2;\n\n/** @group Accounts */\nexport type OriginalEditionAccount = Account<OriginalEditionAccountData>;\n\nconst originalEditionAccountParser: SolitaType<OriginalEditionAccountData> = {\n  name: 'MasterEditionV1 | MasterEditionV2',\n  deserialize: (data: Buffer, offset = 0) => {\n    if (data?.[0] === Key.MasterEditionV1) {\n      return MasterEditionV1.deserialize(data, offset);\n    }\n    return MasterEditionV2.deserialize(data, offset);\n  },\n  fromArgs() {\n    throw new NotYetImplementedError();\n  },\n};\n\n/** @group Account Helpers */\nexport const parseOriginalEditionAccount =\n  getAccountParsingFunction<OriginalEditionAccountData>(\n    originalEditionAccountParser\n  );\n\n/** @group Account Helpers */\nexport const toOriginalEditionAccount =\n  getAccountParsingAndAssertingFunction<OriginalEditionAccountData>(\n    originalEditionAccountParser\n  );\n\n/** @group Accounts */\nexport type PrintEditionAccountData = Edition;\n\n/** @group Accounts */\nexport type PrintEditionAccount = Account<PrintEditionAccountData>;\n\n/** @group Account Helpers */\nexport const parsePrintEditionAccount = getAccountParsingFunction(Edition);\n\n/** @group Account Helpers */\nexport const toPrintEditionAccount =\n  getAccountParsingAndAssertingFunction(Edition);\n"]},"metadata":{},"sourceType":"module"}