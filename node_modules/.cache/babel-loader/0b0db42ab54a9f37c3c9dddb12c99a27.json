{"ast":null,"code":"import { Buffer } from 'buffer';\nimport { tokenPaymentBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { mapSerializer, createSerializerFromBeet } from '../../../types/Serializer.mjs';\nimport { token } from '../../../types/Amount.mjs';\n/**\n * The tokenPayment guard allows minting by charging the\n * payer a specific amount of tokens from a certain mint acount.\n * The tokens will be transfered to a predefined destination.\n *\n * This guard alone does not limit how many times a holder\n * can mint. A holder can mint as many times as they have\n * the required amount of tokens to pay with.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n */\n\n/** @internal */\n\nconst tokenPaymentGuardManifest = {\n  name: 'tokenPayment',\n  settingsBytes: 72,\n  settingsSerializer: mapSerializer(createSerializerFromBeet(tokenPaymentBeet), settings => ({\n    mint: settings.mint,\n    amount: token(settings.amount),\n    destinationAta: settings.destinationAta\n  }), settings => ({\n    mint: settings.mint,\n    amount: settings.amount.basisPoints,\n    destinationAta: settings.destinationAta\n  })),\n  mintSettingsParser: _ref => {\n    let {\n      metaplex,\n      settings,\n      payer,\n      programs\n    } = _ref;\n    const tokenAddress = metaplex.tokens().pdas().associatedTokenAccount({\n      mint: settings.mint,\n      owner: payer.publicKey,\n      programs\n    });\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts: [{\n        isSigner: false,\n        address: tokenAddress,\n        isWritable: true\n      }, {\n        isSigner: false,\n        address: settings.destinationAta,\n        isWritable: true\n      }]\n    };\n  }\n};\nexport { tokenPaymentGuardManifest };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineModule/guards/tokenPayment.ts"],"names":["tokenPaymentGuardManifest","name","settingsBytes","settingsSerializer","mapSerializer","createSerializerFromBeet","tokenPaymentBeet","settings","mint","amount","token","destinationAta","basisPoints","mintSettingsParser","metaplex","payer","programs","tokenAddress","tokens","pdas","associatedTokenAccount","owner","publicKey","arguments","Buffer","from","remainingAccounts","isSigner","address","isWritable"],"mappings":";;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA;;AACO,MAAMA,yBAAwE,GACnF;EACEC,IAAI,EAAE,cADR;EAEEC,aAAa,EAAE,EAFjB;EAGEC,kBAAkB,EAAEC,aAAa,CAC/BC,wBAAwB,CAACC,gBAAD,CADO,EAE9BC,QAAQ,KAAM;IACbC,IAAI,EAAED,QAAQ,CAACC,IADF;IAEbC,MAAM,EAAEC,KAAK,CAACH,QAAQ,CAACE,MAAV,CAFA;IAGbE,cAAc,EAAEJ,QAAQ,CAACI;EAHZ,CAAN,CAFsB,EAO9BJ,QAAQ,KAAM;IACbC,IAAI,EAAED,QAAQ,CAACC,IADF;IAEbC,MAAM,EAAEF,QAAQ,CAACE,MAATF,CAAgBK,WAFX;IAGbD,cAAc,EAAEJ,QAAQ,CAACI;EAHZ,CAAN,CAPsB,CAHnC;EAgBEE,kBAAkB,EAAE,QAA6C;IAAA,IAA5C;MAAEC,QAAF;MAAYP,QAAZ;MAAsBQ,KAAtB;MAA6BC;IAA7B,CAA4C;IAC/D,MAAMC,YAAY,GAAGH,QAAQ,CAACI,MAATJ,GAAkBK,IAAlBL,GAAyBM,sBAAzBN,CAAgD;MACnEN,IAAI,EAAED,QAAQ,CAACC,IADoD;MAEnEa,KAAK,EAAEN,KAAK,CAACO,SAFsD;MAGnEN;IAHmE,CAAhDF,CAArB;IAMA,OAAO;MACLS,SAAS,EAAEC,MAAM,CAACC,IAAPD,CAAY,EAAZA,CADN;MAELE,iBAAiB,EAAE,CACjB;QACEC,QAAQ,EAAE,KADZ;QAEEC,OAAO,EAAEX,YAFX;QAGEY,UAAU,EAAE;MAHd,CADiB,EAMjB;QACEF,QAAQ,EAAE,KADZ;QAEEC,OAAO,EAAErB,QAAQ,CAACI,cAFpB;QAGEkB,UAAU,EAAE;MAHd,CANiB;IAFd,CAAP;EAeF;AAtCF,CADK","sourcesContent":["import { Buffer } from 'buffer';\nimport {\n  TokenPayment,\n  tokenPaymentBeet,\n} from '@metaplex-foundation/mpl-candy-guard';\nimport { CandyGuardManifest } from './core';\nimport {\n  createSerializerFromBeet,\n  mapSerializer,\n  PublicKey,\n  SplTokenAmount,\n  token,\n} from '@/types';\n\n/**\n * The tokenPayment guard allows minting by charging the\n * payer a specific amount of tokens from a certain mint acount.\n * The tokens will be transfered to a predefined destination.\n *\n * This guard alone does not limit how many times a holder\n * can mint. A holder can mint as many times as they have\n * the required amount of tokens to pay with.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n */\nexport type TokenPaymentGuardSettings = {\n  /** The mint address of the required tokens. */\n  mint: PublicKey;\n\n  /** The amount of tokens required to mint an NFT. */\n  amount: SplTokenAmount;\n\n  /** The associated token address to send the tokens to. */\n  destinationAta: PublicKey;\n};\n\n/** @internal */\nexport const tokenPaymentGuardManifest: CandyGuardManifest<TokenPaymentGuardSettings> =\n  {\n    name: 'tokenPayment',\n    settingsBytes: 72,\n    settingsSerializer: mapSerializer<TokenPayment, TokenPaymentGuardSettings>(\n      createSerializerFromBeet(tokenPaymentBeet),\n      (settings) => ({\n        mint: settings.mint,\n        amount: token(settings.amount),\n        destinationAta: settings.destinationAta,\n      }),\n      (settings) => ({\n        mint: settings.mint,\n        amount: settings.amount.basisPoints,\n        destinationAta: settings.destinationAta,\n      })\n    ),\n    mintSettingsParser: ({ metaplex, settings, payer, programs }) => {\n      const tokenAddress = metaplex.tokens().pdas().associatedTokenAccount({\n        mint: settings.mint,\n        owner: payer.publicKey,\n        programs,\n      });\n\n      return {\n        arguments: Buffer.from([]),\n        remainingAccounts: [\n          {\n            isSigner: false,\n            address: tokenAddress,\n            isWritable: true,\n          },\n          {\n            isSigner: false,\n            address: settings.destinationAta,\n            isWritable: true,\n          },\n        ],\n      };\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}