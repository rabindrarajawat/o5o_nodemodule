{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeMintToCheckedInstructionUnchecked = exports.decodeMintToCheckedInstruction = exports.createMintToCheckedInstruction = exports.mintToCheckedInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst internal_js_1 = require(\"./internal.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\n\n\nexports.mintToCheckedInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_utils_1.u64)('amount'), (0, buffer_layout_1.u8)('decimals')]);\n/**\n * Construct a MintToChecked instruction\n *\n * @param mint         Public key of the mint\n * @param destination  Address of the token account to mint to\n * @param authority    The mint authority\n * @param amount       Amount to mint\n * @param decimals     Number of decimals in amount to mint\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createMintToCheckedInstruction(mint, destination, authority, amount, decimals) {\n  let multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_js_1.TOKEN_PROGRAM_ID;\n  const keys = (0, internal_js_1.addSigners)([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(exports.mintToCheckedInstructionData.span);\n  exports.mintToCheckedInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.MintToChecked,\n    amount: BigInt(amount),\n    decimals\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createMintToCheckedInstruction = createMintToCheckedInstruction;\n/**\n * Decode a MintToChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeMintToCheckedInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.mintToCheckedInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint,\n      destination,\n      authority,\n      multiSigners\n    },\n    data\n  } = decodeMintToCheckedInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.MintToChecked) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!mint || !destination || !authority) throw new errors_js_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      mint,\n      destination,\n      authority,\n      multiSigners\n    },\n    data\n  };\n}\n\nexports.decodeMintToCheckedInstruction = decodeMintToCheckedInstruction;\n/**\n * Decode a MintToChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeMintToCheckedInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [mint, destination, authority, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      mint,\n      destination,\n      authority,\n      multiSigners\n    },\n    data: exports.mintToCheckedInstructionData.decode(data)\n  };\n}\n\nexports.decodeMintToCheckedInstructionUnchecked = decodeMintToCheckedInstructionUnchecked;","map":{"version":3,"sources":["../../../src/instructions/mintToChecked.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeMintToCheckedInstructionUnchecked = exports.decodeMintToCheckedInstruction = exports.createMintToCheckedInstruction = exports.mintToCheckedInstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst internal_js_1 = require(\"./internal.js\");\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.mintToCheckedInstructionData = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('instruction'),\n    (0, buffer_layout_utils_1.u64)('amount'),\n    (0, buffer_layout_1.u8)('decimals'),\n]);\n/**\n * Construct a MintToChecked instruction\n *\n * @param mint         Public key of the mint\n * @param destination  Address of the token account to mint to\n * @param authority    The mint authority\n * @param amount       Amount to mint\n * @param decimals     Number of decimals in amount to mint\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createMintToCheckedInstruction(mint, destination, authority, amount, decimals, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    const keys = (0, internal_js_1.addSigners)([\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n    ], authority, multiSigners);\n    const data = Buffer.alloc(exports.mintToCheckedInstructionData.span);\n    exports.mintToCheckedInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.MintToChecked,\n        amount: BigInt(amount),\n        decimals,\n    }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createMintToCheckedInstruction = createMintToCheckedInstruction;\n/**\n * Decode a MintToChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeMintToCheckedInstruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.mintToCheckedInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { mint, destination, authority, multiSigners }, data, } = decodeMintToCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.MintToChecked)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!mint || !destination || !authority)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\nexports.decodeMintToCheckedInstruction = decodeMintToCheckedInstruction;\n/**\n * Decode a MintToChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeMintToCheckedInstructionUnchecked({ programId, keys: [mint, destination, authority, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: exports.mintToCheckedInstructionData.decode(data),\n    };\n}\nexports.decodeMintToCheckedInstructionUnchecked = decodeMintToCheckedInstructionUnchecked;\n//# sourceMappingURL=mintToChecked.js.map"]},"metadata":{},"sourceType":"script"}