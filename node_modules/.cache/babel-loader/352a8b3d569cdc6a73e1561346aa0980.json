{"ast":null,"code":"import BN from 'bn.js';\nimport assert from '../utils/assert.mjs';\n\nconst toBigNumber = (value, endian) => {\n  return new BN(value, endian);\n};\n\nconst toOptionBigNumber = value => {\n  return value === null ? null : toBigNumber(value);\n};\n\nconst isBigNumber = value => {\n  return value?.__opaque__ === 'BigNumber';\n};\n\nfunction assertBigNumber(value) {\n  assert(isBigNumber(value), 'Expected BigNumber type');\n}\n\nexport { assertBigNumber, isBigNumber, toBigNumber, toOptionBigNumber };","map":{"version":3,"sources":["../../../src/types/BigNumber.ts"],"names":["toBigNumber","value","endian","BN","toOptionBigNumber","isBigNumber","__opaque__","assertBigNumber","assert"],"mappings":";;;MAaaA,WAAW,GAAG,CACzBC,KADyB,EAEzBC,MAFyB,KAGX;EACd,OAAO,IAAIC,EAAJ,CAAOF,KAAP,EAAcC,MAAd,CAAP;AACF,C;;AAEaE,MAAAA,iBAAiB,GAC5BH,KAA8B,IACR;EACtB,OAAOA,KAAK,KAAK,IAAVA,GAAiB,IAAjBA,GAAwBD,WAAW,CAACC,KAAD,CAA1C;AACF,CAJaG;;AAMAC,MAAAA,WAAW,GAAIJ,KAAU,IAAyB;EAC7D,OAAOA,KAAK,EAAEK,UAAPL,KAAsB,WAA7B;AACF,CAFaI;;AAIN,SAASE,eAAT,CAAyBN,KAAzB,EAAiE;EACtEO,MAAM,CAACH,WAAW,CAACJ,KAAD,CAAZ,EAAqB,yBAArB,CAANO;AACF","sourcesContent":["import type { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport { assert, Opaque, Option } from '@/utils';\n\nexport type BigNumber = Opaque<BN, 'BigNumber'>;\nexport type BigNumberValues =\n  | number\n  | string\n  | number[]\n  | Uint8Array\n  | Buffer\n  | BN;\n\nexport const toBigNumber = (\n  value: BigNumberValues,\n  endian?: BN.Endianness\n): BigNumber => {\n  return new BN(value, endian) as BigNumber;\n};\n\nexport const toOptionBigNumber = (\n  value: Option<BigNumberValues>\n): Option<BigNumber> => {\n  return value === null ? null : toBigNumber(value);\n};\n\nexport const isBigNumber = (value: any): value is BigNumber => {\n  return value?.__opaque__ === 'BigNumber';\n};\n\nexport function assertBigNumber(value: any): asserts value is BigNumber {\n  assert(isBigNumber(value), 'Expected BigNumber type');\n}\n"]},"metadata":{},"sourceType":"module"}