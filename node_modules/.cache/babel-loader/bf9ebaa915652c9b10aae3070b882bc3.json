{"ast":null,"code":"import { createWithdrawInstruction } from '@metaplex-foundation/mpl-candy-guard';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'DeleteCandyGuardOperation';\n/**\n * Deletes a Candy Guard account by withdrawing its rent-exempt balance.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .deleteCandyGuard({\n *     candyGuard,\n *     authority,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst deleteCandyGuardOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst deleteCandyGuardOperationHandler = {\n  async handle(operation, metaplex, scope) {\n    return deleteCandyGuardBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Deletes a Candy Guard account by withdrawing its rent-exempt balance.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachines()\n *   .builders()\n *   .deleteCandyGuard({\n *     candyGuard,\n *     authority,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst deleteCandyGuardBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    candyGuard,\n    authority = metaplex.identity()\n  } = params;\n  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);\n  return TransactionBuilder.make().setFeePayer(payer).add({\n    instruction: createWithdrawInstruction({\n      candyGuard,\n      authority: authority.publicKey\n    }, candyGuardProgram.address),\n    signers: [authority],\n    key: params.deleteCandyGuardInstructionKey ?? 'deleteCandyGuard'\n  });\n};\n\nexport { deleteCandyGuardBuilder, deleteCandyGuardOperation, deleteCandyGuardOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineModule/operations/deleteCandyGuard.ts"],"names":["Key","deleteCandyGuardOperation","useOperation","deleteCandyGuardOperationHandler","handle","operation","metaplex","scope","deleteCandyGuardBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","candyGuard","authority","identity","candyGuardProgram","getCandyGuard","TransactionBuilder","make","setFeePayer","add","instruction","createWithdrawInstruction","publicKey","address","signers","key","deleteCandyGuardInstructionKey"],"mappings":";;4EAaA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,2BAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,yBAAyB,GACpCC,YAAY,CAA4BF,GAA5B,C;AAEd;AACA;AACA;AACA;;AAmCA;AACA;AACA;AACA;;AACO,MAAMG,gCAA6E,GACxF;EACE,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAImC;IACjC,OAAOC,uBAAuB,CAC5BF,QAD4B,EAE5BD,SAAS,CAACI,KAFkB,EAG5BF,KAH4B,CAAvBC,CAILE,cAJKF,CAIUF,QAJVE,EAIoBD,KAAK,CAACI,cAJ1BH,CAAP;EAKF;;AAXF,CADK,C,CAeP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaA,MAAAA,uBAAuB,GAAG,UACrCF,QADqC,EAErCM,MAFqC,EAId;EAAA,IADvBC,OACuB,uEADc,EACd;EACvB,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGT,QAAQ,CAACU,GAATV,GAAeW,kBAAfX;EAApB,IAA4DO,OAAlE;EACA,MAAM;IAAEK,UAAF;IAAcC,SAAS,GAAGb,QAAQ,CAACc,QAATd;EAA1B,IAAkDM,MAAxD;EAEA,MAAMS,iBAAiB,GAAGf,QAAQ,CAACQ,QAATR,GAAoBgB,aAApBhB,CAAkCQ,QAAlCR,CAA1B;EAEA,OAAOiB,kBAAkB,CAACC,IAAnBD,GACJE,WADIF,CACQR,KADRQ,EAEJG,GAFIH,CAEA;IACHI,WAAW,EAAEC,yBAAyB,CACpC;MACEV,UADF;MAEEC,SAAS,EAAEA,SAAS,CAACU;IAFvB,CADoC,EAKpCR,iBAAiB,CAACS,OALkB,CADnC;IAQHC,OAAO,EAAE,CAACZ,SAAD,CARN;IASHa,GAAG,EAAEpB,MAAM,CAACqB,8BAAPrB,IAAyC;EAT3C,CAFAW,CAAP;AAaF,CAvBaf","sourcesContent":["import { createWithdrawInstruction } from '@metaplex-foundation/mpl-candy-guard';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  PublicKey,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'DeleteCandyGuardOperation' as const;\n\n/**\n * Deletes a Candy Guard account by withdrawing its rent-exempt balance.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .deleteCandyGuard({\n *     candyGuard,\n *     authority,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const deleteCandyGuardOperation =\n  useOperation<DeleteCandyGuardOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type DeleteCandyGuardOperation = Operation<\n  typeof Key,\n  DeleteCandyGuardInput,\n  DeleteCandyGuardOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type DeleteCandyGuardInput = {\n  /** The address of the Candy Guard account to delete. */\n  candyGuard: PublicKey;\n\n  /**\n   * The authority of the Candy Guard account.\n   *\n   * This is the account that will received the rent-exemption\n   * lamports from the Candy Guard account.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type DeleteCandyGuardOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const deleteCandyGuardOperationHandler: OperationHandler<DeleteCandyGuardOperation> =\n  {\n    async handle(\n      operation: DeleteCandyGuardOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<DeleteCandyGuardOutput> {\n      return deleteCandyGuardBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type DeleteCandyGuardBuilderParams = Omit<\n  DeleteCandyGuardInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that deletes the Candy Guard account. */\n  deleteCandyGuardInstructionKey?: string;\n};\n\n/**\n * Deletes a Candy Guard account by withdrawing its rent-exempt balance.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachines()\n *   .builders()\n *   .deleteCandyGuard({\n *     candyGuard,\n *     authority,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const deleteCandyGuardBuilder = (\n  metaplex: Metaplex,\n  params: DeleteCandyGuardBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { candyGuard, authority = metaplex.identity() } = params;\n\n  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createWithdrawInstruction(\n        {\n          candyGuard,\n          authority: authority.publicKey,\n        },\n        candyGuardProgram.address\n      ),\n      signers: [authority],\n      key: params.deleteCandyGuardInstructionKey ?? 'deleteCandyGuard',\n    });\n};\n"]},"metadata":{},"sourceType":"module"}