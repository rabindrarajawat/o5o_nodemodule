{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeThawAccountInstructionUnchecked = exports.decodeThawAccountInstruction = exports.createThawAccountInstruction = exports.thawAccountInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst internal_js_1 = require(\"./internal.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\n\n\nexports.thawAccountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct a ThawAccount instruction\n *\n * @param account      Account to thaw\n * @param mint         Mint account\n * @param authority    Mint freeze authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createThawAccountInstruction(account, mint, authority) {\n  let multiSigners = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.TOKEN_PROGRAM_ID;\n  const keys = (0, internal_js_1.addSigners)([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }], authority, multiSigners);\n  const data = Buffer.alloc(exports.thawAccountInstructionData.span);\n  exports.thawAccountInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.ThawAccount\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createThawAccountInstruction = createThawAccountInstruction;\n/**\n * Decode a ThawAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeThawAccountInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.thawAccountInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint,\n      authority,\n      multiSigners\n    },\n    data\n  } = decodeThawAccountInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.ThawAccount) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account || !mint || !authority) throw new errors_js_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      authority,\n      multiSigners\n    },\n    data\n  };\n}\n\nexports.decodeThawAccountInstruction = decodeThawAccountInstruction;\n/**\n * Decode a ThawAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeThawAccountInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, mint, authority, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      authority,\n      multiSigners\n    },\n    data: exports.thawAccountInstructionData.decode(data)\n  };\n}\n\nexports.decodeThawAccountInstructionUnchecked = decodeThawAccountInstructionUnchecked;","map":{"version":3,"sources":["../../../src/instructions/thawAccount.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeThawAccountInstructionUnchecked = exports.decodeThawAccountInstruction = exports.createThawAccountInstruction = exports.thawAccountInstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst internal_js_1 = require(\"./internal.js\");\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.thawAccountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct a ThawAccount instruction\n *\n * @param account      Account to thaw\n * @param mint         Mint account\n * @param authority    Mint freeze authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createThawAccountInstruction(account, mint, authority, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    const keys = (0, internal_js_1.addSigners)([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n    ], authority, multiSigners);\n    const data = Buffer.alloc(exports.thawAccountInstructionData.span);\n    exports.thawAccountInstructionData.encode({ instruction: types_js_1.TokenInstruction.ThawAccount }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createThawAccountInstruction = createThawAccountInstruction;\n/**\n * Decode a ThawAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeThawAccountInstruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.thawAccountInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { account, mint, authority, multiSigners }, data, } = decodeThawAccountInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.ThawAccount)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!account || !mint || !authority)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\nexports.decodeThawAccountInstruction = decodeThawAccountInstruction;\n/**\n * Decode a ThawAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeThawAccountInstructionUnchecked({ programId, keys: [account, mint, authority, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            authority,\n            multiSigners,\n        },\n        data: exports.thawAccountInstructionData.decode(data),\n    };\n}\nexports.decodeThawAccountInstructionUnchecked = decodeThawAccountInstructionUnchecked;\n//# sourceMappingURL=thawAccount.js.map"]},"metadata":{},"sourceType":"script"}