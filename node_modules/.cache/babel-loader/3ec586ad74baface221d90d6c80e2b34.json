{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\n\nexport const initializeMintInstructionData = struct([u8('instruction'), u8('decimals'), publicKey('mintAuthority'), u8('freezeAuthorityOption'), publicKey('freezeAuthority')]);\n/**\n * Construct an InitializeMint instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createInitializeMintInstruction(mint, decimals, mintAuthority, freezeAuthority) {\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = Buffer.alloc(initializeMintInstructionData.span);\n  initializeMintInstructionData.encode({\n    instruction: TokenInstruction.InitializeMint,\n    decimals,\n    mintAuthority,\n    freezeAuthorityOption: freezeAuthority ? 1 : 0,\n    freezeAuthority: freezeAuthority || new PublicKey(0)\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode an InitializeMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeInitializeMintInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeMintInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint,\n      rent\n    },\n    data\n  } = decodeInitializeMintInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.InitializeMint) throw new TokenInvalidInstructionTypeError();\n  if (!mint || !rent) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      mint,\n      rent\n    },\n    data\n  };\n}\n/**\n * Decode an InitializeMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeInitializeMintInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [mint, rent],\n    data\n  } = _ref;\n  const {\n    instruction,\n    decimals,\n    mintAuthority,\n    freezeAuthorityOption,\n    freezeAuthority\n  } = initializeMintInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      mint,\n      rent\n    },\n    data: {\n      instruction,\n      decimals,\n      mintAuthority,\n      freezeAuthority: freezeAuthorityOption ? freezeAuthority : null\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/instructions/initializeMint.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const initializeMintInstructionData = struct([\n    u8('instruction'),\n    u8('decimals'),\n    publicKey('mintAuthority'),\n    u8('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n/**\n * Construct an InitializeMint instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMintInstruction(mint, decimals, mintAuthority, freezeAuthority, programId = TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.alloc(initializeMintInstructionData.span);\n    initializeMintInstructionData.encode({\n        instruction: TokenInstruction.InitializeMint,\n        decimals,\n        mintAuthority,\n        freezeAuthorityOption: freezeAuthority ? 1 : 0,\n        freezeAuthority: freezeAuthority || new PublicKey(0),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an InitializeMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMintInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMintInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { mint, rent }, data, } = decodeInitializeMintInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMint)\n        throw new TokenInvalidInstructionTypeError();\n    if (!mint || !rent)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data,\n    };\n}\n/**\n * Decode an InitializeMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMintInstructionUnchecked({ programId, keys: [mint, rent], data, }) {\n    const { instruction, decimals, mintAuthority, freezeAuthorityOption, freezeAuthority } = initializeMintInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data: {\n            instruction,\n            decimals,\n            mintAuthority,\n            freezeAuthority: freezeAuthorityOption ? freezeAuthority : null,\n        },\n    };\n}\n//# sourceMappingURL=initializeMint.js.map"]},"metadata":{},"sourceType":"module"}