{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeBurnCheckedInstructionUnchecked = exports.decodeBurnCheckedInstruction = exports.createBurnCheckedInstruction = exports.burnCheckedInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst internal_js_1 = require(\"./internal.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\n\n\nexports.burnCheckedInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_utils_1.u64)('amount'), (0, buffer_layout_1.u8)('decimals')]);\n/**\n * Construct a BurnChecked instruction\n *\n * @param mint         Mint for the account\n * @param account      Account to burn tokens from\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param decimals     Number of decimals in burn amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createBurnCheckedInstruction(account, mint, owner, amount, decimals) {\n  let multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_js_1.TOKEN_PROGRAM_ID;\n  const keys = (0, internal_js_1.addSigners)([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  const data = Buffer.alloc(exports.burnCheckedInstructionData.span);\n  exports.burnCheckedInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.BurnChecked,\n    amount: BigInt(amount),\n    decimals\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createBurnCheckedInstruction = createBurnCheckedInstruction;\n/**\n * Decode a BurnChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeBurnCheckedInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.burnCheckedInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeBurnCheckedInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.BurnChecked) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account || !mint || !owner) throw new errors_js_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n\nexports.decodeBurnCheckedInstruction = decodeBurnCheckedInstruction;\n/**\n * Decode a BurnChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeBurnCheckedInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, mint, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      multiSigners\n    },\n    data: exports.burnCheckedInstructionData.decode(data)\n  };\n}\n\nexports.decodeBurnCheckedInstructionUnchecked = decodeBurnCheckedInstructionUnchecked;","map":{"version":3,"sources":["../../../src/instructions/burnChecked.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeBurnCheckedInstructionUnchecked = exports.decodeBurnCheckedInstruction = exports.createBurnCheckedInstruction = exports.burnCheckedInstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst internal_js_1 = require(\"./internal.js\");\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.burnCheckedInstructionData = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('instruction'),\n    (0, buffer_layout_utils_1.u64)('amount'),\n    (0, buffer_layout_1.u8)('decimals'),\n]);\n/**\n * Construct a BurnChecked instruction\n *\n * @param mint         Mint for the account\n * @param account      Account to burn tokens from\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param decimals     Number of decimals in burn amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createBurnCheckedInstruction(account, mint, owner, amount, decimals, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    const keys = (0, internal_js_1.addSigners)([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: true },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(exports.burnCheckedInstructionData.span);\n    exports.burnCheckedInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.BurnChecked,\n        amount: BigInt(amount),\n        decimals,\n    }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createBurnCheckedInstruction = createBurnCheckedInstruction;\n/**\n * Decode a BurnChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeBurnCheckedInstruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.burnCheckedInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { account, mint, owner, multiSigners }, data, } = decodeBurnCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.BurnChecked)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\nexports.decodeBurnCheckedInstruction = decodeBurnCheckedInstruction;\n/**\n * Decode a BurnChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeBurnCheckedInstructionUnchecked({ programId, keys: [account, mint, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data: exports.burnCheckedInstructionData.decode(data),\n    };\n}\nexports.decodeBurnCheckedInstructionUnchecked = decodeBurnCheckedInstructionUnchecked;\n//# sourceMappingURL=burnChecked.js.map"]},"metadata":{},"sourceType":"script"}