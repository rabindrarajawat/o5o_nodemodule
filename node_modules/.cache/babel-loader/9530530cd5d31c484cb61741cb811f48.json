{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var MemoTransferInstruction;\n\n(function (MemoTransferInstruction) {\n  MemoTransferInstruction[MemoTransferInstruction[\"Enable\"] = 0] = \"Enable\";\n  MemoTransferInstruction[MemoTransferInstruction[\"Disable\"] = 1] = \"Disable\";\n})(MemoTransferInstruction || (MemoTransferInstruction = {}));\n/** TODO: docs */\n\n\nexport const memoTransferInstructionData = struct([u8('instruction'), u8('memoTransferInstruction')]);\n/**\n * Construct an EnableRequiredMemoTransfers instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createEnableRequiredMemoTransfersInstruction(account, authority) {\n  let multiSigners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_2022_PROGRAM_ID;\n  return createMemoTransferInstruction(\n  /* enable */\n  true, account, authority, multiSigners, programId);\n}\n/**\n * Construct a DisableMemoTransfer instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createDisableRequiredMemoTransfersInstruction(account, authority) {\n  let multiSigners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_2022_PROGRAM_ID;\n  return createMemoTransferInstruction(\n  /* enable */\n  false, account, authority, multiSigners, programId);\n}\n\nfunction createMemoTransferInstruction(enable, account, authority, multiSigners, programId) {\n  if (!programSupportsExtensions(programId)) {\n    throw new TokenUnsupportedInstructionError();\n  }\n\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }];\n  keys.push({\n    pubkey: authority,\n    isSigner: !multiSigners.length,\n    isWritable: false\n  });\n\n  for (const signer of multiSigners) {\n    keys.push({\n      pubkey: signer.publicKey,\n      isSigner: true,\n      isWritable: false\n    });\n  }\n\n  const data = Buffer.alloc(memoTransferInstructionData.span);\n  memoTransferInstructionData.encode({\n    instruction: TokenInstruction.MemoTransferExtension,\n    memoTransferInstruction: enable ? MemoTransferInstruction.Enable : MemoTransferInstruction.Disable\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}","map":{"version":3,"sources":["../../../../src/extensions/memoTransfer/instructions.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,EAAiB,EAAjB,QAA2B,uBAA3B;AAEA,SAAS,sBAAT,QAAuC,iBAAvC;AACA,SAAS,yBAAT,EAAoC,qBAApC,QAAiE,oBAAjE;AACA,SAAS,gCAAT,QAAiD,iBAAjD;AACA,SAAS,gBAAT,QAAiC,6BAAjC;AAEA,OAAA,IAAY,uBAAZ;;AAAA,CAAA,UAAY,uBAAZ,EAAmC;EAC/B,uBAAA,CAAA,uBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;EACA,uBAAA,CAAA,uBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACH,CAHD,EAAY,uBAAuB,KAAvB,uBAAuB,GAAA,EAAA,CAAnC;AAWA;;;AACA,OAAO,MAAM,2BAA2B,GAAG,MAAM,CAA8B,CAC3E,EAAE,CAAC,aAAD,CADyE,EAE3E,EAAE,CAAC,yBAAD,CAFyE,CAA9B,CAA1C;AAKP;;;;;;;;;AASG;;AACH,OAAM,SAAU,4CAAV,CACF,OADE,EAEF,SAFE,EAI+B;EAAA,IADjC,YACiC,uEADR,EACQ;EAAA,IAAjC,SAAiC,uEAArB,qBAAqB;EAEjC,OAAO,6BAA6B;EAAC;EAAa,IAAd,EAAoB,OAApB,EAA6B,SAA7B,EAAwC,YAAxC,EAAsD,SAAtD,CAApC;AACH;AAED;;;;;;;;;AASG;;AACH,OAAM,SAAU,6CAAV,CACF,OADE,EAEF,SAFE,EAI+B;EAAA,IADjC,YACiC,uEADR,EACQ;EAAA,IAAjC,SAAiC,uEAArB,qBAAqB;EAEjC,OAAO,6BAA6B;EAAC;EAAa,KAAd,EAAqB,OAArB,EAA8B,SAA9B,EAAyC,YAAzC,EAAuD,SAAvD,CAApC;AACH;;AAED,SAAS,6BAAT,CACI,MADJ,EAEI,OAFJ,EAGI,SAHJ,EAII,YAJJ,EAKI,SALJ,EAKwB;EAEpB,IAAI,CAAC,yBAAyB,CAAC,SAAD,CAA9B,EAA2C;IACvC,MAAM,IAAI,gCAAJ,EAAN;EACH;;EACD,MAAM,IAAI,GAAG,CAAC;IAAE,MAAM,EAAE,OAAV;IAAmB,QAAQ,EAAE,KAA7B;IAAoC,UAAU,EAAE;EAAhD,CAAD,CAAb;EACA,IAAI,CAAC,IAAL,CAAU;IAAE,MAAM,EAAE,SAAV;IAAqB,QAAQ,EAAE,CAAC,YAAY,CAAC,MAA7C;IAAqD,UAAU,EAAE;EAAjE,CAAV;;EACA,KAAK,MAAM,MAAX,IAAqB,YAArB,EAAmC;IAC/B,IAAI,CAAC,IAAL,CAAU;MAAE,MAAM,EAAE,MAAM,CAAC,SAAjB;MAA4B,QAAQ,EAAE,IAAtC;MAA4C,UAAU,EAAE;IAAxD,CAAV;EACH;;EAED,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,2BAA2B,CAAC,IAAzC,CAAb;EACA,2BAA2B,CAAC,MAA5B,CACI;IACI,WAAW,EAAE,gBAAgB,CAAC,qBADlC;IAEI,uBAAuB,EAAE,MAAM,GAAG,uBAAuB,CAAC,MAA3B,GAAoC,uBAAuB,CAAC;EAF/F,CADJ,EAKI,IALJ;EAQA,OAAO,IAAI,sBAAJ,CAA2B;IAAE,IAAF;IAAQ,SAAR;IAAmB;EAAnB,CAA3B,CAAP;AACH","sourceRoot":"","sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { programSupportsExtensions, TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { TokenUnsupportedInstructionError } from '../../errors.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var MemoTransferInstruction;\n(function (MemoTransferInstruction) {\n    MemoTransferInstruction[MemoTransferInstruction[\"Enable\"] = 0] = \"Enable\";\n    MemoTransferInstruction[MemoTransferInstruction[\"Disable\"] = 1] = \"Disable\";\n})(MemoTransferInstruction || (MemoTransferInstruction = {}));\n/** TODO: docs */\nexport const memoTransferInstructionData = struct([\n    u8('instruction'),\n    u8('memoTransferInstruction'),\n]);\n/**\n * Construct an EnableRequiredMemoTransfers instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createEnableRequiredMemoTransfersInstruction(account, authority, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n    return createMemoTransferInstruction(/* enable */ true, account, authority, multiSigners, programId);\n}\n/**\n * Construct a DisableMemoTransfer instruction\n *\n * @param account         Token account to update\n * @param authority       The account's owner/delegate\n * @param signers         The signer account(s)\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createDisableRequiredMemoTransfersInstruction(account, authority, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n    return createMemoTransferInstruction(/* enable */ false, account, authority, multiSigners, programId);\n}\nfunction createMemoTransferInstruction(enable, account, authority, multiSigners, programId) {\n    if (!programSupportsExtensions(programId)) {\n        throw new TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\n    keys.push({ pubkey: authority, isSigner: !multiSigners.length, isWritable: false });\n    for (const signer of multiSigners) {\n        keys.push({ pubkey: signer.publicKey, isSigner: true, isWritable: false });\n    }\n    const data = Buffer.alloc(memoTransferInstructionData.span);\n    memoTransferInstructionData.encode({\n        instruction: TokenInstruction.MemoTransferExtension,\n        memoTransferInstruction: enable ? MemoTransferInstruction.Enable : MemoTransferInstruction.Disable,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n//# sourceMappingURL=instructions.js.map"]},"metadata":{},"sourceType":"module"}