{"ast":null,"code":"import { Buffer } from 'buffer';\nimport { sha512 } from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$1 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { hmac } from '@noble/hashes/hmac';\nimport * as secp256k1 from '@noble/secp256k1';\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\ned25519.utils.sha512Sync = function () {\n  return sha512(ed25519.utils.concatBytes(...arguments));\n};\n\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\n\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey: publicKey,\n    secretKey: secretKey\n  };\n};\n\nconst getPublicKey = ed25519.sync.getPublicKey;\n\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.Point.fromHex(publicKey, true\n    /* strict */\n    );\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nconst sign = (message, secretKey) => ed25519.sync.sign(message, secretKey.slice(0, 32));\n\nconst verify = ed25519.sync.verify;\n\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n\n} // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\n\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n\n}\n\nconst SOLANA_SCHEMA = new Map();\n\nlet _Symbol$toStringTag;\n/**\n * Maximum length of derived pubkey seed\n */\n\n\nconst MAX_SEED_LENGTH = 32;\n/**\n * Size of public key in bytes\n */\n\nconst PUBLIC_KEY_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n} // local counter used by PublicKey.unique()\n\n\nlet uniquePublicKeyCounter = 1;\n/**\n * A public key\n */\n\n_Symbol$toStringTag = Symbol.toStringTag;\n\nclass PublicKey extends Struct {\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    this._bn = void 0;\n\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n\n\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n\n\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON() {\n    return this.toBase58();\n  }\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n\n\n  toBytes() {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n\n\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [_Symbol$toStringTag]() {\n    return `PublicKey(${this.toString()})`;\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toString() {\n    return this.toBase58();\n  }\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n\n\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n\n        nonce--;\n        continue;\n      }\n\n      return [address, nonce];\n    }\n\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n\n\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n\n\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n\n}\n\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\nclass Account {\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    this._publicKey = void 0;\n    this._secretKey = void 0;\n\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n\n\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\n\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\n\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n\n}\n\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\n\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\n\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\n\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n\n    return keySegments;\n  }\n\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n\n    return;\n  }\n\n  get length() {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n\n}\n/**\n * Layout for a public key\n */\n\n\nconst publicKey = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a signature\n */\n\n\nconst signature = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'signature';\n  return BufferLayout.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\n\n\nconst rustString = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n\n  const _decode = rsl.decode.bind(rsl);\n\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl;\n\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n\n  return rslShim;\n};\n/**\n * Layout for an Authorized object\n */\n\n\nconst authorized = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\n\nconst lockup = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\n\nconst voteInit = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\n\n\nconst voteAuthorizeWithSeedArgs = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteAuthorizeWithSeedArgs';\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\n\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    } // Couldn't determine allocated size of layout\n\n\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n\n  return len;\n}\n\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner || (keyMeta.isSigner = accountMeta.isSigner);\n        keyMeta.isWritable || (keyMeta.isWritable = accountMeta.isWritable);\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(_ref => {\n      let [, meta] = _ref;\n      return meta.isSigner && meta.isWritable;\n    });\n    const readonlySigners = mapEntries.filter(_ref2 => {\n      let [, meta] = _ref2;\n      return meta.isSigner && !meta.isWritable;\n    });\n    const writableNonSigners = mapEntries.filter(_ref3 => {\n      let [, meta] = _ref3;\n      return !meta.isSigner && meta.isWritable;\n    });\n    const readonlyNonSigners = mapEntries.filter(_ref4 => {\n      let [, meta] = _ref4;\n      return !meta.isSigner && !meta.isWritable;\n    });\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    }; // sanity checks\n\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(_ref5 => {\n      let [address] = _ref5;\n      return new PublicKey(address);\n    }), ...readonlySigners.map(_ref6 => {\n      let [address] = _ref6;\n      return new PublicKey(address);\n    }), ...writableNonSigners.map(_ref7 => {\n      let [address] = _ref7;\n      return new PublicKey(address);\n    }), ...readonlyNonSigners.map(_ref8 => {\n      let [address] = _ref8;\n      return new PublicKey(address);\n    })];\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable); // Don't extract lookup if no keys were found\n\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes: writableIndexes,\n      readonlyIndexes: readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n  /** @internal */\n\n\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n\n}\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * List of instructions to be processed atomically\n */\n\n\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n\n  get version() {\n    return 'legacy';\n  }\n\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n\n  get addressTableLookups() {\n    return [];\n  }\n\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58.encode(ix.data)\n    }));\n    return new Message({\n      header: header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions: instructions\n    });\n  }\n\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts: accounts,\n        programIdIndex: programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex: programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data: data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n  /**\n   * Decode a compiled message into a Message object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = byteArray.shift();\n\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountCount = decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex: programIdIndex,\n        accounts: accounts,\n        data: data\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures: numRequiredSignatures,\n        numReadonlySignedAccounts: numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys: accountKeys,\n      instructions: instructions\n    };\n    return new Message(messageArgs);\n  }\n\n}\n/**\n * Message constructor arguments\n */\n\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version() {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups() {\n    let count = 0;\n\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n\n    return count;\n  }\n\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable: writable,\n          readonly: readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header: header,\n      staticAccountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions: compiledInstructions,\n      addressTableLookups: addressTableLookups\n    });\n  }\n\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions: serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups: serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = byteArray.shift();\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: byteArray.shift(),\n      numReadonlySignedAccounts: byteArray.shift(),\n      numReadonlyUnsignedAccounts: byteArray.shift()\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)));\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex: programIdIndex,\n        accountKeyIndexes: accountKeyIndexes,\n        data: data\n      });\n    }\n\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey: accountKey,\n        writableIndexes: writableIndexes,\n        readonlyIndexes: readonlyIndexes\n      });\n    }\n\n    return new MessageV0({\n      header: header,\n      staticAccountKeys: staticAccountKeys,\n      recentBlockhash: recentBlockhash,\n      compiledInstructions: compiledInstructions,\n      addressTableLookups: addressTableLookups\n    });\n  }\n\n} // eslint-disable-next-line no-redeclare\n\n\nconst VersionedMessage = {\n  deserializeMessageVersion: function (serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK; // if the highest bit of the prefix is not set, the message is not versioned\n\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    } // the lower 7 bits of the prefix indicate the message version\n\n\n    return maskedPrefix;\n  },\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus;\n/**\n * Default (empty) signature\n */\n\n(function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n})(TransactionStatus || (TransactionStatus = {}));\n\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\n\nclass TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  constructor(opts) {\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  toJSON() {\n    return {\n      keys: this.keys.map(_ref9 => {\n        let {\n          pubkey: pubkey,\n          isSigner: isSigner,\n          isWritable: isWritable\n        } = _ref9;\n        return {\n          pubkey: pubkey.toJSON(),\n          isSigner: isSigner,\n          isWritable: isWritable\n        };\n      }),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n\n}\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\n\n\nclass Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n\n    return null;\n  }\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n\n\n  constructor(opts) {\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.lastValidBlockHeight = void 0;\n    this.nonceInfo = void 0;\n    this.minNonceContextSlot = void 0;\n    this._message = void 0;\n    this._json = void 0;\n\n    if (!opts) {\n      return;\n    }\n\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot: minContextSlot,\n        nonceInfo: nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash: blockhash,\n        lastValidBlockHeight: lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash: recentBlockhash,\n        nonceInfo: nonceInfo\n      } = opts;\n\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(_ref10 => {\n        let {\n          publicKey: publicKey\n        } = _ref10;\n        return publicKey.toJSON();\n      })\n    };\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n\n  add() {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n  /**\n   * Compile transaction data\n   */\n\n\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions;\n\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer;\n\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({ ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    }); // Append programID account metas\n\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    }); // Cull duplicate account metas\n\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    }); // Sort. Prioritizing first by signer, then by writable\n\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      } // Otherwise, sort by pubkey, stringwise.\n\n\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    }); // Move fee payer to the front\n\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    } // Disallow unknown signers\n\n\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(_ref11 => {\n      let {\n        pubkey: pubkey,\n        isSigner: isSigner,\n        isWritable: isWritable\n      } = _ref11;\n\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data: data,\n        programId: programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures: numRequiredSignatures,\n        numReadonlySignedAccounts: numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n      },\n      accountKeys: accountKeys,\n      recentBlockhash: recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey: publicKey\n    }));\n    return message;\n  }\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n\n\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n\n\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n\n\n  setSigners() {\n    for (var _len2 = arguments.length, signers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      signers[_key2] = arguments[_key2];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey: publicKey\n    }));\n  }\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n\n\n  sign() {\n    for (var _len3 = arguments.length, signers = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      signers[_key3] = arguments[_key3];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n\n\n  partialSign() {\n    for (var _len4 = arguments.length, signers = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      signers[_key4] = arguments[_key4];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * @internal\n   */\n\n\n  _partialSign(message) {\n    const signData = message.serialize();\n\n    for (var _len5 = arguments.length, signers = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      signers[_key5 - 1] = arguments[_key5];\n    }\n\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n\n\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n\n\n    this._addSignature(pubkey, signature);\n  }\n  /**\n   * @internal\n   */\n\n\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n\n\n  verifySignatures(requireAllSignatures) {\n    return this._verifySignatures(this.serializeMessage(), requireAllSignatures === undefined ? true : requireAllSignatures);\n  }\n  /**\n   * @internal\n   */\n\n\n  _verifySignatures(signData, requireAllSignatures) {\n    for (const {\n      signature: signature,\n      publicKey: publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n\n\n  serialize(config) {\n    const {\n      requireAllSignatures: requireAllSignatures,\n      verifySignatures: verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n\n    if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n  /**\n   * @internal\n   */\n\n\n  _serialize(signData) {\n    const {\n      signatures: signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach((_ref12, index) => {\n      let {\n        signature: signature\n      } = _ref12;\n\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n  /**\n   * Populate Transaction object from message and signatures\n   */\n\n\n  static populate(message) {\n    let signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey: pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys: keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n\n}\n\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(message, args) {\n    const {\n      header: header,\n      compiledInstructions: compiledInstructions,\n      recentBlockhash: recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures: numRequiredSignatures,\n      numReadonlySignedAccounts: numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n\n    const instructions = [];\n\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length < // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n\n        keys.push({\n          pubkey: pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable: isWritable\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n\n      instructions.push(new TransactionInstruction({\n        programId: programId,\n        data: toBuffer(compiledIx.data),\n        keys: keys\n      }));\n    }\n\n    return new TransactionMessage({\n      payerKey: payerKey,\n      instructions: instructions,\n      recentBlockhash: recentBlockhash\n    });\n  }\n\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts: addressLookupTableAccounts\n    });\n  }\n\n}\n/**\n * Versioned transaction class\n */\n\n\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n\n      this.signatures = defaultSignatures;\n    }\n\n    this.message = message;\n  }\n\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage: serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n\n}\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  let status;\n\n  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n    status = (await connection.confirmTransaction({\n      abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n      signature: signature,\n      blockhash: transaction.recentBlockhash,\n      lastValidBlockHeight: transaction.lastValidBlockHeight\n    }, options && options.commitment)).value;\n  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n    const {\n      nonceInstruction: nonceInstruction\n    } = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (await connection.confirmTransaction({\n      abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n      minContextSlot: transaction.minNonceContextSlot,\n      nonceAccountPubkey: nonceAccountPubkey,\n      nonceValue: transaction.nonceInfo.nonce,\n      signature: signature\n    }, options && options.commitment)).value;\n  } else {\n    if ((options === null || options === void 0 ? void 0 : options.abortSignal) != null) {\n      console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n    }\n\n    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  }\n\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n} // zzz\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\n\n\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\n\nfunction decodeData$1(type, buffer) {\n  let data;\n\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n\n  return data;\n}\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\n\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\n\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n\n}\n\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode: decode,\n    encode: encode\n  };\n};\n\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode: encode,\n    decode: decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n\n  return bigIntLayout;\n};\n\nconst u64 = bigInt(8);\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\n\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports: lamports,\n      space: space,\n      programId: programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports: lamports,\n      space: space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports: lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports: lamports\n    };\n  }\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports: lamports,\n      seed: seed,\n      programId: programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports: lamports,\n      seed: seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space: space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space: space\n    };\n  }\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base: base,\n      seed: seed,\n      space: space,\n      programId: programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed: seed,\n      space: space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId: programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base: base,\n      seed: seed,\n      programId: programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed: seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base: base,\n      seed: seed,\n      lamports: lamports,\n      space: space,\n      programId: programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed: seed,\n      lamports: lamports,\n      space: space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized: authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports: lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports: lamports\n    };\n  }\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized: authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\n\n\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n\n\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data: data\n    });\n  }\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n\n\n  static transfer(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys: keys,\n      programId: this.programId,\n      data: data\n    });\n  }\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n\n\n  static assign(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys: keys,\n      programId: this.programId,\n      data: data\n    });\n  }\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n\n    return new TransactionInstruction({\n      keys: keys,\n      programId: this.programId,\n      data: data\n    });\n  }\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n\n\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n\n\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data: data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n\n\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data: data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n\n\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data: data\n    });\n  }\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n\n\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data: data\n    });\n  }\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n\n\n  static allocate(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys: keys,\n      programId: this.programId,\n      data: data\n    });\n  }\n\n}\n\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111'); // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\n\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n\n\n  static getMinNumSignatures(dataLength) {\n    return 2 * ( // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 + // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length); // Fetch program account info to check if it has already been created\n\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId: programId\n          }));\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId: programId\n        }));\n      } // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n\n\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset: offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId: programId,\n        data: data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      })); // Delay between sends in an attempt to reduce rate limit errors\n\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n\n    await Promise.all(transactions); // Finalize the account loaded with program data for execution\n\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: programId,\n        data: data\n      });\n      await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      });\n    } // success\n\n    return true;\n  }\n\n}\n\nLoader.chunkSize = CHUNK_SIZE;\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n\n}\n\nvar objToString = Object.prototype.toString;\n\nvar objKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var name in obj) {\n    keys.push(name);\n  }\n\n  return keys;\n};\n\nfunction stringify(val, isArrayProp) {\n  var i, max, str, keys, key, propVal, toStr;\n\n  if (val === true) {\n    return \"true\";\n  }\n\n  if (val === false) {\n    return \"false\";\n  }\n\n  switch (typeof val) {\n    case \"object\":\n      if (val === null) {\n        return null;\n      } else if (val.toJSON && typeof val.toJSON === \"function\") {\n        return stringify(val.toJSON(), isArrayProp);\n      } else {\n        toStr = objToString.call(val);\n\n        if (toStr === \"[object Array]\") {\n          str = '[';\n          max = val.length - 1;\n\n          for (i = 0; i < max; i++) {\n            str += stringify(val[i], true) + ',';\n          }\n\n          if (max > -1) {\n            str += stringify(val[i], true);\n          }\n\n          return str + ']';\n        } else if (toStr === \"[object Object]\") {\n          // only object is left\n          keys = objKeys(val).sort();\n          max = keys.length;\n          str = \"\";\n          i = 0;\n\n          while (i < max) {\n            key = keys[i];\n            propVal = stringify(val[key], false);\n\n            if (propVal !== undefined) {\n              if (str) {\n                str += ',';\n              }\n\n              str += JSON.stringify(key) + ':' + propVal;\n            }\n\n            i++;\n          }\n\n          return '{' + str + '}';\n        } else {\n          return JSON.stringify(val);\n        }\n      }\n\n    case \"function\":\n    case \"undefined\":\n      return isArrayProp ? null : undefined;\n\n    case \"string\":\n      return JSON.stringify(val);\n\n    default:\n      return isFinite(val) ? val : null;\n  }\n}\n\nvar fastStableStringify = function (val) {\n  var returnVal = stringify(val, false);\n\n  if (returnVal !== undefined) {\n    return '' + returnVal;\n  }\n};\n\nvar fastStableStringify$1 = fastStableStringify;\nconst MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\n\n\nclass EpochSchedule {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n\n}\n\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n\n} // Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\n\n\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\n\nclass SolanaJSONRPCError extends Error {\n  constructor(_ref13, customMessage) {\n    let {\n      code: code,\n      message: message,\n      data: data\n    } = _ref13;\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n\n}\n\nvar fetchImpl = globalThis.fetch; // TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\n\nconst NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nconst DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\n\nfunction decodeData(type, data) {\n  let decoded;\n\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n\n  return decoded;\n} /// The serialized size of lookup table metadata\n\n\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses: addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(), // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n\n  const [_, // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort = // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n\nvar _process$env$npm_pack;\n\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/* @internal */\n\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n\n  return putativeUrl;\n}\n/** @internal */\n\n\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n\n  return {\n    commitment: commitment,\n    config: config\n  };\n}\n/**\n * @internal\n */\n\n\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result: result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return { ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n/**\n * @internal\n */\n\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value: value\n  }));\n}\n/**\n * @internal\n */\n\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value: value\n  });\n}\n/**\n * @internal\n */\n\n\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\n\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\n\nconst GetInflationRateResult = type({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number()\n});\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nconst SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  })))\n}));\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\n\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  let fetchWithMiddleware;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent: agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429\n        /* Too many requests */\n        ) {\n          break;\n        }\n\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n\n        too_many_requests_retries -= 1;\n\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n\n        console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\n\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\n\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nconst SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\n\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\n\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\n\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\n\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\n\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nconst ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n/**\n * @internal\n */\n\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n/** @internal */\n\nconst RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string())\n});\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\n\nconst GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\n\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\n\nconst GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\n\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\n\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nconst SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\n\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\n\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/** @internal */\n\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${(_process$env$npm_pack = \"0.0.0-development\") !== null && _process$env$npm_pack !== void 0 ? _process$env$npm_pack : 'UNKNOWN'}`\n};\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nclass Connection {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, commitmentOrConfig) {\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._rpcWebSocketGeneration = 0;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._nextClientSubscriptionId = 0;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    this._subscriptionHashByClientSubscriptionId = {};\n    this._subscriptionStateChangeCallbacksByHash = {};\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    this._subscriptionsByHash = {};\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n\n  get commitment() {\n    return this._commitment;\n  }\n  /**\n   * The RPC endpoint\n   */\n\n\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n\n\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the balance for the specified public key\n   */\n\n\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Fetch the estimated production time of a block\n   */\n\n\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n\n\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n\n\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch information about the current supply\n   */\n\n\n  async getSupply(config) {\n    let configArg = {};\n\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = { ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current supply of a token mint\n   */\n\n\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current balance of a token account\n   */\n\n\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n\n\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n\n\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n\n\n  async getLargestAccounts(config) {\n    const arg = { ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n\n\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n\n\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n\n\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key\n   */\n\n\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n\n  async getMultipleParsedAccounts(publicKeys, rawConfig) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n\n\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n\n\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n    /* encoding */\n    , { ...config,\n      epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n    });\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding: encoding,\n      ...configWithoutEncoding\n    } = config || {};\n\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n\n\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(configOrCommitment);\n\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n\n    return res.result;\n  } // eslint-disable-next-line no-dupe-class-members\n\n\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      var _config$abortSignal;\n\n      const config = strategy;\n\n      if ((_config$abortSignal = config.abortSignal) !== null && _config$abortSignal !== void 0 && _config$abortSignal.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy: strategy\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy: strategy\n      });\n    }\n  }\n\n  getCancellationPromise(signal) {\n    return new Promise((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  getTransactionConfirmationPromise(_ref14) {\n    let {\n      commitment: commitment,\n      signature: signature\n    } = _ref14;\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context: context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response: response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n\n          if (response == null) {\n            return;\n          }\n\n          const {\n            context: context,\n            value: value\n          } = response;\n\n          if (value == null) {\n            return;\n          }\n\n          if (value !== null && value !== void 0 && value.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n\n                  break;\n                }\n\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n\n              case 'processed':\n              case 'recent':\n            }\n\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context: context,\n                value: value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n\n    return {\n      abortConfirmation: abortConfirmation,\n      confirmationPromise: confirmationPromise\n    };\n  }\n\n  async confirmTransactionUsingBlockHeightExceedanceStrategy(_ref15) {\n    let {\n      commitment: commitment,\n      strategy: {\n        abortSignal: abortSignal,\n        lastValidBlockHeight: lastValidBlockHeight,\n        signature: signature\n      }\n    } = _ref15;\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n\n        resolve({\n          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n        });\n      })();\n    });\n    const {\n      abortConfirmation: abortConfirmation,\n      confirmationPromise: confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment: commitment,\n      signature: signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n\n    return result;\n  }\n\n  async confirmTransactionUsingDurableNonceStrategy(_ref16) {\n    let {\n      commitment: commitment,\n      strategy: {\n        abortSignal: abortSignal,\n        minContextSlot: minContextSlot,\n        nonceAccountPubkey: nonceAccountPubkey,\n        nonceValue: nonceValue,\n        signature: signature\n      }\n    } = _ref16;\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      let currentNonceValue = nonceValue;\n      let lastCheckedSlot = null;\n\n      const getCurrentNonceValue = async () => {\n        try {\n          const {\n            context: context,\n            value: nonceAccount\n          } = await this.getNonceAndContext(nonceAccountPubkey, {\n            commitment: commitment,\n            minContextSlot: minContextSlot\n          });\n          lastCheckedSlot = context.slot;\n          return nonceAccount === null || nonceAccount === void 0 ? void 0 : nonceAccount.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot\n            });\n            return;\n          }\n\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {\n      abortConfirmation: abortConfirmation,\n      confirmationPromise: confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment: commitment,\n      signature: signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        var _signatureStatus; // Double check that the transaction is indeed unconfirmed.\n\n\n        let signatureStatus;\n\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          var _outcome$slotInWhichN;\n\n          const status = await this.getSignatureStatus(signature);\n\n          if (status == null) {\n            break;\n          }\n\n          if (status.context.slot < ((_outcome$slotInWhichN = outcome.slotInWhichNonceDidAdvance) !== null && _outcome$slotInWhichN !== void 0 ? _outcome$slotInWhichN : minContextSlot)) {\n            await sleep(400);\n            continue;\n          }\n\n          signatureStatus = status;\n          break;\n        }\n\n        if ((_signatureStatus = signatureStatus) !== null && _signatureStatus !== void 0 && _signatureStatus.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {\n            confirmationStatus: confirmationStatus\n          } = signatureStatus.value;\n\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n\n              break;\n\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n\n              break;\n\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n\n              break;\n\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (_ => {})(commitmentForStatus);\n\n          }\n\n          result = {\n            context: signatureStatus.context,\n            value: {\n              err: signatureStatus.value.err\n            }\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n\n    return result;\n  }\n\n  async confirmTransactionUsingLegacyTimeoutStrategy(_ref17) {\n    let {\n      commitment: commitment,\n      signature: signature\n    } = _ref17;\n    let timeoutId;\n    const expiryPromise = new Promise(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip':\n          {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n      }\n\n      timeoutId = setTimeout(() => resolve({\n        __type: TransactionStatus.TIMED_OUT,\n        timeoutMs: timeoutMs\n      }), timeoutMs);\n    });\n    const {\n      abortConfirmation: abortConfirmation,\n      confirmationPromise: confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment: commitment,\n      signature: signature\n    });\n    let result;\n\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n\n    return result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n\n    return res.result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot that the node is processing\n   */\n\n\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n\n\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n\n\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current status of a signature\n   */\n\n\n  async getSignatureStatus(signature, config) {\n    const {\n      context: context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context: context,\n      value: value\n    };\n  }\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n\n\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n\n    if (config) {\n      params.push(config);\n    }\n\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n\n\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n\n\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment: commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n\n\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n\n\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined\n    /* encoding */\n    , { ...config,\n      epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n    });\n\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n\n\n  async getInflationRate() {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Info parameters\n   */\n\n\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n\n\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n\n\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n\n\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n\n\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n\n\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n\n    const {\n      context: context,\n      value: value\n    } = res.result;\n    return {\n      context: context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n\n\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n\n    const args = this._buildArgs([wireMessage], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n\n\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n\n\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the node version\n   */\n\n\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the genesis hash\n   */\n\n\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(rawConfig);\n\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n\n    try {\n      switch (config === null || config === void 0 ? void 0 : config.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n\n            if ('error' in res) {\n              throw res.error;\n            }\n\n            return res.result;\n          }\n\n        case 'none':\n          {\n            const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n\n            if ('error' in res) {\n              throw res.error;\n            }\n\n            return res.result;\n          }\n\n        default:\n          {\n            const res = create(unsafeRes, GetBlockRpcResult);\n\n            if ('error' in res) {\n              throw res.error;\n            }\n\n            const {\n              result: result\n            } = res;\n            return result ? { ...result,\n              transactions: result.transactions.map(_ref18 => {\n                let {\n                  transaction: transaction,\n                  meta: meta,\n                  version: version\n                } = _ref18;\n                return {\n                  meta: meta,\n                  transaction: { ...transaction,\n                    message: versionedMessageFromResponse(version, transaction.message)\n                  },\n                  version: version\n                };\n              })\n            } : null;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get confirmed block');\n    }\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n\n  async getParsedBlock(slot, rawConfig) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(rawConfig);\n\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n\n    try {\n      switch (config === null || config === void 0 ? void 0 : config.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n\n            if ('error' in res) {\n              throw res.error;\n            }\n\n            return res.result;\n          }\n\n        case 'none':\n          {\n            const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n\n            if ('error' in res) {\n              throw res.error;\n            }\n\n            return res.result;\n          }\n\n        default:\n          {\n            const res = create(unsafeRes, GetParsedBlockRpcResult);\n\n            if ('error' in res) {\n              throw res.error;\n            }\n\n            return res.result;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get block');\n    }\n  }\n  /*\n   * Returns the current block height of the node\n   */\n\n\n  async getBlockHeight(commitmentOrConfig) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n    }\n\n    return res.result;\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n\n\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(rawConfig);\n\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transaction: { ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n\n\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n\n\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n\n      return {\n        methodName: 'getTransaction',\n        args: args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment: commitment,\n      config: config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined\n      /* encoding */\n      , config);\n\n      return {\n        methodName: 'getTransaction',\n        args: args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n\n      const result = res.result;\n      if (!result) return result;\n      return { ...result,\n        transaction: { ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n\n\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = { ...result,\n      transactions: result.transactions.map(_ref19 => {\n        let {\n          transaction: transaction,\n          meta: meta\n        } = _ref19;\n        const message = new Message(transaction.message);\n        return {\n          meta: meta,\n          transaction: { ...transaction,\n            message: message\n          }\n        };\n      })\n    };\n    return { ...block,\n      transactions: block.transactions.map(_ref20 => {\n        let {\n          transaction: transaction,\n          meta: meta\n        } = _ref20;\n        return {\n          meta: meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n\n\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n\n\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n\n\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n\n\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return { ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n\n\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n\n\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n      return {\n        methodName: 'getConfirmedTransaction',\n        args: args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n\n\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n\n    while (!('until' in options)) {\n      startSlot--;\n\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n\n    while (!('before' in options)) {\n      endSlot++;\n\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n\n    return res.result;\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n\n    return res.result;\n  }\n\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context: context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n\n    return {\n      context: context,\n      value: value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n\n\n  async getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    const {\n      context: context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n    let value = null;\n\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context: context,\n      value: value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n\n\n  async getNonce(nonceAccount, commitmentOrConfig) {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n\n\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n  /**\n   * @internal\n   */\n\n\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash: latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        } // Sleep for approximately half a slot\n\n\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n  /**\n   * get the stake minimum delegation\n   */\n\n\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment: commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = Buffer.from(wireTransaction).toString('base64');\n\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n\n      return res.result;\n    }\n\n    let transaction;\n\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage); // HACK: this function relies on mutating the populated transaction\n\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n\n    const signData = message.serialize();\n\n    const wireTransaction = transaction._serialize(signData);\n\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses: addresses\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n\n\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n\n\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n\n      return;\n    } // implicit close, prepare subscriptions for auto-reconnect\n\n\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(_ref21 => {\n      let [hash, subscription] = _ref21;\n\n      this._setSubscription(hash, { ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _setSubscription(hash, nextSubscription) {\n    var _this$_subscriptionsB;\n\n    const prevState = (_this$_subscriptionsB = this._subscriptionsByHash[hash]) === null || _this$_subscriptionsB === void 0 ? void 0 : _this$_subscriptionsB.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state); // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    var _this$_subscriptionSt;\n\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n\n    if (hash == null) {\n      return () => {};\n    }\n\n    const stateChangeCallbacks = (_this$_subscriptionSt = this._subscriptionStateChangeCallbacksByHash)[hash] || (_this$_subscriptionSt[hash] = new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all( // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n\n            await this._updateSubscriptions();\n            return;\n          }\n\n          await (async () => {\n            const {\n              args: args,\n              method: method\n            } = subscription;\n\n            try {\n              this._setSubscription(hash, { ...subscription,\n                state: 'subscribing'\n              });\n\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n\n              this._setSubscription(hash, { ...subscription,\n                serverSubscriptionId: serverSubscriptionId,\n                state: 'subscribed'\n              });\n\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(`${method} error for argument`, args, e.message);\n              }\n\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              } // TODO: Maybe add an 'errored' state or a retry limit?\n\n\n              this._setSubscription(hash, { ...subscription,\n                state: 'pending'\n              });\n\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId: serverSubscriptionId,\n                unsubscribeMethod: unsubscribeMethod\n              } = subscription;\n\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._setSubscription(hash, { ...subscription,\n                  state: 'unsubscribing'\n                });\n\n                this._setSubscription(hash, { ...subscription,\n                  state: 'unsubscribing'\n                });\n\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  } // TODO: Maybe add an 'errored' state or a retry limit?\n\n\n                  this._setSubscription(hash, { ...subscription,\n                    state: 'subscribed'\n                  });\n\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n\n              this._setSubscription(hash, { ...subscription,\n                state: 'unsubscribed'\n              });\n\n              await this._updateSubscriptions();\n            })();\n          }\n\n          break;\n      }\n    }));\n  }\n  /**\n   * @internal\n   */\n\n\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n\n    if (callbacks === undefined) {\n      return;\n    }\n\n    callbacks.forEach(cb => {\n      try {\n        cb( // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnAccountNotification(notification) {\n    const {\n      result: result,\n      subscription: subscription\n    } = create(notification, AccountNotificationResult);\n\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args], true\n    /* isArrayProp */\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = { ...subscriptionConfig,\n        args: args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n\n    this._updateSubscriptions();\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n\n\n  onAccountChange(publicKey, callback, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n    'base64');\n\n    return this._makeSubscription({\n      callback: callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result: result,\n      subscription: subscription\n    } = create(notification, ProgramAccountNotificationResult);\n\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n\n\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n    'base64'\n    /* encoding */\n    , filters ? {\n      filters: filters\n    } : undefined\n    /* extra */\n    );\n\n    return this._makeSubscription({\n      callback: callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n\n\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    return this._makeSubscription({\n      callback: callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n\n\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnLogsNotification(notification) {\n    const {\n      result: result,\n      subscription: subscription\n    } = create(notification, LogsNotificationResult);\n\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotNotification(notification) {\n    const {\n      result: result,\n      subscription: subscription\n    } = create(notification, SlotNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n\n\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback: callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result: result,\n      subscription: subscription\n    } = create(notification, SlotUpdateNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n\n\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback: callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n  /**\n   * @internal\n   */\n\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment || encoding || extra) {\n      let options = {};\n\n      if (encoding) {\n        options.encoding = encoding;\n      }\n\n      if (commitment) {\n        options.commitment = commitment;\n      }\n\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n\n      args.push(options);\n    }\n\n    return args;\n  }\n  /**\n   * @internal\n   */\n\n\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n\n    return this._buildArgs(args, override, encoding, extra);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSignatureNotification(notification) {\n    const {\n      result: result,\n      subscription: subscription\n    } = create(notification, SignatureNotificationResult);\n\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context); // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n\n          try {\n            this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n          } catch (_err) {// Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment: commitment,\n      ...extra\n    } = { ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n\n    };\n\n    const args = this._buildArgs([signature], commitment, undefined\n    /* encoding */\n    , extra);\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context); // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n\n        try {\n          this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n        } catch (_err) {// Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnRootNotification(notification) {\n    const {\n      result: result,\n      subscription: subscription\n    } = create(notification, RootNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n\n\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback: callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n\n}\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\n\n\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair !== null && keypair !== void 0 ? keypair : generateKeypair();\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n\n\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n\n    const publicKey = secretKey.slice(32, 64);\n\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n\n    return new Keypair({\n      publicKey: publicKey,\n      secretKey: secretKey\n    });\n  }\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n\n\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey: publicKey,\n      secretKey: secretKey\n    });\n  }\n  /**\n   * The public key for this keypair\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The raw secret key for this keypair\n   */\n\n\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n\n}\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\n\n\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n\n    return type;\n  }\n\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot: recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n\n    const {\n      addresses: addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n}\n\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n/**\n * Compute Budget Instruction class\n */\n\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units: units,\n      additionalFee: additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units: units,\n      additionalFee: additionalFee\n    };\n  }\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes: bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes: bytes\n    };\n  }\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units: units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units: units\n    };\n  }\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports: microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports: microLamports\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n\n}\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\n\n\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\n\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n\n\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data: data\n    });\n  }\n\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data: data\n    });\n  }\n\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data: data\n    });\n  }\n\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data: data\n    });\n  }\n\n}\n\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\n\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey: publicKey,\n      message: message,\n      signature: signature,\n      instructionIndex: instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures: numSignatures,\n      padding: 0,\n      signatureOffset: signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset: publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset: messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: privateKey,\n      message: message,\n      instructionIndex: instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey: publicKey,\n        message: message,\n        signature: signature,\n        instructionIndex: instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\n\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111'); // library interoperable with the synchronous APIs in web3.js.\n\nsecp256k1.utils.hmacSha256Sync = function (key) {\n  const h = hmac.create(sha256, key);\n\n  for (var _len6 = arguments.length, msgs = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    msgs[_key6 - 1] = arguments[_key6];\n  }\n\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nconst ecdsaSign = (msgHash, privKey) => secp256k1.signSync(msgHash, privKey, {\n  der: false,\n  recovered: true\n});\n\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\n\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n\n\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey: publicKey,\n      message: message,\n      signature: signature,\n      recoveryId: recoveryId,\n      instructionIndex: instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message: message,\n      signature: signature,\n      recoveryId: recoveryId,\n      instructionIndex: instructionIndex\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n\n\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message: message,\n      signature: signature,\n      recoveryId: recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures: numSignatures,\n      signatureOffset: signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset: ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset: messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId: recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message: message,\n      instructionIndex: instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false\n      /* isCompressed */\n      ).slice(1); // throw away leading byte\n\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey: publicKey,\n        message: message,\n        signature: signature,\n        recoveryId: recoveryId,\n        instructionIndex: instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\n\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nclass Authorized {\n  /** stake authority */\n\n  /** withdraw authority */\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    this.staker = void 0;\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n\n}\n/**\n * Stake account lockup info\n */\n\n\nclass Lockup {\n  /** Unix timestamp of lockup expiration */\n\n  /** Epoch of lockup expiration */\n\n  /** Lockup custodian authority */\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    this.unixTimestamp = void 0;\n    this.epoch = void 0;\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n  /**\n   * Default, inactive Lockup value\n   */\n\n\n}\n\nLockup.default = new Lockup(0, 0, PublicKey.default);\n/**\n * Stake Instruction class\n */\n\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized: authorized,\n      lockup: lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized: newAuthorized,\n      stakeAuthorizationType: stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized: newAuthorized,\n      stakeAuthorizationType: stakeAuthorizationType,\n      authoritySeed: authoritySeed,\n      authorityOwner: authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports: lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports: lamports\n    };\n  }\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports: lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports: lamports\n    };\n\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\n\n\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\n\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n\n\n  static initialize(params) {\n    const {\n      stakePubkey: stakePubkey,\n      authorized: authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data: data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey: stakePubkey,\n      authorized: authorized,\n      lockup: lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey: stakePubkey,\n      authorized: authorized,\n      lockup: lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey: stakePubkey,\n      authorized: authorized,\n      lockup: lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey: stakePubkey,\n      authorized: authorized,\n      lockup: lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n\n\n  static delegate(params) {\n    const {\n      stakePubkey: stakePubkey,\n      authorizedPubkey: authorizedPubkey,\n      votePubkey: votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data: data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorize(params) {\n    const {\n      stakePubkey: stakePubkey,\n      authorizedPubkey: authorizedPubkey,\n      newAuthorizedPubkey: newAuthorizedPubkey,\n      stakeAuthorizationType: stakeAuthorizationType,\n      custodianPubkey: custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys: keys,\n      programId: this.programId,\n      data: data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey: stakePubkey,\n      authorityBase: authorityBase,\n      authoritySeed: authoritySeed,\n      authorityOwner: authorityOwner,\n      newAuthorizedPubkey: newAuthorizedPubkey,\n      stakeAuthorizationType: stakeAuthorizationType,\n      custodianPubkey: custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys: keys,\n      programId: this.programId,\n      data: data\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  static splitInstruction(params) {\n    const {\n      stakePubkey: stakePubkey,\n      authorizedPubkey: authorizedPubkey,\n      splitStakePubkey: splitStakePubkey,\n      lamports: lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports: lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data: data\n    });\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n\n\n  static split(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n\n\n  static splitWithSeed(params) {\n    const {\n      stakePubkey: stakePubkey,\n      authorizedPubkey: authorizedPubkey,\n      splitStakePubkey: splitStakePubkey,\n      basePubkey: basePubkey,\n      seed: seed,\n      lamports: lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey: basePubkey,\n      seed: seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction({\n      stakePubkey: stakePubkey,\n      authorizedPubkey: authorizedPubkey,\n      splitStakePubkey: splitStakePubkey,\n      lamports: lamports\n    }));\n  }\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n\n\n  static merge(params) {\n    const {\n      stakePubkey: stakePubkey,\n      sourceStakePubKey: sourceStakePubKey,\n      authorizedPubkey: authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data: data\n    });\n  }\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n\n\n  static withdraw(params) {\n    const {\n      stakePubkey: stakePubkey,\n      authorizedPubkey: authorizedPubkey,\n      toPubkey: toPubkey,\n      lamports: lamports,\n      custodianPubkey: custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports: lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys: keys,\n      programId: this.programId,\n      data: data\n    });\n  }\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n\n\n  static deactivate(params) {\n    const {\n      stakePubkey: stakePubkey,\n      authorizedPubkey: authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data: data\n    });\n  }\n\n}\n\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\n/**\n * Vote account info\n */\n\nclass VoteInit {\n  /** [0, 100] */\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n\n}\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\n\n\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit: voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized: newAuthorized,\n      voteAuthorizationType: voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: newAuthorized,\n        voteAuthorizationType: voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports: lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports: lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\n\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\n\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n\n\n  static initializeAccount(params) {\n    const {\n      votePubkey: votePubkey,\n      nodePubkey: nodePubkey,\n      voteInit: voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data: data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n\n\n  static authorize(params) {\n    const {\n      votePubkey: votePubkey,\n      authorizedPubkey: authorizedPubkey,\n      newAuthorizedPubkey: newAuthorizedPubkey,\n      voteAuthorizationType: voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys: keys,\n      programId: this.programId,\n      data: data\n    });\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n\n\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey: currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: newAuthorizedPubkey,\n      voteAuthorizationType: voteAuthorizationType,\n      votePubkey: votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys: keys,\n      programId: this.programId,\n      data: data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n\n\n  static withdraw(params) {\n    const {\n      votePubkey: votePubkey,\n      authorizedWithdrawerPubkey: authorizedWithdrawerPubkey,\n      lamports: lamports,\n      toPubkey: toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports: lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys: keys,\n      programId: this.programId,\n      data: data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n\n\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insuffcient funds.');\n    }\n\n    return VoteProgram.withdraw(params);\n  }\n\n}\n\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nclass ValidatorInfo {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({\n        publicKey: publicKey,\n        isSigner: isSigner\n      });\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\n\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(), // votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(), // authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(), // epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\n\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot: rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n\n}\n\nfunction parseAuthorizedVoter(_ref22) {\n  let {\n    authorizedVoter: authorizedVoter,\n    epoch: epoch\n  } = _ref22;\n  return {\n    epoch: epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\n\nfunction parsePriorVoters(_ref23) {\n  let {\n    authorizedPubkey: authorizedPubkey,\n    epochOfLastAuthorizedSwitch: epochOfLastAuthorizedSwitch,\n    targetEpoch: targetEpoch\n  } = _ref23;\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch: epochOfLastAuthorizedSwitch,\n    targetEpoch: targetEpoch\n  };\n}\n\nfunction getPriorVoters(_ref24) {\n  let {\n    buf: buf,\n    idx: idx,\n    isEmpty: isEmpty\n  } = _ref24;\n\n  if (isEmpty) {\n    return [];\n  }\n\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\n\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n\n  return url;\n}\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n// eslint-disable-next-line no-redeclare\n\n\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n}\n/**\n * There are 1-billion lamports in one SOL\n */\n\n\nconst LAMPORTS_PER_SOL = 1000000000;\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"sources":["../src/utils/ed25519.ts","../src/utils/to-buffer.ts","../src/utils/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/transaction/constants.ts","../src/transaction/expiry-custom-errors.ts","../src/message/account-keys.ts","../src/layout.ts","../src/utils/shortvec-encoding.ts","../src/utils/assert.ts","../src/message/compiled-keys.ts","../src/message/legacy.ts","../src/message/v0.ts","../src/message/versioned.ts","../src/transaction/legacy.ts","../src/transaction/message.ts","../src/transaction/versioned.ts","../src/sysvar.ts","../src/utils/send-and-confirm-transaction.ts","../src/utils/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/utils/bigint.ts","../src/programs/system.ts","../src/loader.ts","../src/bpf-loader.ts","../node_modules/fast-stable-stringify/index.js","../src/epoch-schedule.ts","../src/errors.ts","../src/__forks__/browser/fetch-impl.ts","../src/timing.ts","../src/account-data.ts","../src/programs/address-lookup-table/state.ts","../src/utils/makeWebsocketUrl.ts","../src/connection.ts","../src/keypair.ts","../src/programs/address-lookup-table/index.ts","../src/programs/compute-budget.ts","../src/programs/ed25519.ts","../src/utils/secp256k1.ts","../src/programs/secp256k1.ts","../src/programs/stake.ts","../src/programs/vote.ts","../src/validator-info.ts","../src/vote-account.ts","../src/utils/cluster.ts","../src/utils/send-and-confirm-raw-transaction.ts","../src/index.ts"],"names":["ed25519","sha512","generatePrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","sign","verify","toBuffer","arr","Buffer","constructor","Object","encode","serialize","decode","deserialize","decodeUnchecked","deserializeUnchecked","enum","key","SOLANA_SCHEMA","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","value","uniquePublicKeyCounter","PublicKey","_bn","isPublicKeyData","decoded","bs58","unique","default","equals","toBase58","toJSON","toBytes","buf","b","zeroPad","Symbol","toStringTag","toString","createWithSeed","buffer","fromPublicKey","programId","publicKeyBytes","sha256","createProgramAddressSync","seeds","seed","isOnCurve","createProgramAddress","findProgramAddressSync","nonce","seedsWithNonce","address","err","findProgramAddress","pubkey","kind","fields","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","signature","TransactionExpiredBlockheightExceededError","timeoutSeconds","TransactionExpiredTimeoutError","TransactionExpiredNonceInvalidError","staticAccountKeys","accountKeysFromLookups","keySegments","get","index","keySegment","length","compileInstructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","data","property","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","str","authorized","lockup","voteInit","voteAuthorizeWithSeedArgs","getItemAlloc","item","field","Array","getAlloc","layout","alloc","type","len","size","elem","bytes","rem_len","message","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","assert","writableSigners","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","readonlyIndexes","accountKey","writable","readonly","drainedReadonlyKeys","drainKeysFoundInLookupTable","lookupTableIndexes","drainedKeys","keyMetaFilter","lookupTableIndex","lookupTableEntries","entry","accountKeys","recentBlockhash","instructions","indexToProgramIds","args","account","version","compiledInstructions","addressTableLookups","getAccountKeys","compiledKeys","CompiledKeys","accounts","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","programIds","nonProgramIds","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","signDataLayout","Layout","transaction","keys","signData","from","byteArray","accountCount","i","dataSlice","messageArgs","numAccountKeysFromLookups","count","lookup","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","resolveAddressTableLookups","tableAccount","addressLookupTableAccounts","tableLookup","lookupTableAccounts","extractResult","encodedStaticAccountKeysLength","serializedInstructions","encodedInstructionsLength","serializedAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializeInstructions","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","serializeAddressTableLookups","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","Message","MessageV0","TransactionStatus","DEFAULT_SIGNATURE","opts","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","console","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","x","y","feePayerIndex","payerMeta","signedKeys","unsignedKeys","invariant","_compile","valid","pair","serializeMessage","getEstimatedFee","connection","setSigners","seen","uniqueSigners","signer","partialSign","_partialSign","addSignature","_addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","Transaction","populate","sigPubkeyPair","payerKey","decompile","compiledIx","compileToLegacyMessage","compileToV0Message","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendOptions","options","skipPreflight","preflightCommitment","maxRetries","status","abortSignal","nonceAccountPubkey","nonceValue","resolve","setTimeout","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","blob","bigIntLayout","src","toBigIntLE","toBufferLE","u64","decodeInstructionType","instructionTypeLayout","typeIndex","decodeCreateAccount","lamports","space","decodeData","SYSTEM_INSTRUCTION_LAYOUTS","fromPubkey","newAccountPubkey","decodeTransfer","toPubkey","decodeTransferWithSeed","basePubkey","decodeAllocate","accountPubkey","decodeAllocateWithSeed","base","decodeAssign","decodeAssignWithSeed","decodeCreateWithSeed","decodeNonceInitialize","noncePubkey","decodeNonceAdvance","decodeNonceWithdraw","decodeNonceAuthorize","newAuthorizedPubkey","checkProgramId","SystemProgram","checkKeyLength","expectedLength","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","createAccount","encodeData","params","transfer","BigInt","assign","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","chunkSize","getMinNumSignatures","Math","load","balanceNeeded","programInfo","program","sendAndConfirmTransaction","commitment","dataLayout","offset","array","transactions","bytesLength","bytesLengthPadding","REQUESTS_PER_SECOND","sleep","Promise","BPF_LOADER_PROGRAM_ID","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","slot","epoch","nextPowerOfTwo","epochLen","slotIndex","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","getSlotsInEpoch","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","code","customMessage","globalThis","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","LOOKUP_TABLE_META_SIZE","state","isActive","U64_MAX","serializedAddressesLen","accountData","numSerializedAddresses","addresses","deactivationSlot","lastExtendedSlot","lastExtendedSlotStartIndex","authority","LookupTableMetaLayout","URL_RE","matches","endpoint","TypeError","protocol","startPort","portWithColon","parseInt","websocketPort","hostish","rest","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","specifiedConfig","config","union","pick","jsonrpc","id","result","error","unknown","optional","any","UnknownRpcResult","createRpcResult","create","jsonRpcResult","context","number","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetInflationRateResult","total","validator","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","jsonRpcResultAndContext","executable","owner","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","fetch","customFetch","httpAgent","fetchWithMiddleware","modifiedFetchArgs","fetchMiddleware","reject","clientBrowser","method","body","agent","headers","httpHeaders","too_many_requests_retries","waitTime","res","disableRetryOnRateLimit","statusText","text","callback","client","requests","batch","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","notificationResultAndContext","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","_commitment","_confirmTransactionInitialTimeout","_rpcEndpoint","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","commitmentOrConfig","wsEndpoint","assertEndpointUrl","makeWebsocketUrl","createRpcClient","createRpcRequest","createRpcBatchRequest","autoconnect","max_reconnects","Infinity","rpcEndpoint","getBalanceAndContext","extractCommitmentFromConfig","undefined","unsafeRes","getBalance","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","_args","ownerAddress","filter","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getAccountInfo","getMultipleParsedAccounts","publicKeys","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","encoding","configWithoutEncoding","getParsedProgramAccounts","confirmTransaction","rawSignature","decodedSignature","strategy","getCancellationPromise","signal","getTransactionConfirmationPromise","done","confirmationPromise","signatureSubscriptionId","__type","subscriptionSetupPromise","resolveSubscriptionSetup","disposeSignatureSubscriptionStateChangeObserver","nextState","abortConfirmation","confirmTransactionUsingBlockHeightExceedanceStrategy","expiryPromise","checkBlockHeight","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","confirmTransactionUsingDurableNonceStrategy","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","_","confirmTransactionUsingLegacyTimeoutStrategy","timeoutMs","timeoutId","clearTimeout","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","getSignatureStatus","values","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getMinimumBalanceForRentExemption","getRecentBlockhashAndContext","getRecentPerformanceSamples","limit","getFeeCalculatorForBlockhash","getFeeForMessage","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","versionedMessageFromResponse","getParsedBlock","getBlockHeight","getBlockProduction","extra","getTransaction","getParsedTransaction","getParsedTransactions","methodName","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","transactionDetails","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","startSlot","highestConfirmedRoot","confirmedSignatureInfo","info","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","AddressLookupTableAccount","getNonceAndContext","NonceAccount","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","timeSinceFetch","Date","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","versionedTx","encodedTransaction","includeAccounts","configOrSigners","transactionOrMessage","originalTx","disableCache","traceIndent","logTrace","sendTransaction","signersOrOptions","sendRawTransaction","sendEncodedTransaction","_wsOnOpen","setInterval","_wsOnError","_wsOnClose","Number","clearInterval","_setSubscription","prevState","nextSubscription","stateChangeCallbacks","cb","_onSubscriptionStateChange","hash","_updateSubscriptions","activeWebSocketGeneration","isCurrentConnectionStillActive","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbacks","_wsOnAccountNotification","_makeSubscription","clientSubscriptionId","fastStableStringify","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_wsOnProgramAccountNotification","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","_wsOnLogsNotification","_wsOnSlotNotification","onSlotChange","removeSlotChangeListener","_wsOnSlotUpdatesNotification","onSlotUpdate","removeSlotUpdateListener","_unsubscribeClientSubscription","dispose","subscriptionName","_buildArgs","override","_buildArgsAtLeastConfirmed","_wsOnSignatureNotification","onSignature","notification","onSignatureWithOptions","removeSignatureListener","_wsOnRootNotification","onRootChange","removeRootChangeListener","_keypair","keypair","generate","fromSecretKey","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","decodeCreateLookupTable","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","checkKeysLength","createLookupTable","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","decodeRequestUnits","units","additionalFee","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestHeapFrame","decodeSetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","ComputeBudgetProgram","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","Keypair","secp256k1","h","hmac","msgs","msg","ecdsaSign","der","recovered","publicKeyCreate","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","ethAddress","createInstructionWithEthAddress","rawAddress","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","staker","withdrawer","Lockup","unixTimestamp","custodian","decodeInitialize","STAKE_INSTRUCTION_LAYOUTS","stakePubkey","decodeDelegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","o","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","authorityBase","decodeSplit","splitStakePubkey","decodeMerge","sourceStakePubKey","decodeWithdraw","decodeDeactivate","StakeProgram","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","custodianPubkey","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","authorizedVoter","authorizedWithdrawer","decodeInitializeAccount","VOTE_INSTRUCTION_LAYOUTS","voteAuthorizationType","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","InitializeAccount","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","fromConfigData","configKeyCount","configKeys","rawInfo","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","getPriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","http","devnet","testnet","https","tls","url","cluster","confirmationStrategyOrConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"mappings":"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","sourcesContent":["import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module"}