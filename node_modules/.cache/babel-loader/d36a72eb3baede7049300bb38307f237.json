{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAssociatedTokenAddressSync = exports.getAssociatedTokenAddress = exports.getMinimumBalanceForRentExemptMintWithExtensions = exports.getMinimumBalanceForRentExemptMint = exports.unpackMint = exports.getMint = exports.MINT_SIZE = exports.MintLayout = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst accountType_js_1 = require(\"../extensions/accountType.js\");\n\nconst extensionType_js_1 = require(\"../extensions/extensionType.js\");\n\nconst account_js_1 = require(\"./account.js\");\n\nconst multisig_js_1 = require(\"./multisig.js\");\n/** Buffer layout for de/serializing a mint */\n\n\nexports.MintLayout = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u32)('mintAuthorityOption'), (0, buffer_layout_utils_1.publicKey)('mintAuthority'), (0, buffer_layout_utils_1.u64)('supply'), (0, buffer_layout_1.u8)('decimals'), (0, buffer_layout_utils_1.bool)('isInitialized'), (0, buffer_layout_1.u32)('freezeAuthorityOption'), (0, buffer_layout_utils_1.publicKey)('freezeAuthority')]);\n/** Byte length of a mint */\n\nexports.MINT_SIZE = exports.MintLayout.span;\n/**\n * Retrieve information about a mint\n *\n * @param connection Connection to use\n * @param address    Mint account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Mint information\n */\n\nfunction getMint(connection, address, commitment) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_js_1.TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const info = yield connection.getAccountInfo(address, commitment);\n    return unpackMint(address, info, programId);\n  });\n}\n\nexports.getMint = getMint;\n/**\n * Unpack a mint\n *\n * @param address   Mint account\n * @param info      Mint account data\n * @param programId SPL Token program account\n *\n * @return Unpacked mint\n */\n\nfunction unpackMint(address, info) {\n  let programId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!info) throw new errors_js_1.TokenAccountNotFoundError();\n  if (!info.owner.equals(programId)) throw new errors_js_1.TokenInvalidAccountOwnerError();\n  if (info.data.length < exports.MINT_SIZE) throw new errors_js_1.TokenInvalidAccountSizeError();\n  const rawMint = exports.MintLayout.decode(info.data.slice(0, exports.MINT_SIZE));\n  let tlvData = Buffer.alloc(0);\n\n  if (info.data.length > exports.MINT_SIZE) {\n    if (info.data.length <= account_js_1.ACCOUNT_SIZE) throw new errors_js_1.TokenInvalidAccountSizeError();\n    if (info.data.length === multisig_js_1.MULTISIG_SIZE) throw new errors_js_1.TokenInvalidAccountSizeError();\n    if (info.data[account_js_1.ACCOUNT_SIZE] != accountType_js_1.AccountType.Mint) throw new errors_js_1.TokenInvalidMintError();\n    tlvData = info.data.slice(account_js_1.ACCOUNT_SIZE + accountType_js_1.ACCOUNT_TYPE_SIZE);\n  }\n\n  return {\n    address,\n    mintAuthority: rawMint.mintAuthorityOption ? rawMint.mintAuthority : null,\n    supply: rawMint.supply,\n    decimals: rawMint.decimals,\n    isInitialized: rawMint.isInitialized,\n    freezeAuthority: rawMint.freezeAuthorityOption ? rawMint.freezeAuthority : null,\n    tlvData\n  };\n}\n\nexports.unpackMint = unpackMint;\n/** Get the minimum lamport balance for a mint to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\n\nfunction getMinimumBalanceForRentExemptMint(connection, commitment) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return yield getMinimumBalanceForRentExemptMintWithExtensions(connection, [], commitment);\n  });\n}\n\nexports.getMinimumBalanceForRentExemptMint = getMinimumBalanceForRentExemptMint;\n/** Get the minimum lamport balance for a rent-exempt mint with extensions\n *\n * @param connection Connection to use\n * @param extensions Extension types included in the mint\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\n\nfunction getMinimumBalanceForRentExemptMintWithExtensions(connection, extensions, commitment) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const mintLen = (0, extensionType_js_1.getMintLen)(extensions);\n    return yield connection.getMinimumBalanceForRentExemption(mintLen, commitment);\n  });\n}\n\nexports.getMinimumBalanceForRentExemptMintWithExtensions = getMinimumBalanceForRentExemptMintWithExtensions;\n/**\n * Async version of getAssociatedTokenAddressSync\n * For backwards compatibility\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Promise containing the address of the associated token account\n */\n\nfunction getAssociatedTokenAddress(mint, owner) {\n  let allowOwnerOffCurve = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_js_1.TOKEN_PROGRAM_ID;\n  let associatedTokenProgramId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!allowOwnerOffCurve && !web3_js_1.PublicKey.isOnCurve(owner.toBuffer())) throw new errors_js_1.TokenOwnerOffCurveError();\n    const [address] = yield web3_js_1.PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);\n    return address;\n  });\n}\n\nexports.getAssociatedTokenAddress = getAssociatedTokenAddress;\n/**\n * Get the address of the associated token account for a given mint and owner\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the associated token account\n */\n\nfunction getAssociatedTokenAddressSync(mint, owner) {\n  let allowOwnerOffCurve = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_js_1.TOKEN_PROGRAM_ID;\n  let associatedTokenProgramId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID;\n  if (!allowOwnerOffCurve && !web3_js_1.PublicKey.isOnCurve(owner.toBuffer())) throw new errors_js_1.TokenOwnerOffCurveError();\n  const [address] = web3_js_1.PublicKey.findProgramAddressSync([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);\n  return address;\n}\n\nexports.getAssociatedTokenAddressSync = getAssociatedTokenAddressSync;","map":{"version":3,"sources":["../../../src/state/mint.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAssociatedTokenAddressSync = exports.getAssociatedTokenAddress = exports.getMinimumBalanceForRentExemptMintWithExtensions = exports.getMinimumBalanceForRentExemptMint = exports.unpackMint = exports.getMint = exports.MINT_SIZE = exports.MintLayout = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst accountType_js_1 = require(\"../extensions/accountType.js\");\nconst extensionType_js_1 = require(\"../extensions/extensionType.js\");\nconst account_js_1 = require(\"./account.js\");\nconst multisig_js_1 = require(\"./multisig.js\");\n/** Buffer layout for de/serializing a mint */\nexports.MintLayout = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u32)('mintAuthorityOption'),\n    (0, buffer_layout_utils_1.publicKey)('mintAuthority'),\n    (0, buffer_layout_utils_1.u64)('supply'),\n    (0, buffer_layout_1.u8)('decimals'),\n    (0, buffer_layout_utils_1.bool)('isInitialized'),\n    (0, buffer_layout_1.u32)('freezeAuthorityOption'),\n    (0, buffer_layout_utils_1.publicKey)('freezeAuthority'),\n]);\n/** Byte length of a mint */\nexports.MINT_SIZE = exports.MintLayout.span;\n/**\n * Retrieve information about a mint\n *\n * @param connection Connection to use\n * @param address    Mint account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Mint information\n */\nfunction getMint(connection, address, commitment, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const info = yield connection.getAccountInfo(address, commitment);\n        return unpackMint(address, info, programId);\n    });\n}\nexports.getMint = getMint;\n/**\n * Unpack a mint\n *\n * @param address   Mint account\n * @param info      Mint account data\n * @param programId SPL Token program account\n *\n * @return Unpacked mint\n */\nfunction unpackMint(address, info, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new errors_js_1.TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new errors_js_1.TokenInvalidAccountOwnerError();\n    if (info.data.length < exports.MINT_SIZE)\n        throw new errors_js_1.TokenInvalidAccountSizeError();\n    const rawMint = exports.MintLayout.decode(info.data.slice(0, exports.MINT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > exports.MINT_SIZE) {\n        if (info.data.length <= account_js_1.ACCOUNT_SIZE)\n            throw new errors_js_1.TokenInvalidAccountSizeError();\n        if (info.data.length === multisig_js_1.MULTISIG_SIZE)\n            throw new errors_js_1.TokenInvalidAccountSizeError();\n        if (info.data[account_js_1.ACCOUNT_SIZE] != accountType_js_1.AccountType.Mint)\n            throw new errors_js_1.TokenInvalidMintError();\n        tlvData = info.data.slice(account_js_1.ACCOUNT_SIZE + accountType_js_1.ACCOUNT_TYPE_SIZE);\n    }\n    return {\n        address,\n        mintAuthority: rawMint.mintAuthorityOption ? rawMint.mintAuthority : null,\n        supply: rawMint.supply,\n        decimals: rawMint.decimals,\n        isInitialized: rawMint.isInitialized,\n        freezeAuthority: rawMint.freezeAuthorityOption ? rawMint.freezeAuthority : null,\n        tlvData,\n    };\n}\nexports.unpackMint = unpackMint;\n/** Get the minimum lamport balance for a mint to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nfunction getMinimumBalanceForRentExemptMint(connection, commitment) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield getMinimumBalanceForRentExemptMintWithExtensions(connection, [], commitment);\n    });\n}\nexports.getMinimumBalanceForRentExemptMint = getMinimumBalanceForRentExemptMint;\n/** Get the minimum lamport balance for a rent-exempt mint with extensions\n *\n * @param connection Connection to use\n * @param extensions Extension types included in the mint\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nfunction getMinimumBalanceForRentExemptMintWithExtensions(connection, extensions, commitment) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const mintLen = (0, extensionType_js_1.getMintLen)(extensions);\n        return yield connection.getMinimumBalanceForRentExemption(mintLen, commitment);\n    });\n}\nexports.getMinimumBalanceForRentExemptMintWithExtensions = getMinimumBalanceForRentExemptMintWithExtensions;\n/**\n * Async version of getAssociatedTokenAddressSync\n * For backwards compatibility\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Promise containing the address of the associated token account\n */\nfunction getAssociatedTokenAddress(mint, owner, allowOwnerOffCurve = false, programId = constants_js_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!allowOwnerOffCurve && !web3_js_1.PublicKey.isOnCurve(owner.toBuffer()))\n            throw new errors_js_1.TokenOwnerOffCurveError();\n        const [address] = yield web3_js_1.PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);\n        return address;\n    });\n}\nexports.getAssociatedTokenAddress = getAssociatedTokenAddress;\n/**\n * Get the address of the associated token account for a given mint and owner\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the associated token account\n */\nfunction getAssociatedTokenAddressSync(mint, owner, allowOwnerOffCurve = false, programId = constants_js_1.TOKEN_PROGRAM_ID, associatedTokenProgramId = constants_js_1.ASSOCIATED_TOKEN_PROGRAM_ID) {\n    if (!allowOwnerOffCurve && !web3_js_1.PublicKey.isOnCurve(owner.toBuffer()))\n        throw new errors_js_1.TokenOwnerOffCurveError();\n    const [address] = web3_js_1.PublicKey.findProgramAddressSync([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);\n    return address;\n}\nexports.getAssociatedTokenAddressSync = getAssociatedTokenAddressSync;\n//# sourceMappingURL=mint.js.map"]},"metadata":{},"sourceType":"script"}