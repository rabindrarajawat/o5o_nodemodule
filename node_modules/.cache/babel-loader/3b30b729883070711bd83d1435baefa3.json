{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.mjs';\nimport * as ed25519 from '@noble/ed25519';\nimport { DriverNotProvidedError } from '../../errors/SdkError.mjs';\nimport { isSigner } from '../../types/Signer.mjs';\n/**\n * @group Modules\n */\n\nclass IdentityClient {\n  constructor() {\n    _defineProperty(this, \"_driver\", null);\n  }\n\n  driver() {\n    if (!this._driver) {\n      throw new DriverNotProvidedError('IdentityDriver');\n    }\n\n    return this._driver;\n  }\n\n  setDriver(newDriver) {\n    this._driver = newDriver;\n  }\n\n  get publicKey() {\n    return this.driver().publicKey;\n  }\n\n  get secretKey() {\n    return this.driver().secretKey;\n  }\n\n  signMessage(message) {\n    return this.driver().signMessage(message);\n  }\n\n  signTransaction(transaction) {\n    return this.driver().signTransaction(transaction);\n  }\n\n  signAllTransactions(transactions) {\n    return this.driver().signAllTransactions(transactions);\n  }\n\n  verifyMessage(message, signature) {\n    return ed25519.sync.verify(message, signature, this.publicKey.toBytes());\n  }\n\n  equals(that) {\n    if (isSigner(that)) {\n      that = that.publicKey;\n    }\n\n    return this.publicKey.equals(that);\n  }\n\n  hasSecretKey() {\n    return this.secretKey != null;\n  }\n\n}\n\nexport { IdentityClient };","map":{"version":3,"sources":["../../../../src/plugins/identityModule/IdentityClient.ts"],"names":["IdentityClient","driver","_driver","DriverNotProvidedError","setDriver","newDriver","publicKey","secretKey","signMessage","message","signTransaction","transaction","signAllTransactions","transactions","verifyMessage","signature","ed25519","sync","verify","toBytes","equals","that","isSigner","hasSecretKey"],"mappings":";;;;AAYA;AACA;AACA;;AACO,MAAMA,cAAN,CAEP;EAAA,WAAA,GAAA;IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAC2C,IAD3C,CAAA;EAC+C;;EAE7CC,MAAM,GAAmB;IACvB,IAAI,CAAC,KAAKC,OAAV,EAAmB;MACjB,MAAM,IAAIC,sBAAJ,CAA2B,gBAA3B,CAAN;IACF;;IAEA,OAAO,KAAKD,OAAZ;EACF;;EAEAE,SAAS,CAACC,SAAD,EAAkC;IACzC,KAAKH,OAAL,GAAeG,SAAf;EACF;;EAEa,IAATC,SAAS,GAAc;IACzB,OAAO,KAAKL,MAAL,GAAcK,SAArB;EACF;;EAEa,IAATC,SAAS,GAA2B;IACtC,OAAO,KAAKN,MAAL,GAAcM,SAArB;EACF;;EAEAC,WAAW,CAACC,OAAD,EAA2C;IACpD,OAAO,KAAKR,MAAL,GAAcO,WAAd,CAA0BC,OAA1B,CAAP;EACF;;EAEAC,eAAe,CAACC,WAAD,EAAiD;IAC9D,OAAO,KAAKV,MAAL,GAAcS,eAAd,CAA8BC,WAA9B,CAAP;EACF;;EAEAC,mBAAmB,CAACC,YAAD,EAAsD;IACvE,OAAO,KAAKZ,MAAL,GAAcW,mBAAd,CAAkCC,YAAlC,CAAP;EACF;;EAEAC,aAAa,CAACL,OAAD,EAAsBM,SAAtB,EAAsD;IACjE,OAAOC,OAAO,CAACC,IAARD,CAAaE,MAAbF,CAAoBP,OAApBO,EAA6BD,SAA7BC,EAAwC,KAAKV,SAAL,CAAea,OAAf,EAAxCH,CAAP;EACF;;EAEAI,MAAM,CAACC,IAAD,EAAoC;IACxC,IAAIC,QAAQ,CAACD,IAAD,CAAZ,EAAoB;MAClBA,IAAI,GAAGA,IAAI,CAACf,SAAZe;IACF;;IAEA,OAAO,KAAKf,SAAL,CAAec,MAAf,CAAsBC,IAAtB,CAAP;EACF;;EAEAE,YAAY,GAA0B;IACpC,OAAO,KAAKhB,SAAL,IAAkB,IAAzB;EACF;;AAjDF","sourcesContent":["import * as ed25519 from '@noble/ed25519';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport { IdentityDriver } from './IdentityDriver';\nimport {\n  HasDriver,\n  IdentitySigner,\n  isSigner,\n  KeypairSigner,\n  Signer,\n} from '@/types';\nimport { DriverNotProvidedError } from '@/errors';\n\n/**\n * @group Modules\n */\nexport class IdentityClient\n  implements HasDriver<IdentityDriver>, IdentitySigner\n{\n  private _driver: IdentityDriver | null = null;\n\n  driver(): IdentityDriver {\n    if (!this._driver) {\n      throw new DriverNotProvidedError('IdentityDriver');\n    }\n\n    return this._driver;\n  }\n\n  setDriver(newDriver: IdentityDriver): void {\n    this._driver = newDriver;\n  }\n\n  get publicKey(): PublicKey {\n    return this.driver().publicKey;\n  }\n\n  get secretKey(): Uint8Array | undefined {\n    return this.driver().secretKey;\n  }\n\n  signMessage(message: Uint8Array): Promise<Uint8Array> {\n    return this.driver().signMessage(message);\n  }\n\n  signTransaction(transaction: Transaction): Promise<Transaction> {\n    return this.driver().signTransaction(transaction);\n  }\n\n  signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    return this.driver().signAllTransactions(transactions);\n  }\n\n  verifyMessage(message: Uint8Array, signature: Uint8Array): boolean {\n    return ed25519.sync.verify(message, signature, this.publicKey.toBytes());\n  }\n\n  equals(that: Signer | PublicKey): boolean {\n    if (isSigner(that)) {\n      that = that.publicKey;\n    }\n\n    return this.publicKey.equals(that);\n  }\n\n  hasSecretKey(): this is KeypairSigner {\n    return this.secretKey != null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}