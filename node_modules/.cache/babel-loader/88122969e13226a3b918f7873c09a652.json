{"ast":null,"code":"var _jsxFileName = \"D:\\\\software\\\\o5o BNB\\\\o5o-staking-frontend\\\\src\\\\pages\\\\Mint.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport Sidebar from \"../components/views/Sidebar\";\nimport Navbar from \"../components/views/Navbar\";\nimport styled from \"styled-components\";\nimport { Container, Snackbar } from \"@mui/material\";\nimport Paper from \"@mui/material/Paper\";\nimport Alert from \"@mui/lab/Alert\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport { awaitTransactionSignatureConfirmation, CANDY_MACHINE_PROGRAM, createAccountsForMint, getCandyMachineState, getCollectionPDA, mintOneToken } from \"../candy-machine-new\";\nimport { formatNumber, getAtaForMint, toDate } from \"../utils\";\nimport { MintCountdown } from \"../MintCountdown\";\nimport { MintButton } from \"../MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport { SolanaMobileWalletAdapterWalletName } from \"@solana-mobile/wallet-adapter-mobile\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n_c = ConnectButton;\nconst MintContainer = styled.div``; // add your owns styles here\n\n_c2 = MintContainer;\n\nconst Mint = props => {\n  _s();\n\n  var _candyMachine$state, _candyMachine$state2, _candyMachine$state2$;\n\n  const [minSidebar, setMinSiderBar] = useState(false);\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState();\n  const [alertState, setAlertState] = useState({\n    open: false,\n    message: \"\",\n    severity: undefined\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState();\n  const [itemsRemaining, setItemsRemaining] = useState();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState();\n  const rpcUrl = props.rpcHost;\n  const anchorWallet = useAnchorWallet();\n  const {\n    connect: connect,\n    connected: connected,\n    publicKey: publicKey,\n    wallet: wallet\n  } = useWallet();\n  const cluster = props.network;\n  const refreshCandyMachineState = useCallback(async function () {\n    let commitment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"confirmed\";\n\n    if (!publicKey) {\n      return;\n    }\n\n    if (props.error !== undefined) {\n      setAlertState({\n        open: true,\n        message: props.error,\n        severity: \"error\",\n        hideDuration: null\n      });\n      return;\n    }\n\n    const connection = new Connection(props.rpcHost, commitment);\n\n    if (props.candyMachineId) {\n      try {\n        var _cndy$state$endSettin, _cndy$state$endSettin2, _cndy$state$whitelist, _cndy$state$whitelist2, _cndy$state$gatekeepe;\n\n        const cndy = await getCandyMachineState(anchorWallet, props.candyMachineId, connection);\n        console.log(\"Candy machine state: \", cndy);\n        let active = cndy !== null && cndy !== void 0 && cndy.state.goLiveDate ? (cndy === null || cndy === void 0 ? void 0 : cndy.state.goLiveDate.toNumber()) < new Date().getTime() / 1000 : false;\n        let presale = false; // duplication of state to make sure we have the right values!\n\n        let isWLUser = false;\n        let userPrice = cndy.state.price; // whitelist mint?\n\n        if (cndy !== null && cndy !== void 0 && cndy.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (cndy.state.whitelistMintSettings.presale && (!cndy.state.goLiveDate || cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)) {\n            presale = true;\n          } // is there a discount?\n\n\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n            userPrice = cndy.state.whitelistMintSettings.discountPrice;\n          } else {\n            setDiscountPrice(undefined); // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          } // retrieves the whitelist token\n\n\n          const mint = new anchor.web3.PublicKey(cndy.state.whitelistMintSettings.mint);\n          const token = (await getAtaForMint(mint, publicKey))[0];\n\n          try {\n            const balance = await connection.getTokenAccountBalance(token);\n            isWLUser = parseInt(balance.value.amount) > 0; // only whitelist the user if the balance > 0\n\n            setIsWhitelistUser(isWLUser);\n\n            if (cndy.state.isWhitelistOnly) {\n              active = isWLUser && (presale || active);\n            }\n          } catch (e) {\n            setIsWhitelistUser(false); // no whitelist user, no mint\n\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n\n            console.log(\"There was a problem fetching whitelist token balance\");\n            console.log(e);\n          }\n        }\n\n        userPrice = isWLUser ? userPrice : cndy.state.price;\n\n        if (cndy !== null && cndy !== void 0 && cndy.state.tokenMint) {\n          // retrieves the SPL token\n          const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n          const token = (await getAtaForMint(mint, publicKey))[0];\n\n          try {\n            const balance = await connection.getTokenAccountBalance(token);\n            const valid = new anchor.BN(balance.value.amount).gte(userPrice); // only allow user to mint if token balance >  the user if the balance > 0\n\n            setIsValidBalance(valid);\n            active = active && valid;\n          } catch (e) {\n            setIsValidBalance(false);\n            active = false; // no whitelist user, no mint\n\n            console.log(\"There was a problem fetching SPL token balance\");\n            console.log(e);\n          }\n        } else {\n          const balance = new anchor.BN(await connection.getBalance(publicKey));\n          const valid = balance.gte(userPrice);\n          setIsValidBalance(valid);\n          active = active && valid;\n        } // datetime to stop the mint?\n\n\n        if (cndy !== null && cndy !== void 0 && (_cndy$state$endSettin = cndy.state.endSettings) !== null && _cndy$state$endSettin !== void 0 && _cndy$state$endSettin.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n\n          if (cndy.state.endSettings.number.toNumber() < new Date().getTime() / 1000) {\n            active = false;\n          }\n        } // amount to stop the mint?\n\n\n        if (cndy !== null && cndy !== void 0 && (_cndy$state$endSettin2 = cndy.state.endSettings) !== null && _cndy$state$endSettin2 !== void 0 && _cndy$state$endSettin2.endSettingType.amount) {\n          const limit = Math.min(cndy.state.endSettings.number.toNumber(), cndy.state.itemsAvailable);\n\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n        const collectionPDAAccount = await connection.getAccountInfo(collectionPDA);\n        setIsActive(cndy.state.isActive = active);\n        setIsPresale(cndy.state.isPresale = presale);\n        setCandyMachine(cndy);\n        const txnEstimate = 892 + (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) + (cndy.state.tokenMint ? 66 : 0) + (cndy.state.whitelistMintSettings ? 34 : 0) + ((_cndy$state$whitelist = cndy.state.whitelistMintSettings) !== null && _cndy$state$whitelist !== void 0 && (_cndy$state$whitelist2 = _cndy$state$whitelist.mode) !== null && _cndy$state$whitelist2 !== void 0 && _cndy$state$whitelist2.burnEveryTime ? 34 : 0) + (cndy.state.gatekeeper ? 33 : 0) + ((_cndy$state$gatekeepe = cndy.state.gatekeeper) !== null && _cndy$state$gatekeepe !== void 0 && _cndy$state$gatekeepe.expireOnUse ? 66 : 0);\n        setNeedTxnSplit(txnEstimate > 1230);\n      } catch (e) {\n        if (e instanceof Error) {\n          if (e.message === `Account does not exist ${props.candyMachineId}`) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value wrong in your .env file, or you are using the wrong RPC!`,\n              severity: \"error\",\n              hideDuration: null\n            });\n          } else if (e.message.startsWith(\"failed to get info about account\")) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n              severity: \"error\",\n              hideDuration: null\n            });\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: `${e}`,\n            severity: \"error\",\n            hideDuration: null\n          });\n        }\n\n        console.log(e);\n      }\n    } else {\n      setAlertState({\n        open: true,\n        message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n        severity: \"error\",\n        hideDuration: null\n      });\n    }\n  }, [anchorWallet, props.candyMachineId, props.error, props.rpcHost]);\n\n  const onMint = async function () {\n    let beforeTransactions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let afterTransactions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    try {\n      setIsUserMinting(true);\n\n      if (connected && candyMachine !== null && candyMachine !== void 0 && candyMachine.program && publicKey) {\n        var _setupMint;\n\n        let setupMint;\n\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: \"Please sign account setup transaction\",\n            severity: \"info\"\n          });\n          setupMint = await createAccountsForMint(candyMachine, publicKey);\n          let status = {\n            err: true\n          };\n\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(setupMint.transaction, props.txTimeout, props.connection, true);\n          }\n\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message: \"Setup transaction succeeded! Please sign minting transaction\",\n              severity: \"info\"\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: \"Mint failed! Please try again!\",\n              severity: \"error\"\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Please sign minting transaction\",\n            severity: \"info\"\n          });\n        }\n\n        const mintResult = await mintOneToken(candyMachine, publicKey, beforeTransactions, afterTransactions, (_setupMint = setupMint) !== null && _setupMint !== void 0 ? _setupMint : setupTxn);\n        let status = {\n          err: true\n        };\n        let metadataStatus = null;\n\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(mintResult.mintTxId, props.txTimeout, props.connection, true);\n          metadataStatus = await candyMachine.program.provider.connection.getAccountInfo(mintResult.metadataKey, \"processed\");\n          console.log(\"Metadata status: \", !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          const remaining = itemsRemaining - 1;\n          setItemsRemaining(remaining);\n          setIsActive(candyMachine.state.isActive = remaining > 0);\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n            hideDuration: 7000\n          });\n          refreshCandyMachineState(\"processed\");\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message: \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\n            severity: \"error\",\n            hideDuration: 8000\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\"\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message: message,\n        severity: \"error\"\n      }); // updates the candy machine state to reflect the latest\n      // information on chain\n\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (isPresale && candyMachine.state.goLiveDate && candyMachine.state.goLiveDate.toNumber() <= new Date().getTime() / 1000) {\n      setIsPresale(candyMachine.state.isPresale = false);\n    }\n\n    setIsActive(candyMachine.state.isActive = active);\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [anchorWallet, props.candyMachineId, props.connection, refreshCandyMachineState]);\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex h-full-screen\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      minSidebar: minSidebar,\n      setMinSiderBar: setMinSiderBar,\n      activeLink: \"mint\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        setMinSiderBar: setMinSiderBar,\n        minSidebar: minSidebar,\n        globalData: undefined\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        style: {\n          marginTop: 100\n        },\n        children: [/*#__PURE__*/_jsxDEV(Container, {\n          maxWidth: \"xs\",\n          style: {\n            position: \"relative\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            style: {\n              padding: 24,\n              paddingBottom: 10,\n              backgroundColor: \"#151A1F\",\n              borderRadius: 6\n            },\n            children: [!connected ? /*#__PURE__*/_jsxDEV(ConnectButton, {\n              onClick: e => {\n                if ((wallet === null || wallet === void 0 ? void 0 : wallet.adapter.name) === SolanaMobileWalletAdapterWalletName) {\n                  connect();\n                  e.preventDefault();\n                }\n              },\n              children: \"Connect Wallet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [candyMachine && /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                direction: \"row\",\n                justifyContent: \"center\",\n                wrap: \"nowrap\",\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 3,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    color: \"textSecondary\",\n                    children: \"Remaining\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 508,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"h6\",\n                    color: \"textPrimary\",\n                    style: {\n                      fontWeight: \"bold\"\n                    },\n                    children: `${itemsRemaining}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 511,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 507,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 4,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    color: \"textSecondary\",\n                    children: isWhitelistUser && discountPrice ? \"Discount Price\" : \"Price\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 522,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"h6\",\n                    color: \"textPrimary\",\n                    style: {\n                      fontWeight: \"bold\"\n                    },\n                    children: isWhitelistUser && discountPrice ? `◎ ${formatNumber.asNumber(discountPrice)}` : `◎ ${formatNumber.asNumber(candyMachine.state.price)}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 527,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 521,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 5,\n                  children: isActive && endDate && Date.now() < endDate.getTime() ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(MintCountdown, {\n                      date: getCountdownDate(candyMachine),\n                      style: {\n                        justifyContent: \"flex-end\"\n                      },\n                      status: \"COMPLETED\",\n                      onComplete: toggleMintButton\n                    }, \"endSettings\", false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 542,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"caption\",\n                      align: \"center\",\n                      display: \"block\",\n                      style: {\n                        fontWeight: \"bold\"\n                      },\n                      children: \"TO END OF MINT\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 549,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(MintCountdown, {\n                      date: getCountdownDate(candyMachine),\n                      style: {\n                        justifyContent: \"flex-end\"\n                      },\n                      status: candyMachine !== null && candyMachine !== void 0 && (_candyMachine$state = candyMachine.state) !== null && _candyMachine$state !== void 0 && _candyMachine$state.isSoldOut || endDate && Date.now() > endDate.getTime() ? \"COMPLETED\" : isPresale ? \"PRESALE\" : \"LIVE\",\n                      onComplete: toggleMintButton\n                    }, \"goLive\", false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 560,\n                      columnNumber: 29\n                    }, this), isPresale && candyMachine.state.goLiveDate && candyMachine.state.goLiveDate.toNumber() > new Date().getTime() / 1000 && /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"caption\",\n                      align: \"center\",\n                      display: \"block\",\n                      style: {\n                        fontWeight: \"bold\"\n                      },\n                      children: \"UNTIL PUBLIC MINT\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 578,\n                      columnNumber: 33\n                    }, this)]\n                  }, void 0, true)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 539,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(MintContainer, {\n                children: candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isActive && candyMachine !== null && candyMachine !== void 0 && candyMachine.state.gatekeeper && publicKey && anchorWallet !== null && anchorWallet !== void 0 && anchorWallet.signTransaction ? /*#__PURE__*/_jsxDEV(GatewayProvider, {\n                  wallet: {\n                    publicKey: publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\n                    signTransaction: anchorWallet.signTransaction\n                  },\n                  gatekeeperNetwork: candyMachine === null || candyMachine === void 0 ? void 0 : (_candyMachine$state2 = candyMachine.state) === null || _candyMachine$state2 === void 0 ? void 0 : (_candyMachine$state2$ = _candyMachine$state2.gatekeeper) === null || _candyMachine$state2$ === void 0 ? void 0 : _candyMachine$state2$.gatekeeperNetwork,\n                  clusterUrl: rpcUrl,\n                  cluster: cluster,\n                  options: {\n                    autoShowModal: false\n                  },\n                  children: /*#__PURE__*/_jsxDEV(MintButton, {\n                    candyMachine: candyMachine,\n                    isMinting: isUserMinting,\n                    setIsMinting: val => setIsUserMinting(val),\n                    onMint: onMint,\n                    isActive: isActive || isPresale && isWhitelistUser && isValidBalance\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 610,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 597,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(MintButton, {\n                  candyMachine: candyMachine,\n                  isMinting: isUserMinting,\n                  setIsMinting: val => setIsUserMinting(val),\n                  onMint: onMint,\n                  isActive: isActive || isPresale && isWhitelistUser && isValidBalance\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 622,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 592,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              align: \"center\",\n              display: \"block\",\n              style: {\n                marginTop: 7,\n                color: \"grey\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 636,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n          open: alertState.open,\n          autoHideDuration: alertState.hideDuration === undefined ? 6000 : alertState.hideDuration,\n          onClose: () => setAlertState({ ...alertState,\n            open: false\n          }),\n          children: /*#__PURE__*/_jsxDEV(Alert, {\n            onClose: () => setAlertState({ ...alertState,\n              open: false\n            }),\n            severity: alertState.severity,\n            children: alertState.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 654,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 471,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Mint, \"TWbdago7xvDnl+8ecaLAnbtwzhM=\", false, function () {\n  return [useAnchorWallet, useWallet];\n});\n\n_c3 = Mint;\n\nconst getCountdownDate = candyMachine => {\n  var _candyMachine$state$e;\n\n  if (candyMachine.state.isActive && (_candyMachine$state$e = candyMachine.state.endSettings) !== null && _candyMachine$state$e !== void 0 && _candyMachine$state$e.endSettingType.date) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(candyMachine.state.goLiveDate ? candyMachine.state.goLiveDate : candyMachine.state.isPresale ? new anchor.BN(new Date().getTime() / 1000) : undefined);\n};\n\nexport default Mint;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ConnectButton\");\n$RefreshReg$(_c2, \"MintContainer\");\n$RefreshReg$(_c3, \"Mint\");","map":{"version":3,"names":["useCallback","useEffect","useState","anchor","Sidebar","Navbar","styled","Container","Snackbar","Paper","Alert","Grid","Typography","Connection","PublicKey","useAnchorWallet","useWallet","WalletDialogButton","awaitTransactionSignatureConfirmation","CANDY_MACHINE_PROGRAM","createAccountsForMint","getCandyMachineState","getCollectionPDA","mintOneToken","formatNumber","getAtaForMint","toDate","MintCountdown","MintButton","GatewayProvider","SolanaMobileWalletAdapterWalletName","ConnectButton","MintContainer","div","Mint","props","minSidebar","setMinSiderBar","isUserMinting","setIsUserMinting","candyMachine","setCandyMachine","alertState","setAlertState","open","message","severity","undefined","isActive","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","isPresale","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","anchorWallet","connect","connected","publicKey","wallet","cluster","network","refreshCandyMachineState","commitment","error","hideDuration","connection","candyMachineId","cndy","console","log","active","state","goLiveDate","toNumber","Date","getTime","presale","isWLUser","userPrice","price","whitelistMintSettings","isWhitelistOnly","mint","web3","token","balance","getTokenAccountBalance","parseInt","value","amount","e","tokenMint","valid","BN","gte","getBalance","endSettings","endSettingType","date","number","limit","Math","min","itemsAvailable","itemsRedeemed","isSoldOut","collectionPDA","collectionPDAAccount","getAccountInfo","txnEstimate","retainAuthority","mode","burnEveryTime","gatekeeper","expireOnUse","Error","startsWith","onMint","beforeTransactions","afterTransactions","program","setupMint","status","err","transaction","txTimeout","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","msg","indexOf","code","window","location","reload","toggleMintButton","now","loop","setTimeout","marginTop","position","padding","paddingBottom","backgroundColor","borderRadius","adapter","name","preventDefault","fontWeight","asNumber","getCountdownDate","justifyContent","signTransaction","gatekeeperNetwork","autoShowModal","val","color"],"sources":["D:/software/o5o BNB/o5o-staking-frontend/src/pages/Mint.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport Sidebar from \"../components/views/Sidebar\";\r\nimport Navbar from \"../components/views/Navbar\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { Container, Snackbar } from \"@mui/material\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Alert from \"@mui/lab/Alert\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport {\r\n  Commitment,\r\n  Connection,\r\n  PublicKey,\r\n  Transaction,\r\n} from \"@solana/web3.js\";\r\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CANDY_MACHINE_PROGRAM,\r\n  CandyMachineAccount,\r\n  createAccountsForMint,\r\n  getCandyMachineState,\r\n  getCollectionPDA,\r\n  mintOneToken,\r\n  SetupState,\r\n} from \"../candy-machine-new\";\r\nimport { AlertState, formatNumber, getAtaForMint, toDate } from \"../utils\";\r\nimport { MintCountdown } from \"../MintCountdown\";\r\nimport { MintButton } from \"../MintButton\";\r\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport { SolanaMobileWalletAdapterWalletName } from \"@solana-mobile/wallet-adapter-mobile\";\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MintContainer = styled.div``; // add your owns styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n  network: WalletAdapterNetwork;\r\n  error?: string;\r\n}\r\n\r\nconst Mint = (props: HomeProps) => {\r\n  const [minSidebar, setMinSiderBar] = useState(false);\r\n  const [isUserMinting, setIsUserMinting] = useState(false);\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [endDate, setEndDate] = useState<Date>();\r\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\r\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\r\n  const [isPresale, setIsPresale] = useState(false);\r\n  const [isValidBalance, setIsValidBalance] = useState(false);\r\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\r\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\r\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\r\n\r\n  const rpcUrl = props.rpcHost;\r\n  const anchorWallet = useAnchorWallet();\r\n  const { connect, connected, publicKey, wallet } = useWallet();\r\n  const cluster = props.network;\r\n\r\n  const refreshCandyMachineState = useCallback(\r\n    async (commitment: Commitment = \"confirmed\") => {\r\n      if (!publicKey) {\r\n        return;\r\n      }\r\n      if (props.error !== undefined) {\r\n        setAlertState({\r\n          open: true,\r\n          message: props.error,\r\n          severity: \"error\",\r\n          hideDuration: null,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const connection = new Connection(props.rpcHost, commitment);\r\n\r\n      if (props.candyMachineId) {\r\n        try {\r\n          const cndy = await getCandyMachineState(\r\n            anchorWallet as anchor.Wallet,\r\n            props.candyMachineId,\r\n            connection\r\n          );\r\n          console.log(\"Candy machine state: \", cndy);\r\n          let active = cndy?.state.goLiveDate\r\n            ? cndy?.state.goLiveDate.toNumber() < new Date().getTime() / 1000\r\n            : false;\r\n          let presale = false;\r\n\r\n          // duplication of state to make sure we have the right values!\r\n          let isWLUser = false;\r\n          let userPrice = cndy.state.price;\r\n\r\n          // whitelist mint?\r\n          if (cndy?.state.whitelistMintSettings) {\r\n            // is it a presale mint?\r\n            if (\r\n              cndy.state.whitelistMintSettings.presale &&\r\n              (!cndy.state.goLiveDate ||\r\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\r\n            ) {\r\n              presale = true;\r\n            }\r\n            // is there a discount?\r\n            if (cndy.state.whitelistMintSettings.discountPrice) {\r\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\r\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\r\n            } else {\r\n              setDiscountPrice(undefined);\r\n              // when presale=false and discountPrice=null, mint is restricted\r\n              // to whitelist users only\r\n              if (!cndy.state.whitelistMintSettings.presale) {\r\n                cndy.state.isWhitelistOnly = true;\r\n              }\r\n            }\r\n            // retrieves the whitelist token\r\n            const mint = new anchor.web3.PublicKey(\r\n              cndy.state.whitelistMintSettings.mint\r\n            );\r\n            const token = (await getAtaForMint(mint, publicKey))[0];\r\n\r\n            try {\r\n              const balance = await connection.getTokenAccountBalance(token);\r\n              isWLUser = parseInt(balance.value.amount) > 0;\r\n              // only whitelist the user if the balance > 0\r\n              setIsWhitelistUser(isWLUser);\r\n\r\n              if (cndy.state.isWhitelistOnly) {\r\n                active = isWLUser && (presale || active);\r\n              }\r\n            } catch (e) {\r\n              setIsWhitelistUser(false);\r\n              // no whitelist user, no mint\r\n              if (cndy.state.isWhitelistOnly) {\r\n                active = false;\r\n              }\r\n              console.log(\r\n                \"There was a problem fetching whitelist token balance\"\r\n              );\r\n              console.log(e);\r\n            }\r\n          }\r\n          userPrice = isWLUser ? userPrice : cndy.state.price;\r\n\r\n          if (cndy?.state.tokenMint) {\r\n            // retrieves the SPL token\r\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\r\n            const token = (await getAtaForMint(mint, publicKey))[0];\r\n            try {\r\n              const balance = await connection.getTokenAccountBalance(token);\r\n\r\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\r\n\r\n              // only allow user to mint if token balance >  the user if the balance > 0\r\n              setIsValidBalance(valid);\r\n              active = active && valid;\r\n            } catch (e) {\r\n              setIsValidBalance(false);\r\n              active = false;\r\n              // no whitelist user, no mint\r\n              console.log(\"There was a problem fetching SPL token balance\");\r\n              console.log(e);\r\n            }\r\n          } else {\r\n            const balance = new anchor.BN(\r\n              await connection.getBalance(publicKey)\r\n            );\r\n            const valid = balance.gte(userPrice);\r\n            setIsValidBalance(valid);\r\n            active = active && valid;\r\n          }\r\n\r\n          // datetime to stop the mint?\r\n          if (cndy?.state.endSettings?.endSettingType.date) {\r\n            setEndDate(toDate(cndy.state.endSettings.number));\r\n            if (\r\n              cndy.state.endSettings.number.toNumber() <\r\n              new Date().getTime() / 1000\r\n            ) {\r\n              active = false;\r\n            }\r\n          }\r\n          // amount to stop the mint?\r\n          if (cndy?.state.endSettings?.endSettingType.amount) {\r\n            const limit = Math.min(\r\n              cndy.state.endSettings.number.toNumber(),\r\n              cndy.state.itemsAvailable\r\n            );\r\n            if (cndy.state.itemsRedeemed < limit) {\r\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n            } else {\r\n              setItemsRemaining(0);\r\n              cndy.state.isSoldOut = true;\r\n            }\r\n          } else {\r\n            setItemsRemaining(cndy.state.itemsRemaining);\r\n          }\r\n\r\n          if (cndy.state.isSoldOut) {\r\n            active = false;\r\n          }\r\n\r\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\r\n          const collectionPDAAccount = await connection.getAccountInfo(\r\n            collectionPDA\r\n          );\r\n\r\n          setIsActive((cndy.state.isActive = active));\r\n          setIsPresale((cndy.state.isPresale = presale));\r\n          setCandyMachine(cndy);\r\n\r\n          const txnEstimate =\r\n            892 +\r\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\r\n            (cndy.state.tokenMint ? 66 : 0) +\r\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\r\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\r\n            (cndy.state.gatekeeper ? 33 : 0) +\r\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\r\n\r\n          setNeedTxnSplit(txnEstimate > 1230);\r\n        } catch (e) {\r\n          if (e instanceof Error) {\r\n            if (\r\n              e.message === `Account does not exist ${props.candyMachineId}`\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value wrong in your .env file, or you are using the wrong RPC!`,\r\n                severity: \"error\",\r\n                hideDuration: null,\r\n              });\r\n            } else if (\r\n              e.message.startsWith(\"failed to get info about account\")\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\r\n                severity: \"error\",\r\n                hideDuration: null,\r\n              });\r\n            }\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: `${e}`,\r\n              severity: \"error\",\r\n              hideDuration: null,\r\n            });\r\n          }\r\n          console.log(e);\r\n        }\r\n      } else {\r\n        setAlertState({\r\n          open: true,\r\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\r\n          severity: \"error\",\r\n          hideDuration: null,\r\n        });\r\n      }\r\n    },\r\n    [anchorWallet, props.candyMachineId, props.error, props.rpcHost]\r\n  );\r\n\r\n  const onMint = async (\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = []\r\n  ) => {\r\n    try {\r\n      setIsUserMinting(true);\r\n      if (connected && candyMachine?.program && publicKey) {\r\n        let setupMint: SetupState | undefined;\r\n        if (needTxnSplit && setupTxn === undefined) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Please sign account setup transaction\",\r\n            severity: \"info\",\r\n          });\r\n          setupMint = await createAccountsForMint(candyMachine, publicKey);\r\n          let status: any = { err: true };\r\n          if (setupMint.transaction) {\r\n            status = await awaitTransactionSignatureConfirmation(\r\n              setupMint.transaction,\r\n              props.txTimeout,\r\n              props.connection,\r\n              true\r\n            );\r\n          }\r\n          if (status && !status.err) {\r\n            setSetupTxn(setupMint);\r\n            setAlertState({\r\n              open: true,\r\n              message:\r\n                \"Setup transaction succeeded! Please sign minting transaction\",\r\n              severity: \"info\",\r\n            });\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: \"Mint failed! Please try again!\",\r\n              severity: \"error\",\r\n            });\r\n            setIsUserMinting(false);\r\n            return;\r\n          }\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Please sign minting transaction\",\r\n            severity: \"info\",\r\n          });\r\n        }\r\n\r\n        const mintResult = await mintOneToken(\r\n          candyMachine,\r\n          publicKey,\r\n          beforeTransactions,\r\n          afterTransactions,\r\n          setupMint ?? setupTxn\r\n        );\r\n\r\n        let status: any = { err: true };\r\n        let metadataStatus = null;\r\n        if (mintResult) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintResult.mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            true\r\n          );\r\n\r\n          metadataStatus =\r\n            await candyMachine.program.provider.connection.getAccountInfo(\r\n              mintResult.metadataKey,\r\n              \"processed\"\r\n            );\r\n          console.log(\"Metadata status: \", !!metadataStatus);\r\n        }\r\n\r\n        if (status && !status.err && metadataStatus) {\r\n          // manual update since the refresh might not detect\r\n          // the change immediately\r\n          const remaining = itemsRemaining! - 1;\r\n          setItemsRemaining(remaining);\r\n          setIsActive((candyMachine.state.isActive = remaining > 0));\r\n          candyMachine.state.isSoldOut = remaining === 0;\r\n          setSetupTxn(undefined);\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Mint succeeded!\",\r\n            severity: \"success\",\r\n            hideDuration: 7000,\r\n          });\r\n          refreshCandyMachineState(\"processed\");\r\n        } else if (status && !status.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message:\r\n              \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\r\n            severity: \"error\",\r\n            hideDuration: 8000,\r\n          });\r\n          refreshCandyMachineState();\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Mint failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n          refreshCandyMachineState();\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = \"Transaction timeout! Please try again.\";\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n          window.location.reload();\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n      // updates the candy machine state to reflect the latest\r\n      // information on chain\r\n      refreshCandyMachineState();\r\n    } finally {\r\n      setIsUserMinting(false);\r\n    }\r\n  };\r\n\r\n  const toggleMintButton = () => {\r\n    let active = !isActive || isPresale;\r\n\r\n    if (active) {\r\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\r\n        active = false;\r\n      }\r\n      if (endDate && Date.now() >= endDate.getTime()) {\r\n        active = false;\r\n      }\r\n    }\r\n\r\n    if (\r\n      isPresale &&\r\n      candyMachine!.state.goLiveDate &&\r\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\r\n    ) {\r\n      setIsPresale((candyMachine!.state.isPresale = false));\r\n    }\r\n\r\n    setIsActive((candyMachine!.state.isActive = active));\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshCandyMachineState();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    refreshCandyMachineState,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    (function loop() {\r\n      setTimeout(() => {\r\n        refreshCandyMachineState();\r\n        loop();\r\n      }, 20000);\r\n    })();\r\n  }, [refreshCandyMachineState]);\r\n\r\n  return (\r\n    <div className=\"flex h-full-screen\">\r\n\t\t\t<Sidebar minSidebar={minSidebar} setMinSiderBar={setMinSiderBar} activeLink=\"mint\" />\r\n      <div className=\"w-full h-full\">\r\n\t\t\t\t<Navbar setMinSiderBar={setMinSiderBar} minSidebar={minSidebar}  globalData={undefined}/>\r\n        <Container style={{ marginTop: 100 }}>\r\n          <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\r\n            <Paper\r\n              style={{\r\n                padding: 24,\r\n                paddingBottom: 10,\r\n                backgroundColor: \"#151A1F\",\r\n                borderRadius: 6,\r\n              }}\r\n            >\r\n              {!connected ? (\r\n                <ConnectButton\r\n                  onClick={(e) => {\r\n                    if (\r\n                      wallet?.adapter.name === SolanaMobileWalletAdapterWalletName\r\n                    ) {\r\n                      connect();\r\n                      e.preventDefault();\r\n                    }\r\n                  }}\r\n                >\r\n                  Connect Wallet\r\n                </ConnectButton>\r\n              ) : (\r\n                <>\r\n                  {candyMachine && (\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justifyContent=\"center\"\r\n                      wrap=\"nowrap\"\r\n                    >\r\n                      <Grid item xs={3}>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\">\r\n                          Remaining\r\n                        </Typography>\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textPrimary\"\r\n                          style={{\r\n                            fontWeight: \"bold\",\r\n                          }}\r\n                        >\r\n                          {`${itemsRemaining}`}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item xs={4}>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\">\r\n                          {isWhitelistUser && discountPrice\r\n                            ? \"Discount Price\"\r\n                            : \"Price\"}\r\n                        </Typography>\r\n                        <Typography\r\n                          variant=\"h6\"\r\n                          color=\"textPrimary\"\r\n                          style={{ fontWeight: \"bold\" }}\r\n                        >\r\n                          {isWhitelistUser && discountPrice\r\n                            ? `◎ ${formatNumber.asNumber(discountPrice)}`\r\n                            : `◎ ${formatNumber.asNumber(\r\n                                candyMachine.state.price\r\n                              )}`}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item xs={5}>\r\n                        {isActive && endDate && Date.now() < endDate.getTime() ? (\r\n                          <>\r\n                            <MintCountdown\r\n                              key=\"endSettings\"\r\n                              date={getCountdownDate(candyMachine)}\r\n                              style={{ justifyContent: \"flex-end\" }}\r\n                              status=\"COMPLETED\"\r\n                              onComplete={toggleMintButton}\r\n                            />\r\n                            <Typography\r\n                              variant=\"caption\"\r\n                              align=\"center\"\r\n                              display=\"block\"\r\n                              style={{ fontWeight: \"bold\" }}\r\n                            >\r\n                              TO END OF MINT\r\n                            </Typography>\r\n                          </>\r\n                        ) : (\r\n                          <>\r\n                            <MintCountdown\r\n                              key=\"goLive\"\r\n                              date={getCountdownDate(candyMachine)}\r\n                              style={{ justifyContent: \"flex-end\" }}\r\n                              status={\r\n                                candyMachine?.state?.isSoldOut ||\r\n                                (endDate && Date.now() > endDate.getTime())\r\n                                  ? \"COMPLETED\"\r\n                                  : isPresale\r\n                                  ? \"PRESALE\"\r\n                                  : \"LIVE\"\r\n                              }\r\n                              onComplete={toggleMintButton}\r\n                            />\r\n                            {isPresale &&\r\n                              candyMachine.state.goLiveDate &&\r\n                              candyMachine.state.goLiveDate.toNumber() >\r\n                                new Date().getTime() / 1000 && (\r\n                                <Typography\r\n                                  variant=\"caption\"\r\n                                  align=\"center\"\r\n                                  display=\"block\"\r\n                                  style={{ fontWeight: \"bold\" }}\r\n                                >\r\n                                  UNTIL PUBLIC MINT\r\n                                </Typography>\r\n                              )}\r\n                          </>\r\n                        )}\r\n                      </Grid>\r\n                    </Grid>\r\n                  )}\r\n                  <MintContainer>\r\n                    {candyMachine?.state.isActive &&\r\n                    candyMachine?.state.gatekeeper &&\r\n                    publicKey &&\r\n                    anchorWallet?.signTransaction ? (\r\n                      <GatewayProvider\r\n                        wallet={{\r\n                          publicKey:\r\n                            publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                          signTransaction: anchorWallet.signTransaction,\r\n                        }}\r\n                        gatekeeperNetwork={\r\n                          candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                        }\r\n                        clusterUrl={rpcUrl}\r\n                        cluster={cluster}\r\n                        options={{ autoShowModal: false }}\r\n                      >\r\n                        <MintButton\r\n                          candyMachine={candyMachine}\r\n                          isMinting={isUserMinting}\r\n                          setIsMinting={(val) => setIsUserMinting(val)}\r\n                          onMint={onMint}\r\n                          isActive={\r\n                            isActive ||\r\n                            (isPresale && isWhitelistUser && isValidBalance)\r\n                          }\r\n                        />\r\n                      </GatewayProvider>\r\n                    ) : (\r\n                      <MintButton\r\n                        candyMachine={candyMachine}\r\n                        isMinting={isUserMinting}\r\n                        setIsMinting={(val) => setIsUserMinting(val)}\r\n                        onMint={onMint}\r\n                        isActive={\r\n                          isActive ||\r\n                          (isPresale && isWhitelistUser && isValidBalance)\r\n                        }\r\n                      />\r\n                    )}\r\n                  </MintContainer>\r\n                </>\r\n              )}\r\n              <Typography\r\n                variant=\"caption\"\r\n                align=\"center\"\r\n                display=\"block\"\r\n                style={{ marginTop: 7, color: \"grey\" }}\r\n              >\r\n                \r\n              </Typography>\r\n            </Paper>\r\n          </Container>\r\n\r\n          <Snackbar\r\n            open={alertState.open}\r\n            autoHideDuration={\r\n              alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\r\n            }\r\n            onClose={() => setAlertState({ ...alertState, open: false })}\r\n          >\r\n            <Alert\r\n              onClose={() => setAlertState({ ...alertState, open: false })}\r\n              severity={alertState.severity}\r\n            >\r\n              {alertState.message}\r\n            </Alert>\r\n          </Snackbar>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getCountdownDate = (\r\n  candyMachine: CandyMachineAccount\r\n): Date | undefined => {\r\n  if (\r\n    candyMachine.state.isActive &&\r\n    candyMachine.state.endSettings?.endSettingType.date\r\n  ) {\r\n    return toDate(candyMachine.state.endSettings.number);\r\n  }\r\n\r\n  return toDate(\r\n    candyMachine.state.goLiveDate\r\n      ? candyMachine.state.goLiveDate\r\n      : candyMachine.state.isPresale\r\n      ? new anchor.BN(new Date().getTime() / 1000)\r\n      : undefined\r\n  );\r\n};\r\n\r\nexport default Mint;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}