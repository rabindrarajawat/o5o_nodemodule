{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.mjs';\nimport { ProgramNotRecognizedError } from '../../errors/SdkError.mjs';\n/**\n * @group Modules\n */\n\nclass ProgramClient {\n  constructor(metaplex) {\n    _defineProperty(this, \"programs\", []);\n\n    this.metaplex = metaplex;\n  }\n\n  register(program) {\n    this.programs.unshift(program);\n  }\n\n  all() {\n    let overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return [...overrides, ...this.programs];\n  }\n\n  allForCluster(cluster) {\n    let overrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return this.all(overrides).filter(program => {\n      return program.clusterFilter?.(cluster) ?? true;\n    });\n  }\n\n  allForCurrentCluster() {\n    let overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return this.allForCluster(this.metaplex.cluster, overrides);\n  }\n\n  get(nameOrAddress) {\n    let overrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const programs = this.allForCurrentCluster(overrides);\n    const program = typeof nameOrAddress === 'string' ? programs.find(program => program.name === nameOrAddress) : programs.find(program => program.address.equals(nameOrAddress));\n\n    if (!program) {\n      throw new ProgramNotRecognizedError(nameOrAddress, this.metaplex.cluster);\n    }\n\n    return program;\n  }\n\n}\n\nexport { ProgramClient };","map":{"version":3,"sources":["../../../../src/plugins/programModule/ProgramClient.ts"],"names":["ProgramClient","constructor","metaplex","register","program","programs","unshift","all","overrides","allForCluster","cluster","filter","clusterFilter","allForCurrentCluster","get","nameOrAddress","find","name","address","equals","ProgramNotRecognizedError"],"mappings":";;AAKA;AACA;AACA;;AACO,MAAMA,aAAN,CAAoB;EAEzBC,WAAW,CAAoBC,QAApB,EAAwC;IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EADnB,EACmB,CAAA;;IADjB,KACHA,QADG,GACHA,QADG;EACkB;;EAEpDC,QAAQ,CAACC,OAAD,EAAyB;IAC/B,KAAKC,QAAL,CAAcC,OAAd,CAAsBF,OAAtB;EACF;;EAEAG,GAAG,GAAuC;IAAA,IAAtCC,SAAsC,uEAAf,EAAe;IACxC,OAAO,CAAC,GAAGA,SAAJ,EAAe,GAAG,KAAKH,QAAvB,CAAP;EACF;;EAEAI,aAAa,CAACC,OAAD,EAAyD;IAAA,IAAtCF,SAAsC,uEAAf,EAAe;IACpE,OAAO,KAAKD,GAAL,CAASC,SAAT,EAAoBG,MAApB,CAA4BP,OAAO,IAAK;MAC7C,OAAOA,OAAO,CAACQ,aAARR,GAAwBM,OAAxBN,KAAoC,IAA3C;IACD,CAFM,CAAP;EAGF;;EAEAS,oBAAoB,GAAuC;IAAA,IAAtCL,SAAsC,uEAAf,EAAe;IACzD,OAAO,KAAKC,aAAL,CAAmB,KAAKP,QAAL,CAAcQ,OAAjC,EAA0CF,SAA1C,CAAP;EACF;;EAEAM,GAAG,CACDC,aADC,EAGE;IAAA,IADHP,SACG,uEADoB,EACpB;IACH,MAAMH,QAAQ,GAAG,KAAKQ,oBAAL,CAA0BL,SAA1B,CAAjB;IACA,MAAMJ,OAAO,GACX,OAAOW,aAAP,KAAyB,QAAzB,GACIV,QAAQ,CAACW,IAATX,CAAeD,OAAO,IAAKA,OAAO,CAACa,IAARb,KAAiBW,aAA5CV,CADJ,GAEIA,QAAQ,CAACW,IAATX,CAAeD,OAAO,IAAKA,OAAO,CAACc,OAARd,CAAgBe,MAAhBf,CAAuBW,aAAvBX,CAA3BC,CAHN;;IAKA,IAAI,CAACD,OAAL,EAAc;MACZ,MAAM,IAAIgB,yBAAJ,CAA8BL,aAA9B,EAA6C,KAAKb,QAAL,CAAcQ,OAA3D,CAAN;IACF;;IAEA,OAAON,OAAP;EACF;;AArCyB","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { ProgramNotRecognizedError } from '@/errors';\nimport { Program, Cluster } from '@/types';\n\n/**\n * @group Modules\n */\nexport class ProgramClient {\n  protected programs: Program[] = [];\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  register(program: Program): void {\n    this.programs.unshift(program);\n  }\n\n  all(overrides: Program[] = []): Program[] {\n    return [...overrides, ...this.programs];\n  }\n\n  allForCluster(cluster: Cluster, overrides: Program[] = []): Program[] {\n    return this.all(overrides).filter((program) => {\n      return program.clusterFilter?.(cluster) ?? true;\n    });\n  }\n\n  allForCurrentCluster(overrides: Program[] = []): Program[] {\n    return this.allForCluster(this.metaplex.cluster, overrides);\n  }\n\n  get<T extends Program = Program>(\n    nameOrAddress: string | PublicKey,\n    overrides: Program[] = []\n  ): T {\n    const programs = this.allForCurrentCluster(overrides);\n    const program =\n      typeof nameOrAddress === 'string'\n        ? programs.find((program) => program.name === nameOrAddress)\n        : programs.find((program) => program.address.equals(nameOrAddress));\n\n    if (!program) {\n      throw new ProgramNotRecognizedError(nameOrAddress, this.metaplex.cluster);\n    }\n\n    return program as T;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}