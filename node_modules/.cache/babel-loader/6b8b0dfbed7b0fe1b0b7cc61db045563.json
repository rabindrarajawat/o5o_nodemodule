{"ast":null,"code":"import { createSetAuthorityInstruction } from '@metaplex-foundation/mpl-candy-guard';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateCandyGuardAuthorityOperation';\n/**\n * Updates the authority of a Candy Guard account.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .updateCandyGuardAuthority({\n *     candyGuard: candyGuard.address,\n *     authority: candyGuardAuthority,\n *     newAuthority,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst updateCandyGuardAuthorityOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst updateCandyGuardAuthorityOperationHandler = {\n  async handle(operation, metaplex, scope) {\n    return updateCandyGuardAuthorityBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Updates the authority of a Candy Guard account.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .builders()\n *   .updateCandyGuardAuthority({\n *     candyGuard: candyGuard.address,\n *     authority: candyGuardAuthority,\n *     newAuthority,\n *   };\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst updateCandyGuardAuthorityBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    candyGuard,\n    newAuthority,\n    authority = metaplex.identity()\n  } = params;\n  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);\n  return TransactionBuilder.make().setFeePayer(payer) // Update the candy guard account.\n  .add({\n    instruction: createSetAuthorityInstruction({\n      candyGuard,\n      authority: authority.publicKey\n    }, {\n      newAuthority\n    }, candyGuardProgram.address),\n    signers: [authority, payer],\n    key: params.instructionKey ?? 'updateCandyGuardAuthority'\n  });\n};\n\nexport { updateCandyGuardAuthorityBuilder, updateCandyGuardAuthorityOperation, updateCandyGuardAuthorityOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineModule/operations/updateCandyGuardAuthority.ts"],"names":["Key","updateCandyGuardAuthorityOperation","useOperation","updateCandyGuardAuthorityOperationHandler","handle","operation","metaplex","scope","updateCandyGuardAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","candyGuard","newAuthority","authority","identity","candyGuardProgram","getCandyGuard","TransactionBuilder","make","setFeePayer","add","instruction","createSetAuthorityInstruction","publicKey","address","signers","key","instructionKey"],"mappings":";;4EAaA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,oCAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,kCAAkC,GAC7CC,YAAY,CAAqCF,GAArC,C;AAEd;AACA;AACA;AACA;;AAmCA;AACA;AACA;AACA;;AACO,MAAMG,yCAA+F,GAC1G;EACE,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAI4C;IAC1C,OAAOC,gCAAgC,CACrCF,QADqC,EAErCD,SAAS,CAACI,KAF2B,EAGrCF,KAHqC,CAAhCC,CAILE,cAJKF,CAIUF,QAJVE,EAIoBD,KAAK,CAACI,cAJ1BH,CAAP;EAKF;;AAXF,CADK,C,CAeP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaA,MAAAA,gCAAgC,GAAG,UAC9CF,QAD8C,EAE9CM,MAF8C,EAIvB;EAAA,IADvBC,OACuB,uEADc,EACd;EACvB,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGT,QAAQ,CAACU,GAATV,GAAeW,kBAAfX;EAApB,IAA4DO,OAAlE;EACA,MAAM;IAAEK,UAAF;IAAcC,YAAd;IAA4BC,SAAS,GAAGd,QAAQ,CAACe,QAATf;EAAxC,IAAgEM,MAAtE;EACA,MAAMU,iBAAiB,GAAGhB,QAAQ,CAACQ,QAATR,GAAoBiB,aAApBjB,CAAkCQ,QAAlCR,CAA1B;EAEA,OACEkB,kBAAkB,CAACC,IAAnBD,GACGE,WADHF,CACeT,KADfS,EAGE;EAHFA,CAIGG,GAJHH,CAIO;IACHI,WAAW,EAAEC,6BAA6B,CACxC;MAAEX,UAAF;MAAcE,SAAS,EAAEA,SAAS,CAACU;IAAnC,CADwC,EAExC;MAAEX;IAAF,CAFwC,EAGxCG,iBAAiB,CAACS,OAHsB,CADvC;IAMHC,OAAO,EAAE,CAACZ,SAAD,EAAYL,KAAZ,CANN;IAOHkB,GAAG,EAAErB,MAAM,CAACsB,cAAPtB,IAAyB;EAP3B,CAJPY,CADF;AAeF,CAxBahB","sourcesContent":["import { createSetAuthorityInstruction } from '@metaplex-foundation/mpl-candy-guard';\nimport type { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateCandyGuardAuthorityOperation' as const;\n\n/**\n * Updates the authority of a Candy Guard account.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .updateCandyGuardAuthority({\n *     candyGuard: candyGuard.address,\n *     authority: candyGuardAuthority,\n *     newAuthority,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const updateCandyGuardAuthorityOperation =\n  useOperation<UpdateCandyGuardAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UpdateCandyGuardAuthorityOperation = Operation<\n  typeof Key,\n  UpdateCandyGuardAuthorityInput,\n  UpdateCandyGuardAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UpdateCandyGuardAuthorityInput = {\n  /** The address of the Candy Guard to update. */\n  candyGuard: PublicKey;\n\n  /**\n   * The Signer authorized to update the candy Guard.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /** The address of the new authority. */\n  newAuthority: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UpdateCandyGuardAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const updateCandyGuardAuthorityOperationHandler: OperationHandler<UpdateCandyGuardAuthorityOperation> =\n  {\n    async handle(\n      operation: UpdateCandyGuardAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<UpdateCandyGuardAuthorityOutput> {\n      return updateCandyGuardAuthorityBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UpdateCandyGuardAuthorityBuilderParams = Omit<\n  UpdateCandyGuardAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that updates the candy guard. */\n  instructionKey?: string;\n};\n\n/**\n * Updates the authority of a Candy Guard account.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .builders()\n *   .updateCandyGuardAuthority({\n *     candyGuard: candyGuard.address,\n *     authority: candyGuardAuthority,\n *     newAuthority,\n *   };\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const updateCandyGuardAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: UpdateCandyGuardAuthorityBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { candyGuard, newAuthority, authority = metaplex.identity() } = params;\n  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Update the candy guard account.\n      .add({\n        instruction: createSetAuthorityInstruction(\n          { candyGuard, authority: authority.publicKey },\n          { newAuthority },\n          candyGuardProgram.address\n        ),\n        signers: [authority, payer],\n        key: params.instructionKey ?? 'updateCandyGuardAuthority',\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}