{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.disableRequiredMemoTransfers = exports.enableRequiredMemoTransfers = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst internal_js_1 = require(\"../../actions/internal.js\");\n\nconst constants_js_1 = require(\"../../constants.js\");\n\nconst instructions_js_1 = require(\"./instructions.js\");\n/**\n * Enable memo transfers on the given account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to modify\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\n\nfunction enableRequiredMemoTransfers(connection, payer, account, owner) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let confirmOptions = arguments.length > 5 ? arguments[5] : undefined;\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);\n    const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createEnableRequiredMemoTransfersInstruction)(account, ownerPublicKey, signers, programId));\n    return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);\n  });\n}\n\nexports.enableRequiredMemoTransfers = enableRequiredMemoTransfers;\n/**\n * Disable memo transfers on the given account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to modify\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nfunction disableRequiredMemoTransfers(connection, payer, account, owner) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let confirmOptions = arguments.length > 5 ? arguments[5] : undefined;\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constants_js_1.TOKEN_2022_PROGRAM_ID;\n  return __awaiter(this, void 0, void 0, function* () {\n    const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);\n    const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createDisableRequiredMemoTransfersInstruction)(account, ownerPublicKey, signers, programId));\n    return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);\n  });\n}\n\nexports.disableRequiredMemoTransfers = disableRequiredMemoTransfers;","map":{"version":3,"sources":["../../../../src/extensions/memoTransfer/actions.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,aAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,MAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAKA;;;;;;;;;;;;AAYG;;;AACH,SAAsB,2BAAtB,CACI,UADJ,EAEI,KAFJ,EAGI,OAHJ,EAII,KAJJ,EAOqC;EAAA,IAFjC,YAEiC,uEAFR,EAEQ;EAAA,IADjC,cACiC;EAAA,IAAjC,SAAiC,uEAArB,cAAA,CAAA,qBAAqB;;IAEjC,MAAM,CAAC,cAAD,EAAiB,OAAjB,IAA4B,CAAA,GAAA,aAAA,CAAA,UAAA,EAAW,KAAX,EAAkB,YAAlB,CAAlC;IAEA,MAAM,WAAW,GAAG,IAAI,SAAA,CAAA,WAAJ,GAAkB,GAAlB,CAChB,CAAA,GAAA,iBAAA,CAAA,4CAAA,EAA6C,OAA7C,EAAsD,cAAtD,EAAsE,OAAtE,EAA+E,SAA/E,CADgB,CAApB;IAIA,OAAO,MAAM,CAAA,GAAA,SAAA,CAAA,yBAAA,EAA0B,UAA1B,EAAsC,WAAtC,EAAmD,CAAC,KAAD,EAAQ,GAAG,OAAX,CAAnD,EAAwE,cAAxE,CAAb;EACH,C;AAAA;;AAhBD,OAAA,CAAA,2BAAA,GAAA,2BAAA;AAkBA;;;;;;;;;;;;AAYG;;AACH,SAAsB,4BAAtB,CACI,UADJ,EAEI,KAFJ,EAGI,OAHJ,EAII,KAJJ,EAOqC;EAAA,IAFjC,YAEiC,uEAFR,EAEQ;EAAA,IADjC,cACiC;EAAA,IAAjC,SAAiC,uEAArB,cAAA,CAAA,qBAAqB;;IAEjC,MAAM,CAAC,cAAD,EAAiB,OAAjB,IAA4B,CAAA,GAAA,aAAA,CAAA,UAAA,EAAW,KAAX,EAAkB,YAAlB,CAAlC;IAEA,MAAM,WAAW,GAAG,IAAI,SAAA,CAAA,WAAJ,GAAkB,GAAlB,CAChB,CAAA,GAAA,iBAAA,CAAA,6CAAA,EAA8C,OAA9C,EAAuD,cAAvD,EAAuE,OAAvE,EAAgF,SAAhF,CADgB,CAApB;IAIA,OAAO,MAAM,CAAA,GAAA,SAAA,CAAA,yBAAA,EAA0B,UAA1B,EAAsC,WAAtC,EAAmD,CAAC,KAAD,EAAQ,GAAG,OAAX,CAAnD,EAAwE,cAAxE,CAAb;EACH,C;AAAA;;AAhBD,OAAA,CAAA,4BAAA,GAAA,4BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.disableRequiredMemoTransfers = exports.enableRequiredMemoTransfers = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst internal_js_1 = require(\"../../actions/internal.js\");\nconst constants_js_1 = require(\"../../constants.js\");\nconst instructions_js_1 = require(\"./instructions.js\");\n/**\n * Enable memo transfers on the given account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to modify\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction enableRequiredMemoTransfers(connection, payer, account, owner, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);\n        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createEnableRequiredMemoTransfersInstruction)(account, ownerPublicKey, signers, programId));\n        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);\n    });\n}\nexports.enableRequiredMemoTransfers = enableRequiredMemoTransfers;\n/**\n * Disable memo transfers on the given account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to modify\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nfunction disableRequiredMemoTransfers(connection, payer, account, owner, multiSigners = [], confirmOptions, programId = constants_js_1.TOKEN_2022_PROGRAM_ID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [ownerPublicKey, signers] = (0, internal_js_1.getSigners)(owner, multiSigners);\n        const transaction = new web3_js_1.Transaction().add((0, instructions_js_1.createDisableRequiredMemoTransfersInstruction)(account, ownerPublicKey, signers, programId));\n        return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, transaction, [payer, ...signers], confirmOptions);\n    });\n}\nexports.disableRequiredMemoTransfers = disableRequiredMemoTransfers;\n//# sourceMappingURL=actions.js.map"]},"metadata":{},"sourceType":"script"}