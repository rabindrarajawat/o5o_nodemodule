{"ast":null,"code":"/* eslint-disable */\nimport * as anchor from \"@project-serum/anchor\";\n\nconst web3 = require(\"@solana/web3.js\");\n\nconst splToken = require(\"@solana/spl-token\");\n\n//import { createMint, getOrCreateAssociatedTokenAccount, mintTo, transfer } from '@solana/spl-token';\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport { SystemProgram, SYSVAR_SLOT_HASHES_PUBKEY } from \"@solana/web3.js\";\nimport { sendTransactions, SequenceType } from \"./connection-new\";\nimport { CIVIC, getAtaForMint, getNetworkExpire, getNetworkToken, SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID } from \"./utils\";\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\");\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\nexport const awaitTransactionSignatureConfirmation = async function (txid, timeout, connection) {\n  let queryStatus = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let done = false;\n  let status = {\n    slot: 0,\n    confirmations: 0,\n    err: null\n  };\n  const subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({\n        timeout: true\n      });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([txid]);\n          status = signatureStatuses && signatureStatuses.value[0];\n\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n\n      await sleep(2000);\n    }\n  }); //@ts-ignore\n\n  try {\n    await connection.removeSignatureListener(subId);\n  } catch (e) {// ignore\n  }\n\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (associatedTokenAddress, payer, walletAddress, splTokenMintAddress) => {\n  const keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: associatedTokenAddress,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: walletAddress,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: splTokenMintAddress,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: anchor.web3.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: TOKEN_PROGRAM_ID,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  return new anchor.web3.TransactionInstruction({\n    keys: keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([])\n  });\n};\n\nexport const getCandyMachineState = async (anchorWallet, candyMachineId, connection) => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"processed\"\n  });\n\n  const getProgramState = async () => {\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n    const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n    const state = await program.account.candyMachine.fetch(candyMachineId);\n    return [program, state];\n  };\n\n  const getCurrentBlockTime = async () => {\n    var _await$connection$get;\n\n    const slot = await connection.getSlot();\n    return (_await$connection$get = await connection.getBlockTime(slot)) !== null && _await$connection$get !== void 0 ? _await$connection$get : new Date().getTime() / 1000;\n  };\n\n  const [[program, state], currentBlockTime] = await Promise.all([getProgramState(), getCurrentBlockTime()]);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n  const timeDiff = new Date().getTime() / 1000 - currentBlockTime;\n  const goLiveDate = state.data.goLiveDate !== null ? state.data.goLiveDate + timeDiff : null;\n  return {\n    id: candyMachineId,\n    program: program,\n    state: {\n      authority: state.authority,\n      itemsAvailable: itemsAvailable,\n      itemsRedeemed: itemsRedeemed,\n      itemsRemaining: itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority\n    }\n  };\n};\nexport const getFreezePdaState = async (program, freezePda) => {\n  try {\n    const state = await program.account.freezePda.fetch(freezePda);\n    return state;\n  } catch (error) {\n    return null;\n  }\n};\n\nconst getMasterEdition = async mint => {\n  return (await anchor.web3.PublicKey.findProgramAddress([Buffer.from(\"metadata\"), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer(), Buffer.from(\"edition\")], TOKEN_METADATA_PROGRAM_ID))[0];\n};\n\nconst getMetadata = async mint => {\n  return (await anchor.web3.PublicKey.findProgramAddress([Buffer.from(\"metadata\"), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()], TOKEN_METADATA_PROGRAM_ID))[0];\n};\n\nexport const getCandyMachineCreator = async candyMachine => {\n  return await anchor.web3.PublicKey.findProgramAddress([Buffer.from(\"candy_machine\"), candyMachine.toBuffer()], CANDY_MACHINE_PROGRAM);\n};\nexport const getFreezePda = async candyMachine => {\n  return await anchor.web3.PublicKey.findProgramAddress([Buffer.from(\"freeze\"), candyMachine.toBuffer()], CANDY_MACHINE_PROGRAM);\n};\nexport const getCollectionPDA = async candyMachineAddress => {\n  return await anchor.web3.PublicKey.findProgramAddress([Buffer.from(\"collection\"), candyMachineAddress.toBuffer()], CANDY_MACHINE_PROGRAM);\n};\nexport const getCollectionAuthorityRecordPDA = async (mint, newAuthority) => {\n  return (await anchor.web3.PublicKey.findProgramAddress([Buffer.from(\"metadata\"), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer(), Buffer.from(\"collection_authority\"), newAuthority.toBuffer()], TOKEN_METADATA_PROGRAM_ID))[0];\n};\nexport const createAccountsForMint = async (candyMachine, payer) => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (await getAtaForMint(mint.publicKey, payer))[0];\n  const signers = [mint];\n  const instructions = [anchor.web3.SystemProgram.createAccount({\n    fromPubkey: payer,\n    newAccountPubkey: mint.publicKey,\n    space: MintLayout.span,\n    lamports: await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(MintLayout.span),\n    programId: TOKEN_PROGRAM_ID\n  }), Token.createInitMintInstruction(TOKEN_PROGRAM_ID, mint.publicKey, 0, payer, payer), createAssociatedTokenAccountInstruction(userTokenAccountAddress, payer, payer, mint.publicKey), Token.createMintToInstruction(TOKEN_PROGRAM_ID, mint.publicKey, userTokenAccountAddress, payer, [], 1)];\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (await sendTransactions(candyMachine.program.provider.connection, candyMachine.program.provider.wallet, [instructions], [signers], SequenceType.StopOnFailure, \"singleGossip\", () => {}, () => false, undefined, [], [])).txs[0].txid\n  };\n};\nexport const mintOneToken = async function (candyMachine, payer, burnmint) {\n  let beforeTransactions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  let afterTransactions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let setupState = arguments.length > 5 ? arguments[5] : undefined;\n  let metadataAddressnew = [];\n  let mintTxn;\n  const instructions = [];\n  const signers = [];\n  console.log(\"burnmint: \", burnmint);\n  console.log(\"burnmint: \", burnmint.account.toString()); //var connection = new web3.Connection(web3.clusterApiUrl(process.env.ENVIORNMENT));\n\n  var from = candyMachine.program.provider.wallet; // console.log(\"fromWallet.publicKey: \", from.publicKey.toString());\n  // var toWallet = new web3.PublicKey(\"3e2cB5fjMhVq9kiHjTms6f4KFnZ639ftYcibHWR82vVk\");\n  // console.log(\"toWallet: \", toWallet.toString());\n\n  var mint = burnmint.account.toString(); //\"JE6DqgstABStSyKFD7j1ZEe9sgyhMuttVf5tHfHQVKAf\";\n\n  console.log(\"myMint: \", mint.toString());\n  let connection = candyMachine.program.provider.connection;\n  console.log(\"connection: \", connection);\n  const mintPublicKey = new web3.PublicKey(mint); // Mint is the Mint address found in the NFT metadata\n\n  const ownerPublicKey = from.publicKey;\n  const destPublicKey = new web3.PublicKey(\"3e2cB5fjMhVq9kiHjTms6f4KFnZ639ftYcibHWR82vVk\");\n  var mintToken = new splToken.Token(connection, mintPublicKey, splToken.TOKEN_PROGRAM_ID, from); // GET SOURCE ASSOCIATED ACCOUNT\n\n  const associatedSourceTokenAddr = await Token.getAssociatedTokenAddress(mintToken.associatedProgramId, mintToken.programId, mintPublicKey, ownerPublicKey); // GET DESTINATION ASSOCIATED ACCOUNT\n\n  const associatedDestinationTokenAddr = await Token.getAssociatedTokenAddress(mintToken.associatedProgramId, mintToken.programId, mintPublicKey, destPublicKey);\n  const receiverAccount = await connection.getAccountInfo(associatedDestinationTokenAddr); //const instructions = [];\n\n  if (receiverAccount === null) {\n    console.log(\"receiver account is null!\");\n    instructions.push(Token.createAssociatedTokenAccountInstruction(mintToken.associatedProgramId, mintToken.programId, mintPublicKey, associatedDestinationTokenAddr, destPublicKey, ownerPublicKey));\n  }\n\n  instructions.push(Token.createTransferInstruction(TOKEN_PROGRAM_ID, associatedSourceTokenAddr, associatedDestinationTokenAddr, ownerPublicKey, [], 1)); // This transaction is sending the tokens\n  // let transaction = new web3.Transaction();\n  // for (let i = 0; i < instructions.length; i++) {\n  //   transaction.add(instructions[i]);\n  // }\n  // const tokeninstructionsMatrix = [instructions];\n  // const tokensignersMatrix = [mintPublicKey];\n  //signers.push(mintPublicKey);\n  // if (transaction) {\n  //   console.log(\"candyMachine.program.provider.wallet:\", candyMachine.program.provider.wallet);      \n  // } else {\n  //   console.log(\"Transaction error: transaction data is null\");\n  // }    \n\n  for (let count = 0; count < 1; count++) {\n    var _setupState$mint;\n\n    const mint = (_setupState$mint = setupState === null || setupState === void 0 ? void 0 : setupState.mint) !== null && _setupState$mint !== void 0 ? _setupState$mint : anchor.web3.Keypair.generate(); //const mint = anchor.web3.Keypair.generate();    \n\n    const userTokenAccountAddress = (await getAtaForMint(mint.publicKey, payer))[0];\n    const userPayingAccountAddress = candyMachine.state.tokenMint ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0] : payer;\n    const candyMachineAddress = candyMachine.id;\n    const remainingAccounts = [];\n    console.log(\"SetupState: \", setupState);\n\n    if (!setupState) {\n      if (count == 0) {\n        signers.push(mint);\n      }\n\n      instructions.push(...[anchor.web3.SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports: await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(MintLayout.span),\n        programId: TOKEN_PROGRAM_ID\n      }), Token.createInitMintInstruction(TOKEN_PROGRAM_ID, mint.publicKey, 0, payer, payer), createAssociatedTokenAccountInstruction(userTokenAccountAddress, payer, payer, mint.publicKey), Token.createMintToInstruction(TOKEN_PROGRAM_ID, mint.publicKey, userTokenAccountAddress, payer, [], 1)]);\n    }\n\n    if (candyMachine.state.gatekeeper) {\n      remainingAccounts.push({\n        pubkey: (await getNetworkToken(payer, candyMachine.state.gatekeeper.gatekeeperNetwork))[0],\n        isWritable: true,\n        isSigner: false\n      });\n\n      if (candyMachine.state.gatekeeper.expireOnUse) {\n        remainingAccounts.push({\n          pubkey: CIVIC,\n          isWritable: false,\n          isSigner: false\n        });\n        remainingAccounts.push({\n          pubkey: (await getNetworkExpire(candyMachine.state.gatekeeper.gatekeeperNetwork))[0],\n          isWritable: false,\n          isSigner: false\n        });\n      }\n    }\n\n    if (candyMachine.state.whitelistMintSettings) {\n      const mint = new anchor.web3.PublicKey(candyMachine.state.whitelistMintSettings.mint);\n      const whitelistToken = (await getAtaForMint(mint, payer))[0];\n      remainingAccounts.push({\n        pubkey: whitelistToken,\n        isWritable: true,\n        isSigner: false\n      });\n\n      if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n        remainingAccounts.push({\n          pubkey: mint,\n          isWritable: true,\n          isSigner: false\n        });\n        remainingAccounts.push({\n          pubkey: payer,\n          isWritable: false,\n          isSigner: true\n        });\n      }\n    }\n\n    if (candyMachine.state.tokenMint) {\n      remainingAccounts.push({\n        pubkey: userPayingAccountAddress,\n        isWritable: true,\n        isSigner: false\n      });\n      remainingAccounts.push({\n        pubkey: payer,\n        isWritable: false,\n        isSigner: true\n      });\n    }\n\n    const metadataAddress = await getMetadata(mint.publicKey);\n    metadataAddressnew.push(metadataAddress);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(candyMachineAddress);\n    const freezePda = (await getFreezePda(candyMachineAddress))[0];\n    console.log(freezePda.toString());\n    const freezePdaState = await getFreezePdaState(candyMachine.program, freezePda);\n    console.log(\"Freeze state: \");\n    console.log(freezePdaState);\n\n    if (freezePdaState != null) {\n      remainingAccounts.push({\n        pubkey: freezePda,\n        isWritable: true,\n        isSigner: false\n      });\n      remainingAccounts.push({\n        pubkey: userTokenAccountAddress,\n        isWritable: false,\n        isSigner: false\n      });\n\n      if (candyMachine.state.tokenMint != null) {\n        const freezeAta = (await getAtaForMint(candyMachine.state.tokenMint, freezePda))[0];\n        remainingAccounts.push({\n          pubkey: freezeAta,\n          isWritable: true,\n          isSigner: false\n        });\n      }\n    }\n\n    console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\n    instructions.push(await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator: candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition: masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY\n      },\n      remainingAccounts: remainingAccounts.length > 0 ? remainingAccounts : undefined\n    }));\n    const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n    const collectionPDAAccount = await candyMachine.program.provider.connection.getAccountInfo(collectionPDA);\n\n    if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n      try {\n        const collectionData = await candyMachine.program.account.collectionPda.fetch(collectionPDA);\n        console.log(collectionData);\n        const collectionMint = collectionData.mint;\n        const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(collectionMint, collectionPDA);\n        console.log(collectionMint);\n\n        if (collectionMint) {\n          const collectionMetadata = await getMetadata(collectionMint);\n          const collectionMasterEdition = await getMasterEdition(collectionMint);\n          console.log(\"Collection PDA: \", collectionPDA.toBase58());\n          console.log(\"Authority: \", candyMachine.state.authority.toBase58());\n          instructions.push(await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint: collectionMint,\n              collectionMetadata: collectionMetadata,\n              collectionMasterEdition: collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord: collectionAuthorityRecord\n            }\n          }));\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n\n  const instructionsMatrix = [instructions];\n  const signersMatrix = [signers]; // instructionsMatrix.push(instructions);\n  // signersMatrix.push(signers);\n\n  console.log(\"instructionsMatrix: \", instructionsMatrix);\n  console.log(\"signersMatrix: \", signersMatrix);\n\n  try {\n    const txns = (await sendTransactions(candyMachine.program.provider.connection, candyMachine.program.provider.wallet, instructionsMatrix, signersMatrix, SequenceType.StopOnFailure, \"singleGossip\", () => {}, () => false, undefined, beforeTransactions, afterTransactions)).txs.map(t => t.txid);\n    mintTxn = txns[0];\n  } catch (e) {\n    console.log(e);\n  }\n\n  return {\n    mintTxId: mintTxn == null ? \"\" : mintTxn,\n    metadataKey: metadataAddressnew[metadataAddressnew.length - 1]\n  };\n};\nexport const shortenAddress = function (address) {\n  let chars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};","map":{"version":3,"names":["anchor","web3","require","splToken","MintLayout","TOKEN_PROGRAM_ID","Token","SystemProgram","SYSVAR_SLOT_HASHES_PUBKEY","sendTransactions","SequenceType","CIVIC","getAtaForMint","getNetworkExpire","getNetworkToken","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CANDY_MACHINE_PROGRAM","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","signatureStatuses","getSignatureStatuses","value","e","sleep","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","Provider","preflightCommitment","getProgramState","idl","Program","fetchIdl","program","state","account","candyMachine","fetch","getCurrentBlockTime","getSlot","getBlockTime","Date","getTime","currentBlockTime","all","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","timeDiff","goLiveDate","id","authority","isSoldOut","isActive","isPresale","isWhitelistOnly","treasury","wallet","tokenMint","gatekeeper","endSettings","whitelistMintSettings","hiddenSettings","price","retainAuthority","getFreezePdaState","freezePda","error","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","getFreezePda","getCollectionPDA","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","createAccountsForMint","Keypair","generate","userTokenAccountAddress","publicKey","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","span","lamports","getMinimumBalanceForRentExemption","createInitMintInstruction","createMintToInstruction","userTokenAccount","transaction","StopOnFailure","undefined","txs","mintOneToken","burnmint","beforeTransactions","afterTransactions","setupState","metadataAddressnew","mintTxn","toString","mintPublicKey","ownerPublicKey","destPublicKey","mintToken","associatedSourceTokenAddr","getAssociatedTokenAddress","associatedProgramId","associatedDestinationTokenAddr","receiverAccount","getAccountInfo","push","createTransferInstruction","count","userPayingAccountAddress","remainingAccounts","gatekeeperNetwork","expireOnUse","whitelistToken","mode","burnEveryTime","metadataAddress","masterEdition","candyMachineCreator","creatorBump","freezePdaState","freezeAta","map","rm","toBase58","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","collectionPDA","collectionPDAAccount","collectionData","collectionPda","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","t","mintTxId","metadataKey","shortenAddress","address","chars","slice","ms"],"sources":["D:/software/o5o BNB/o5o-staking-frontend/src/candy-machine-new.ts"],"sourcesContent":["/* eslint-disable */\r\nimport * as anchor from \"@project-serum/anchor\";\r\nconst web3 = require(\"@solana/web3.js\");\r\nconst splToken = require(\"@solana/spl-token\");\r\nimport { clusterApiUrl, Connection, PublicKey, Keypair, LAMPORTS_PER_SOL } from '@solana/web3.js';\r\n//import { createMint, getOrCreateAssociatedTokenAccount, mintTo, transfer } from '@solana/spl-token';\r\nimport { MintLayout, TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\r\nimport {\r\n  SystemProgram,\r\n  Transaction,\r\n  SYSVAR_SLOT_HASHES_PUBKEY,\r\n} from \"@solana/web3.js\";\r\nimport { sendSignedTransaction, sendTransactions, SequenceType } from \"./connection-new\";\r\n\r\nimport {\r\n  CIVIC,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from \"./utils\";\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\r\n);\r\n\r\ninterface CandyMachineState {\r\n  authority: anchor.web3.PublicKey;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  tokenMint: null | anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  isPresale: boolean;\r\n  isWhitelistOnly: boolean;\r\n  goLiveDate: null | anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | {\r\n    number: anchor.BN;\r\n    endSettingType: any;\r\n  };\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n  retainAuthority: boolean;\r\n}\r\n\r\nexport interface CandyMachineAccount {\r\n  id: anchor.web3.PublicKey;\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  queryStatus = false\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  const subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log(\"Rejecting for timeout...\");\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log(\"REST null result for\", txid, status);\r\n            } else if (status.err) {\r\n              console.log(\"REST error for\", txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log(\"REST no confirmations for\", txid, status);\r\n            } else {\r\n              console.log(\"REST confirmation for\", txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log(\"REST connection error: txid\", txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  try {\r\n    await connection.removeSignatureListener(subId);\r\n  } catch (e) {\r\n    // ignore\r\n  }\r\n  done = true;\r\n  console.log(\"Returning status\", status);\r\n  return status;\r\n};\r\n\r\nconst createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection\r\n): Promise<CandyMachineAccount> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: \"processed\",\r\n  });\r\n\r\n  const getProgramState = async (): Promise<[anchor.Program, any]> => {\r\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\r\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n    return [program, state];\r\n  };\r\n\r\n  const getCurrentBlockTime = async (): Promise<number> => {\r\n    const slot = await connection.getSlot();\r\n    return (await connection.getBlockTime(slot)) ?? new Date().getTime() / 1000;\r\n  };\r\n\r\n  const [[program, state], currentBlockTime] = await Promise.all([\r\n    getProgramState(),\r\n    getCurrentBlockTime(),\r\n  ]);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n  const timeDiff = new Date().getTime() / 1000 - currentBlockTime;\r\n  const goLiveDate =\r\n    state.data.goLiveDate !== null ? state.data.goLiveDate + timeDiff : null;\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      authority: state.authority,\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive: false,\r\n      isPresale: false,\r\n      isWhitelistOnly: false,\r\n      goLiveDate: state.data.goLiveDate,\r\n      treasury: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n      retainAuthority: state.data.retainAuthority,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getFreezePdaState = async (\r\n  program: anchor.Program,\r\n  freezePda: anchor.web3.PublicKey\r\n): Promise<any> => {\r\n  try {\r\n    const state: any = await program.account.freezePda.fetch(freezePda);\r\n    return state;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from(\"edition\"),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n  candyMachine: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from(\"candy_machine\"), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM\r\n  );\r\n};\r\n\r\nexport const getFreezePda = async (\r\n  candyMachine: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from(\"freeze\"), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM\r\n  );\r\n};\r\n\r\nexport const getCollectionPDA = async (\r\n  candyMachineAddress: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from(\"collection\"), candyMachineAddress.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM\r\n  );\r\n};\r\n\r\nexport interface CollectionData {\r\n  mint: anchor.web3.PublicKey;\r\n  candyMachine: anchor.web3.PublicKey;\r\n}\r\n\r\nexport const getCollectionAuthorityRecordPDA = async (\r\n  mint: anchor.web3.PublicKey,\r\n  newAuthority: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from(\"collection_authority\"),\r\n        newAuthority.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport type SetupState = {\r\n  mint: anchor.web3.Keypair;\r\n  userTokenAccount: anchor.web3.PublicKey;\r\n  transaction: string;\r\n};\r\n\r\nexport const createAccountsForMint = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey\r\n): Promise<SetupState> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const signers: anchor.web3.Keypair[] = [mint];\r\n  const instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports:\r\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n          MintLayout.span\r\n        ),\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      0,\r\n      payer,\r\n      payer\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n      userTokenAccountAddress,\r\n      payer,\r\n      payer,\r\n      mint.publicKey\r\n    ),\r\n    Token.createMintToInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      userTokenAccountAddress,\r\n      payer,\r\n      [],\r\n      1\r\n    ),\r\n  ];\r\n\r\n  return {\r\n    mint: mint,\r\n    userTokenAccount: userTokenAccountAddress,\r\n    transaction: (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        [instructions],\r\n        [signers],\r\n        SequenceType.StopOnFailure,\r\n        \"singleGossip\",\r\n        () => {},\r\n        () => false,\r\n        undefined,\r\n        [],\r\n        []\r\n      )\r\n    ).txs[0].txid,\r\n  };\r\n};\r\n\r\ntype MintResult = {\r\n  mintTxId: string;\r\n  metadataKey: anchor.web3.PublicKey;\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey,\r\n  burnmint:any,\r\n  beforeTransactions: Transaction[] = [],\r\n  afterTransactions: Transaction[] = [],\r\n  setupState?: SetupState\r\n): Promise<MintResult | null> => {  \r\n    let metadataAddressnew= [];\r\n    let mintTxn;\r\n    const instructions = [];\r\n    const signers: anchor.web3.Keypair[] = [];\r\n    console.log(\"burnmint: \", burnmint);\r\n    console.log(\"burnmint: \", burnmint.account.toString());\r\n    //var connection = new web3.Connection(web3.clusterApiUrl(process.env.ENVIORNMENT));\r\n    var from = candyMachine.program.provider.wallet;      \r\n    // console.log(\"fromWallet.publicKey: \", from.publicKey.toString());\r\n    // var toWallet = new web3.PublicKey(\"3e2cB5fjMhVq9kiHjTms6f4KFnZ639ftYcibHWR82vVk\");\r\n    // console.log(\"toWallet: \", toWallet.toString());\r\n    var mint = burnmint.account.toString();  //\"JE6DqgstABStSyKFD7j1ZEe9sgyhMuttVf5tHfHQVKAf\";\r\n    console.log(\"myMint: \", mint.toString());\r\n    \r\n    let connection = candyMachine.program.provider.connection;\r\n    console.log(\"connection: \", connection);\r\n    const mintPublicKey = new web3.PublicKey(mint);// Mint is the Mint address found in the NFT metadata\r\n    const ownerPublicKey = from.publicKey;\r\n    const destPublicKey = new web3.PublicKey(\"3e2cB5fjMhVq9kiHjTms6f4KFnZ639ftYcibHWR82vVk\");\r\n    var mintToken = new splToken.Token(\r\n      connection,\r\n      mintPublicKey,\r\n      splToken.TOKEN_PROGRAM_ID,\r\n      from\r\n    );\r\n    // GET SOURCE ASSOCIATED ACCOUNT\r\n    const associatedSourceTokenAddr = await Token.getAssociatedTokenAddress(\r\n      mintToken.associatedProgramId,\r\n      mintToken.programId,\r\n      mintPublicKey,\r\n      ownerPublicKey\r\n    );\r\n    // GET DESTINATION ASSOCIATED ACCOUNT\r\n    const associatedDestinationTokenAddr = await Token.getAssociatedTokenAddress(\r\n      mintToken.associatedProgramId,\r\n      mintToken.programId,\r\n      mintPublicKey,\r\n      destPublicKey\r\n    );\r\n    const receiverAccount = await connection.getAccountInfo(\r\n      associatedDestinationTokenAddr\r\n    );\r\n    //const instructions = [];\r\n    if (receiverAccount === null) {\r\n      console.log(\"receiver account is null!\");\r\n      instructions.push(\r\n        Token.createAssociatedTokenAccountInstruction(\r\n          mintToken.associatedProgramId,\r\n          mintToken.programId,\r\n          mintPublicKey,\r\n          associatedDestinationTokenAddr,\r\n          destPublicKey,\r\n          ownerPublicKey\r\n        )\r\n      );\r\n    }\r\n    instructions.push(\r\n      Token.createTransferInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        associatedSourceTokenAddr,\r\n        associatedDestinationTokenAddr,\r\n        ownerPublicKey,\r\n        [],\r\n        1\r\n      )\r\n    );\r\n    // This transaction is sending the tokens\r\n    // let transaction = new web3.Transaction();\r\n    // for (let i = 0; i < instructions.length; i++) {\r\n    //   transaction.add(instructions[i]);\r\n    // }\r\n    // const tokeninstructionsMatrix = [instructions];\r\n    // const tokensignersMatrix = [mintPublicKey];\r\n    //signers.push(mintPublicKey);\r\n    // if (transaction) {\r\n    //   console.log(\"candyMachine.program.provider.wallet:\", candyMachine.program.provider.wallet);      \r\n    // } else {\r\n    //   console.log(\"Transaction error: transaction data is null\");\r\n    // }    \r\n  for(let count=0; count <1;count++){    \r\n    const mint = setupState?.mint ?? anchor.web3.Keypair.generate();    \r\n    //const mint = anchor.web3.Keypair.generate();    \r\n    const userTokenAccountAddress = (\r\n      await getAtaForMint(mint.publicKey, payer)\r\n    )[0];\r\n    const userPayingAccountAddress = candyMachine.state.tokenMint\r\n      ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n      : payer;\r\n    const candyMachineAddress = candyMachine.id;\r\n    const remainingAccounts = [];\r\n    console.log(\"SetupState: \", setupState);\r\n    if (!setupState) {\r\n      if(count == 0){\r\n        signers.push(mint);\r\n      }\r\n      instructions.push(\r\n        ...[\r\n          anchor.web3.SystemProgram.createAccount({\r\n            fromPubkey: payer,\r\n            newAccountPubkey: mint.publicKey,\r\n            space: MintLayout.span,\r\n            lamports:\r\n              await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n                MintLayout.span\r\n              ),\r\n            programId: TOKEN_PROGRAM_ID,\r\n          }),\r\n          Token.createInitMintInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            mint.publicKey,\r\n            0,\r\n            payer,\r\n            payer\r\n          ),\r\n          createAssociatedTokenAccountInstruction(\r\n            userTokenAccountAddress,\r\n            payer,\r\n            payer,\r\n            mint.publicKey\r\n          ),\r\n          Token.createMintToInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            mint.publicKey,\r\n            userTokenAccountAddress,\r\n            payer,\r\n            [],\r\n            1\r\n          ),\r\n        ]\r\n      );\r\n    }\r\n\r\n    if (candyMachine.state.gatekeeper) {\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n          await getNetworkToken(\r\n            payer,\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork\r\n          )\r\n        )[0],\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n\r\n      if (candyMachine.state.gatekeeper.expireOnUse) {\r\n        remainingAccounts.push({\r\n          pubkey: CIVIC,\r\n          isWritable: false,\r\n          isSigner: false,\r\n        });\r\n        remainingAccounts.push({\r\n          pubkey: (\r\n            await getNetworkExpire(\r\n              candyMachine.state.gatekeeper.gatekeeperNetwork\r\n            )\r\n          )[0],\r\n          isWritable: false,\r\n          isSigner: false,\r\n        });\r\n      }\r\n    }\r\n    if (candyMachine.state.whitelistMintSettings) {\r\n      const mint = new anchor.web3.PublicKey(\r\n        candyMachine.state.whitelistMintSettings.mint\r\n      );\r\n\r\n      const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n      remainingAccounts.push({\r\n        pubkey: whitelistToken,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n\r\n      if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n        remainingAccounts.push({\r\n          pubkey: mint,\r\n          isWritable: true,\r\n          isSigner: false,\r\n        });\r\n        remainingAccounts.push({\r\n          pubkey: payer,\r\n          isWritable: false,\r\n          isSigner: true,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (candyMachine.state.tokenMint) {\r\n      remainingAccounts.push({\r\n        pubkey: userPayingAccountAddress,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: payer,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n    }\r\n    const metadataAddress = await getMetadata(mint.publicKey);\r\n    metadataAddressnew.push(metadataAddress);\r\n    const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n      candyMachineAddress\r\n    );\r\n\r\n    const freezePda = (await getFreezePda(candyMachineAddress))[0];\r\n    console.log(freezePda.toString());\r\n\r\n    const freezePdaState = await getFreezePdaState(\r\n      candyMachine.program,\r\n      freezePda\r\n    );\r\n\r\n    console.log(\"Freeze state: \");\r\n    console.log(freezePdaState);\r\n\r\n    if (freezePdaState != null) {\r\n      remainingAccounts.push({\r\n        pubkey: freezePda,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: userTokenAccountAddress,\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n      if (candyMachine.state.tokenMint != null) {\r\n        const freezeAta = (\r\n          await getAtaForMint(candyMachine.state.tokenMint, freezePda)\r\n        )[0];\r\n        remainingAccounts.push({\r\n          pubkey: freezeAta,\r\n          isWritable: true,\r\n          isSigner: false,\r\n        });\r\n      }\r\n    }\r\n\r\n    console.log(remainingAccounts.map((rm) => rm.pubkey.toBase58()));\r\n    instructions.push(\r\n      await candyMachine.program.instruction.mintNft(creatorBump, {\r\n        accounts: {\r\n          candyMachine: candyMachineAddress,\r\n          candyMachineCreator,\r\n          payer: payer,\r\n          wallet: candyMachine.state.treasury,\r\n          mint: mint.publicKey,\r\n          metadata: metadataAddress,\r\n          masterEdition,\r\n          mintAuthority: payer,\r\n          updateAuthority: payer,\r\n          tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n          tokenProgram: TOKEN_PROGRAM_ID,\r\n          systemProgram: SystemProgram.programId,\r\n          rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n          clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n          recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\r\n          instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n        },\r\n        remainingAccounts:\r\n          remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n      })\r\n    );\r\n\r\n    const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\r\n    const collectionPDAAccount =\r\n      await candyMachine.program.provider.connection.getAccountInfo(\r\n        collectionPDA\r\n      );\r\n\r\n    if (collectionPDAAccount && candyMachine.state.retainAuthority) {\r\n      try {\r\n        const collectionData =\r\n          (await candyMachine.program.account.collectionPda.fetch(\r\n            collectionPDA\r\n          )) as CollectionData;\r\n        console.log(collectionData);\r\n        const collectionMint = collectionData.mint;\r\n        const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\r\n          collectionMint,\r\n          collectionPDA\r\n        );\r\n        console.log(collectionMint);\r\n        if (collectionMint) {\r\n          const collectionMetadata = await getMetadata(collectionMint);\r\n          const collectionMasterEdition = await getMasterEdition(collectionMint);\r\n          console.log(\"Collection PDA: \", collectionPDA.toBase58());\r\n          console.log(\"Authority: \", candyMachine.state.authority.toBase58());\r\n          instructions.push(\r\n            await candyMachine.program.instruction.setCollectionDuringMint({\r\n              accounts: {\r\n                candyMachine: candyMachineAddress,\r\n                metadata: metadataAddress,\r\n                payer: payer,\r\n                collectionPda: collectionPDA,\r\n                tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n                instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n                collectionMint,\r\n                collectionMetadata,\r\n                collectionMasterEdition,\r\n                authority: candyMachine.state.authority,\r\n                collectionAuthorityRecord,\r\n              },\r\n            })\r\n          );\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n  }\r\n    const instructionsMatrix=[instructions];\r\n    const signersMatrix = [signers];\r\n    // instructionsMatrix.push(instructions);\r\n    // signersMatrix.push(signers);\r\n    \r\n    console.log(\"instructionsMatrix: \", instructionsMatrix);\r\n    console.log(\"signersMatrix: \", signersMatrix);\r\n\r\n    try {\r\n      const txns = (\r\n        await sendTransactions(\r\n          candyMachine.program.provider.connection,\r\n          candyMachine.program.provider.wallet,\r\n          instructionsMatrix,\r\n          signersMatrix,\r\n          SequenceType.StopOnFailure,\r\n          \"singleGossip\",\r\n          () => {},\r\n          () => false,\r\n          undefined,\r\n          beforeTransactions,\r\n          afterTransactions\r\n        )\r\n      ).txs.map((t) => t.txid);\r\n      mintTxn = txns[0];    \r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n\r\nreturn {\r\n  mintTxId: mintTxn == null?\"\":mintTxn,\r\n  metadataKey: metadataAddressnew[metadataAddressnew.length-1],\r\n};\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}