{"ast":null,"code":"import { nftGateBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { GuardMintSettingsMissingError } from '../errors.mjs';\nimport { createSerializerFromBeet } from '../../../types/Serializer.mjs';\n/**\n * The nftGate guard restricts minting to holders\n * of a specified NFT collection.\n *\n * This means the mint address of an NFT from this\n * collection must be passed when minting.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n *\n * @see {@link NftGateGuardMintSettings} for more\n * information on the mint settings of this guard.\n */\n\n/** @internal */\n\nconst nftGateGuardManifest = {\n  name: 'nftGate',\n  settingsBytes: 32,\n  settingsSerializer: createSerializerFromBeet(nftGateBeet),\n  mintSettingsParser: _ref => {\n    let {\n      metaplex,\n      mintSettings,\n      payer,\n      programs\n    } = _ref;\n\n    if (!mintSettings) {\n      throw new GuardMintSettingsMissingError('nftGate');\n    }\n\n    const tokenAccount = mintSettings.tokenAccount ?? metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintSettings.mint,\n      owner: payer.publicKey,\n      programs\n    });\n    const tokenMetadata = metaplex.nfts().pdas().metadata({\n      mint: mintSettings.mint,\n      programs\n    });\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts: [{\n        isSigner: false,\n        address: tokenAccount,\n        isWritable: false\n      }, {\n        isSigner: false,\n        address: tokenMetadata,\n        isWritable: false\n      }]\n    };\n  }\n};\nexport { nftGateGuardManifest };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineModule/guards/nftGate.ts"],"names":["nftGateGuardManifest","name","settingsBytes","settingsSerializer","createSerializerFromBeet","nftGateBeet","mintSettingsParser","metaplex","mintSettings","payer","programs","GuardMintSettingsMissingError","tokenAccount","tokens","pdas","associatedTokenAccount","mint","owner","publicKey","tokenMetadata","nfts","metadata","arguments","Buffer","from","remainingAccounts","isSigner","address","isWritable"],"mappings":";;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA8BA;;AACO,MAAMA,oBAGZ,GAAG;EACFC,IAAI,EAAE,SADJ;EAEFC,aAAa,EAAE,EAFb;EAGFC,kBAAkB,EAAEC,wBAAwB,CAACC,WAAD,CAH1C;EAIFC,kBAAkB,EAAE,QAAiD;IAAA,IAAhD;MAAEC,QAAF;MAAYC,YAAZ;MAA0BC,KAA1B;MAAiCC;IAAjC,CAAgD;;IACnE,IAAI,CAACF,YAAL,EAAmB;MACjB,MAAM,IAAIG,6BAAJ,CAAkC,SAAlC,CAAN;IACF;;IAEA,MAAMC,YAAY,GAChBJ,YAAY,CAACI,YAAbJ,IACAD,QAAQ,CAACM,MAATN,GAAkBO,IAAlBP,GAAyBQ,sBAAzBR,CAAgD;MAC9CS,IAAI,EAAER,YAAY,CAACQ,IAD2B;MAE9CC,KAAK,EAAER,KAAK,CAACS,SAFiC;MAG9CR;IAH8C,CAAhDH,CAFF;IAQA,MAAMY,aAAa,GAAGZ,QAAQ,CAACa,IAATb,GAAgBO,IAAhBP,GAAuBc,QAAvBd,CAAgC;MACpDS,IAAI,EAAER,YAAY,CAACQ,IADiC;MAEpDN;IAFoD,CAAhCH,CAAtB;IAKA,OAAO;MACLe,SAAS,EAAEC,MAAM,CAACC,IAAPD,CAAY,EAAZA,CADN;MAELE,iBAAiB,EAAE,CACjB;QACEC,QAAQ,EAAE,KADZ;QAEEC,OAAO,EAAEf,YAFX;QAGEgB,UAAU,EAAE;MAHd,CADiB,EAMjB;QACEF,QAAQ,EAAE,KADZ;QAEEC,OAAO,EAAER,aAFX;QAGES,UAAU,EAAE;MAHd,CANiB;IAFd,CAAP;EAeF;AArCE,CAHG","sourcesContent":["import { nftGateBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { GuardMintSettingsMissingError } from '../errors';\nimport { CandyGuardManifest } from './core';\nimport { createSerializerFromBeet, PublicKey } from '@/types';\n\n/**\n * The nftGate guard restricts minting to holders\n * of a specified NFT collection.\n *\n * This means the mint address of an NFT from this\n * collection must be passed when minting.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n *\n * @see {@link NftGateGuardMintSettings} for more\n * information on the mint settings of this guard.\n */\nexport type NftGateGuardSettings = {\n  /** The mint address of the required NFT Collection. */\n  requiredCollection: PublicKey;\n};\n\n/**\n * The settings for the nftGate guard that could\n * be provided when minting from the Candy Machine.\n *\n * @see {@link NftGateGuardSettings} for more\n * information on the nftGate guard itself.\n */\nexport type NftGateGuardMintSettings = {\n  /**\n   * The mint address of an NFT from the required\n   * collection that belongs to the payer.\n   */\n  mint: PublicKey;\n\n  /**\n   * The token account linking the NFT with its owner.\n   *\n   * @defaultValue\n   * Defaults to the associated token address using the\n   * mint address of the NFT and the payer's address.\n   */\n  tokenAccount?: PublicKey;\n};\n\n/** @internal */\nexport const nftGateGuardManifest: CandyGuardManifest<\n  NftGateGuardSettings,\n  NftGateGuardMintSettings\n> = {\n  name: 'nftGate',\n  settingsBytes: 32,\n  settingsSerializer: createSerializerFromBeet(nftGateBeet),\n  mintSettingsParser: ({ metaplex, mintSettings, payer, programs }) => {\n    if (!mintSettings) {\n      throw new GuardMintSettingsMissingError('nftGate');\n    }\n\n    const tokenAccount =\n      mintSettings.tokenAccount ??\n      metaplex.tokens().pdas().associatedTokenAccount({\n        mint: mintSettings.mint,\n        owner: payer.publicKey,\n        programs,\n      });\n\n    const tokenMetadata = metaplex.nfts().pdas().metadata({\n      mint: mintSettings.mint,\n      programs,\n    });\n\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts: [\n        {\n          isSigner: false,\n          address: tokenAccount,\n          isWritable: false,\n        },\n        {\n          isSigner: false,\n          address: tokenMetadata,\n          isWritable: false,\n        },\n      ],\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}