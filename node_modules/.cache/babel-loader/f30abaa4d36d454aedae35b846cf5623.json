{"ast":null,"code":"import { struct, u16 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\nexport const MAX_FEE_BASIS_POINTS = 10000;\nexport const ONE_IN_BASIS_POINTS = MAX_FEE_BASIS_POINTS;\n/** Buffer layout for de/serializing a transfer fee */\n\nexport function transferFeeLayout(property) {\n  return struct([u64('epoch'), u64('maximumFee'), u16('transferFeeBasisPoints')], property);\n}\n/** Buffer layout for de/serializing a transfer fee config extension */\n\nexport const TransferFeeConfigLayout = struct([publicKey('transferFeeConfigAuthority'), publicKey('withdrawWithheldAuthority'), u64('withheldAmount'), transferFeeLayout('olderTransferFee'), transferFeeLayout('newerTransferFee')]);\nexport const TRANSFER_FEE_CONFIG_SIZE = TransferFeeConfigLayout.span;\n/** Buffer layout for de/serializing */\n\nexport const TransferFeeAmountLayout = struct([u64('withheldAmount')]);\nexport const TRANSFER_FEE_AMOUNT_SIZE = TransferFeeAmountLayout.span;\nexport function getTransferFeeConfig(mint) {\n  const extensionData = getExtensionData(ExtensionType.TransferFeeConfig, mint.tlvData);\n\n  if (extensionData !== null) {\n    return TransferFeeConfigLayout.decode(extensionData);\n  } else {\n    return null;\n  }\n}\nexport function getTransferFeeAmount(account) {\n  const extensionData = getExtensionData(ExtensionType.TransferFeeAmount, account.tlvData);\n\n  if (extensionData !== null) {\n    return TransferFeeAmountLayout.decode(extensionData);\n  } else {\n    return null;\n  }\n}","map":{"version":3,"sources":["../../../../src/extensions/transferFee/state.ts"],"names":[],"mappings":"AACA,SAAS,MAAT,EAAiB,GAAjB,QAA4B,uBAA5B;AACA,SAAS,SAAT,EAAoB,GAApB,QAA+B,6BAA/B;AAIA,SAAS,aAAT,EAAwB,gBAAxB,QAAgD,qBAAhD;AAEA,OAAO,MAAM,oBAAoB,GAAG,KAA7B;AACP,OAAO,MAAM,mBAAmB,GAAW,oBAApC;AA6BP;;AACA,OAAM,SAAU,iBAAV,CAA4B,QAA5B,EAA6C;EAC/C,OAAO,MAAM,CAAc,CAAC,GAAG,CAAC,OAAD,CAAJ,EAAe,GAAG,CAAC,YAAD,CAAlB,EAAkC,GAAG,CAAC,wBAAD,CAArC,CAAd,EAAgF,QAAhF,CAAb;AACH;AAED;;AACA,OAAO,MAAM,uBAAuB,GAAG,MAAM,CAAoB,CAC7D,SAAS,CAAC,4BAAD,CADoD,EAE7D,SAAS,CAAC,2BAAD,CAFoD,EAG7D,GAAG,CAAC,gBAAD,CAH0D,EAI7D,iBAAiB,CAAC,kBAAD,CAJ4C,EAK7D,iBAAiB,CAAC,kBAAD,CAL4C,CAApB,CAAtC;AAQP,OAAO,MAAM,wBAAwB,GAAG,uBAAuB,CAAC,IAAzD;AAOP;;AACA,OAAO,MAAM,uBAAuB,GAAG,MAAM,CAAoB,CAAC,GAAG,CAAC,gBAAD,CAAJ,CAApB,CAAtC;AACP,OAAO,MAAM,wBAAwB,GAAG,uBAAuB,CAAC,IAAzD;AAEP,OAAM,SAAU,oBAAV,CAA+B,IAA/B,EAAyC;EAC3C,MAAM,aAAa,GAAG,gBAAgB,CAAC,aAAa,CAAC,iBAAf,EAAkC,IAAI,CAAC,OAAvC,CAAtC;;EACA,IAAI,aAAa,KAAK,IAAtB,EAA4B;IACxB,OAAO,uBAAuB,CAAC,MAAxB,CAA+B,aAA/B,CAAP;EACH,CAFD,MAEO;IACH,OAAO,IAAP;EACH;AACJ;AAED,OAAM,SAAU,oBAAV,CAA+B,OAA/B,EAA+C;EACjD,MAAM,aAAa,GAAG,gBAAgB,CAAC,aAAa,CAAC,iBAAf,EAAkC,OAAO,CAAC,OAA1C,CAAtC;;EACA,IAAI,aAAa,KAAK,IAAtB,EAA4B;IACxB,OAAO,uBAAuB,CAAC,MAAxB,CAA+B,aAA/B,CAAP;EACH,CAFD,MAEO;IACH,OAAO,IAAP;EACH;AACJ","sourceRoot":"","sourcesContent":["import { struct, u16 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { ExtensionType, getExtensionData } from '../extensionType.js';\nexport const MAX_FEE_BASIS_POINTS = 10000;\nexport const ONE_IN_BASIS_POINTS = MAX_FEE_BASIS_POINTS;\n/** Buffer layout for de/serializing a transfer fee */\nexport function transferFeeLayout(property) {\n    return struct([u64('epoch'), u64('maximumFee'), u16('transferFeeBasisPoints')], property);\n}\n/** Buffer layout for de/serializing a transfer fee config extension */\nexport const TransferFeeConfigLayout = struct([\n    publicKey('transferFeeConfigAuthority'),\n    publicKey('withdrawWithheldAuthority'),\n    u64('withheldAmount'),\n    transferFeeLayout('olderTransferFee'),\n    transferFeeLayout('newerTransferFee'),\n]);\nexport const TRANSFER_FEE_CONFIG_SIZE = TransferFeeConfigLayout.span;\n/** Buffer layout for de/serializing */\nexport const TransferFeeAmountLayout = struct([u64('withheldAmount')]);\nexport const TRANSFER_FEE_AMOUNT_SIZE = TransferFeeAmountLayout.span;\nexport function getTransferFeeConfig(mint) {\n    const extensionData = getExtensionData(ExtensionType.TransferFeeConfig, mint.tlvData);\n    if (extensionData !== null) {\n        return TransferFeeConfigLayout.decode(extensionData);\n    }\n    else {\n        return null;\n    }\n}\nexport function getTransferFeeAmount(account) {\n    const extensionData = getExtensionData(ExtensionType.TransferFeeAmount, account.tlvData);\n    if (extensionData !== null) {\n        return TransferFeeAmountLayout.decode(extensionData);\n    }\n    else {\n        return null;\n    }\n}\n//# sourceMappingURL=state.js.map"]},"metadata":{},"sourceType":"module"}