{"ast":null,"code":"import { isOriginalEditionAccount } from '../accounts.mjs';\nimport assert from '../../../utils/assert.mjs';\nimport { toBigNumber, toOptionBigNumber } from '../../../types/BigNumber.mjs';\n/** @group Models */\n\n/** @group Model Helpers */\n\nconst isNftEdition = value => typeof value === 'object' && value.model === 'nftEdition';\n/** @group Model Helpers */\n\n\nfunction assertNftEdition(value) {\n  assert(isNftEdition(value), `Expected NftEdition model`);\n}\n/** @group Model Helpers */\n\n\nconst toNftEdition = account => isOriginalEditionAccount(account) ? toNftOriginalEdition(account) : toNftPrintEdition(account);\n/** @group Models */\n\n/** @group Model Helpers */\n\n\nconst isNftOriginalEdition = value => isNftEdition(value) && value.isOriginal;\n/** @group Model Helpers */\n\n\nfunction assertNftOriginalEdition(value) {\n  assert(isNftOriginalEdition(value), `Expected NftOriginalEdition model`);\n}\n/** @group Model Helpers */\n\n\nconst toNftOriginalEdition = account => ({\n  model: 'nftEdition',\n  isOriginal: true,\n  address: account.publicKey,\n  supply: toBigNumber(account.data.supply),\n  maxSupply: toOptionBigNumber(account.data.maxSupply)\n});\n/** @group Models */\n\n/** @group Model Helpers */\n\n\nconst isNftPrintEdition = value => isNftEdition(value) && !value.isOriginal;\n/** @group Model Helpers */\n\n\nfunction assertNftPrintEdition(value) {\n  assert(isNftPrintEdition(value), `Expected NftPrintEdition model`);\n}\n/** @group Model Helpers */\n\n\nconst toNftPrintEdition = account => ({\n  model: 'nftEdition',\n  isOriginal: false,\n  address: account.publicKey,\n  parent: account.data.parent,\n  number: toBigNumber(account.data.edition)\n});\n\nexport { assertNftEdition, assertNftOriginalEdition, assertNftPrintEdition, isNftEdition, isNftOriginalEdition, isNftPrintEdition, toNftEdition, toNftOriginalEdition, toNftPrintEdition };","map":{"version":3,"sources":["../../../../../src/plugins/nftModule/models/NftEdition.ts"],"names":["isNftEdition","value","model","assertNftEdition","assert","toNftEdition","account","isOriginalEditionAccount","toNftOriginalEdition","toNftPrintEdition","isNftOriginalEdition","isOriginal","assertNftOriginalEdition","address","publicKey","supply","toBigNumber","data","maxSupply","toOptionBigNumber","isNftPrintEdition","assertNftPrintEdition","parent","number","edition"],"mappings":";;;AAUA;;AAGA;;AACaA,MAAAA,YAAY,GAAIC,KAAU,IACrC,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAND,KAAgB,YADlCD;AAGb;;;AACO,SAASG,gBAAT,CAA0BF,KAA1B,EAAmE;EACxEG,MAAM,CAACJ,YAAY,CAACC,KAAD,CAAb,EAAuB,2BAAvB,CAANG;AACF;AAEA;;;MACaC,YAAY,GACvBC,OAAsC,IAEtCC,wBAAwB,CAACD,OAAD,CAAxBC,GACIC,oBAAoB,CAACF,OAAD,CADxBC,GAEIE,iBAAiB,CAACH,OAAD,C;AAEvB;;AA0BA;;;AACaI,MAAAA,oBAAoB,GAAIT,KAAU,IAC7CD,YAAY,CAACC,KAAD,CAAZD,IAAuBC,KAAK,CAACU,UADlBD;AAGb;;;AACO,SAASE,wBAAT,CACLX,KADK,EAEgC;EACrCG,MAAM,CAACM,oBAAoB,CAACT,KAAD,CAArB,EAA+B,mCAA/B,CAANG;AACF;AAEA;;;AACaI,MAAAA,oBAAoB,GAC/BF,OAA+B,KACP;EACxBJ,KAAK,EAAE,YADiB;EAExBS,UAAU,EAAE,IAFY;EAGxBE,OAAO,EAAEP,OAAO,CAACQ,SAHO;EAIxBC,MAAM,EAAEC,WAAW,CAACV,OAAO,CAACW,IAARX,CAAaS,MAAd,CAJK;EAKxBG,SAAS,EAAEC,iBAAiB,CAACb,OAAO,CAACW,IAARX,CAAaY,SAAd;AALJ,CADO,CADpBV;AAUb;;AA6BA;;;AACaY,MAAAA,iBAAiB,GAAInB,KAAU,IAC1CD,YAAY,CAACC,KAAD,CAAZD,IAAuB,CAACC,KAAK,CAACU,UADnBS;AAGb;;;AACO,SAASC,qBAAT,CACLpB,KADK,EAE6B;EAClCG,MAAM,CAACgB,iBAAiB,CAACnB,KAAD,CAAlB,EAA4B,gCAA5B,CAANG;AACF;AAEA;;;AACaK,MAAAA,iBAAiB,GAC5BH,OAA4B,KACP;EACrBJ,KAAK,EAAE,YADc;EAErBS,UAAU,EAAE,KAFS;EAGrBE,OAAO,EAAEP,OAAO,CAACQ,SAHI;EAIrBQ,MAAM,EAAEhB,OAAO,CAACW,IAARX,CAAagB,MAJA;EAKrBC,MAAM,EAAEP,WAAW,CAACV,OAAO,CAACW,IAARX,CAAakB,OAAd;AALE,CADO,CADjBf","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  isOriginalEditionAccount,\n  OriginalEditionAccount,\n  OriginalOrPrintEditionAccount,\n  PrintEditionAccount,\n} from '../accounts';\nimport { BigNumber, toBigNumber, toOptionBigNumber } from '@/types';\nimport { assert, Option } from '@/utils';\n\n/** @group Models */\nexport type NftEdition = NftOriginalEdition | NftPrintEdition;\n\n/** @group Model Helpers */\nexport const isNftEdition = (value: any): value is NftEdition =>\n  typeof value === 'object' && value.model === 'nftEdition';\n\n/** @group Model Helpers */\nexport function assertNftEdition(value: any): asserts value is NftEdition {\n  assert(isNftEdition(value), `Expected NftEdition model`);\n}\n\n/** @group Model Helpers */\nexport const toNftEdition = (\n  account: OriginalOrPrintEditionAccount\n): NftEdition =>\n  isOriginalEditionAccount(account)\n    ? toNftOriginalEdition(account)\n    : toNftPrintEdition(account as PrintEditionAccount);\n\n/** @group Models */\nexport type NftOriginalEdition = {\n  /** A model identifier to distinguish models in the SDK. */\n  readonly model: 'nftEdition';\n\n  /**\n   * Whether or not this is an original edition.\n   * This field helps distinguish between the `NftOriginalEdition`\n   * and the `NftPrintEdition` models.\n   */\n  readonly isOriginal: true;\n\n  /** The address of the edition account. */\n  readonly address: PublicKey;\n\n  /** The current supply of printed editions. */\n  readonly supply: BigNumber;\n\n  /**\n   * The maximum supply of printed editions.\n   * When this is `null`, an unlimited amount of editions\n   * can be printed from the original edition.\n   */\n  readonly maxSupply: Option<BigNumber>;\n};\n\n/** @group Model Helpers */\nexport const isNftOriginalEdition = (value: any): value is NftOriginalEdition =>\n  isNftEdition(value) && value.isOriginal;\n\n/** @group Model Helpers */\nexport function assertNftOriginalEdition(\n  value: any\n): asserts value is NftOriginalEdition {\n  assert(isNftOriginalEdition(value), `Expected NftOriginalEdition model`);\n}\n\n/** @group Model Helpers */\nexport const toNftOriginalEdition = (\n  account: OriginalEditionAccount\n): NftOriginalEdition => ({\n  model: 'nftEdition',\n  isOriginal: true,\n  address: account.publicKey,\n  supply: toBigNumber(account.data.supply),\n  maxSupply: toOptionBigNumber(account.data.maxSupply),\n});\n\n/** @group Models */\nexport type NftPrintEdition = {\n  /** A model identifier to distinguish models in the SDK. */\n  readonly model: 'nftEdition';\n\n  /**\n   * Whether or not this is an original edition.\n   * This field helps distinguish between the `NftOriginalEdition`\n   * and the `NftPrintEdition` models.\n   */\n  readonly isOriginal: false;\n\n  /** The address of the edition account. */\n  readonly address: PublicKey;\n\n  /** The address of the original edition account this was printed from. */\n  readonly parent: PublicKey;\n\n  /**\n   * The number of this printed edition.\n   *\n   * For instance, `1` means this was the very first edition printed\n   * from the original edition. This is a key difference between\n   * printed editions and SFTs as SFTs do not keep track of any\n   * ordering.\n   */\n  readonly number: BigNumber;\n};\n\n/** @group Model Helpers */\nexport const isNftPrintEdition = (value: any): value is NftPrintEdition =>\n  isNftEdition(value) && !value.isOriginal;\n\n/** @group Model Helpers */\nexport function assertNftPrintEdition(\n  value: any\n): asserts value is NftPrintEdition {\n  assert(isNftPrintEdition(value), `Expected NftPrintEdition model`);\n}\n\n/** @group Model Helpers */\nexport const toNftPrintEdition = (\n  account: PrintEditionAccount\n): NftPrintEdition => ({\n  model: 'nftEdition',\n  isOriginal: false,\n  address: account.publicKey,\n  parent: account.data.parent,\n  number: toBigNumber(account.data.edition),\n});\n"]},"metadata":{},"sourceType":"module"}