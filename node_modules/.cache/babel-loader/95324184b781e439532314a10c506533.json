{"ast":null,"code":"import { defineProperty as _defineProperty } from '../_virtual/_rollupPluginBabelHelpers.mjs';\nimport { MetaplexError } from './MetaplexError.mjs';\n/** @group Errors */\n\nclass SdkError extends MetaplexError {\n  constructor(message, cause) {\n    super(message, 'sdk', undefined, cause);\n\n    _defineProperty(this, \"name\", 'SdkError');\n  }\n\n}\n/** @group Errors */\n\n\nclass OperationHandlerMissingError extends SdkError {\n  constructor(operationKey) {\n    const message = `No operation handler was registered for the [${operationKey}] operation. ` + `Did you forget to register it? You may do this by using: ` + `\"metaplex.operations().register(operation, operationHandler)\".`;\n    super(message);\n\n    _defineProperty(this, \"name\", 'OperationHandlerMissingError');\n  }\n\n}\n/** @group Errors */\n\n\nclass DriverNotProvidedError extends SdkError {\n  constructor(driver) {\n    const message = `The SDK tried to access the driver [${driver}] but was not provided. ` + `Make sure the driver is registered by using the \"setDriver(myDriver)\" method.`;\n    super(message);\n\n    _defineProperty(this, \"name\", 'DriverNotProvidedError');\n  }\n\n}\n/** @group Errors */\n\n\nclass UnexpectedCurrencyError extends SdkError {\n  constructor(actual, expected) {\n    const message = `Expected currency [${expected}] but got [${actual}]. ` + `Ensure the provided Amount or Currency is of the expected type.`;\n    super(message);\n\n    _defineProperty(this, \"name\", 'UnexpectedCurrencyError');\n\n    this.actual = actual;\n    this.expected = expected;\n  }\n\n}\n/** @group Errors */\n\n\nclass CurrencyMismatchError extends SdkError {\n  constructor(left, right, operation) {\n    const wrappedOperation = operation ? ` [${operation}]` : '';\n    const message = `The SDK tried to execute an operation${wrappedOperation} on two different currencies: ` + `${left.symbol} and ${right.symbol}. ` + `Provide both amounts in the same currency to perform this operation.`;\n    super(message);\n\n    _defineProperty(this, \"name\", 'CurrencyMismatchError');\n\n    this.left = left;\n    this.right = right;\n    this.operation = operation;\n  }\n\n}\n/** @group Errors */\n\n\nclass InvalidJsonVariableError extends SdkError {\n  constructor(cause) {\n    super('The provided JSON variable could not be parsed into a string.', cause);\n\n    _defineProperty(this, \"name\", 'InvalidJsonVariableError');\n  }\n\n}\n/** @group Errors */\n\n\nclass InvalidJsonStringError extends SdkError {\n  constructor(cause) {\n    super('The provided string could not be parsed into a JSON variable.', cause);\n\n    _defineProperty(this, \"name\", 'InvalidJsonStringError');\n  }\n\n}\n/** @group Errors */\n\n\nclass OperationUnauthorizedForGuestsError extends SdkError {\n  constructor(operation) {\n    const message = `Trying to access the [${operation}] operation as a guest. ` + `Ensure your wallet is connected using the identity driver. ` + `For instance, by using \"metaplex.use(walletAdapterIdentity(wallet))\" or ` + `\"metaplex.use(keypairIdentity(keypair))\".`;\n    super(message);\n\n    _defineProperty(this, \"name\", 'OperationUnauthorizedForGuestsError');\n  }\n\n}\n/** @group Errors */\n\n\nclass UninitializedWalletAdapterError extends SdkError {\n  constructor() {\n    const message = `The current wallet adapter is not initialized. ` + 'You likely have selected a wallet adapter but forgot to initialize it. ' + 'You may do this by running the following asynchronous method: \"wallet.connect();\".';\n    super(message);\n\n    _defineProperty(this, \"name\", 'UninitializedWalletAdapterError');\n  }\n\n}\n/** @group Errors */\n\n\nclass OperationNotSupportedByWalletAdapterError extends SdkError {\n  constructor(operation) {\n    const message = `The current wallet adapter does not support the following operation: [${operation}]. ` + 'Ensure your wallet is connected using a compatible wallet adapter.';\n    super(message);\n\n    _defineProperty(this, \"name\", 'OperationNotSupportedByWalletAdapterError');\n  }\n\n}\n/** @group Errors */\n\n\nclass TaskIsAlreadyRunningError extends SdkError {\n  constructor() {\n    const message = `Trying to re-run a task that hasn't completed yet. ` + `Ensure the task has completed using \"await\" before trying to run it again.`;\n    super(message);\n\n    _defineProperty(this, \"name\", 'TaskIsAlreadyRunningError');\n  }\n\n}\n/** @group Errors */\n\n\nclass AssetNotFoundError extends SdkError {\n  constructor(location) {\n    super(`The asset at [${location}] could not be found.`);\n\n    _defineProperty(this, \"name\", 'AssetNotFoundError');\n  }\n\n}\n/** @group Errors */\n\n\nclass AccountNotFoundError extends SdkError {\n  constructor(address, accountType, solution) {\n    const message = (accountType ? `The account of type [${accountType}] was not found` : 'No account was found') + ` at the provided address [${address.toString()}].` + (solution ? ` ${solution}` : '');\n    super(message);\n\n    _defineProperty(this, \"name\", 'AccountNotFoundError');\n  }\n\n}\n/** @group Errors */\n\n\nclass UnexpectedAccountError extends SdkError {\n  constructor(address, expectedType, cause) {\n    const message = `The account at the provided address [${address.toString()}] ` + `is not of the expected type [${expectedType}].`;\n    super(message, cause);\n\n    _defineProperty(this, \"name\", 'UnexpectedAccountError');\n  }\n\n}\n/** @group Errors */\n\n\nclass UnexpectedTypeError extends SdkError {\n  constructor(variable, actualType, expectedType) {\n    const message = `Expected variable [${variable}] to be ` + `of type [${expectedType}] but got [${actualType}].`;\n    super(message);\n\n    _defineProperty(this, \"name\", 'UnexpectedTypeError');\n  }\n\n}\n/** @group Errors */\n\n\nclass ExpectedSignerError extends SdkError {\n  constructor(variable, actualType, solution) {\n    const message = `Expected variable [${variable}] to be of type [Signer] but got [${actualType}]. ` + (solution ?? 'Please check that you are providing the variable as a signer. ' + 'Note that, it may be allowed to provide a non-signer variable for certain use cases but not this one.');\n    super(message);\n\n    _defineProperty(this, \"name\", 'ExpectedSignerError');\n  }\n\n}\n/** @group Errors */\n\n\nclass ProgramNotRecognizedError extends SdkError {\n  constructor(nameOrAddress, cluster) {\n    const isName = typeof nameOrAddress === 'string';\n    const toString = isName ? nameOrAddress : nameOrAddress.toString();\n    const message = `The provided program ${isName ? 'name' : 'address'} [${toString}] ` + `is not recognized in the [${cluster}] cluster.` + 'Did you forget to register this program? ' + 'If so, you may use \"metaplex.programs().register(myProgram)\" to fix this.';\n    super(message);\n\n    _defineProperty(this, \"name\", 'ProgramNotRecognizedError');\n\n    this.nameOrAddress = nameOrAddress;\n    this.cluster = cluster;\n  }\n\n}\n/** @group Errors */\n\n\nclass NoInstructionsToSendError extends SdkError {\n  constructor(operation, solution) {\n    const message = `The input provided to the [${operation}] resulted ` + `in a Transaction containing no Instructions. ` + (solution ?? `Ensure that the provided input has an effect on the operation. ` + `This typically happens when trying to update an account with ` + `the same data it already contains.`);\n    super(message);\n\n    _defineProperty(this, \"name\", 'NoInstructionsToSendError');\n  }\n\n}\n/** @group Errors */\n\n\nclass FailedToSerializeDataError extends SdkError {\n  constructor(dataDescription, cause) {\n    const message = `The received data could not be serialized as a [${dataDescription}].`;\n    super(message, cause);\n\n    _defineProperty(this, \"name\", 'FailedToSerializeDataError');\n  }\n\n}\n/** @group Errors */\n\n\nclass FailedToDeserializeDataError extends SdkError {\n  constructor(dataDescription, cause) {\n    const message = `The received serialized data could not be deserialized to a [${dataDescription}].`;\n    super(message, cause);\n\n    _defineProperty(this, \"name\", 'FailedToDeserializeDataError');\n  }\n\n}\n/** @group Errors */\n\n\nclass MissingInputDataError extends SdkError {\n  constructor(missingParameters, solution) {\n    const message = `Some parameters are missing from the provided input object. ` + 'Please provide the following missing parameters ' + `[${missingParameters.join(', ')}].` + (solution ? ` ${solution}` : '');\n    super(message);\n\n    _defineProperty(this, \"name\", 'MissingInputDataError');\n  }\n\n}\n/** @group Errors */\n\n\nclass NotYetImplementedError extends SdkError {\n  constructor() {\n    const message = `This feature is not yet implemented. Please check back later.`;\n    super(message);\n\n    _defineProperty(this, \"name\", 'NotYetImplementedError');\n  }\n\n}\n/** @group Errors */\n\n\nclass UnreachableCaseError extends SdkError {\n  constructor(value) {\n    const message = `A switch statement is not handling the provided case [${value}]. ` + `Check your inputs or raise an issue to have ensure all cases are handled properly.`;\n    super(message);\n\n    _defineProperty(this, \"name\", 'UnreachableCaseError');\n  }\n\n}\n\nexport { AccountNotFoundError, AssetNotFoundError, CurrencyMismatchError, DriverNotProvidedError, ExpectedSignerError, FailedToDeserializeDataError, FailedToSerializeDataError, InvalidJsonStringError, InvalidJsonVariableError, MissingInputDataError, NoInstructionsToSendError, NotYetImplementedError, OperationHandlerMissingError, OperationNotSupportedByWalletAdapterError, OperationUnauthorizedForGuestsError, ProgramNotRecognizedError, SdkError, TaskIsAlreadyRunningError, UnexpectedAccountError, UnexpectedCurrencyError, UnexpectedTypeError, UninitializedWalletAdapterError, UnreachableCaseError };","map":{"version":3,"sources":["../../../src/errors/SdkError.ts"],"names":["SdkError","MetaplexError","constructor","message","cause","undefined","OperationHandlerMissingError","operationKey","DriverNotProvidedError","driver","UnexpectedCurrencyError","actual","expected","CurrencyMismatchError","left","right","operation","wrappedOperation","symbol","InvalidJsonVariableError","InvalidJsonStringError","OperationUnauthorizedForGuestsError","UninitializedWalletAdapterError","OperationNotSupportedByWalletAdapterError","TaskIsAlreadyRunningError","AssetNotFoundError","location","AccountNotFoundError","address","accountType","solution","toString","UnexpectedAccountError","expectedType","UnexpectedTypeError","variable","actualType","ExpectedSignerError","ProgramNotRecognizedError","nameOrAddress","cluster","isName","NoInstructionsToSendError","FailedToSerializeDataError","dataDescription","FailedToDeserializeDataError","MissingInputDataError","missingParameters","join","NotYetImplementedError","UnreachableCaseError","value"],"mappings":"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","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { MetaplexError } from './MetaplexError';\nimport { Cluster, Currency } from '@/types';\n\n/** @group Errors */\nexport class SdkError extends MetaplexError {\n  readonly name: string = 'SdkError';\n  constructor(message: string, cause?: Error) {\n    super(message, 'sdk', undefined, cause);\n  }\n}\n\n/** @group Errors */\nexport class OperationHandlerMissingError extends SdkError {\n  readonly name: string = 'OperationHandlerMissingError';\n  constructor(operationKey: string) {\n    const message =\n      `No operation handler was registered for the [${operationKey}] operation. ` +\n      `Did you forget to register it? You may do this by using: ` +\n      `\"metaplex.operations().register(operation, operationHandler)\".`;\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class DriverNotProvidedError extends SdkError {\n  readonly name: string = 'DriverNotProvidedError';\n  constructor(driver: string) {\n    const message =\n      `The SDK tried to access the driver [${driver}] but was not provided. ` +\n      `Make sure the driver is registered by using the \"setDriver(myDriver)\" method.`;\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class UnexpectedCurrencyError extends SdkError {\n  readonly name: string = 'UnexpectedCurrencyError';\n  readonly actual: Currency;\n  readonly expected: Currency;\n  constructor(actual: Currency, expected: Currency) {\n    const message =\n      `Expected currency [${expected}] but got [${actual}]. ` +\n      `Ensure the provided Amount or Currency is of the expected type.`;\n    super(message);\n    this.actual = actual;\n    this.expected = expected;\n  }\n}\n\n/** @group Errors */\nexport class CurrencyMismatchError extends SdkError {\n  readonly name: string = 'CurrencyMismatchError';\n  readonly left: Currency;\n  readonly right: Currency;\n  readonly operation?: string;\n  constructor(left: Currency, right: Currency, operation?: string) {\n    const wrappedOperation = operation ? ` [${operation}]` : '';\n    const message =\n      `The SDK tried to execute an operation${wrappedOperation} on two different currencies: ` +\n      `${left.symbol} and ${right.symbol}. ` +\n      `Provide both amounts in the same currency to perform this operation.`;\n    super(message);\n    this.left = left;\n    this.right = right;\n    this.operation = operation;\n  }\n}\n\n/** @group Errors */\nexport class InvalidJsonVariableError extends SdkError {\n  readonly name: string = 'InvalidJsonVariableError';\n  constructor(cause?: Error) {\n    super(\n      'The provided JSON variable could not be parsed into a string.',\n      cause\n    );\n  }\n}\n\n/** @group Errors */\nexport class InvalidJsonStringError extends SdkError {\n  readonly name: string = 'InvalidJsonStringError';\n  constructor(cause?: Error) {\n    super(\n      'The provided string could not be parsed into a JSON variable.',\n      cause\n    );\n  }\n}\n\n/** @group Errors */\nexport class OperationUnauthorizedForGuestsError extends SdkError {\n  readonly name: string = 'OperationUnauthorizedForGuestsError';\n  constructor(operation: string) {\n    const message =\n      `Trying to access the [${operation}] operation as a guest. ` +\n      `Ensure your wallet is connected using the identity driver. ` +\n      `For instance, by using \"metaplex.use(walletAdapterIdentity(wallet))\" or ` +\n      `\"metaplex.use(keypairIdentity(keypair))\".`;\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class UninitializedWalletAdapterError extends SdkError {\n  readonly name: string = 'UninitializedWalletAdapterError';\n  constructor() {\n    const message =\n      `The current wallet adapter is not initialized. ` +\n      'You likely have selected a wallet adapter but forgot to initialize it. ' +\n      'You may do this by running the following asynchronous method: \"wallet.connect();\".';\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class OperationNotSupportedByWalletAdapterError extends SdkError {\n  readonly name: string = 'OperationNotSupportedByWalletAdapterError';\n  constructor(operation: string) {\n    const message =\n      `The current wallet adapter does not support the following operation: [${operation}]. ` +\n      'Ensure your wallet is connected using a compatible wallet adapter.';\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class TaskIsAlreadyRunningError extends SdkError {\n  readonly name: string = 'TaskIsAlreadyRunningError';\n  constructor() {\n    const message =\n      `Trying to re-run a task that hasn't completed yet. ` +\n      `Ensure the task has completed using \"await\" before trying to run it again.`;\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class AssetNotFoundError extends SdkError {\n  readonly name: string = 'AssetNotFoundError';\n  constructor(location: string) {\n    super(`The asset at [${location}] could not be found.`);\n  }\n}\n\n/** @group Errors */\nexport class AccountNotFoundError extends SdkError {\n  readonly name: string = 'AccountNotFoundError';\n  constructor(address: PublicKey, accountType?: string, solution?: string) {\n    const message =\n      (accountType\n        ? `The account of type [${accountType}] was not found`\n        : 'No account was found') +\n      ` at the provided address [${address.toString()}].` +\n      (solution ? ` ${solution}` : '');\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class UnexpectedAccountError extends SdkError {\n  readonly name: string = 'UnexpectedAccountError';\n  constructor(address: PublicKey, expectedType: string, cause?: Error) {\n    const message =\n      `The account at the provided address [${address.toString()}] ` +\n      `is not of the expected type [${expectedType}].`;\n    super(message, cause);\n  }\n}\n\n/** @group Errors */\nexport class UnexpectedTypeError extends SdkError {\n  readonly name: string = 'UnexpectedTypeError';\n  constructor(variable: string, actualType: string, expectedType: string) {\n    const message =\n      `Expected variable [${variable}] to be ` +\n      `of type [${expectedType}] but got [${actualType}].`;\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class ExpectedSignerError extends SdkError {\n  readonly name: string = 'ExpectedSignerError';\n  constructor(variable: string, actualType: string, solution?: string) {\n    const message =\n      `Expected variable [${variable}] to be of type [Signer] but got [${actualType}]. ` +\n      (solution ??\n        'Please check that you are providing the variable as a signer. ' +\n          'Note that, it may be allowed to provide a non-signer variable for certain use cases but not this one.');\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class ProgramNotRecognizedError extends SdkError {\n  readonly name: string = 'ProgramNotRecognizedError';\n  readonly nameOrAddress: string | PublicKey;\n  readonly cluster: Cluster;\n  constructor(nameOrAddress: string | PublicKey, cluster: Cluster) {\n    const isName = typeof nameOrAddress === 'string';\n    const toString = isName ? nameOrAddress : nameOrAddress.toString();\n    const message =\n      `The provided program ${isName ? 'name' : 'address'} [${toString}] ` +\n      `is not recognized in the [${cluster}] cluster.` +\n      'Did you forget to register this program? ' +\n      'If so, you may use \"metaplex.programs().register(myProgram)\" to fix this.';\n    super(message);\n    this.nameOrAddress = nameOrAddress;\n    this.cluster = cluster;\n  }\n}\n\n/** @group Errors */\nexport class NoInstructionsToSendError extends SdkError {\n  readonly name: string = 'NoInstructionsToSendError';\n  constructor(operation: string, solution?: string) {\n    const message =\n      `The input provided to the [${operation}] resulted ` +\n      `in a Transaction containing no Instructions. ` +\n      (solution ??\n        `Ensure that the provided input has an effect on the operation. ` +\n          `This typically happens when trying to update an account with ` +\n          `the same data it already contains.`);\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class FailedToSerializeDataError extends SdkError {\n  readonly name: string = 'FailedToSerializeDataError';\n  constructor(dataDescription: string, cause?: Error) {\n    const message = `The received data could not be serialized as a [${dataDescription}].`;\n    super(message, cause);\n  }\n}\n\n/** @group Errors */\nexport class FailedToDeserializeDataError extends SdkError {\n  readonly name: string = 'FailedToDeserializeDataError';\n  constructor(dataDescription: string, cause?: Error) {\n    const message = `The received serialized data could not be deserialized to a [${dataDescription}].`;\n    super(message, cause);\n  }\n}\n\n/** @group Errors */\nexport class MissingInputDataError extends SdkError {\n  readonly name: string = 'MissingInputDataError';\n  constructor(missingParameters: string[], solution?: string) {\n    const message =\n      `Some parameters are missing from the provided input object. ` +\n      'Please provide the following missing parameters ' +\n      `[${missingParameters.join(', ')}].` +\n      (solution ? ` ${solution}` : '');\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class NotYetImplementedError extends SdkError {\n  readonly name: string = 'NotYetImplementedError';\n  constructor() {\n    const message = `This feature is not yet implemented. Please check back later.`;\n    super(message);\n  }\n}\n\n/** @group Errors */\nexport class UnreachableCaseError extends SdkError {\n  readonly name: string = 'UnreachableCaseError';\n  constructor(value: never) {\n    const message =\n      `A switch statement is not handling the provided case [${value}]. ` +\n      `Check your inputs or raise an issue to have ensure all cases are handled properly.`;\n    super(message);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}