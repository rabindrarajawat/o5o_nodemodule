{"ast":null,"code":"import { Connection } from \"@solana/web3.js\";\nimport { web3 } from \"@project-serum/anchor\";\nimport { Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\nconst doNFTTransfer = async function (mint, from, to) {\n  let connection = new Connection(\"https://api.devnet.solana.com\");\n  const mintPublicKey = new web3.PublicKey(mint); // Mint is the Mint address found in the NFT metadata\n\n  const ownerPublicKey = from.publicKey;\n  const destPublicKey = new web3.PublicKey(\"MY_APPS_WALLET_ADDRESS\");\n  const mintToken = new Token(connection, mintPublicKey, TOKEN_PROGRAM_ID, from.payer); // GET SOURCE ASSOCIATED ACCOUNT\n\n  const associatedSourceTokenAddr = await Token.getAssociatedTokenAddress(mintToken.associatedProgramId, mintToken.programId, mintPublicKey, ownerPublicKey); // GET DESTINATION ASSOCIATED ACCOUNT\n\n  const associatedDestinationTokenAddr = await Token.getAssociatedTokenAddress(mintToken.associatedProgramId, mintToken.programId, mintPublicKey, destPublicKey);\n  const receiverAccount = await connection.getAccountInfo(associatedDestinationTokenAddr);\n  const instructions = [];\n\n  if (receiverAccount === null) {\n    console.log(\"receiver account is null!\");\n    instructions.push(Token.createAssociatedTokenAccountInstruction(mintToken.associatedProgramId, mintToken.programId, mintPublicKey, associatedDestinationTokenAddr, destPublicKey, ownerPublicKey));\n  }\n\n  instructions.push(Token.createTransferInstruction(TOKEN_PROGRAM_ID, associatedSourceTokenAddr, associatedDestinationTokenAddr, ownerPublicKey, [], 1)); // This transaction is sending the tokens\n\n  let transaction = null;\n\n  for (let i = 0; i < instructions.length; i++) {\n    transaction = new web3.Transaction().add(instructions[i]);\n  }\n\n  if (transaction) {\n    let response = await from.signTransaction(transaction);\n    console.log(\"response: \", response);\n  } else {\n    console.log(\"Transaction error: transaction data is null\");\n  }\n};\n\nexport default doNFTTransfer;","map":{"version":3,"names":["Connection","web3","Token","TOKEN_PROGRAM_ID","doNFTTransfer","mint","from","to","connection","mintPublicKey","PublicKey","ownerPublicKey","publicKey","destPublicKey","mintToken","payer","associatedSourceTokenAddr","getAssociatedTokenAddress","associatedProgramId","programId","associatedDestinationTokenAddr","receiverAccount","getAccountInfo","instructions","console","log","push","createAssociatedTokenAccountInstruction","createTransferInstruction","transaction","i","length","Transaction","add","response","signTransaction"],"sources":["D:/software/o5o BNB/o5o-staking-frontend/src/hooks/use-nft-mint-burn.ts"],"sourcesContent":["import { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { web3 } from \"@project-serum/anchor\";\r\nimport {\r\n  Token,\r\n  TOKEN_PROGRAM_ID,\r\n  ASSOCIATED_TOKEN_PROGRAM_ID,\r\n} from \"@solana/spl-token\";\r\n\r\n\r\nconst doNFTTransfer = async function (mint: string, from: anchor.Wallet, to: string) {\r\n  let connection = new Connection(\"https://api.devnet.solana.com\");\r\n\r\n  const mintPublicKey = new web3.PublicKey(mint);// Mint is the Mint address found in the NFT metadata\r\n  const ownerPublicKey = from.publicKey;\r\n  const destPublicKey = new web3.PublicKey(\"MY_APPS_WALLET_ADDRESS\");\r\n\r\n  const mintToken = new Token(\r\n    connection,\r\n    mintPublicKey,\r\n    TOKEN_PROGRAM_ID,\r\n    from.payer\r\n  );\r\n\r\n  // GET SOURCE ASSOCIATED ACCOUNT\r\n  const associatedSourceTokenAddr = await Token.getAssociatedTokenAddress(\r\n    mintToken.associatedProgramId,\r\n    mintToken.programId,\r\n    mintPublicKey,\r\n    ownerPublicKey\r\n  );\r\n\r\n  // GET DESTINATION ASSOCIATED ACCOUNT\r\n  const associatedDestinationTokenAddr = await Token.getAssociatedTokenAddress(\r\n    mintToken.associatedProgramId,\r\n    mintToken.programId,\r\n    mintPublicKey,\r\n    destPublicKey\r\n  );\r\n\r\n  const receiverAccount = await connection.getAccountInfo(\r\n    associatedDestinationTokenAddr\r\n  );\r\n\r\n  const instructions = [];\r\n\r\n  if (receiverAccount === null) {\r\n    console.log(\"receiver account is null!\");\r\n    instructions.push(\r\n      Token.createAssociatedTokenAccountInstruction(\r\n        mintToken.associatedProgramId,\r\n        mintToken.programId,\r\n        mintPublicKey,\r\n        associatedDestinationTokenAddr,\r\n        destPublicKey,\r\n        ownerPublicKey\r\n      )\r\n    );\r\n  }\r\n\r\n  instructions.push(\r\n    Token.createTransferInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      associatedSourceTokenAddr,\r\n      associatedDestinationTokenAddr,\r\n      ownerPublicKey,\r\n      [],\r\n      1\r\n    )\r\n  );\r\n\r\n  // This transaction is sending the tokens\r\n  let transaction = null;\r\n  for (let i = 0; i < instructions.length; i++) {\r\n    transaction = new web3.Transaction().add(instructions[i]);\r\n  }\r\n\r\n  if (transaction) {\r\n    let response = await from.signTransaction(transaction);\r\n\r\n    console.log(\"response: \", response);\r\n  } else {\r\n    console.log(\"Transaction error: transaction data is null\");\r\n  }\r\n};\r\n\r\nexport default doNFTTransfer;"],"mappings":"AAAA,SAASA,UAAT,QAAsC,iBAAtC;AAEA,SAASC,IAAT,QAAqB,uBAArB;AACA,SACEC,KADF,EAEEC,gBAFF,QAIO,mBAJP;;AAOA,MAAMC,aAAa,GAAG,gBAAgBC,IAAhB,EAA8BC,IAA9B,EAAmDC,EAAnD,EAA+D;EACnF,IAAIC,UAAU,GAAG,IAAIR,UAAJ,CAAe,+BAAf,CAAjB;EAEA,MAAMS,aAAa,GAAG,IAAIR,IAAI,CAACS,SAAT,CAAmBL,IAAnB,CAAtB,CAHmF,CAGpC;;EAC/C,MAAMM,cAAc,GAAGL,IAAI,CAACM,SAA5B;EACA,MAAMC,aAAa,GAAG,IAAIZ,IAAI,CAACS,SAAT,CAAmB,wBAAnB,CAAtB;EAEA,MAAMI,SAAS,GAAG,IAAIZ,KAAJ,CAChBM,UADgB,EAEhBC,aAFgB,EAGhBN,gBAHgB,EAIhBG,IAAI,CAACS,KAJW,CAAlB,CAPmF,CAcnF;;EACA,MAAMC,yBAAyB,GAAG,MAAMd,KAAK,CAACe,yBAAN,CACtCH,SAAS,CAACI,mBAD4B,EAEtCJ,SAAS,CAACK,SAF4B,EAGtCV,aAHsC,EAItCE,cAJsC,CAAxC,CAfmF,CAsBnF;;EACA,MAAMS,8BAA8B,GAAG,MAAMlB,KAAK,CAACe,yBAAN,CAC3CH,SAAS,CAACI,mBADiC,EAE3CJ,SAAS,CAACK,SAFiC,EAG3CV,aAH2C,EAI3CI,aAJ2C,CAA7C;EAOA,MAAMQ,eAAe,GAAG,MAAMb,UAAU,CAACc,cAAX,CAC5BF,8BAD4B,CAA9B;EAIA,MAAMG,YAAY,GAAG,EAArB;;EAEA,IAAIF,eAAe,KAAK,IAAxB,EAA8B;IAC5BG,OAAO,CAACC,GAAR,CAAY,2BAAZ;IACAF,YAAY,CAACG,IAAb,CACExB,KAAK,CAACyB,uCAAN,CACEb,SAAS,CAACI,mBADZ,EAEEJ,SAAS,CAACK,SAFZ,EAGEV,aAHF,EAIEW,8BAJF,EAKEP,aALF,EAMEF,cANF,CADF;EAUD;;EAEDY,YAAY,CAACG,IAAb,CACExB,KAAK,CAAC0B,yBAAN,CACEzB,gBADF,EAEEa,yBAFF,EAGEI,8BAHF,EAIET,cAJF,EAKE,EALF,EAME,CANF,CADF,EAlDmF,CA6DnF;;EACA,IAAIkB,WAAW,GAAG,IAAlB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,YAAY,CAACQ,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;IAC5CD,WAAW,GAAG,IAAI5B,IAAI,CAAC+B,WAAT,GAAuBC,GAAvB,CAA2BV,YAAY,CAACO,CAAD,CAAvC,CAAd;EACD;;EAED,IAAID,WAAJ,EAAiB;IACf,IAAIK,QAAQ,GAAG,MAAM5B,IAAI,CAAC6B,eAAL,CAAqBN,WAArB,CAArB;IAEAL,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BS,QAA1B;EACD,CAJD,MAIO;IACLV,OAAO,CAACC,GAAR,CAAY,6CAAZ;EACD;AACF,CA1ED;;AA4EA,eAAerB,aAAf"},"metadata":{},"sourceType":"module"}