{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeInitializeAccount3InstructionUnchecked = exports.decodeInitializeAccount3Instruction = exports.createInitializeAccount3Instruction = exports.initializeAccount3InstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst types_js_1 = require(\"./types.js\");\n\nexports.initializeAccount3InstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_utils_1.publicKey)('owner')]);\n/**\n * Construct an InitializeAccount3 instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     New account's owner/multisignature\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createInitializeAccount3Instruction(account, mint, owner) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_js_1.TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = Buffer.alloc(exports.initializeAccount3InstructionData.span);\n  exports.initializeAccount3InstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InitializeAccount3,\n    owner\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createInitializeAccount3Instruction = createInitializeAccount3Instruction;\n/**\n * Decode an InitializeAccount3 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeInitializeAccount3Instruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializeAccount3InstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint\n    },\n    data\n  } = decodeInitializeAccount3InstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.InitializeAccount3) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account || !mint) throw new errors_js_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      mint\n    },\n    data\n  };\n}\n\nexports.decodeInitializeAccount3Instruction = decodeInitializeAccount3Instruction;\n/**\n * Decode an InitializeAccount3 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeInitializeAccount3InstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, mint],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      mint\n    },\n    data: exports.initializeAccount3InstructionData.decode(data)\n  };\n}\n\nexports.decodeInitializeAccount3InstructionUnchecked = decodeInitializeAccount3InstructionUnchecked;","map":{"version":3,"sources":["../../../src/instructions/initializeAccount3.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,MAAA,qBAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAMA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAOa,OAAA,CAAA,iCAAA,GAAoC,CAAA,GAAA,eAAA,CAAA,MAAA,EAA0C,CACvF,CAAA,GAAA,eAAA,CAAA,EAAA,EAAG,aAAH,CADuF,EAEvF,CAAA,GAAA,qBAAA,CAAA,SAAA,EAAU,OAAV,CAFuF,CAA1C,CAApC;AAKb;;;;;;;;;AASG;;AACH,SAAgB,mCAAhB,CACI,OADJ,EAEI,IAFJ,EAGI,KAHJ,EAIgC;EAAA,IAA5B,SAA4B,uEAAhB,cAAA,CAAA,gBAAgB;EAE5B,MAAM,IAAI,GAAG,CACT;IAAE,MAAM,EAAE,OAAV;IAAmB,QAAQ,EAAE,KAA7B;IAAoC,UAAU,EAAE;EAAhD,CADS,EAET;IAAE,MAAM,EAAE,IAAV;IAAgB,QAAQ,EAAE,KAA1B;IAAiC,UAAU,EAAE;EAA7C,CAFS,CAAb;EAIA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,OAAA,CAAA,iCAAA,CAAkC,IAA/C,CAAb;EACA,OAAA,CAAA,iCAAA,CAAkC,MAAlC,CAAyC;IAAE,WAAW,EAAE,UAAA,CAAA,gBAAA,CAAiB,kBAAhC;IAAoD;EAApD,CAAzC,EAAsG,IAAtG;EACA,OAAO,IAAI,SAAA,CAAA,sBAAJ,CAA2B;IAAE,IAAF;IAAQ,SAAR;IAAmB;EAAnB,CAA3B,CAAP;AACH;;AAbD,OAAA,CAAA,mCAAA,GAAA,mCAAA;AA4BA;;;;;;;AAOG;;AACH,SAAgB,mCAAhB,CACI,WADJ,EAEgC;EAAA,IAA5B,SAA4B,uEAAhB,cAAA,CAAA,gBAAgB;EAE5B,IAAI,CAAC,WAAW,CAAC,SAAZ,CAAsB,MAAtB,CAA6B,SAA7B,CAAL,EAA8C,MAAM,IAAI,WAAA,CAAA,mCAAJ,EAAN;EAC9C,IAAI,WAAW,CAAC,IAAZ,CAAiB,MAAjB,KAA4B,OAAA,CAAA,iCAAA,CAAkC,IAAlE,EACI,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN;EAEJ,MAAM;IACF,IAAI,EAAE;MAAE,OAAF;MAAW;IAAX,CADJ;IAEF;EAFE,IAGF,4CAA4C,CAAC,WAAD,CAHhD;EAIA,IAAI,IAAI,CAAC,WAAL,KAAqB,UAAA,CAAA,gBAAA,CAAiB,kBAA1C,EAA8D,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN;EAC9D,IAAI,CAAC,OAAD,IAAY,CAAC,IAAjB,EAAuB,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN,CAXK,CAa5B;;EAEA,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF,OADE;MAEF;IAFE,CAFH;IAMH;EANG,CAAP;AAQH;;AAzBD,OAAA,CAAA,mCAAA,GAAA,mCAAA;AAwCA;;;;;;AAMG;;AACH,SAAgB,4CAAhB,OAIyB;EAAA,IAJoC;IACzD,SADyD;IAEzD,IAAI,EAAE,CAAC,OAAD,EAAU,IAAV,CAFmD;IAGzD;EAHyD,CAIpC;EACrB,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF,OADE;MAEF;IAFE,CAFH;IAMH,IAAI,EAAE,OAAA,CAAA,iCAAA,CAAkC,MAAlC,CAAyC,IAAzC;EANH,CAAP;AAQH;;AAbD,OAAA,CAAA,4CAAA,GAAA,4CAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeInitializeAccount3InstructionUnchecked = exports.decodeInitializeAccount3Instruction = exports.createInitializeAccount3Instruction = exports.initializeAccount3InstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst types_js_1 = require(\"./types.js\");\nexports.initializeAccount3InstructionData = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('instruction'),\n    (0, buffer_layout_utils_1.publicKey)('owner'),\n]);\n/**\n * Construct an InitializeAccount3 instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     New account's owner/multisignature\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeAccount3Instruction(account, mint, owner, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.alloc(exports.initializeAccount3InstructionData.span);\n    exports.initializeAccount3InstructionData.encode({ instruction: types_js_1.TokenInstruction.InitializeAccount3, owner }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createInitializeAccount3Instruction = createInitializeAccount3Instruction;\n/**\n * Decode an InitializeAccount3 instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeInitializeAccount3Instruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.initializeAccount3InstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { account, mint }, data, } = decodeInitializeAccount3InstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.InitializeAccount3)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!account || !mint)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n        },\n        data,\n    };\n}\nexports.decodeInitializeAccount3Instruction = decodeInitializeAccount3Instruction;\n/**\n * Decode an InitializeAccount3 instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeInitializeAccount3InstructionUnchecked({ programId, keys: [account, mint], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n        },\n        data: exports.initializeAccount3InstructionData.decode(data),\n    };\n}\nexports.decodeInitializeAccount3InstructionUnchecked = decodeInitializeAccount3InstructionUnchecked;\n//# sourceMappingURL=initializeAccount3.js.map"]},"metadata":{},"sourceType":"script"}