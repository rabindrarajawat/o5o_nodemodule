{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSolanaGateway = exports.chainImplementation = void 0;\n\nconst solana_gateway_ts_1 = require(\"@identity.com/solana-gateway-ts\");\n\nconst common_gateway_react_1 = require(\"@civic/common-gateway-react\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst prove_solana_wallet_1 = require(\"@identity.com/prove-solana-wallet\");\n\nconst config_1 = require(\"./config\");\n\nconst version_1 = require(\"./version\");\n\nconst util_1 = require(\"./util\");\n\nconst chainImplementation = _ref => {\n  let {\n    clusterUrl: clusterUrl,\n    cluster: cluster,\n    publicKey: publicKey,\n    signTransaction: signTransaction,\n    handleTransaction: handleTransaction,\n    gatekeeperNetworkAddress: gatekeeperNetworkAddress,\n    stage: stage\n  } = _ref;\n  common_gateway_react_1.logger.debug('Connecting to cluster with commitment recent', clusterUrl);\n  const connection = new web3_js_1.Connection(clusterUrl, 'processed');\n\n  const requiresSignature = transaction => {\n    return transaction.signatures.find(sig => sig.publicKey.equals(publicKey)) !== undefined;\n  };\n\n  const submitTransaction = async transaction => {\n    const txSig = await connection.sendRawTransaction(transaction.serialize()); // TODO re-enable when https://github.com/solana-labs/solana/issues/26198 is fixed\n    // const blockhash = await connection.getLatestBlockhash();\n    // await connection.confirmTransaction({ ...blockhash, signature: txSig });\n\n    await connection.confirmTransaction(txSig);\n  };\n\n  return {\n    dAppHandlesTransactions: !!handleTransaction,\n    addOnGatewayTokenChangeListener: async (gatewayToken, tokenDidChange) => {\n      return Promise.resolve((0, solana_gateway_ts_1.onGatewayTokenChange)(connection, new web3_js_1.PublicKey(gatewayToken.identifier), token => {\n        tokenDidChange({\n          issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n          gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n          owner: token.owner.toBase58(),\n          state: common_gateway_react_1.State[token.state],\n          identifier: token.publicKey.toBase58(),\n          expiryTime: token.expiryTime\n        });\n      }));\n    },\n    removeOnGatewayTokenChangeListener: listenerId => {\n      (0, solana_gateway_ts_1.removeAccountChangeListener)(connection, listenerId);\n    },\n    findGatewayToken: async () => {\n      const onChainToken = await (0, solana_gateway_ts_1.findGatewayToken)(connection, publicKey, new web3_js_1.PublicKey(gatekeeperNetworkAddress));\n      if (!onChainToken) return undefined;\n      return {\n        issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n        gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n        owner: onChainToken.owner.toBase58(),\n        state: common_gateway_react_1.State[onChainToken.state],\n        identifier: onChainToken.publicKey.toBase58(),\n        expiryTime: onChainToken.expiryTime\n      };\n    },\n    proveWalletOwnership: async () => {\n      const result = await (0, prove_solana_wallet_1.prove)(publicKey, signTransaction, (0, config_1.makeConfig)(clusterUrl, cluster));\n      return result.toString('base64');\n    },\n    handleUserSignedTransaction: async partiallySignedTx => {\n      try {\n        common_gateway_react_1.logger.debug('handleUserSignedTransaction, user-provided handleTransaction', !!handleTransaction);\n        const transaction = (0, util_1.createSolanaTransactionFromBase64)(partiallySignedTx);\n\n        if (handleTransaction) {\n          await handleTransaction(transaction);\n          return;\n        }\n\n        let transactionToSend = transaction;\n\n        if (requiresSignature(transaction)) {\n          transactionToSend = await signTransaction(transaction);\n        }\n\n        await submitTransaction(transactionToSend);\n      } catch (error) {\n        if (error instanceof web3_js_1.SendTransactionError) {\n          common_gateway_react_1.logger.debug('error is instance of SendTransactionError', error);\n          common_gateway_react_1.logger.debug(`parseSolanaErrorCode(${error.message}) = ${(0, util_1.parseSolanaErrorCode)(error.message)}`);\n          throw new common_gateway_react_1.ChainError(error.message, (0, util_1.parseSolanaErrorCode)(error.message));\n        }\n\n        common_gateway_react_1.logger.debug('error is not an instance of SendTransactionError, rethrowing', error);\n        throw error;\n      }\n    },\n    chainType: common_gateway_react_1.ChainType.SOLANA,\n    httpConfig: {\n      baseUrl: (0, config_1.getGatekeeperEndpoint)(stage),\n      queryParams: {\n        network: cluster\n      },\n      headers: {\n        'X-Civic-Client': version_1.VERSION\n      }\n    }\n  };\n};\n\nexports.chainImplementation = chainImplementation;\n\nconst useSolanaGateway = () => {\n  const {\n    gatewayToken: gatewayToken,\n    gatewayTokenTransaction: gatewayTokenTransaction\n  } = (0, common_gateway_react_1.useGateway)();\n  const solanaGatewayToken = gatewayToken ? {\n    issuingGatekeeper: new web3_js_1.PublicKey(gatewayToken.issuingGatekeeper),\n    gatekeeperNetworkAddress: new web3_js_1.PublicKey(gatewayToken.gatekeeperNetworkAddress),\n    owner: new web3_js_1.PublicKey(gatewayToken.owner),\n    state: gatewayToken.state,\n    publicKey: new web3_js_1.PublicKey(gatewayToken.identifier),\n    expiryTime: gatewayToken.expiryTime\n  } : undefined;\n  const solanaGatewayTokenTransaction = gatewayTokenTransaction ? (0, util_1.createSolanaTransactionFromBase64)(gatewayTokenTransaction) : undefined;\n  return Object.assign(Object.assign({}, (0, common_gateway_react_1.useGateway)()), {\n    gatewayToken: solanaGatewayToken,\n    gatewayTokenTransaction: solanaGatewayTokenTransaction\n  });\n};\n\nexports.useSolanaGateway = useSolanaGateway;","map":{"version":3,"names":["Object","defineProperty","exports","value","useSolanaGateway","chainImplementation","solana_gateway_ts_1","require","common_gateway_react_1","web3_js_1","prove_solana_wallet_1","config_1","version_1","util_1","clusterUrl","cluster","publicKey","signTransaction","handleTransaction","gatekeeperNetworkAddress","stage","logger","debug","connection","Connection","requiresSignature","transaction","signatures","find","sig","equals","undefined","submitTransaction","txSig","sendRawTransaction","serialize","confirmTransaction","dAppHandlesTransactions","addOnGatewayTokenChangeListener","gatewayToken","tokenDidChange","Promise","resolve","onGatewayTokenChange","PublicKey","identifier","token","issuingGatekeeper","toBase58","gatekeeperNetwork","owner","state","State","expiryTime","removeOnGatewayTokenChangeListener","listenerId","removeAccountChangeListener","findGatewayToken","onChainToken","proveWalletOwnership","result","prove","makeConfig","toString","handleUserSignedTransaction","partiallySignedTx","createSolanaTransactionFromBase64","transactionToSend","error","SendTransactionError","message","parseSolanaErrorCode","ChainError","chainType","ChainType","SOLANA","httpConfig","baseUrl","getGatekeeperEndpoint","queryParams","network","headers","VERSION","gatewayTokenTransaction","useGateway","solanaGatewayToken","solanaGatewayTokenTransaction","assign"],"sources":["D:/software/o5o BNB/o5o-staking-frontend/node_modules/@civic/solana-gateway-react/dist/esm/chainImplementation.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useSolanaGateway = exports.chainImplementation = void 0;\nconst solana_gateway_ts_1 = require(\"@identity.com/solana-gateway-ts\");\nconst common_gateway_react_1 = require(\"@civic/common-gateway-react\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst prove_solana_wallet_1 = require(\"@identity.com/prove-solana-wallet\");\nconst config_1 = require(\"./config\");\nconst version_1 = require(\"./version\");\nconst util_1 = require(\"./util\");\nconst chainImplementation = ({ clusterUrl, cluster, publicKey, signTransaction, handleTransaction, gatekeeperNetworkAddress, stage, }) => {\n    common_gateway_react_1.logger.debug('Connecting to cluster with commitment recent', clusterUrl);\n    const connection = new web3_js_1.Connection(clusterUrl, 'processed');\n    const requiresSignature = (transaction) => {\n        return transaction.signatures.find((sig) => sig.publicKey.equals(publicKey)) !== undefined;\n    };\n    const submitTransaction = async (transaction) => {\n        const txSig = await connection.sendRawTransaction(transaction.serialize());\n        // TODO re-enable when https://github.com/solana-labs/solana/issues/26198 is fixed\n        // const blockhash = await connection.getLatestBlockhash();\n        // await connection.confirmTransaction({ ...blockhash, signature: txSig });\n        await connection.confirmTransaction(txSig);\n    };\n    return {\n        dAppHandlesTransactions: !!handleTransaction,\n        addOnGatewayTokenChangeListener: async (gatewayToken, tokenDidChange) => {\n            return Promise.resolve((0, solana_gateway_ts_1.onGatewayTokenChange)(connection, new web3_js_1.PublicKey(gatewayToken.identifier), (token) => {\n                tokenDidChange({\n                    issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n                    gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n                    owner: token.owner.toBase58(),\n                    state: common_gateway_react_1.State[token.state],\n                    identifier: token.publicKey.toBase58(),\n                    expiryTime: token.expiryTime,\n                });\n            }));\n        },\n        removeOnGatewayTokenChangeListener: (listenerId) => {\n            (0, solana_gateway_ts_1.removeAccountChangeListener)(connection, listenerId);\n        },\n        findGatewayToken: async () => {\n            const onChainToken = await (0, solana_gateway_ts_1.findGatewayToken)(connection, publicKey, new web3_js_1.PublicKey(gatekeeperNetworkAddress));\n            if (!onChainToken)\n                return undefined;\n            return {\n                issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n                gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n                owner: onChainToken.owner.toBase58(),\n                state: common_gateway_react_1.State[onChainToken.state],\n                identifier: onChainToken.publicKey.toBase58(),\n                expiryTime: onChainToken.expiryTime,\n            };\n        },\n        proveWalletOwnership: async () => {\n            const result = await (0, prove_solana_wallet_1.prove)(publicKey, signTransaction, (0, config_1.makeConfig)(clusterUrl, cluster));\n            return result.toString('base64');\n        },\n        handleUserSignedTransaction: async (partiallySignedTx) => {\n            try {\n                common_gateway_react_1.logger.debug('handleUserSignedTransaction, user-provided handleTransaction', !!handleTransaction);\n                const transaction = (0, util_1.createSolanaTransactionFromBase64)(partiallySignedTx);\n                if (handleTransaction) {\n                    await handleTransaction(transaction);\n                    return;\n                }\n                let transactionToSend = transaction;\n                if (requiresSignature(transaction)) {\n                    transactionToSend = await signTransaction(transaction);\n                }\n                await submitTransaction(transactionToSend);\n            }\n            catch (error) {\n                if (error instanceof web3_js_1.SendTransactionError) {\n                    common_gateway_react_1.logger.debug('error is instance of SendTransactionError', error);\n                    common_gateway_react_1.logger.debug(`parseSolanaErrorCode(${error.message}) = ${(0, util_1.parseSolanaErrorCode)(error.message)}`);\n                    throw new common_gateway_react_1.ChainError(error.message, (0, util_1.parseSolanaErrorCode)(error.message));\n                }\n                common_gateway_react_1.logger.debug('error is not an instance of SendTransactionError, rethrowing', error);\n                throw error;\n            }\n        },\n        chainType: common_gateway_react_1.ChainType.SOLANA,\n        httpConfig: {\n            baseUrl: (0, config_1.getGatekeeperEndpoint)(stage),\n            queryParams: { network: cluster },\n            headers: { 'X-Civic-Client': version_1.VERSION },\n        },\n    };\n};\nexports.chainImplementation = chainImplementation;\nconst useSolanaGateway = () => {\n    const { gatewayToken, gatewayTokenTransaction } = (0, common_gateway_react_1.useGateway)();\n    const solanaGatewayToken = gatewayToken\n        ? {\n            issuingGatekeeper: new web3_js_1.PublicKey(gatewayToken.issuingGatekeeper),\n            gatekeeperNetworkAddress: new web3_js_1.PublicKey(gatewayToken.gatekeeperNetworkAddress),\n            owner: new web3_js_1.PublicKey(gatewayToken.owner),\n            state: gatewayToken.state,\n            publicKey: new web3_js_1.PublicKey(gatewayToken.identifier),\n            expiryTime: gatewayToken.expiryTime,\n        }\n        : undefined;\n    const solanaGatewayTokenTransaction = gatewayTokenTransaction\n        ? (0, util_1.createSolanaTransactionFromBase64)(gatewayTokenTransaction)\n        : undefined;\n    return Object.assign(Object.assign({}, (0, common_gateway_react_1.useGateway)()), { gatewayToken: solanaGatewayToken, gatewayTokenTransaction: solanaGatewayTokenTransaction });\n};\nexports.useSolanaGateway = useSolanaGateway;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}