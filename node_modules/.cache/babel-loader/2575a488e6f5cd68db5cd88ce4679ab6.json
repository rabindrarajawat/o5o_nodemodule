{"ast":null,"code":"import * as ed25519 from '@noble/ed25519';\n\nclass KeypairIdentityDriver {\n  constructor(keypair) {\n    this.keypair = keypair;\n    this.publicKey = keypair.publicKey;\n    this.secretKey = keypair.secretKey;\n  }\n\n  async signMessage(message) {\n    return ed25519.sync.sign(message, this.secretKey.slice(0, 32));\n  }\n\n  async signTransaction(transaction) {\n    transaction.partialSign(this.keypair);\n    return transaction;\n  }\n\n  async signAllTransactions(transactions) {\n    return Promise.all(transactions.map(transaction => this.signTransaction(transaction)));\n  }\n\n}\n\nexport { KeypairIdentityDriver };","map":{"version":3,"sources":["../../../../src/plugins/keypairIdentity/KeypairIdentityDriver.ts"],"names":["KeypairIdentityDriver","constructor","keypair","publicKey","secretKey","signMessage","message","ed25519","sync","sign","slice","signTransaction","transaction","partialSign","signAllTransactions","transactions","Promise","all","map"],"mappings":";;AAKO,MAAMA,qBAAN,CAAqE;EAK1EC,WAAW,CAACC,OAAD,EAAmB;IAC5B,KAAKA,OAAL,GAAeA,OAAf;IACA,KAAKC,SAAL,GAAiBD,OAAO,CAACC,SAAzB;IACA,KAAKC,SAAL,GAAiBF,OAAO,CAACE,SAAzB;EACF;;EAEwB,MAAXC,WAAW,CAACC,OAAD,EAA2C;IACjE,OAAOC,OAAO,CAACC,IAARD,CAAaE,IAAbF,CAAkBD,OAAlBC,EAA2B,KAAKH,SAAL,CAAeM,KAAf,CAAqB,CAArB,EAAwB,EAAxB,CAA3BH,CAAP;EACF;;EAE4B,MAAfI,eAAe,CAACC,WAAD,EAAiD;IAC3EA,WAAW,CAACC,WAAZD,CAAwB,KAAKV,OAA7BU;IAEA,OAAOA,WAAP;EACF;;EAEgC,MAAnBE,mBAAmB,CAC9BC,YAD8B,EAEN;IACxB,OAAOC,OAAO,CAACC,GAARD,CACLD,YAAY,CAACG,GAAbH,CAAkBH,WAAW,IAAK,KAAKD,eAAL,CAAqBC,WAArB,CAAlCG,CADKC,CAAP;EAGF;;AA3B0E","sourcesContent":["import * as ed25519 from '@noble/ed25519';\nimport { Keypair, PublicKey, Transaction } from '@solana/web3.js';\nimport { IdentityDriver } from '../identityModule';\nimport { KeypairSigner } from '@/types';\n\nexport class KeypairIdentityDriver implements IdentityDriver, KeypairSigner {\n  public readonly keypair: Keypair;\n  public readonly publicKey: PublicKey;\n  public readonly secretKey: Uint8Array;\n\n  constructor(keypair: Keypair) {\n    this.keypair = keypair;\n    this.publicKey = keypair.publicKey;\n    this.secretKey = keypair.secretKey;\n  }\n\n  public async signMessage(message: Uint8Array): Promise<Uint8Array> {\n    return ed25519.sync.sign(message, this.secretKey.slice(0, 32));\n  }\n\n  public async signTransaction(transaction: Transaction): Promise<Transaction> {\n    transaction.partialSign(this.keypair);\n\n    return transaction;\n  }\n\n  public async signAllTransactions(\n    transactions: Transaction[]\n  ): Promise<Transaction[]> {\n    return Promise.all(\n      transactions.map((transaction) => this.signTransaction(transaction))\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}