{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeRevokeInstructionUnchecked = exports.decodeRevokeInstruction = exports.createRevokeInstruction = exports.revokeInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst internal_js_1 = require(\"./internal.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\n\n\nexports.revokeInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct a Revoke instruction\n *\n * @param account      Address of the token account\n * @param owner        Owner of the account\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createRevokeInstruction(account, owner) {\n  let multiSigners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_js_1.TOKEN_PROGRAM_ID;\n  const keys = (0, internal_js_1.addSigners)([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  const data = Buffer.alloc(exports.revokeInstructionData.span);\n  exports.revokeInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.Revoke\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createRevokeInstruction = createRevokeInstruction;\n/**\n * Decode a Revoke instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeRevokeInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.revokeInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeRevokeInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.Revoke) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account || !owner) throw new errors_js_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n\nexports.decodeRevokeInstruction = decodeRevokeInstruction;\n/**\n * Decode a Revoke instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeRevokeInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      owner,\n      multiSigners\n    },\n    data: exports.revokeInstructionData.decode(data)\n  };\n}\n\nexports.decodeRevokeInstructionUnchecked = decodeRevokeInstructionUnchecked;","map":{"version":3,"sources":["../../../src/instructions/revoke.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAMA,MAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAOA;;;AACa,OAAA,CAAA,qBAAA,GAAwB,CAAA,GAAA,eAAA,CAAA,MAAA,EAA8B,CAAC,CAAA,GAAA,eAAA,CAAA,EAAA,EAAG,aAAH,CAAD,CAA9B,CAAxB;AAEb;;;;;;;;;AASG;;AACH,SAAgB,uBAAhB,CACI,OADJ,EAEI,KAFJ,EAIgC;EAAA,IAD5B,YAC4B,uEADH,EACG;EAAA,IAA5B,SAA4B,uEAAhB,cAAA,CAAA,gBAAgB;EAE5B,MAAM,IAAI,GAAG,CAAA,GAAA,aAAA,CAAA,UAAA,EAAW,CAAC;IAAE,MAAM,EAAE,OAAV;IAAmB,QAAQ,EAAE,KAA7B;IAAoC,UAAU,EAAE;EAAhD,CAAD,CAAX,EAAqE,KAArE,EAA4E,YAA5E,CAAb;EAEA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,OAAA,CAAA,qBAAA,CAAsB,IAAnC,CAAb;EACA,OAAA,CAAA,qBAAA,CAAsB,MAAtB,CAA6B;IAAE,WAAW,EAAE,UAAA,CAAA,gBAAA,CAAiB;EAAhC,CAA7B,EAAuE,IAAvE;EAEA,OAAO,IAAI,SAAA,CAAA,sBAAJ,CAA2B;IAAE,IAAF;IAAQ,SAAR;IAAmB;EAAnB,CAA3B,CAAP;AACH;;AAZD,OAAA,CAAA,uBAAA,GAAA,uBAAA;AA2BA;;;;;;;AAOG;;AACH,SAAgB,uBAAhB,CACI,WADJ,EAEgC;EAAA,IAA5B,SAA4B,uEAAhB,cAAA,CAAA,gBAAgB;EAE5B,IAAI,CAAC,WAAW,CAAC,SAAZ,CAAsB,MAAtB,CAA6B,SAA7B,CAAL,EAA8C,MAAM,IAAI,WAAA,CAAA,mCAAJ,EAAN;EAC9C,IAAI,WAAW,CAAC,IAAZ,CAAiB,MAAjB,KAA4B,OAAA,CAAA,qBAAA,CAAsB,IAAtD,EAA4D,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN;EAE5D,MAAM;IACF,IAAI,EAAE;MAAE,OAAF;MAAW,KAAX;MAAkB;IAAlB,CADJ;IAEF;EAFE,IAGF,gCAAgC,CAAC,WAAD,CAHpC;EAIA,IAAI,IAAI,CAAC,WAAL,KAAqB,UAAA,CAAA,gBAAA,CAAiB,MAA1C,EAAkD,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN;EAClD,IAAI,CAAC,OAAD,IAAY,CAAC,KAAjB,EAAwB,MAAM,IAAI,WAAA,CAAA,gCAAJ,EAAN,CAVI,CAY5B;;EAEA,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF,OADE;MAEF,KAFE;MAGF;IAHE,CAFH;IAOH;EAPG,CAAP;AASH;;AAzBD,OAAA,CAAA,uBAAA,GAAA,uBAAA;AAwCA;;;;;;AAMG;;AACH,SAAgB,gCAAhB,OAIyB;EAAA,IAJwB;IAC7C,SAD6C;IAE7C,IAAI,EAAE,CAAC,OAAD,EAAU,KAAV,EAAiB,GAAG,YAApB,CAFuC;IAG7C;EAH6C,CAIxB;EACrB,OAAO;IACH,SADG;IAEH,IAAI,EAAE;MACF,OADE;MAEF,KAFE;MAGF;IAHE,CAFH;IAOH,IAAI,EAAE,OAAA,CAAA,qBAAA,CAAsB,MAAtB,CAA6B,IAA7B;EAPH,CAAP;AASH;;AAdD,OAAA,CAAA,gCAAA,GAAA,gCAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeRevokeInstructionUnchecked = exports.decodeRevokeInstruction = exports.createRevokeInstruction = exports.revokeInstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst internal_js_1 = require(\"./internal.js\");\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.revokeInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct a Revoke instruction\n *\n * @param account      Address of the token account\n * @param owner        Owner of the account\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createRevokeInstruction(account, owner, multiSigners = [], programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    const keys = (0, internal_js_1.addSigners)([{ pubkey: account, isSigner: false, isWritable: true }], owner, multiSigners);\n    const data = Buffer.alloc(exports.revokeInstructionData.span);\n    exports.revokeInstructionData.encode({ instruction: types_js_1.TokenInstruction.Revoke }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createRevokeInstruction = createRevokeInstruction;\n/**\n * Decode a Revoke instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeRevokeInstruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.revokeInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { account, owner, multiSigners }, data, } = decodeRevokeInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.Revoke)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!account || !owner)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\nexports.decodeRevokeInstruction = decodeRevokeInstruction;\n/**\n * Decode a Revoke instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeRevokeInstructionUnchecked({ programId, keys: [account, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            owner,\n            multiSigners,\n        },\n        data: exports.revokeInstructionData.decode(data),\n    };\n}\nexports.decodeRevokeInstructionUnchecked = decodeRevokeInstructionUnchecked;\n//# sourceMappingURL=revoke.js.map"]},"metadata":{},"sourceType":"script"}