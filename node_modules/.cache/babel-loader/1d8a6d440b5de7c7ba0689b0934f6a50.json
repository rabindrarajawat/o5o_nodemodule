{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeInitializeAccountInstructionUnchecked = exports.decodeInitializeAccountInstruction = exports.createInitializeAccountInstruction = exports.initializeAccountInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\n\n\nexports.initializeAccountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct an InitializeAccount instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createInitializeAccountInstruction(account, mint, owner) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_js_1.TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: owner,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = Buffer.alloc(exports.initializeAccountInstructionData.span);\n  exports.initializeAccountInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InitializeAccount\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createInitializeAccountInstruction = createInitializeAccountInstruction;\n/**\n * Decode an InitializeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeInitializeAccountInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializeAccountInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint,\n      owner,\n      rent\n    },\n    data\n  } = decodeInitializeAccountInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.InitializeAccount) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!account || !mint || !owner || !rent) throw new errors_js_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      rent\n    },\n    data\n  };\n}\n\nexports.decodeInitializeAccountInstruction = decodeInitializeAccountInstruction;\n/**\n * Decode an InitializeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeInitializeAccountInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, mint, owner, rent],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      rent\n    },\n    data: exports.initializeAccountInstructionData.decode(data)\n  };\n}\n\nexports.decodeInitializeAccountInstructionUnchecked = decodeInitializeAccountInstructionUnchecked;","map":{"version":3,"sources":["../../../src/instructions/initializeAccount.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeInitializeAccountInstructionUnchecked = exports.decodeInitializeAccountInstruction = exports.createInitializeAccountInstruction = exports.initializeAccountInstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.initializeAccountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction')]);\n/**\n * Construct an InitializeAccount instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeAccountInstruction(account, mint, owner, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.alloc(exports.initializeAccountInstructionData.span);\n    exports.initializeAccountInstructionData.encode({ instruction: types_js_1.TokenInstruction.InitializeAccount }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createInitializeAccountInstruction = createInitializeAccountInstruction;\n/**\n * Decode an InitializeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeInitializeAccountInstruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.initializeAccountInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { account, mint, owner, rent }, data, } = decodeInitializeAccountInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.InitializeAccount)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner || !rent)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            rent,\n        },\n        data,\n    };\n}\nexports.decodeInitializeAccountInstruction = decodeInitializeAccountInstruction;\n/**\n * Decode an InitializeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeInitializeAccountInstructionUnchecked({ programId, keys: [account, mint, owner, rent], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            rent,\n        },\n        data: exports.initializeAccountInstructionData.decode(data),\n    };\n}\nexports.decodeInitializeAccountInstructionUnchecked = decodeInitializeAccountInstructionUnchecked;\n//# sourceMappingURL=initializeAccount.js.map"]},"metadata":{},"sourceType":"script"}