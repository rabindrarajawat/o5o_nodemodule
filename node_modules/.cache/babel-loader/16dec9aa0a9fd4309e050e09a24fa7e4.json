{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deleteNameRegistry = exports.transferNameOwnership = exports.updateNameRegistryData = exports.createNameRegistry = exports.HASH_PREFIX = exports.NAME_PROGRAM_ID = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst instructions_1 = require(\"./instructions\");\n\nconst state_1 = require(\"./state\");\n\nconst utils_1 = require(\"./utils\");\n\nconst utils_2 = require(\"./utils\"); ////////////////////////////////////////////////////////////\n\n\nexports.NAME_PROGRAM_ID = new web3_js_1.PublicKey('namesLPneVptA9Z5rqUDD9tMTWEJwofgaYwp8cawRkX');\nexports.HASH_PREFIX = 'SPL Name Service'; ////////////////////////////////////////////////////////////\n\n/**\n * Creates a name account with the given rent budget, allocated space, owner and class.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the new account\n * @param space The space in bytes allocated to the account\n * @param payerKey The allocation cost payer\n * @param nameOwner The pubkey to be set as owner of the new name account\n * @param lamports The budget to be set for the name account. If not specified, it'll be the minimum for rent exemption\n * @param nameClass The class of this new name\n * @param parentName The parent name of the new name. If specified its owner needs to sign\n * @returns\n */\n\nasync function createNameRegistry(connection, name, space, payerKey, nameOwner, lamports, nameClass, parentName) {\n  const hashed_name = await (0, utils_2.getHashedName)(name);\n  const nameAccountKey = await (0, utils_2.getNameAccountKey)(hashed_name, nameClass, parentName);\n  const balance = lamports ? lamports : await connection.getMinimumBalanceForRentExemption(space);\n  let nameParentOwner;\n\n  if (parentName) {\n    const parentAccount = await (0, utils_2.getNameOwner)(connection, parentName);\n    nameParentOwner = parentAccount.owner;\n  }\n\n  const createNameInstr = (0, instructions_1.createInstruction)(exports.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, nameAccountKey, nameOwner, payerKey, hashed_name, new utils_1.Numberu64(balance), new utils_2.Numberu32(space), nameClass, parentName, nameParentOwner);\n  return createNameInstr;\n}\n\nexports.createNameRegistry = createNameRegistry;\n/**\n * Overwrite the data of the given name registry.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the name registry to update\n * @param offset The offset to which the data should be written into the registry\n * @param input_data The data to be written\n * @param nameClass The class of this name, if it exsists\n * @param nameParent The parent name of this name, if it exists\n */\n\nasync function updateNameRegistryData(connection, name, offset, input_data, nameClass, nameParent) {\n  const hashed_name = await (0, utils_2.getHashedName)(name);\n  const nameAccountKey = await (0, utils_2.getNameAccountKey)(hashed_name, nameClass, nameParent);\n  let signer;\n\n  if (nameClass) {\n    signer = nameClass;\n  } else {\n    signer = (await state_1.NameRegistryState.retrieve(connection, nameAccountKey)).owner;\n  }\n\n  const updateInstr = (0, instructions_1.updateInstruction)(exports.NAME_PROGRAM_ID, nameAccountKey, new utils_2.Numberu32(offset), input_data, signer, nameParent);\n  return updateInstr;\n}\n\nexports.updateNameRegistryData = updateNameRegistryData;\n/**\n * Change the owner of a given name account.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the name account\n * @param newOwner The new owner to be set\n * @param curentNameOwner the current name Owner\n * @param nameClass The class of this name, if it exsists\n * @param nameParent The parent name of this name, if it exists\n * @returns\n */\n\nasync function transferNameOwnership(connection, name, newOwner, nameClass, nameParent) {\n  const hashed_name = await (0, utils_2.getHashedName)(name);\n  const nameAccountKey = await (0, utils_2.getNameAccountKey)(hashed_name, nameClass, nameParent);\n  let curentNameOwner;\n\n  if (nameClass) {\n    curentNameOwner = nameClass;\n  } else {\n    curentNameOwner = (await state_1.NameRegistryState.retrieve(connection, nameAccountKey)).owner;\n  }\n\n  const transferInstr = (0, instructions_1.transferInstruction)(exports.NAME_PROGRAM_ID, nameAccountKey, newOwner, curentNameOwner, nameClass, nameParent);\n  return transferInstr;\n}\n\nexports.transferNameOwnership = transferNameOwnership;\n/**\n * Delete the name account and transfer the rent to the target.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the name account\n * @param refundTargetKey The refund destination address\n * @param nameClass The class of this name, if it exsists\n * @param nameParent The parent name of this name, if it exists\n * @returns\n */\n\nasync function deleteNameRegistry(connection, name, refundTargetKey, nameClass, nameParent) {\n  const hashed_name = await (0, utils_2.getHashedName)(name);\n  const nameAccountKey = await (0, utils_2.getNameAccountKey)(hashed_name, nameClass, nameParent);\n  let nameOwner;\n\n  if (nameClass) {\n    nameOwner = nameClass;\n  } else {\n    nameOwner = (await state_1.NameRegistryState.retrieve(connection, nameAccountKey)).owner;\n  }\n\n  const changeAuthoritiesInstr = (0, instructions_1.deleteInstruction)(exports.NAME_PROGRAM_ID, nameAccountKey, refundTargetKey, nameOwner);\n  return changeAuthoritiesInstr;\n}\n\nexports.deleteNameRegistry = deleteNameRegistry;","map":{"version":3,"mappings":"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","names":["exports","web3_js_1","createNameRegistry","connection","name","space","payerKey","nameOwner","lamports","nameClass","parentName","hashed_name","nameAccountKey","balance","getMinimumBalanceForRentExemption","nameParentOwner","parentAccount","owner","createNameInstr","programId","utils_1","utils_2","updateNameRegistryData","offset","input_data","nameParent","signer","state_1","retrieve","updateInstr","transferNameOwnership","newOwner","curentNameOwner","transferInstr","deleteNameRegistry","refundTargetKey","changeAuthoritiesInstr"],"sourceRoot":"","sources":["../src/bindings.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}