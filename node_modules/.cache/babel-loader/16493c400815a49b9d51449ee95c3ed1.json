{"ast":null,"code":"import { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { getAccountLenForMint } from '../extensions/extensionType.js';\nimport { createInitializeAccountInstruction } from '../instructions/initializeAccount.js';\nimport { getMint } from '../state/mint.js';\nimport { createAssociatedTokenAccount } from './createAssociatedTokenAccount.js';\n/**\n * Create and initialize a new token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param mint           Mint for the account\n * @param owner          Owner of the new account\n * @param keypair        Optional keypair, defaulting to the associated token account for the `mint` and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new token account\n */\n\nexport async function createAccount(connection, payer, mint, owner, keypair, confirmOptions) {\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : TOKEN_PROGRAM_ID;\n  // If a keypair isn't provided, create the associated token account and return its address\n  if (!keypair) return await createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions, programId); // Otherwise, create the account with the provided keypair and return its public key\n\n  const mintState = await getMint(connection, mint, confirmOptions === null || confirmOptions === void 0 ? void 0 : confirmOptions.commitment, programId);\n  const space = getAccountLenForMint(mintState);\n  const lamports = await connection.getMinimumBalanceForRentExemption(space);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: space,\n    lamports: lamports,\n    programId: programId\n  }), createInitializeAccountInstruction(keypair.publicKey, mint, owner, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}","map":{"version":3,"sources":["../../../src/actions/createAccount.ts"],"names":[],"mappings":"AACA,SAAS,yBAAT,EAAoC,aAApC,EAAmD,WAAnD,QAAsE,iBAAtE;AACA,SAAS,gBAAT,QAAiC,iBAAjC;AACA,SAAS,oBAAT,QAAqC,gCAArC;AACA,SAAS,kCAAT,QAAmD,sCAAnD;AACA,SAAS,OAAT,QAAwB,kBAAxB;AACA,SAAS,4BAAT,QAA6C,mCAA7C;AAEA;;;;;;;;;;;;AAYG;;AACH,OAAO,eAAe,aAAf,CACH,UADG,EAEH,KAFG,EAGH,IAHG,EAIH,KAJG,EAKH,OALG,EAMH,cANG,EAOyB;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B;EACA,IAAI,CAAC,OAAL,EAAc,OAAO,MAAM,4BAA4B,CAAC,UAAD,EAAa,KAAb,EAAoB,IAApB,EAA0B,KAA1B,EAAiC,cAAjC,EAAiD,SAAjD,CAAzC,CAHc,CAK5B;;EACA,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,UAAD,EAAa,IAAb,EAAmB,cAAnB,aAAmB,cAAnB,uBAAmB,cAAc,CAAE,UAAnC,EAA+C,SAA/C,CAA/B;EACA,MAAM,KAAK,GAAG,oBAAoB,CAAC,SAAD,CAAlC;EACA,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,iCAAX,CAA6C,KAA7C,CAAvB;EAEA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,aAAa,CAAC,aAAd,CAA4B;IACxB,UAAU,EAAE,KAAK,CAAC,SADM;IAExB,gBAAgB,EAAE,OAAO,CAAC,SAFF;IAGxB,KAAK,EAAL,KAHwB;IAIxB,QAAQ,EAAR,QAJwB;IAKxB,SAAS,EAAT;EALwB,CAA5B,CADgB,EAQhB,kCAAkC,CAAC,OAAO,CAAC,SAAT,EAAoB,IAApB,EAA0B,KAA1B,EAAiC,SAAjC,CARlB,CAApB;EAWA,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,EAAQ,OAAR,CAA1B,EAA4C,cAA5C,CAA/B;EAEA,OAAO,OAAO,CAAC,SAAf;AACH","sourceRoot":"","sourcesContent":["import { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { getAccountLenForMint } from '../extensions/extensionType.js';\nimport { createInitializeAccountInstruction } from '../instructions/initializeAccount.js';\nimport { getMint } from '../state/mint.js';\nimport { createAssociatedTokenAccount } from './createAssociatedTokenAccount.js';\n/**\n * Create and initialize a new token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param mint           Mint for the account\n * @param owner          Owner of the new account\n * @param keypair        Optional keypair, defaulting to the associated token account for the `mint` and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new token account\n */\nexport async function createAccount(connection, payer, mint, owner, keypair, confirmOptions, programId = TOKEN_PROGRAM_ID) {\n    // If a keypair isn't provided, create the associated token account and return its address\n    if (!keypair)\n        return await createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions, programId);\n    // Otherwise, create the account with the provided keypair and return its public key\n    const mintState = await getMint(connection, mint, confirmOptions?.commitment, programId);\n    const space = getAccountLenForMint(mintState);\n    const lamports = await connection.getMinimumBalanceForRentExemption(space);\n    const transaction = new Transaction().add(SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: keypair.publicKey,\n        space,\n        lamports,\n        programId,\n    }), createInitializeAccountInstruction(keypair.publicKey, mint, owner, programId));\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n    return keypair.publicKey;\n}\n//# sourceMappingURL=createAccount.js.map"]},"metadata":{},"sourceType":"module"}