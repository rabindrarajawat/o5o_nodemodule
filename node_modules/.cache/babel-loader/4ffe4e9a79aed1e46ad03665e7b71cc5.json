{"ast":null,"code":"import { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createInitializeMint2Instruction } from '../instructions/initializeMint2.js';\nimport { getMinimumBalanceForRentExemptMint, MINT_SIZE } from '../state/mint.js';\n/**\n * Create and initialize a new mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction and initialization fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Address of the new mint\n */\n\nexport async function createMint(connection, payer, mintAuthority, freezeAuthority, decimals) {\n  let keypair = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Keypair.generate();\n  let confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : TOKEN_PROGRAM_ID;\n  const lamports = await getMinimumBalanceForRentExemptMint(connection);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: MINT_SIZE,\n    lamports: lamports,\n    programId: programId\n  }), createInitializeMint2Instruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}","map":{"version":3,"sources":["../../../src/actions/createMint.ts"],"names":[],"mappings":"AACA,SAAS,OAAT,EAAkB,yBAAlB,EAA6C,aAA7C,EAA4D,WAA5D,QAA+E,iBAA/E;AACA,SAAS,gBAAT,QAAiC,iBAAjC;AACA,SAAS,gCAAT,QAAiD,oCAAjD;AACA,SAAS,kCAAT,EAA6C,SAA7C,QAA8D,kBAA9D;AAEA;;;;;;;;;;;;;AAaG;;AACH,OAAO,eAAe,UAAf,CACH,UADG,EAEH,KAFG,EAGH,aAHG,EAIH,eAJG,EAKH,QALG,EAQyB;EAAA,IAF5B,OAE4B,uEAFlB,OAAO,CAAC,QAAR,EAEkB;EAAA,IAD5B,cAC4B;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B,MAAM,QAAQ,GAAG,MAAM,kCAAkC,CAAC,UAAD,CAAzD;EAEA,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAChB,aAAa,CAAC,aAAd,CAA4B;IACxB,UAAU,EAAE,KAAK,CAAC,SADM;IAExB,gBAAgB,EAAE,OAAO,CAAC,SAFF;IAGxB,KAAK,EAAE,SAHiB;IAIxB,QAAQ,EAAR,QAJwB;IAKxB,SAAS,EAAT;EALwB,CAA5B,CADgB,EAQhB,gCAAgC,CAAC,OAAO,CAAC,SAAT,EAAoB,QAApB,EAA8B,aAA9B,EAA6C,eAA7C,EAA8D,SAA9D,CARhB,CAApB;EAWA,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,EAAQ,OAAR,CAA1B,EAA4C,cAA5C,CAA/B;EAEA,OAAO,OAAO,CAAC,SAAf;AACH","sourceRoot":"","sourcesContent":["import { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createInitializeMint2Instruction } from '../instructions/initializeMint2.js';\nimport { getMinimumBalanceForRentExemptMint, MINT_SIZE } from '../state/mint.js';\n/**\n * Create and initialize a new mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction and initialization fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Address of the new mint\n */\nexport async function createMint(connection, payer, mintAuthority, freezeAuthority, decimals, keypair = Keypair.generate(), confirmOptions, programId = TOKEN_PROGRAM_ID) {\n    const lamports = await getMinimumBalanceForRentExemptMint(connection);\n    const transaction = new Transaction().add(SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: keypair.publicKey,\n        space: MINT_SIZE,\n        lamports,\n        programId,\n    }), createInitializeMint2Instruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n    return keypair.publicKey;\n}\n//# sourceMappingURL=createMint.js.map"]},"metadata":{},"sourceType":"module"}