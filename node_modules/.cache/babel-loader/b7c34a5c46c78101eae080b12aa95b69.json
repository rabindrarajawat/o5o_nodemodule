{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { useEffect, useState } from 'react';\nimport { getNftsForOwner1, getSlimeNfts, getSlimeRevealNfts } from '../utils/candy-machine';\nimport useWalletBalance from './use-wallet-balance';\nimport { printLog } from '../utils/utility';\n\nconst useWalletNfts = () => {\n  _s();\n\n  const [balance] = useWalletBalance();\n  const wallet = useWallet();\n  const [isLoadingWalletNfts, setIsLoadingWalletNfts] = useState(false);\n  const [walletNfts, setWalletNfts] = useState([]);\n  const [walletSlimeNfts, setWalletSlimeNfts] = useState([]);\n  const [walletSlimeRevealNfts, setWalletSlimeRevealNfts] = useState([]);\n  useEffect(() => {\n    getWalletNfts();\n    getWalletSlimeNfts();\n  }, [wallet, balance]);\n\n  const getWalletNfts = async () => {\n    try {\n      if (!wallet || !wallet.publicKey || !wallet.signAllTransactions || !wallet.signTransaction) {\n        return;\n      }\n\n      printLog('loading nfts from wallet');\n      setIsLoadingWalletNfts(true);\n      const nftsForOwner = await getNftsForOwner1(wallet.publicKey); // const nftsForOwner = await getNftsForOwner(connection, wallet.publicKey);\n\n      console.log('loaded nfts from wallet', nftsForOwner);\n      setWalletNfts(nftsForOwner);\n      setIsLoadingWalletNfts(false);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const getWalletSlimeNfts = async () => {\n    try {\n      if (!wallet || !wallet.publicKey || !wallet.signAllTransactions || !wallet.signTransaction) {\n        return;\n      }\n\n      printLog('loading slime nfts from wallet');\n      setIsLoadingWalletNfts(true);\n      const nftsForOwner = await getSlimeNfts(wallet.publicKey); // const nftsForOwner = await getNftsForOwner(connection, wallet.publicKey);\n\n      console.log('loaded slime nfts from wallet: ', nftsForOwner);\n      setWalletSlimeNfts(nftsForOwner);\n      setIsLoadingWalletNfts(false);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const getWalletSlimeRevealNfts = async () => {\n    try {\n      if (!wallet || !wallet.publicKey || !wallet.signAllTransactions || !wallet.signTransaction) {\n        return;\n      }\n\n      printLog('loading slime nfts from wallet');\n      setIsLoadingWalletNfts(true);\n      const nftsForOwner = await getSlimeRevealNfts(wallet.publicKey); // const nftsForOwner = await getNftsForOwner(connection, wallet.publicKey);\n\n      console.log('loaded slime nfts from wallet: ', nftsForOwner);\n      setWalletSlimeRevealNfts(nftsForOwner);\n      setIsLoadingWalletNfts(false);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return {\n    isLoadingWalletNfts: isLoadingWalletNfts,\n    walletNfts: walletNfts,\n    setWalletNfts: setWalletNfts,\n    getWalletNfts: getWalletNfts,\n    walletSlimeNfts: walletSlimeNfts,\n    setWalletSlimeNfts: setWalletSlimeNfts,\n    getWalletSlimeNfts: getWalletSlimeNfts,\n    walletSlimeRevealNfts: walletSlimeRevealNfts,\n    setWalletSlimeRevealNfts: setWalletSlimeRevealNfts,\n    getWalletSlimeRevealNfts: getWalletSlimeRevealNfts\n  };\n};\n\n_s(useWalletNfts, \"AsBbwSIGO15hR5PezrvcTw+WQnI=\", false, function () {\n  return [useWalletBalance, useWallet];\n});\n\nexport default useWalletNfts;","map":{"version":3,"names":["useWallet","useEffect","useState","getNftsForOwner1","getSlimeNfts","getSlimeRevealNfts","useWalletBalance","printLog","useWalletNfts","balance","wallet","isLoadingWalletNfts","setIsLoadingWalletNfts","walletNfts","setWalletNfts","walletSlimeNfts","setWalletSlimeNfts","walletSlimeRevealNfts","setWalletSlimeRevealNfts","getWalletNfts","getWalletSlimeNfts","publicKey","signAllTransactions","signTransaction","nftsForOwner","console","log","err","getWalletSlimeRevealNfts"],"sources":["D:/software/o5o BNB/o5o-staking-frontend/src/hooks/use-wallet-nfts.ts"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { useWallet } from '@solana/wallet-adapter-react';\r\nimport { useEffect, useState } from 'react';\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { getNftsForOwner, getNftsForOwner1, getSlimeNfts, getSlimeRevealNfts } from '../utils/candy-machine';\r\nimport useWalletBalance from './use-wallet-balance';\r\nimport { printLog } from '../utils/utility';\r\n\r\nconst useWalletNfts = () => {\r\n\tconst [balance] = useWalletBalance();\r\n\tconst wallet = useWallet();\r\n\tconst [isLoadingWalletNfts, setIsLoadingWalletNfts] = useState(false);\r\n\tconst [walletNfts, setWalletNfts] = useState<Array<any>>([]);\r\n\tconst [walletSlimeNfts, setWalletSlimeNfts] = useState<Array<any>>([]);\r\n\tconst [walletSlimeRevealNfts, setWalletSlimeRevealNfts] = useState<Array<any>>([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tgetWalletNfts();\r\n\t\tgetWalletSlimeNfts();\r\n\t}, [wallet, balance]);\r\n\r\n\tconst getWalletNfts = async () => {\r\n\t\ttry {\r\n\t\t\tif (\r\n\t\t\t\t!wallet ||\r\n\t\t\t\t!wallet.publicKey ||\r\n\t\t\t\t!wallet.signAllTransactions ||\r\n\t\t\t\t!wallet.signTransaction\r\n\t\t\t) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tprintLog('loading nfts from wallet')\r\n\t\t\tsetIsLoadingWalletNfts(true);\r\n\t\t\tconst nftsForOwner = await getNftsForOwner1(wallet.publicKey);\r\n\t\t\t// const nftsForOwner = await getNftsForOwner(connection, wallet.publicKey);\r\n\t\t\tconsole.log('loaded nfts from wallet', nftsForOwner)\r\n\t\t\tsetWalletNfts(nftsForOwner as any);\r\n\t\t\tsetIsLoadingWalletNfts(false);\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t}\r\n\t}\r\n\r\n\tconst getWalletSlimeNfts = async () => {\r\n\t\ttry {\r\n\t\t\tif (\r\n\t\t\t\t!wallet ||\r\n\t\t\t\t!wallet.publicKey ||\r\n\t\t\t\t!wallet.signAllTransactions ||\r\n\t\t\t\t!wallet.signTransaction\r\n\t\t\t) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tprintLog('loading slime nfts from wallet')\r\n\t\t\tsetIsLoadingWalletNfts(true);\r\n\t\t\tconst nftsForOwner = await getSlimeNfts(wallet.publicKey);\r\n\t\t\t// const nftsForOwner = await getNftsForOwner(connection, wallet.publicKey);\r\n\t\t\tconsole.log('loaded slime nfts from wallet: ', nftsForOwner)\r\n\t\t\tsetWalletSlimeNfts(nftsForOwner as any);\r\n\t\t\tsetIsLoadingWalletNfts(false);\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t}\r\n\t}\r\n\r\n\tconst getWalletSlimeRevealNfts = async () => {\r\n\t\ttry {\r\n\t\t\tif (\r\n\t\t\t\t!wallet ||\r\n\t\t\t\t!wallet.publicKey ||\r\n\t\t\t\t!wallet.signAllTransactions ||\r\n\t\t\t\t!wallet.signTransaction\r\n\t\t\t) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tprintLog('loading slime nfts from wallet')\r\n\t\t\tsetIsLoadingWalletNfts(true);\r\n\t\t\tconst nftsForOwner = await getSlimeRevealNfts(wallet.publicKey);\r\n\t\t\t// const nftsForOwner = await getNftsForOwner(connection, wallet.publicKey);\r\n\t\t\tconsole.log('loaded slime nfts from wallet: ', nftsForOwner)\r\n\t\t\tsetWalletSlimeRevealNfts(nftsForOwner as any);\r\n\t\t\tsetIsLoadingWalletNfts(false);\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t}\r\n\t}\r\n\r\n\treturn { isLoadingWalletNfts, walletNfts, setWalletNfts, getWalletNfts, walletSlimeNfts, setWalletSlimeNfts, getWalletSlimeNfts, walletSlimeRevealNfts, setWalletSlimeRevealNfts, getWalletSlimeRevealNfts };\r\n}\r\n\r\nexport default useWalletNfts;"],"mappings":";;AAAA;;AACA;AACA,SAASA,SAAT,QAA0B,8BAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAA0BC,gBAA1B,EAA4CC,YAA5C,EAA0DC,kBAA1D,QAAoF,wBAApF;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AACA,SAASC,QAAT,QAAyB,kBAAzB;;AAEA,MAAMC,aAAa,GAAG,MAAM;EAAA;;EAC3B,MAAM,CAACC,OAAD,IAAYH,gBAAgB,EAAlC;EACA,MAAMI,MAAM,GAAGV,SAAS,EAAxB;EACA,MAAM,CAACW,mBAAD,EAAsBC,sBAAtB,IAAgDV,QAAQ,CAAC,KAAD,CAA9D;EACA,MAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAa,EAAb,CAA5C;EACA,MAAM,CAACa,eAAD,EAAkBC,kBAAlB,IAAwCd,QAAQ,CAAa,EAAb,CAAtD;EACA,MAAM,CAACe,qBAAD,EAAwBC,wBAAxB,IAAoDhB,QAAQ,CAAa,EAAb,CAAlE;EAEAD,SAAS,CAAC,MAAM;IACfkB,aAAa;IACbC,kBAAkB;EAClB,CAHQ,EAGN,CAACV,MAAD,EAASD,OAAT,CAHM,CAAT;;EAKA,MAAMU,aAAa,GAAG,YAAY;IACjC,IAAI;MACH,IACC,CAACT,MAAD,IACA,CAACA,MAAM,CAACW,SADR,IAEA,CAACX,MAAM,CAACY,mBAFR,IAGA,CAACZ,MAAM,CAACa,eAJT,EAKE;QACD;MACA;;MACDhB,QAAQ,CAAC,0BAAD,CAAR;MACAK,sBAAsB,CAAC,IAAD,CAAtB;MACA,MAAMY,YAAY,GAAG,MAAMrB,gBAAgB,CAACO,MAAM,CAACW,SAAR,CAA3C,CAXG,CAYH;;MACAI,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,YAAvC;MACAV,aAAa,CAACU,YAAD,CAAb;MACAZ,sBAAsB,CAAC,KAAD,CAAtB;IACA,CAhBD,CAiBA,OAAOe,GAAP,EAAY;MACXF,OAAO,CAACC,GAAR,CAAYC,GAAZ;IACA;EACD,CArBD;;EAuBA,MAAMP,kBAAkB,GAAG,YAAY;IACtC,IAAI;MACH,IACC,CAACV,MAAD,IACA,CAACA,MAAM,CAACW,SADR,IAEA,CAACX,MAAM,CAACY,mBAFR,IAGA,CAACZ,MAAM,CAACa,eAJT,EAKE;QACD;MACA;;MACDhB,QAAQ,CAAC,gCAAD,CAAR;MACAK,sBAAsB,CAAC,IAAD,CAAtB;MACA,MAAMY,YAAY,GAAG,MAAMpB,YAAY,CAACM,MAAM,CAACW,SAAR,CAAvC,CAXG,CAYH;;MACAI,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CF,YAA/C;MACAR,kBAAkB,CAACQ,YAAD,CAAlB;MACAZ,sBAAsB,CAAC,KAAD,CAAtB;IACA,CAhBD,CAiBA,OAAOe,GAAP,EAAY;MACXF,OAAO,CAACC,GAAR,CAAYC,GAAZ;IACA;EACD,CArBD;;EAuBA,MAAMC,wBAAwB,GAAG,YAAY;IAC5C,IAAI;MACH,IACC,CAAClB,MAAD,IACA,CAACA,MAAM,CAACW,SADR,IAEA,CAACX,MAAM,CAACY,mBAFR,IAGA,CAACZ,MAAM,CAACa,eAJT,EAKE;QACD;MACA;;MACDhB,QAAQ,CAAC,gCAAD,CAAR;MACAK,sBAAsB,CAAC,IAAD,CAAtB;MACA,MAAMY,YAAY,GAAG,MAAMnB,kBAAkB,CAACK,MAAM,CAACW,SAAR,CAA7C,CAXG,CAYH;;MACAI,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CF,YAA/C;MACAN,wBAAwB,CAACM,YAAD,CAAxB;MACAZ,sBAAsB,CAAC,KAAD,CAAtB;IACA,CAhBD,CAiBA,OAAOe,GAAP,EAAY;MACXF,OAAO,CAACC,GAAR,CAAYC,GAAZ;IACA;EACD,CArBD;;EAuBA,OAAO;IAAEhB,mBAAmB,EAAnBA,mBAAF;IAAuBE,UAAU,EAAVA,UAAvB;IAAmCC,aAAa,EAAbA,aAAnC;IAAkDK,aAAa,EAAbA,aAAlD;IAAiEJ,eAAe,EAAfA,eAAjE;IAAkFC,kBAAkB,EAAlBA,kBAAlF;IAAsGI,kBAAkB,EAAlBA,kBAAtG;IAA0HH,qBAAqB,EAArBA,qBAA1H;IAAiJC,wBAAwB,EAAxBA,wBAAjJ;IAA2KU,wBAAwB,EAAxBA;EAA3K,CAAP;AACA,CAnFD;;GAAMpB,a;UACaF,gB,EACHN,S;;;AAmFhB,eAAeQ,aAAf"},"metadata":{},"sourceType":"module"}