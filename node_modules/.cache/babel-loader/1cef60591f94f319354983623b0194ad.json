{"ast":null,"code":"import { createWrapInstruction } from '@metaplex-foundation/mpl-candy-guard';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'WrapCandyGuardOperation';\n/**\n * Wraps the given Candy Machine in a Candy Guard.\n *\n * This makes the Candy Guard the mint authority for the Candy Machine\n * which means all minting will have to go through the Candy Guard.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .wrapCandyGuard({\n *     candyMachine,\n *     candyGuard,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst wrapCandyGuardOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst wrapCandyGuardOperationHandler = {\n  async handle(operation, metaplex, scope) {\n    return wrapCandyGuardBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Wraps the given Candy Machine in a Candy Guard.\n *\n * This makes the Candy Guard the mint authority for the Candy Machine\n * which means all minting will have to go through the Candy Guard.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachines()\n *   .builders()\n *   .wrapCandyGuard({\n *     candyMachine,\n *     candyGuard,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst wrapCandyGuardBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    candyGuard,\n    candyGuardAuthority = metaplex.identity(),\n    candyMachine,\n    candyMachineAuthority = metaplex.identity()\n  } = params;\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);\n  return TransactionBuilder.make().setFeePayer(payer).add({\n    instruction: createWrapInstruction({\n      candyGuard,\n      authority: candyGuardAuthority.publicKey,\n      candyMachine,\n      candyMachineProgram: candyMachineProgram.address,\n      candyMachineAuthority: candyMachineAuthority.publicKey\n    }, candyGuardProgram.address),\n    signers: [candyGuardAuthority, candyMachineAuthority],\n    key: params.wrapCandyGuardInstructionKey ?? 'wrapCandyGuard'\n  });\n};\n\nexport { wrapCandyGuardBuilder, wrapCandyGuardOperation, wrapCandyGuardOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineModule/operations/wrapCandyGuard.ts"],"names":["Key","wrapCandyGuardOperation","useOperation","wrapCandyGuardOperationHandler","handle","operation","metaplex","scope","wrapCandyGuardBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","candyGuard","candyGuardAuthority","identity","candyMachine","candyMachineAuthority","candyMachineProgram","getCandyMachine","candyGuardProgram","getCandyGuard","TransactionBuilder","make","setFeePayer","add","instruction","createWrapInstruction","authority","publicKey","address","signers","key","wrapCandyGuardInstructionKey"],"mappings":";;4EAaA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,yBAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,uBAAuB,GAClCC,YAAY,CAA0BF,GAA1B,C;AAEd;AACA;AACA;AACA;;AA0CA;AACA;AACA;AACA;;AACO,MAAMG,8BAAyE,GACpF;EACE,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAIiC;IAC/B,OAAOC,qBAAqB,CAC1BF,QAD0B,EAE1BD,SAAS,CAACI,KAFgB,EAG1BF,KAH0B,CAArBC,CAILE,cAJKF,CAIUF,QAJVE,EAIoBD,KAAK,CAACI,cAJ1BH,CAAP;EAKF;;AAXF,CADK,C,CAeP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaA,MAAAA,qBAAqB,GAAG,UACnCF,QADmC,EAEnCM,MAFmC,EAIZ;EAAA,IADvBC,OACuB,uEADc,EACd;EACvB,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGT,QAAQ,CAACU,GAATV,GAAeW,kBAAfX;EAApB,IAA4DO,OAAlE;EACA,MAAM;IACJK,UADI;IAEJC,mBAAmB,GAAGb,QAAQ,CAACc,QAATd,EAFlB;IAGJe,YAHI;IAIJC,qBAAqB,GAAGhB,QAAQ,CAACc,QAATd;EAJpB,IAKFM,MALJ;EAOA,MAAMW,mBAAmB,GAAGjB,QAAQ,CAACQ,QAATR,GAAoBkB,eAApBlB,CAAoCQ,QAApCR,CAA5B;EACA,MAAMmB,iBAAiB,GAAGnB,QAAQ,CAACQ,QAATR,GAAoBoB,aAApBpB,CAAkCQ,QAAlCR,CAA1B;EAEA,OAAOqB,kBAAkB,CAACC,IAAnBD,GACJE,WADIF,CACQZ,KADRY,EAEJG,GAFIH,CAEA;IACHI,WAAW,EAAEC,qBAAqB,CAChC;MACEd,UADF;MAEEe,SAAS,EAAEd,mBAAmB,CAACe,SAFjC;MAGEb,YAHF;MAIEE,mBAAmB,EAAEA,mBAAmB,CAACY,OAJ3C;MAKEb,qBAAqB,EAAEA,qBAAqB,CAACY;IAL/C,CADgC,EAQhCT,iBAAiB,CAACU,OARc,CAD/B;IAWHC,OAAO,EAAE,CAACjB,mBAAD,EAAsBG,qBAAtB,CAXN;IAYHe,GAAG,EAAEzB,MAAM,CAAC0B,4BAAP1B,IAAuC;EAZzC,CAFAe,CAAP;AAgBF,CAhCanB","sourcesContent":["import { createWrapInstruction } from '@metaplex-foundation/mpl-candy-guard';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  PublicKey,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'WrapCandyGuardOperation' as const;\n\n/**\n * Wraps the given Candy Machine in a Candy Guard.\n *\n * This makes the Candy Guard the mint authority for the Candy Machine\n * which means all minting will have to go through the Candy Guard.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .wrapCandyGuard({\n *     candyMachine,\n *     candyGuard,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const wrapCandyGuardOperation =\n  useOperation<WrapCandyGuardOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type WrapCandyGuardOperation = Operation<\n  typeof Key,\n  WrapCandyGuardInput,\n  WrapCandyGuardOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type WrapCandyGuardInput = {\n  /** The address of the Candy Machine to wrap. */\n  candyMachine: PublicKey;\n\n  /** The address of the Candy Guard to wrap the Candy Machine with. */\n  candyGuard: PublicKey;\n\n  /**\n   * The authority of the Candy Machine as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  candyMachineAuthority?: Signer;\n\n  /**\n   * The authority of the Candy Guard as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  candyGuardAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type WrapCandyGuardOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const wrapCandyGuardOperationHandler: OperationHandler<WrapCandyGuardOperation> =\n  {\n    async handle(\n      operation: WrapCandyGuardOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<WrapCandyGuardOutput> {\n      return wrapCandyGuardBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type WrapCandyGuardBuilderParams = Omit<\n  WrapCandyGuardInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that wraps the Candy Machine in a Candy Guard. */\n  wrapCandyGuardInstructionKey?: string;\n};\n\n/**\n * Wraps the given Candy Machine in a Candy Guard.\n *\n * This makes the Candy Guard the mint authority for the Candy Machine\n * which means all minting will have to go through the Candy Guard.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachines()\n *   .builders()\n *   .wrapCandyGuard({\n *     candyMachine,\n *     candyGuard,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const wrapCandyGuardBuilder = (\n  metaplex: Metaplex,\n  params: WrapCandyGuardBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    candyGuard,\n    candyGuardAuthority = metaplex.identity(),\n    candyMachine,\n    candyMachineAuthority = metaplex.identity(),\n  } = params;\n\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createWrapInstruction(\n        {\n          candyGuard,\n          authority: candyGuardAuthority.publicKey,\n          candyMachine,\n          candyMachineProgram: candyMachineProgram.address,\n          candyMachineAuthority: candyMachineAuthority.publicKey,\n        },\n        candyGuardProgram.address\n      ),\n      signers: [candyGuardAuthority, candyMachineAuthority],\n      key: params.wrapCandyGuardInstructionKey ?? 'wrapCandyGuard',\n    });\n};\n"]},"metadata":{},"sourceType":"module"}