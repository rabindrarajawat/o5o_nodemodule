{"ast":null,"code":"import { createSetCollectionSizeInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'MigrateToSizedCollectionNftOperation';\n/**\n * Migrates a legacy Collection NFT to a sized Collection NFT.\n * Both can act as a Collection for NFTs but only the latter\n * keeps track of the size of the collection on chain.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .migrateToSizedCollection({ mintAddress, size: toBigNumber(10000) };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst migrateToSizedCollectionNftOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst migrateToSizedCollectionNftOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    return migrateToSizedCollectionNftBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Migrates a legacy Collection NFT to a sized Collection NFT.\n * Both can act as a Collection for NFTs but only the latter\n * keeps track of the size of the collection on chain.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .migrateToSizedCollection({ mintAddress, size: toBigNumber(10000) });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst migrateToSizedCollectionNftBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    mintAddress,\n    collectionAuthority = metaplex.identity(),\n    size,\n    isDelegated = false\n  } = params;\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const nftPdas = metaplex.nfts().pdas();\n  return TransactionBuilder.make().setFeePayer(payer) // Update the metadata account.\n  .add({\n    instruction: createSetCollectionSizeInstruction({\n      collectionMetadata: nftPdas.metadata({\n        mint: mintAddress,\n        programs\n      }),\n      collectionAuthority: collectionAuthority.publicKey,\n      collectionMint: mintAddress,\n      collectionAuthorityRecord: isDelegated ? nftPdas.collectionAuthorityRecord({\n        mint: mintAddress,\n        collectionAuthority: collectionAuthority.publicKey,\n        programs\n      }) : undefined\n    }, {\n      setCollectionSizeArgs: {\n        size\n      }\n    }, tokenMetadataProgram.address),\n    signers: [collectionAuthority],\n    key: params.instructionKey ?? 'setCollectionSize'\n  });\n};\n\nexport { migrateToSizedCollectionNftBuilder, migrateToSizedCollectionNftOperation, migrateToSizedCollectionNftOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/nftModule/operations/migrateToSizedCollectionNft.ts"],"names":["Key","migrateToSizedCollectionNftOperation","useOperation","migrateToSizedCollectionNftOperationHandler","handle","operation","metaplex","scope","migrateToSizedCollectionNftBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","collectionAuthority","identity","size","isDelegated","tokenMetadataProgram","getTokenMetadata","nftPdas","nfts","pdas","TransactionBuilder","make","setFeePayer","add","instruction","createSetCollectionSizeInstruction","collectionMetadata","metadata","mint","publicKey","collectionMint","collectionAuthorityRecord","undefined","setCollectionSizeArgs","address","signers","key","instructionKey"],"mappings":";;4EAcA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,sCAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,oCAAoC,GAC/CC,YAAY,CAAuCF,GAAvC,C;AAEd;AACA;AACA;AACA;;AAmDA;AACA;AACA;AACA;;AACO,MAAMG,2CAAmG,GAC9G;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIyC;IAC/C,OAAOC,kCAAkC,CACvCF,QADuC,EAEvCD,SAAS,CAACI,KAF6B,EAGvCF,KAHuC,CAAlCC,CAILE,cAJKF,CAIUF,QAJVE,EAIoBD,KAAK,CAACI,cAJ1BH,CAAP;EAKF;AAXF,CADK,C,CAeP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaA,MAAAA,kCAAkC,GAAG,UAChDF,QADgD,EAEhDM,MAFgD,EAIzB;EAAA,IADvBC,OACuB,uEADc,EACd;EACvB,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGT,QAAQ,CAACU,GAATV,GAAeW,kBAAfX;EAApB,IAA4DO,OAAlE;EACA,MAAM;IACJK,WADI;IAEJC,mBAAmB,GAAGb,QAAQ,CAACc,QAATd,EAFlB;IAGJe,IAHI;IAIJC,WAAW,GAAG;EAJV,IAKFV,MALJ;EAOA,MAAMW,oBAAoB,GAAGjB,QAAQ,CAACQ,QAATR,GAAoBkB,gBAApBlB,CAAqCQ,QAArCR,CAA7B;EACA,MAAMmB,OAAO,GAAGnB,QAAQ,CAACoB,IAATpB,GAAgBqB,IAAhBrB,EAAhB;EAEA,OACEsB,kBAAkB,CAACC,IAAnBD,GACGE,WADHF,CACeb,KADfa,EAGE;EAHFA,CAIGG,GAJHH,CAIO;IACHI,WAAW,EAAEC,kCAAkC,CAC7C;MACEC,kBAAkB,EAAET,OAAO,CAACU,QAARV,CAAiB;QACnCW,IAAI,EAAElB,WAD6B;QAEnCJ;MAFmC,CAAjBW,CADtB;MAKEN,mBAAmB,EAAEA,mBAAmB,CAACkB,SAL3C;MAMEC,cAAc,EAAEpB,WANlB;MAOEqB,yBAAyB,EAAEjB,WAAW,GAClCG,OAAO,CAACc,yBAARd,CAAkC;QAChCW,IAAI,EAAElB,WAD0B;QAEhCC,mBAAmB,EAAEA,mBAAmB,CAACkB,SAFT;QAGhCvB;MAHgC,CAAlCW,CADkC,GAMlCe;IAbN,CAD6C,EAgB7C;MAAEC,qBAAqB,EAAE;QAAEpB;MAAF;IAAzB,CAhB6C,EAiB7CE,oBAAoB,CAACmB,OAjBwB,CAD5C;IAoBHC,OAAO,EAAE,CAACxB,mBAAD,CApBN;IAqBHyB,GAAG,EAAEhC,MAAM,CAACiC,cAAPjC,IAAyB;EArB3B,CAJPgB,CADF;AA6BF,CA7CapB","sourcesContent":["import { createSetCollectionSizeInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  BigNumber,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'MigrateToSizedCollectionNftOperation' as const;\n\n/**\n * Migrates a legacy Collection NFT to a sized Collection NFT.\n * Both can act as a Collection for NFTs but only the latter\n * keeps track of the size of the collection on chain.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .migrateToSizedCollection({ mintAddress, size: toBigNumber(10000) };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const migrateToSizedCollectionNftOperation =\n  useOperation<MigrateToSizedCollectionNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type MigrateToSizedCollectionNftOperation = Operation<\n  typeof Key,\n  MigrateToSizedCollectionNftInput,\n  MigrateToSizedCollectionNftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type MigrateToSizedCollectionNftInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /**\n   * An authority that can update the Collection NFT at the\n   * given mint address. This can either be the update authority\n   * for that Collection NFT or an approved delegate authority.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  collectionAuthority?: Signer;\n\n  /**\n   * The current size of all **verified** NFTs and/or SFTs within\n   * the Collection.\n   *\n   * **Warning, once set, this size can no longer be updated.**\n   */\n  size: BigNumber;\n\n  /**\n   * Whether or not the provided `collectionAuthority` is a delegated\n   * collection authority, i.e. it was approved by the update authority\n   * using `metaplex.nfts().approveCollectionAuthority()`.\n   *\n   * @defaultValue `false`\n   */\n  isDelegated?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type MigrateToSizedCollectionNftOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const migrateToSizedCollectionNftOperationHandler: OperationHandler<MigrateToSizedCollectionNftOperation> =\n  {\n    handle: async (\n      operation: MigrateToSizedCollectionNftOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<MigrateToSizedCollectionNftOutput> => {\n      return migrateToSizedCollectionNftBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type MigrateToSizedCollectionNftBuilderParams = Omit<\n  MigrateToSizedCollectionNftInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that sets the collection size. */\n  instructionKey?: string;\n};\n\n/**\n * Migrates a legacy Collection NFT to a sized Collection NFT.\n * Both can act as a Collection for NFTs but only the latter\n * keeps track of the size of the collection on chain.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .migrateToSizedCollection({ mintAddress, size: toBigNumber(10000) });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const migrateToSizedCollectionNftBuilder = (\n  metaplex: Metaplex,\n  params: MigrateToSizedCollectionNftBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    collectionAuthority = metaplex.identity(),\n    size,\n    isDelegated = false,\n  } = params;\n\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const nftPdas = metaplex.nfts().pdas();\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Update the metadata account.\n      .add({\n        instruction: createSetCollectionSizeInstruction(\n          {\n            collectionMetadata: nftPdas.metadata({\n              mint: mintAddress,\n              programs,\n            }),\n            collectionAuthority: collectionAuthority.publicKey,\n            collectionMint: mintAddress,\n            collectionAuthorityRecord: isDelegated\n              ? nftPdas.collectionAuthorityRecord({\n                  mint: mintAddress,\n                  collectionAuthority: collectionAuthority.publicKey,\n                  programs,\n                })\n              : undefined,\n          },\n          { setCollectionSizeArgs: { size } },\n          tokenMetadataProgram.address\n        ),\n        signers: [collectionAuthority],\n        key: params.instructionKey ?? 'setCollectionSize',\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}