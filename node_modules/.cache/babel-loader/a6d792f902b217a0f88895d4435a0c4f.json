{"ast":null,"code":"import { createUpdateInstruction } from '@metaplex-foundation/mpl-candy-guard';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateCandyGuardOperation';\n/**\n * Updates an existing Candy Guard account.\n *\n * Note that the provided `guards` and `groups`\n * will replace the existing ones.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .updateCandyGuard({\n *     candyGuard: candyGuard.address,\n *     guards: {\n *       startDate: { date: toDateTime('2022-09-05T20:00:00.000Z') },\n *       solPayment: { amount: sol(1.5), },\n *       botTax: { lamports: sol(0.01), lastInstruction: true },\n *     },\n *     groups: [],\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst updateCandyGuardOperation = _updateCandyGuardOperation; // eslint-disable-next-line @typescript-eslint/naming-convention\n\nfunction _updateCandyGuardOperation(input) {\n  return {\n    key: Key,\n    input\n  };\n}\n\n_updateCandyGuardOperation.key = Key;\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst updateCandyGuardOperationHandler = {\n  async handle(operation, metaplex, scope) {\n    return updateCandyGuardBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Updates an existing Candy Guard account.\n *\n * Note that the provided `guards` and `groups`\n * will replace the existing ones.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .candyMachines()\n *   .builders()\n *   .updateCandyGuard({\n *     candyGuard: candyGuard.address,\n *     guards: {\n *       startDate: { date: toDateTime('2022-09-05T20:00:00.000Z') },\n *       solPayment: { amount: sol(1.5), },\n *       botTax: { lamports: sol(0.01), lastInstruction: true },\n *     },\n *     groups: [],\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst updateCandyGuardBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    candyGuard,\n    guards,\n    groups,\n    authority = metaplex.identity()\n  } = params;\n  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);\n  const serializedSettings = metaplex.candyMachines().guards().serializeSettings(guards, groups, programs);\n  return TransactionBuilder.make().setFeePayer(payer) // Update the candy guard account.\n  .add({\n    instruction: createUpdateInstruction({\n      candyGuard,\n      authority: authority.publicKey,\n      payer: payer.publicKey\n    }, {\n      data: serializedSettings\n    }, candyGuardProgram.address),\n    signers: [authority, payer],\n    key: params.updateInstructionKey ?? 'updateCandyGuard'\n  });\n};\n\nexport { updateCandyGuardBuilder, updateCandyGuardOperation, updateCandyGuardOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineModule/operations/updateCandyGuard.ts"],"names":["Key","updateCandyGuardOperation","_updateCandyGuardOperation","input","key","updateCandyGuardOperationHandler","handle","operation","metaplex","scope","updateCandyGuardBuilder","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","candyGuard","guards","groups","authority","identity","candyGuardProgram","getCandyGuard","serializedSettings","candyMachines","serializeSettings","TransactionBuilder","make","setFeePayer","add","instruction","createUpdateInstruction","publicKey","data","address","signers","updateInstructionKey"],"mappings":";4EAQA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,2BAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,MAAMC,yBAAyB,GAAGC,0BAAlC,C,CACP;;AACA,SAASA,0BAAT,CAEEC,KAFF,EAEiE;EAC/D,OAAO;IAAEC,GAAG,EAAEJ,GAAP;IAAYG;EAAZ,CAAP;AACF;;AACAD,0BAA0B,CAACE,GAA3BF,GAAiCF,GAAjCE;AAEA;AACA;AACA;AACA;;AA4DA;AACA;AACA;AACA;;AACO,MAAMG,gCAA6E,GACxF;EACE,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAImC;IACjC,OAAOC,uBAAuB,CAC5BF,QAD4B,EAE5BD,SAAS,CAACJ,KAFkB,EAG5BM,KAH4B,CAAvBC,CAILC,cAJKD,CAIUF,QAJVE,EAIoBD,KAAK,CAACG,cAJ1BF,CAAP;EAKF;;AAXF,CADK,C,CAeP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaA,MAAAA,uBAAuB,GAAG,UAGrCF,QAHqC,EAIrCK,MAJqC,EAMd;EAAA,IADvBC,OACuB,uEADc,EACd;EACvB,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGR,QAAQ,CAACS,GAATT,GAAeU,kBAAfV;EAApB,IAA4DM,OAAlE;EACA,MAAM;IACJK,UADI;IAEJC,MAFI;IAGJC,MAHI;IAIJC,SAAS,GAAGd,QAAQ,CAACe,QAATf;EAJR,IAKFK,MALJ;EAOA,MAAMW,iBAAiB,GAAGhB,QAAQ,CAACO,QAATP,GAAoBiB,aAApBjB,CAAkCO,QAAlCP,CAA1B;EACA,MAAMkB,kBAAkB,GAAGlB,QAAQ,CAChCmB,aADwBnB,GAExBY,MAFwBZ,GAGxBoB,iBAHwBpB,CAGHY,MAHGZ,EAGKa,MAHLb,EAGaO,QAHbP,CAA3B;EAKA,OACEqB,kBAAkB,CAACC,IAAnBD,GACGE,WADHF,CACeb,KADfa,EAGE;EAHFA,CAIGG,GAJHH,CAIO;IACHI,WAAW,EAAEC,uBAAuB,CAClC;MACEf,UADF;MAEEG,SAAS,EAAEA,SAAS,CAACa,SAFvB;MAGEnB,KAAK,EAAEA,KAAK,CAACmB;IAHf,CADkC,EAMlC;MAAEC,IAAI,EAAEV;IAAR,CANkC,EAOlCF,iBAAiB,CAACa,OAPgB,CADjC;IAUHC,OAAO,EAAE,CAAChB,SAAD,EAAYN,KAAZ,CAVN;IAWHZ,GAAG,EAAES,MAAM,CAAC0B,oBAAP1B,IAA+B;EAXjC,CAJPgB,CADF;AAmBF,CAxCanB","sourcesContent":["import { createUpdateInstruction } from '@metaplex-foundation/mpl-candy-guard';\nimport type { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { CandyGuardsSettings, DefaultCandyGuardSettings } from '../guards';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport { Operation, OperationHandler, OperationScope, Signer } from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateCandyGuardOperation' as const;\n\n/**\n * Updates an existing Candy Guard account.\n *\n * Note that the provided `guards` and `groups`\n * will replace the existing ones.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .updateCandyGuard({\n *     candyGuard: candyGuard.address,\n *     guards: {\n *       startDate: { date: toDateTime('2022-09-05T20:00:00.000Z') },\n *       solPayment: { amount: sol(1.5), },\n *       botTax: { lamports: sol(0.01), lastInstruction: true },\n *     },\n *     groups: [],\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const updateCandyGuardOperation = _updateCandyGuardOperation;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _updateCandyGuardOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(input: UpdateCandyGuardInput<T>): UpdateCandyGuardOperation<T> {\n  return { key: Key, input };\n}\n_updateCandyGuardOperation.key = Key;\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UpdateCandyGuardOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = Operation<typeof Key, UpdateCandyGuardInput<T>, UpdateCandyGuardOutput>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UpdateCandyGuardInput<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = {\n  /** The address of the Candy Guard to update. */\n  candyGuard: PublicKey;\n\n  /**\n   * The settings of all guards we wish to activate.\n   *\n   * Note that this will override the existing `guards` parameter\n   * so you must provide all guards you wish to activate.\n   *\n   * Any guard not provided or set to `null` will be disabled.\n   */\n  guards: Partial<T>;\n\n  /**\n   * This parameter allows us to create multiple minting groups that have their\n   * own set of requirements â€” i.e. guards.\n   *\n   * Note that this will override the existing `groups` parameter\n   * so you must provide all groups and guards you wish to activate.\n   *\n   * When groups are provided, the `guards` parameter becomes a set of default\n   * guards that will be applied to all groups. If a specific group enables\n   * a guard that is also present in the default guards, the group's guard\n   * will override the default guard.\n   *\n   * For each group, any guard not provided or set to `null` will be disabled.\n   *\n   * You may disable groups by providing an empty array `[]`.\n   */\n  groups?: { label: string; guards: Partial<T> }[];\n\n  /**\n   * The Signer authorized to update the candy Guard.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UpdateCandyGuardOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const updateCandyGuardOperationHandler: OperationHandler<UpdateCandyGuardOperation> =\n  {\n    async handle<T extends CandyGuardsSettings = DefaultCandyGuardSettings>(\n      operation: UpdateCandyGuardOperation<T>,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<UpdateCandyGuardOutput> {\n      return updateCandyGuardBuilder<T>(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UpdateCandyGuardBuilderParams<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = Omit<UpdateCandyGuardInput<T>, 'confirmOptions'> & {\n  /** A key to distinguish the instruction that updates the candy guard. */\n  updateInstructionKey?: string;\n};\n\n/**\n * Updates an existing Candy Guard account.\n *\n * Note that the provided `guards` and `groups`\n * will replace the existing ones.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .candyMachines()\n *   .builders()\n *   .updateCandyGuard({\n *     candyGuard: candyGuard.address,\n *     guards: {\n *       startDate: { date: toDateTime('2022-09-05T20:00:00.000Z') },\n *       solPayment: { amount: sol(1.5), },\n *       botTax: { lamports: sol(0.01), lastInstruction: true },\n *     },\n *     groups: [],\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const updateCandyGuardBuilder = <\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  metaplex: Metaplex,\n  params: UpdateCandyGuardBuilderParams<T>,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    candyGuard,\n    guards,\n    groups,\n    authority = metaplex.identity(),\n  } = params;\n\n  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);\n  const serializedSettings = metaplex\n    .candyMachines()\n    .guards()\n    .serializeSettings<T>(guards, groups, programs);\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Update the candy guard account.\n      .add({\n        instruction: createUpdateInstruction(\n          {\n            candyGuard,\n            authority: authority.publicKey,\n            payer: payer.publicKey,\n          },\n          { data: serializedSettings },\n          candyGuardProgram.address\n        ),\n        signers: [authority, payer],\n        key: params.updateInstructionKey ?? 'updateCandyGuard',\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}