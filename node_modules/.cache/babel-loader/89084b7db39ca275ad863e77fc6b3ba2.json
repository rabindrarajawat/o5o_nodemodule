{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeInitializeMintCloseAuthorityInstructionUnchecked = exports.decodeInitializeMintCloseAuthorityInstruction = exports.createInitializeMintCloseAuthorityInstruction = exports.initializeMintCloseAuthorityInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\n\n\nexports.initializeMintCloseAuthorityInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('closeAuthorityOption'), (0, buffer_layout_utils_1.publicKey)('closeAuthority')]);\n/**\n * Construct an InitializeMintCloseAuthority instruction\n *\n * @param mint            Token mint account\n * @param closeAuthority  Optional authority that can close the mint\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createInitializeMintCloseAuthorityInstruction(mint, closeAuthority, programId) {\n  if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n    throw new errors_js_1.TokenUnsupportedInstructionError();\n  }\n\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(exports.initializeMintCloseAuthorityInstructionData.span);\n  exports.initializeMintCloseAuthorityInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InitializeMintCloseAuthority,\n    closeAuthorityOption: closeAuthority ? 1 : 0,\n    closeAuthority: closeAuthority || new web3_js_1.PublicKey(0)\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createInitializeMintCloseAuthorityInstruction = createInitializeMintCloseAuthorityInstruction;\n/**\n * Decode an InitializeMintCloseAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeInitializeMintCloseAuthorityInstruction(instruction, programId) {\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializeMintCloseAuthorityInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint\n    },\n    data\n  } = decodeInitializeMintCloseAuthorityInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.InitializeMintCloseAuthority) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!mint) throw new errors_js_1.TokenInvalidInstructionKeysError();\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data\n  };\n}\n\nexports.decodeInitializeMintCloseAuthorityInstruction = decodeInitializeMintCloseAuthorityInstruction;\n/**\n * Decode an InitializeMintCloseAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeInitializeMintCloseAuthorityInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [mint],\n    data\n  } = _ref;\n  const {\n    instruction,\n    closeAuthorityOption,\n    closeAuthority\n  } = exports.initializeMintCloseAuthorityInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      mint\n    },\n    data: {\n      instruction,\n      closeAuthority: closeAuthorityOption ? closeAuthority : null\n    }\n  };\n}\n\nexports.decodeInitializeMintCloseAuthorityInstructionUnchecked = decodeInitializeMintCloseAuthorityInstructionUnchecked;","map":{"version":3,"sources":["../../../src/instructions/initializeMintCloseAuthority.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeInitializeMintCloseAuthorityInstructionUnchecked = exports.decodeInitializeMintCloseAuthorityInstruction = exports.createInitializeMintCloseAuthorityInstruction = exports.initializeMintCloseAuthorityInstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.initializeMintCloseAuthorityInstructionData = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('instruction'),\n    (0, buffer_layout_1.u8)('closeAuthorityOption'),\n    (0, buffer_layout_utils_1.publicKey)('closeAuthority'),\n]);\n/**\n * Construct an InitializeMintCloseAuthority instruction\n *\n * @param mint            Token mint account\n * @param closeAuthority  Optional authority that can close the mint\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeMintCloseAuthorityInstruction(mint, closeAuthority, programId) {\n    if (!(0, constants_js_1.programSupportsExtensions)(programId)) {\n        throw new errors_js_1.TokenUnsupportedInstructionError();\n    }\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(exports.initializeMintCloseAuthorityInstructionData.span);\n    exports.initializeMintCloseAuthorityInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.InitializeMintCloseAuthority,\n        closeAuthorityOption: closeAuthority ? 1 : 0,\n        closeAuthority: closeAuthority || new web3_js_1.PublicKey(0),\n    }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createInitializeMintCloseAuthorityInstruction = createInitializeMintCloseAuthorityInstruction;\n/**\n * Decode an InitializeMintCloseAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeInitializeMintCloseAuthorityInstruction(instruction, programId) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.initializeMintCloseAuthorityInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { mint }, data, } = decodeInitializeMintCloseAuthorityInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.InitializeMintCloseAuthority)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!mint)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data,\n    };\n}\nexports.decodeInitializeMintCloseAuthorityInstruction = decodeInitializeMintCloseAuthorityInstruction;\n/**\n * Decode an InitializeMintCloseAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeInitializeMintCloseAuthorityInstructionUnchecked({ programId, keys: [mint], data, }) {\n    const { instruction, closeAuthorityOption, closeAuthority } = exports.initializeMintCloseAuthorityInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n        },\n        data: {\n            instruction,\n            closeAuthority: closeAuthorityOption ? closeAuthority : null,\n        },\n    };\n}\nexports.decodeInitializeMintCloseAuthorityInstructionUnchecked = decodeInitializeMintCloseAuthorityInstructionUnchecked;\n//# sourceMappingURL=initializeMintCloseAuthority.js.map"]},"metadata":{},"sourceType":"script"}