{"ast":null,"code":"import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.mjs';\nimport { AssetNotFoundError } from '../../errors/SdkError.mjs';\nimport { toBigNumber } from '../../types/BigNumber.mjs';\nimport { lamports } from '../../types/Amount.mjs';\nconst DEFAULT_BASE_URL = 'https://mockstorage.example.com/';\nconst DEFAULT_COST_PER_BYTE = 1;\n\nclass MockStorageDriver {\n  constructor(options) {\n    _defineProperty(this, \"cache\", {});\n\n    this.baseUrl = options?.baseUrl ?? DEFAULT_BASE_URL;\n    this.costPerByte = toBigNumber(options?.costPerByte != null ? options?.costPerByte : DEFAULT_COST_PER_BYTE);\n  }\n\n  async getUploadPrice(bytes) {\n    return lamports(this.costPerByte.muln(bytes));\n  }\n\n  async upload(file) {\n    const uri = `${this.baseUrl}${file.uniqueName}`;\n    this.cache[uri] = file;\n    return uri;\n  }\n\n  async download(uri) {\n    const file = this.cache[uri];\n\n    if (!file) {\n      throw new AssetNotFoundError(uri);\n    }\n\n    return file;\n  }\n\n}\n\nexport { MockStorageDriver };","map":{"version":3,"sources":["../../../../src/plugins/mockStorage/MockStorageDriver.ts"],"names":["DEFAULT_BASE_URL","DEFAULT_COST_PER_BYTE","MockStorageDriver","constructor","options","baseUrl","costPerByte","toBigNumber","getUploadPrice","bytes","lamports","muln","upload","file","uri","uniqueName","cache","download","AssetNotFoundError"],"mappings":";;;;AAIA,MAAMA,gBAAgB,GAAG,kCAAzB;AACA,MAAMC,qBAAqB,GAAG,CAA9B;;AAOO,MAAMC,iBAAN,CAAiD;EAKtDC,WAAW,CAACC,OAAD,EAA+B;IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAJM,EAIN,CAAA;;IACxC,KAAKC,OAAL,GAAeD,OAAO,EAAEC,OAATD,IAAoBJ,gBAAnC;IACA,KAAKM,WAAL,GAAmBC,WAAW,CAC5BH,OAAO,EAAEE,WAATF,IAAwB,IAAxBA,GACIA,OAAO,EAAEE,WADbF,GAEIH,qBAHwB,CAA9B;EAKF;;EAEoB,MAAdO,cAAc,CAACC,KAAD,EAAiC;IACnD,OAAOC,QAAQ,CAAC,KAAKJ,WAAL,CAAiBK,IAAjB,CAAsBF,KAAtB,CAAD,CAAf;EACF;;EAEY,MAANG,MAAM,CAACC,IAAD,EAAsC;IAChD,MAAMC,GAAG,GAAI,GAAE,KAAKT,OAAUQ,GAAAA,IAAI,CAACE,UAAY,EAA/C;IACA,KAAKC,KAAL,CAAWF,GAAX,IAAkBD,IAAlB;IAEA,OAAOC,GAAP;EACF;;EAEc,MAARG,QAAQ,CAACH,GAAD,EAAqC;IACjD,MAAMD,IAAI,GAAG,KAAKG,KAAL,CAAWF,GAAX,CAAb;;IAEA,IAAI,CAACD,IAAL,EAAW;MACT,MAAM,IAAIK,kBAAJ,CAAuBJ,GAAvB,CAAN;IACF;;IAEA,OAAOD,IAAP;EACF;;AAjCsD","sourcesContent":["import { MetaplexFile, StorageDriver } from '../storageModule';\nimport { Amount, BigNumber, lamports, toBigNumber } from '@/types';\nimport { AssetNotFoundError } from '@/errors';\n\nconst DEFAULT_BASE_URL = 'https://mockstorage.example.com/';\nconst DEFAULT_COST_PER_BYTE = 1;\n\nexport type MockStorageOptions = {\n  baseUrl?: string;\n  costPerByte?: BigNumber | number;\n};\n\nexport class MockStorageDriver implements StorageDriver {\n  protected cache: Record<string, MetaplexFile> = {};\n  public readonly baseUrl: string;\n  public readonly costPerByte: BigNumber;\n\n  constructor(options?: MockStorageOptions) {\n    this.baseUrl = options?.baseUrl ?? DEFAULT_BASE_URL;\n    this.costPerByte = toBigNumber(\n      options?.costPerByte != null\n        ? options?.costPerByte\n        : DEFAULT_COST_PER_BYTE\n    );\n  }\n\n  async getUploadPrice(bytes: number): Promise<Amount> {\n    return lamports(this.costPerByte.muln(bytes));\n  }\n\n  async upload(file: MetaplexFile): Promise<string> {\n    const uri = `${this.baseUrl}${file.uniqueName}`;\n    this.cache[uri] = file;\n\n    return uri;\n  }\n\n  async download(uri: string): Promise<MetaplexFile> {\n    const file = this.cache[uri];\n\n    if (!file) {\n      throw new AssetNotFoundError(uri);\n    }\n\n    return file;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}