{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeInitializeMintInstructionUnchecked = exports.decodeInitializeMintInstruction = exports.createInitializeMintInstruction = exports.initializeMintInstructionData = void 0;\n\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\n\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst constants_js_1 = require(\"../constants.js\");\n\nconst errors_js_1 = require(\"../errors.js\");\n\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\n\n\nexports.initializeMintInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)('instruction'), (0, buffer_layout_1.u8)('decimals'), (0, buffer_layout_utils_1.publicKey)('mintAuthority'), (0, buffer_layout_1.u8)('freezeAuthorityOption'), (0, buffer_layout_utils_1.publicKey)('freezeAuthority')]);\n/**\n * Construct an InitializeMint instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nfunction createInitializeMintInstruction(mint, decimals, mintAuthority, freezeAuthority) {\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : constants_js_1.TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = Buffer.alloc(exports.initializeMintInstructionData.span);\n  exports.initializeMintInstructionData.encode({\n    instruction: types_js_1.TokenInstruction.InitializeMint,\n    decimals,\n    mintAuthority,\n    freezeAuthorityOption: freezeAuthority ? 1 : 0,\n    freezeAuthority: freezeAuthority || new web3_js_1.PublicKey(0)\n  }, data);\n  return new web3_js_1.TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n\nexports.createInitializeMintInstruction = createInitializeMintInstruction;\n/**\n * Decode an InitializeMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nfunction decodeInitializeMintInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_js_1.TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new errors_js_1.TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== exports.initializeMintInstructionData.span) throw new errors_js_1.TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint,\n      rent\n    },\n    data\n  } = decodeInitializeMintInstructionUnchecked(instruction);\n  if (data.instruction !== types_js_1.TokenInstruction.InitializeMint) throw new errors_js_1.TokenInvalidInstructionTypeError();\n  if (!mint || !rent) throw new errors_js_1.TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      mint,\n      rent\n    },\n    data\n  };\n}\n\nexports.decodeInitializeMintInstruction = decodeInitializeMintInstruction;\n/**\n * Decode an InitializeMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nfunction decodeInitializeMintInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [mint, rent],\n    data\n  } = _ref;\n  const {\n    instruction,\n    decimals,\n    mintAuthority,\n    freezeAuthorityOption,\n    freezeAuthority\n  } = exports.initializeMintInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      mint,\n      rent\n    },\n    data: {\n      instruction,\n      decimals,\n      mintAuthority,\n      freezeAuthority: freezeAuthorityOption ? freezeAuthority : null\n    }\n  };\n}\n\nexports.decodeInitializeMintInstructionUnchecked = decodeInitializeMintInstructionUnchecked;","map":{"version":3,"sources":["../../../src/instructions/initializeMint.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeInitializeMintInstructionUnchecked = exports.decodeInitializeMintInstruction = exports.createInitializeMintInstruction = exports.initializeMintInstructionData = void 0;\nconst buffer_layout_1 = require(\"@solana/buffer-layout\");\nconst buffer_layout_utils_1 = require(\"@solana/buffer-layout-utils\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst constants_js_1 = require(\"../constants.js\");\nconst errors_js_1 = require(\"../errors.js\");\nconst types_js_1 = require(\"./types.js\");\n/** TODO: docs */\nexports.initializeMintInstructionData = (0, buffer_layout_1.struct)([\n    (0, buffer_layout_1.u8)('instruction'),\n    (0, buffer_layout_1.u8)('decimals'),\n    (0, buffer_layout_utils_1.publicKey)('mintAuthority'),\n    (0, buffer_layout_1.u8)('freezeAuthorityOption'),\n    (0, buffer_layout_utils_1.publicKey)('freezeAuthority'),\n]);\n/**\n * Construct an InitializeMint instruction\n *\n * @param mint            Token mint account\n * @param decimals        Number of decimals in token account amounts\n * @param mintAuthority   Minting authority\n * @param freezeAuthority Optional authority that can freeze token accounts\n * @param programId       SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nfunction createInitializeMintInstruction(mint, decimals, mintAuthority, freezeAuthority, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    const data = Buffer.alloc(exports.initializeMintInstructionData.span);\n    exports.initializeMintInstructionData.encode({\n        instruction: types_js_1.TokenInstruction.InitializeMint,\n        decimals,\n        mintAuthority,\n        freezeAuthorityOption: freezeAuthority ? 1 : 0,\n        freezeAuthority: freezeAuthority || new web3_js_1.PublicKey(0),\n    }, data);\n    return new web3_js_1.TransactionInstruction({ keys, programId, data });\n}\nexports.createInitializeMintInstruction = createInitializeMintInstruction;\n/**\n * Decode an InitializeMint instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nfunction decodeInitializeMintInstruction(instruction, programId = constants_js_1.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new errors_js_1.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== exports.initializeMintInstructionData.span)\n        throw new errors_js_1.TokenInvalidInstructionDataError();\n    const { keys: { mint, rent }, data, } = decodeInitializeMintInstructionUnchecked(instruction);\n    if (data.instruction !== types_js_1.TokenInstruction.InitializeMint)\n        throw new errors_js_1.TokenInvalidInstructionTypeError();\n    if (!mint || !rent)\n        throw new errors_js_1.TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data,\n    };\n}\nexports.decodeInitializeMintInstruction = decodeInitializeMintInstruction;\n/**\n * Decode an InitializeMint instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nfunction decodeInitializeMintInstructionUnchecked({ programId, keys: [mint, rent], data, }) {\n    const { instruction, decimals, mintAuthority, freezeAuthorityOption, freezeAuthority } = exports.initializeMintInstructionData.decode(data);\n    return {\n        programId,\n        keys: {\n            mint,\n            rent,\n        },\n        data: {\n            instruction,\n            decimals,\n            mintAuthority,\n            freezeAuthority: freezeAuthorityOption ? freezeAuthority : null,\n        },\n    };\n}\nexports.decodeInitializeMintInstructionUnchecked = decodeInitializeMintInstructionUnchecked;\n//# sourceMappingURL=initializeMint.js.map"]},"metadata":{},"sourceType":"script"}