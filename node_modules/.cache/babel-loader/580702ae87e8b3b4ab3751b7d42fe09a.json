{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createSyncNativeInstruction } from '../instructions/syncNative.js';\n/**\n * Sync the balance of a native SPL token account to the underlying system account's lamports\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Native account to sync\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function syncNative(connection, payer, account, confirmOptions) {\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_PROGRAM_ID;\n  const transaction = new Transaction().add(createSyncNativeInstruction(account, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}","map":{"version":3,"sources":["../../../src/actions/syncNative.ts"],"names":[],"mappings":"AACA,SAAS,yBAAT,EAAoC,WAApC,QAAuD,iBAAvD;AACA,SAAS,gBAAT,QAAiC,iBAAjC;AACA,SAAS,2BAAT,QAA4C,+BAA5C;AAEA;;;;;;;;;;AAUG;;AACH,OAAO,eAAe,UAAf,CACH,UADG,EAEH,KAFG,EAGH,OAHG,EAIH,cAJG,EAKyB;EAAA,IAA5B,SAA4B,uEAAhB,gBAAgB;EAE5B,MAAM,WAAW,GAAG,IAAI,WAAJ,GAAkB,GAAlB,CAAsB,2BAA2B,CAAC,OAAD,EAAU,SAAV,CAAjD,CAApB;EAEA,OAAO,MAAM,yBAAyB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAAC,KAAD,CAA1B,EAAmC,cAAnC,CAAtC;AACH","sourceRoot":"","sourcesContent":["import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { createSyncNativeInstruction } from '../instructions/syncNative.js';\n/**\n * Sync the balance of a native SPL token account to the underlying system account's lamports\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Native account to sync\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function syncNative(connection, payer, account, confirmOptions, programId = TOKEN_PROGRAM_ID) {\n    const transaction = new Transaction().add(createSyncNativeInstruction(account, programId));\n    return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n//# sourceMappingURL=syncNative.js.map"]},"metadata":{},"sourceType":"module"}