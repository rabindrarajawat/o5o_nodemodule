{"ast":null,"code":"import axios from \"axios\";\nimport { sendTransactions } from \"./utility\";\nimport { COLLECTION_NAME } from \"../constant/contract\";\nimport { NEXT_PUBLIC_SOLANA_NETWORK, NEXT_PUBLIC_SOLANA_COL_CREATOR } from '../constant/env';\nimport * as anchor from \"@project-serum/anchor\";\nimport { resolveToWalletAddress, getParsedNftAccountsByOwner } from \"@nfteyez/sol-rayz\";\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport { programs } from '@metaplex/js';\nimport { LAMPORTS_PER_SOL, SystemProgram, PublicKey, Connection, clusterApiUrl } from \"@solana/web3.js\";\nconst {\n  metadata: {\n    Metadata: Metadata\n  }\n} = programs; // const connection = new anchor.web3.Connection(NEXT_PUBLIC_SOLANA_NETWORK == \"devnet\" ? \"https://metaplex.devnet.rpcpool.com\" : \"https://metaplex.mainnet.rpcpool.com\");\n\nconst connection = new anchor.web3.Connection(NEXT_PUBLIC_SOLANA_NETWORK == \"devnet\" ? \"https://api.devnet.solana.com\" : \"https://metaplex.mainnet.rpcpool.com\");\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\");\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\nconst ARWEAVE_PUBKEY = new anchor.web3.PublicKey(\"XCVoVzSUv6nM7zytC1CPk9b2BxsQwXC1sW8wxQRhHBC\");\nconst RENT_STORAGE_PRICE = 0.015;\nexport const awaitTransactionSignatureConfirmation = async function (txid, timeout, connection) {\n  let commitment = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"recent\";\n  let queryStatus = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  let done = false;\n  let status = {\n    slot: 0,\n    confirmations: 0,\n    err: null\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({\n        timeout: true\n      });\n    }, timeout);\n\n    try {\n      subId = connection.onSignature(txid, (result, context) => {\n        done = true;\n        status = {\n          err: result.err,\n          slot: context.slot,\n          confirmations: 0\n        };\n\n        if (result.err) {\n          console.log(\"Rejected via websocket\", result.err);\n          reject(status);\n        } else {\n          console.log(\"Resolved via websocket\", result);\n          resolve(status);\n        }\n      }, commitment);\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([txid]);\n          status = signatureStatuses && signatureStatuses.value[0];\n\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n\n      await sleep(2000);\n    }\n  }); //@ts-ignore\n\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n\n  done = true;\n  console.log(\"Returning status \", status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (associatedTokenAddress, payer, walletAddress, splTokenMintAddress) => {\n  const keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: associatedTokenAddress,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: walletAddress,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: splTokenMintAddress,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: anchor.web3.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: TOKEN_PROGRAM_ID,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  return new anchor.web3.TransactionInstruction({\n    keys: keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([])\n  });\n};\n\nexport const getCandyMachineState = async (anchorWallet, candyMachineId, connection) => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"recent\"\n  });\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n  const candyMachine = {\n    id: candyMachineId,\n    connection: connection,\n    program: program\n  };\n  const state = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n  let goLiveDate = state.data.goLiveDate.toNumber();\n  goLiveDate = new Date(goLiveDate * 1000);\n  return {\n    candyMachine: candyMachine,\n    itemsAvailable: itemsAvailable,\n    itemsRedeemed: itemsRedeemed,\n    itemsRemaining: itemsRemaining,\n    goLiveDate: goLiveDate\n  };\n};\n\nconst getMasterEdition = async mint => {\n  return (await anchor.web3.PublicKey.findProgramAddress([Buffer.from(\"metadata\"), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer(), Buffer.from(\"edition\")], TOKEN_METADATA_PROGRAM_ID))[0];\n};\n\nconst getMetadata = async mint => {\n  return (await anchor.web3.PublicKey.findProgramAddress([Buffer.from(\"metadata\"), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()], TOKEN_METADATA_PROGRAM_ID))[0];\n};\n\nconst getTokenWallet = async (wallet, mint) => {\n  return (await anchor.web3.PublicKey.findProgramAddress([wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID))[0];\n};\n\nexport async function getNftsForOwner(conn, owner) {\n  const allTokens = [];\n  const tokenAccounts = await conn.getParsedTokenAccountsByOwner(owner, {\n    programId: TOKEN_PROGRAM_ID\n  });\n\n  for (let index = 0; index < tokenAccounts.value.length; index++) {\n    try {\n      const tokenAccount = tokenAccounts.value[index];\n      const tokenAmount = tokenAccount.account.data.parsed.info.tokenAmount;\n\n      if (tokenAmount.amount == \"1\" && tokenAmount.decimals == \"0\") {\n        let nftMint = new PublicKey(tokenAccount.account.data.parsed.info.mint);\n        let [pda] = await anchor.web3.PublicKey.findProgramAddress([Buffer.from(\"metadata\"), TOKEN_METADATA_PROGRAM_ID.toBuffer(), nftMint.toBuffer()], TOKEN_METADATA_PROGRAM_ID);\n        const accountInfo = await conn.getParsedAccountInfo(pda);\n        let metadata = new Metadata(owner.toString(), accountInfo.value);\n        const {\n          data: data\n        } = await axios.get(metadata.data.data.uri);\n\n        if (metadata.data.data.symbol == COLLECTION_NAME) {\n          const entireData = { ...data,\n            id: Number(data.name.replace(/^\\D+/g, '').split(' - ')[0])\n          };\n          allTokens.push({\n            account: tokenAccount.pubkey,\n            address: nftMint,\n            ...entireData\n          });\n        }\n      }\n\n      allTokens.sort(function (a, b) {\n        if (a.name < b.name) {\n          return -1;\n        }\n\n        if (a.name > b.name) {\n          return 1;\n        }\n\n        return 0;\n      });\n    } catch (err) {\n      continue;\n    }\n  } // console.log('-------', allTokens);\n\n\n  return allTokens;\n}\nexport async function getNftsForOwner1(owner) {\n  const allTokens = [];\n\n  try {\n    const address = owner.toString();\n    const publicAddress = await resolveToWalletAddress({\n      text: address,\n      connection: connection\n    });\n    const nftArray = await getParsedNftAccountsByOwner({\n      publicAddress: publicAddress,\n      connection: connection\n    });\n    console.log(\"nftArray: \", nftArray);\n\n    for (let nft of nftArray) {\n      // if (nft.data.symbol == COLLECTION_NAME) {\n      console.log(\"nft: \", nft);\n      const tokenAccount = await getTokenWallet(owner, new anchor.web3.PublicKey(nft.mint));\n      console.log(\"metadata uri:\", nft.data.uri);\n      const {\n        data: data\n      } = await axios.get(nft.data.uri);\n\n      if (data.name) {\n        console.log(\"data: \", data);\n        const entireData = { ...data,\n          id: Number(data.name.replace(/^\\D+/g, '').split(' - ')[0])\n        };\n        console.log('mint', nft.mint, 'account', tokenAccount.toString());\n        console.log(\"entiredata: \", entireData);\n        allTokens.push({\n          account: tokenAccount,\n          address: new PublicKey(nft.mint),\n          ...entireData\n        });\n      } // }\n\n    }\n  } catch (error) {\n    console.log(\"Error thrown, while fetching NFTs\", error.message);\n  }\n\n  return allTokens;\n}\nexport const mintOneToken = async (candyMachine, config, payer, treasury) => {\n  const mint = anchor.web3.Keypair.generate();\n  const token = await getTokenWallet(payer, mint.publicKey);\n  const {\n    connection: connection,\n    program: program\n  } = candyMachine;\n  const metadata = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n  const rent = await connection.getMinimumBalanceForRentExemption(MintLayout.span);\n  return await program.rpc.mintNft({\n    accounts: {\n      config: config,\n      candyMachine: candyMachine.id,\n      payer: payer,\n      wallet: treasury,\n      mint: mint.publicKey,\n      metadata: metadata,\n      masterEdition: masterEdition,\n      mintAuthority: payer,\n      updateAuthority: payer,\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY\n    },\n    signers: [mint],\n    instructions: [anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports: rent,\n      programId: TOKEN_PROGRAM_ID\n    }), Token.createInitMintInstruction(TOKEN_PROGRAM_ID, mint.publicKey, 0, payer, payer), createAssociatedTokenAccountInstruction(token, payer, payer, mint.publicKey), Token.createMintToInstruction(TOKEN_PROGRAM_ID, mint.publicKey, token, payer, [], 1), SystemProgram.transfer({\n      fromPubkey: payer,\n      toPubkey: ARWEAVE_PUBKEY,\n      lamports: LAMPORTS_PER_SOL * RENT_STORAGE_PRICE\n    })]\n  });\n};\nexport const shortenAddress = function (address) {\n  let chars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nexport const mintMultipleToken = async function (candyMachine, config, payer, treasury) {\n  let quantity = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;\n  const signersMatrix = [];\n  const instructionsMatrix = [];\n\n  for (let index = 0; index < quantity; index++) {\n    const mint = anchor.web3.Keypair.generate();\n    const token = await getTokenWallet(payer, mint.publicKey); //const { connection } = candyMachine;\n\n    let connection = new Connection(clusterApiUrl(\"devnet\"));\n    console.log(\"candyMachine: \", candyMachine);\n    const rent = await connection.getMinimumBalanceForRentExemption(MintLayout.span);\n    console.log(\"rent: \", rent);\n    const instructions = [anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports: rent,\n      programId: TOKEN_PROGRAM_ID\n    }), Token.createInitMintInstruction(TOKEN_PROGRAM_ID, mint.publicKey, 0, payer, payer), createAssociatedTokenAccountInstruction(token, payer, payer, mint.publicKey), Token.createMintToInstruction(TOKEN_PROGRAM_ID, mint.publicKey, token, payer, [], 1), SystemProgram.transfer({\n      fromPubkey: payer,\n      toPubkey: ARWEAVE_PUBKEY,\n      lamports: LAMPORTS_PER_SOL * RENT_STORAGE_PRICE\n    })];\n    const masterEdition = await getMasterEdition(mint.publicKey);\n    console.log(\"masterEdition: \", masterEdition);\n    const metadata = await getMetadata(mint.publicKey);\n    console.log(\"metadata: \", metadata);\n    instructions.push(await candyMachine.program.instruction.mintNft({\n      accounts: {\n        config: config,\n        candyMachine: candyMachine.id,\n        payer: payer,\n        wallet: treasury,\n        mint: mint.publicKey,\n        metadata: metadata,\n        masterEdition: masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: anchor.web3.SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY\n      }\n    }));\n    const signers = [mint];\n    signersMatrix.push(signers);\n    instructionsMatrix.push(instructions);\n  }\n\n  return await sendTransactions(candyMachine.program.provider.connection, candyMachine.program.provider.wallet, instructionsMatrix, signersMatrix);\n};\nexport async function getSlimeNfts(owner) {\n  const allTokens = [];\n\n  try {\n    const address = owner.toString();\n    const publicAddress = await resolveToWalletAddress({\n      text: address,\n      connection: connection\n    });\n    const nftArray = await getParsedNftAccountsByOwner({\n      publicAddress: publicAddress,\n      connection: connection\n    }); //console.log(\"nftArray: \", nftArray);\n\n    console.log(\"REACT_APP_SOLANA_COL_CREATOR: \", NEXT_PUBLIC_SOLANA_COL_CREATOR);\n\n    for (let nft of nftArray) {\n      // if (nft.data.symbol == COLLECTION_NAME) {        \n      if (nft.data && nft.data.creators && nft.data.creators[0].address === NEXT_PUBLIC_SOLANA_COL_CREATOR) {\n        const tokenAccount = await getTokenWallet(owner, new anchor.web3.PublicKey(nft.mint));\n        console.log(\"metadata uri:\", nft.data.uri);\n        const {\n          data: data\n        } = await axios.get(nft.data.uri);\n\n        if (data.name) {\n          console.log(\"data: \", data);\n          const entireData = { ...data,\n            id: Number(data.name.replace(/^\\D+/g, '').split(' - ')[0])\n          };\n          console.log('mint', nft.mint, 'account', tokenAccount.toString());\n          console.log(\"slime entiredata: \", entireData);\n          allTokens.push({\n            account: tokenAccount,\n            address: new PublicKey(nft.mint),\n            ...entireData\n          });\n        } // }\n\n      }\n    }\n  } catch (error) {\n    console.log(\"Error thrown, while fetching NFTs\", error.message);\n  }\n\n  return allTokens;\n}","map":{"version":3,"names":["axios","sendTransactions","COLLECTION_NAME","NEXT_PUBLIC_SOLANA_NETWORK","NEXT_PUBLIC_SOLANA_COL_CREATOR","anchor","resolveToWalletAddress","getParsedNftAccountsByOwner","MintLayout","TOKEN_PROGRAM_ID","Token","programs","LAMPORTS_PER_SOL","SystemProgram","PublicKey","Connection","clusterApiUrl","metadata","Metadata","connection","web3","CANDY_MACHINE_PROGRAM","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","ARWEAVE_PUBKEY","RENT_STORAGE_PRICE","awaitTransactionSignatureConfirmation","txid","timeout","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","signatureStatuses","getSignatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","Provider","preflightCommitment","idl","Program","fetchIdl","program","candyMachine","id","state","account","fetch","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","getNftsForOwner","conn","owner","allTokens","tokenAccounts","getParsedTokenAccountsByOwner","index","length","tokenAccount","tokenAmount","parsed","info","amount","decimals","nftMint","pda","accountInfo","getParsedAccountInfo","toString","get","uri","symbol","entireData","Number","name","replace","split","push","address","sort","a","b","getNftsForOwner1","publicAddress","text","nftArray","nft","message","mintOneToken","config","treasury","Keypair","generate","token","publicKey","masterEdition","rent","getMinimumBalanceForRentExemption","span","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","createInitMintInstruction","createMintToInstruction","transfer","toPubkey","shortenAddress","chars","slice","ms","mintMultipleToken","quantity","signersMatrix","instructionsMatrix","instruction","getSlimeNfts","creators"],"sources":["D:/software/o5o BNB/o5o-staking-frontend/src/utils/candy-machine.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport { sendTransactions } from \"./utility\";\r\nimport { fetchHashTable } from \"../hooks/use-hash-table\";\r\nimport { COLLECTION_NAME, COLLECTION_SYMBOL } from \"../constant/contract\";\r\nimport { NEXT_PUBLIC_SOLANA_NETWORK, NEXT_PUBLIC_SOLANA_COL_CREATOR } from '../constant/env';\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport {\r\n  resolveToWalletAddress,\r\n  getParsedNftAccountsByOwner,\r\n} from \"@nfteyez/sol-rayz\";\r\nimport {\r\n  MintLayout,\r\n  TOKEN_PROGRAM_ID,\r\n  Token,\r\n} from \"@solana/spl-token\";\r\nimport { programs } from '@metaplex/js';\r\nimport { LAMPORTS_PER_SOL, SystemProgram, PublicKey, Connection, clusterApiUrl } from \"@solana/web3.js\";\r\nconst { metadata: { Metadata } } = programs\r\n\r\n\r\n// const connection = new anchor.web3.Connection(NEXT_PUBLIC_SOLANA_NETWORK == \"devnet\" ? \"https://metaplex.devnet.rpcpool.com\" : \"https://metaplex.mainnet.rpcpool.com\");\r\nconst connection = new anchor.web3.Connection(NEXT_PUBLIC_SOLANA_NETWORK == \"devnet\" ? \"https://api.devnet.solana.com\" : \"https://metaplex.mainnet.rpcpool.com\");\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\r\n);\r\n\r\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\r\n);\r\n\r\nconst ARWEAVE_PUBKEY = new anchor.web3.PublicKey(\"XCVoVzSUv6nM7zytC1CPk9b2BxsQwXC1sW8wxQRhHBC\");\r\nconst RENT_STORAGE_PRICE = 0.015;\r\n\r\nexport interface CandyMachine {\r\n  id: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection;\r\n  program: anchor.Program;\r\n}\r\n\r\ninterface CandyMachineState {\r\n  candyMachine: CandyMachine;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  goLiveDate: Date,\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  commitment: anchor.web3.Commitment = \"recent\",\r\n  queryStatus = false\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log(\"Rejecting for timeout...\");\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result: any, context: any) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log(\"Rejected via websocket\", result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log(\"Resolved via websocket\", result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error(\"WS error in setup\", txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log(\"REST null result for\", txid, status);\r\n            } else if (status.err) {\r\n              console.log(\"REST error for\", txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log(\"REST no confirmations for\", txid, status);\r\n            } else {\r\n              console.log(\"REST confirmation for\", txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log(\"REST connection error: txid\", txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log(\"Returning status \", status);\r\n  return status;\r\n}\r\n\r\nconst createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachineState> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: \"recent\",\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(\r\n    CANDY_MACHINE_PROGRAM,\r\n    provider\r\n  );\r\n\r\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\r\n  const candyMachine = {\r\n    id: candyMachineId,\r\n    connection,\r\n    program,\r\n  }\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  let goLiveDate = state.data.goLiveDate.toNumber();\r\n  goLiveDate = new Date(goLiveDate * 1000);\r\n\r\n  return {\r\n    candyMachine,\r\n    itemsAvailable,\r\n    itemsRedeemed,\r\n    itemsRemaining,\r\n    goLiveDate,\r\n  };\r\n}\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from(\"edition\"),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getTokenWallet = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  mint: anchor.web3.PublicKey\r\n) => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport async function getNftsForOwner(\r\n  conn: any,\r\n  owner: PublicKey\r\n) {\r\n  const allTokens: any = []\r\n  const tokenAccounts = await conn.getParsedTokenAccountsByOwner(owner, {\r\n    programId: TOKEN_PROGRAM_ID\r\n  });\r\n\r\n  for (let index = 0; index < tokenAccounts.value.length; index++) {\r\n    try {\r\n      const tokenAccount = tokenAccounts.value[index];\r\n      const tokenAmount = tokenAccount.account.data.parsed.info.tokenAmount;\r\n\r\n      if (tokenAmount.amount == \"1\" && tokenAmount.decimals == \"0\") {\r\n        let nftMint = new PublicKey(tokenAccount.account.data.parsed.info.mint)\r\n        let [pda] = await anchor.web3.PublicKey.findProgramAddress([\r\n          Buffer.from(\"metadata\"),\r\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n          nftMint.toBuffer(),\r\n        ], TOKEN_METADATA_PROGRAM_ID);\r\n        const accountInfo: any = await conn.getParsedAccountInfo(pda);\r\n        let metadata: any = new Metadata(owner.toString(), accountInfo.value);\r\n        const { data }: any = await axios.get(metadata.data.data.uri)\r\n        if (metadata.data.data.symbol == COLLECTION_NAME) {\r\n          const entireData = { ...data, id: Number(data.name.replace(/^\\D+/g, '').split(' - ')[0]) }\r\n          allTokens.push({ account: tokenAccount.pubkey, address: nftMint, ...entireData })\r\n        }\r\n      }\r\n      allTokens.sort(function (a: any, b: any) {\r\n        if (a.name < b.name) { return -1; }\r\n        if (a.name > b.name) { return 1; }\r\n        return 0;\r\n      })\r\n    } catch (err) {\r\n      continue;\r\n    }\r\n  }\r\n  // console.log('-------', allTokens);\r\n  return allTokens\r\n}\r\n\r\nexport async function getNftsForOwner1(\r\n  owner: PublicKey\r\n) {\r\n  const allTokens: any = []\r\n  try {\r\n    const address = owner.toString();\r\n    const publicAddress = await resolveToWalletAddress({\r\n      text: address, connection\r\n    });\r\n\r\n    const nftArray = await getParsedNftAccountsByOwner({\r\n      publicAddress, connection\r\n    });\r\n    console.log(\"nftArray: \", nftArray);\r\n    for (let nft of nftArray) {\r\n      // if (nft.data.symbol == COLLECTION_NAME) {\r\n        console.log(\"nft: \", nft);\r\n        const tokenAccount = await getTokenWallet(owner, new anchor.web3.PublicKey(nft.mint));\r\n        console.log(\"metadata uri:\",nft.data.uri)\r\n        const { data }: any = await axios.get(nft.data.uri);\r\n        if(data.name){\r\n          console.log(\"data: \", data);\r\n          const entireData = { ...data, id: Number(data.name.replace(/^\\D+/g, '').split(' - ')[0]) };\r\n          console.log('mint', nft.mint, 'account', tokenAccount.toString());\r\n          console.log(\"entiredata: \", entireData);\r\n\r\n          allTokens.push({ account: tokenAccount, address: new PublicKey(nft.mint), ...entireData });\r\n        }\r\n      // }\r\n    }\r\n  } catch (error: any) {\r\n    console.log(\"Error thrown, while fetching NFTs\", error.message);\r\n  }\r\n  return allTokens\r\n}\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachine,\r\n  config: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  treasury: anchor.web3.PublicKey,\r\n): Promise<string> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n  const token = await getTokenWallet(payer, mint.publicKey);\r\n  const { connection, program } = candyMachine;\r\n  const metadata = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n  const rent = await connection.getMinimumBalanceForRentExemption(\r\n    MintLayout.span\r\n  );\r\n\r\n  return await program.rpc.mintNft({\r\n    accounts: {\r\n      config,\r\n      candyMachine: candyMachine.id,\r\n      payer: payer,\r\n      wallet: treasury,\r\n      mint: mint.publicKey,\r\n      metadata,\r\n      masterEdition,\r\n      mintAuthority: payer,\r\n      updateAuthority: payer,\r\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n      tokenProgram: TOKEN_PROGRAM_ID,\r\n      systemProgram: anchor.web3.SystemProgram.programId,\r\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n    },\r\n    signers: [mint],\r\n    instructions: [\r\n      anchor.web3.SystemProgram.createAccount({\r\n        fromPubkey: payer,\r\n        newAccountPubkey: mint.publicKey,\r\n        space: MintLayout.span,\r\n        lamports: rent,\r\n        programId: TOKEN_PROGRAM_ID,\r\n      }),\r\n      Token.createInitMintInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        0,\r\n        payer,\r\n        payer\r\n      ),\r\n      createAssociatedTokenAccountInstruction(\r\n        token,\r\n        payer,\r\n        payer,\r\n        mint.publicKey\r\n      ),\r\n      Token.createMintToInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        token,\r\n        payer,\r\n        [],\r\n        1\r\n      ),\r\n      SystemProgram.transfer({\r\n        fromPubkey: payer,\r\n        toPubkey: ARWEAVE_PUBKEY,\r\n        lamports: LAMPORTS_PER_SOL * RENT_STORAGE_PRICE,\r\n      }),\r\n    ],\r\n  });\r\n}\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport const mintMultipleToken = async (\r\n  candyMachine: any,\r\n  config: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  treasury: anchor.web3.PublicKey,\r\n  quantity: number = 2,\r\n) => {\r\n  const signersMatrix = []\r\n  const instructionsMatrix = []\r\n\r\n  for (let index = 0; index < quantity; index++) {\r\n    const mint = anchor.web3.Keypair.generate();\r\n    const token = await getTokenWallet(payer, mint.publicKey);\r\n    //const { connection } = candyMachine;\r\n    let connection = new Connection(clusterApiUrl(\"devnet\"));\r\n    console.log(\"candyMachine: \", candyMachine);\r\n    const rent = await connection.getMinimumBalanceForRentExemption(\r\n      MintLayout.span\r\n    );\r\n    console.log(\"rent: \", rent);\r\n    const instructions = [\r\n      anchor.web3.SystemProgram.createAccount({\r\n        fromPubkey: payer,\r\n        newAccountPubkey: mint.publicKey,\r\n        space: MintLayout.span,\r\n        lamports: rent,\r\n        programId: TOKEN_PROGRAM_ID,\r\n      }),\r\n      Token.createInitMintInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        0,\r\n        payer,\r\n        payer\r\n      ),\r\n      createAssociatedTokenAccountInstruction(\r\n        token,\r\n        payer,\r\n        payer,\r\n        mint.publicKey\r\n      ),\r\n      Token.createMintToInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        token,\r\n        payer,\r\n        [],\r\n        1\r\n      ),\r\n      SystemProgram.transfer({\r\n        fromPubkey: payer,\r\n        toPubkey: ARWEAVE_PUBKEY,\r\n        lamports: LAMPORTS_PER_SOL * RENT_STORAGE_PRICE,\r\n      }),\r\n    ];\r\n    const masterEdition = await getMasterEdition(mint.publicKey);\r\n    console.log(\"masterEdition: \", masterEdition);\r\n    const metadata = await getMetadata(mint.publicKey);\r\n    console.log(\"metadata: \", metadata);\r\n    instructions.push(\r\n      await candyMachine.program.instruction.mintNft({\r\n        accounts: {\r\n          config,\r\n          candyMachine: candyMachine.id,\r\n          payer: payer,\r\n          wallet: treasury,\r\n          mint: mint.publicKey,\r\n          metadata,\r\n          masterEdition,\r\n          mintAuthority: payer,\r\n          updateAuthority: payer,\r\n          tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n          tokenProgram: TOKEN_PROGRAM_ID,\r\n          systemProgram: anchor.web3.SystemProgram.programId,\r\n          rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n          clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n        }\r\n      }),\r\n    );\r\n    const signers: anchor.web3.Keypair[] = [mint];\r\n\r\n    signersMatrix.push(signers)\r\n    instructionsMatrix.push(instructions)\r\n  }\r\n\r\n  return await sendTransactions(\r\n    candyMachine.program.provider.connection,\r\n    candyMachine.program.provider.wallet,\r\n    instructionsMatrix,\r\n    signersMatrix,\r\n  );\r\n}\r\n\r\nexport async function getSlimeNfts(\r\n  owner: PublicKey\r\n) {\r\n  const allTokens: any = []\r\n  try {\r\n    const address = owner.toString();\r\n    const publicAddress = await resolveToWalletAddress({\r\n      text: address, connection\r\n    });\r\n\r\n    const nftArray = await getParsedNftAccountsByOwner({\r\n      publicAddress, connection\r\n    });\r\n    //console.log(\"nftArray: \", nftArray);\r\n    console.log(\"REACT_APP_SOLANA_COL_CREATOR: \", NEXT_PUBLIC_SOLANA_COL_CREATOR);\r\n    for (let nft of nftArray) {\r\n      // if (nft.data.symbol == COLLECTION_NAME) {        \r\n        if(nft.data && nft.data.creators && nft.data.creators[0].address === NEXT_PUBLIC_SOLANA_COL_CREATOR){        \r\n        const tokenAccount = await getTokenWallet(owner, new anchor.web3.PublicKey(nft.mint));\r\n        console.log(\"metadata uri:\",nft.data.uri)\r\n        const { data }: any = await axios.get(nft.data.uri);\r\n        if(data.name){\r\n          console.log(\"data: \", data);\r\n          const entireData = { ...data, id: Number(data.name.replace(/^\\D+/g, '').split(' - ')[0]) };\r\n          console.log('mint', nft.mint, 'account', tokenAccount.toString());\r\n          console.log(\"slime entiredata: \", entireData);\r\n\r\n          allTokens.push({ account: tokenAccount, address: new PublicKey(nft.mint), ...entireData });\r\n        }\r\n      // }\r\n        }\r\n    }\r\n  } catch (error: any) {\r\n    console.log(\"Error thrown, while fetching NFTs\", error.message);\r\n  }\r\n  return allTokens\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}