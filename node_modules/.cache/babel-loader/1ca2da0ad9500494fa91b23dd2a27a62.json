{"ast":null,"code":"import { createCancelInstruction, createAuctioneerCancelInstruction, createCancelBidReceiptInstruction } from '@metaplex-foundation/mpl-auction-house';\nimport { SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport { AuctioneerAuthorityRequiredError } from '../errors.mjs';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { toPublicKey } from '../../../types/PublicKey.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs';\nimport { isSigner } from '../../../types/Signer.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'CancelBidOperation';\n/**\n * Cancels the user's bid in the given auction house.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .cancelBid({ auctionHouse, bid };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst cancelBidOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst cancelBidOperationHandler = {\n  handle: async (operation, metaplex, scope) => cancelBidBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions)\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Cancels the user's bid in the given auction house.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .cancelBid({ auctionHouse, bid });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst cancelBidBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    auctionHouse,\n    auctioneerAuthority,\n    bid\n  } = params; // Data.\n\n  const {\n    asset,\n    buyerAddress,\n    tradeStateAddress,\n    price,\n    receiptAddress,\n    tokens,\n    isPublic\n  } = bid;\n  const {\n    authorityAddress,\n    address: auctionHouseAddress,\n    feeAccountAddress,\n    hasAuctioneer\n  } = auctionHouse;\n\n  if (hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  } // Accounts.\n\n\n  const tokenAccount = isPublic ? metaplex.tokens().pdas().associatedTokenAccount({\n    mint: asset.mint.address,\n    owner: toPublicKey(buyerAddress),\n    programs\n  }) : asset.token.address;\n  const accounts = {\n    wallet: buyerAddress,\n    tokenAccount,\n    tokenMint: asset.address,\n    authority: authorityAddress,\n    auctionHouse: auctionHouseAddress,\n    auctionHouseFeeAccount: feeAccountAddress,\n    tradeState: tradeStateAddress\n  }; // Args.\n\n  const args = {\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints\n  }; // Cancel Bid Instruction.\n\n  let cancelBidInstruction = createCancelInstruction(accounts, args);\n\n  if (auctioneerAuthority) {\n    cancelBidInstruction = createAuctioneerCancelInstruction({ ...accounts,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n        auctionHouse: auctionHouseAddress,\n        auctioneerAuthority: auctioneerAuthority.publicKey,\n        programs\n      })\n    }, args);\n  } // Signers.\n\n\n  const cancelSigners = [auctioneerAuthority].filter(isSigner);\n  return TransactionBuilder.make().setFeePayer(payer) // Cancel Bid.\n  .add({\n    instruction: cancelBidInstruction,\n    signers: cancelSigners,\n    key: params.instructionKey ?? 'cancelBid'\n  }) // Cancel Bid Receipt.\n  .when(Boolean(receiptAddress), builder => builder.add({\n    instruction: createCancelBidReceiptInstruction({\n      receipt: receiptAddress,\n      instruction: SYSVAR_INSTRUCTIONS_PUBKEY\n    }),\n    signers: [],\n    key: 'cancelBidReceipt'\n  }));\n};\n\nexport { cancelBidBuilder, cancelBidOperation, cancelBidOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/operations/cancelBid.ts"],"names":["Key","cancelBidOperation","useOperation","cancelBidOperationHandler","handle","operation","metaplex","scope","cancelBidBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","auctionHouse","auctioneerAuthority","bid","asset","buyerAddress","tradeStateAddress","price","receiptAddress","tokens","isPublic","authorityAddress","address","auctionHouseAddress","feeAccountAddress","hasAuctioneer","AuctioneerAuthorityRequiredError","tokenAccount","pdas","associatedTokenAccount","mint","owner","toPublicKey","token","accounts","wallet","tokenMint","authority","auctionHouseFeeAccount","tradeState","args","buyerPrice","basisPoints","tokenSize","cancelBidInstruction","createCancelInstruction","createAuctioneerCancelInstruction","publicKey","ahAuctioneerPda","auctioneer","cancelSigners","filter","isSigner","TransactionBuilder","make","setFeePayer","add","instruction","signers","key","instructionKey","when","Boolean","builder","createCancelBidReceiptInstruction","receipt","SYSVAR_INSTRUCTIONS_PUBKEY"],"mappings":"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","sourcesContent":["import {\n  CancelInstructionAccounts,\n  createAuctioneerCancelInstruction,\n  createCancelBidReceiptInstruction,\n  createCancelInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AuctioneerAuthorityRequiredError } from '../errors';\nimport { AuctionHouse, Bid } from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  isSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Pda,\n  Signer,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { NftWithToken, SftWithToken } from '@/plugins/nftModule';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CancelBidOperation' as const;\n\n/**\n * Cancels the user's bid in the given auction house.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .cancelBid({ auctionHouse, bid };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const cancelBidOperation = useOperation<CancelBidOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CancelBidOperation = Operation<\n  typeof Key,\n  CancelBidInput,\n  CancelBidOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CancelBidInput = {\n  /**\n   * The Auction House in which to cancel Bid.\n   * We only need a subset of the `AuctionHouse` model but we\n   * need enough information regarding its settings to know how\n   * to cancel bid.\n   *\n   * This includes, its address, authority address, its fee account address, etc.\n   */\n  auctionHouse: Pick<\n    AuctionHouse,\n    'authorityAddress' | 'address' | 'feeAccountAddress' | 'hasAuctioneer'\n  >;\n\n  /**\n   * The Bid to cancel.\n   * We only need a subset of the `Bid` model but we\n   * need enough information regarding its settings to know how\n   * to cancel it.\n   *\n   * This includes, its asset, buyer address, price, receipt address etc.\n   */\n  bid: Pick<\n    Bid,\n    | 'asset'\n    | 'buyerAddress'\n    | 'isPublic'\n    | 'price'\n    | 'receiptAddress'\n    | 'tokens'\n    | 'tradeStateAddress'\n  >;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CancelBidOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const cancelBidOperationHandler: OperationHandler<CancelBidOperation> = {\n  handle: async (\n    operation: CancelBidOperation,\n    metaplex: Metaplex,\n    scope: OperationScope\n  ) =>\n    cancelBidBuilder(metaplex, operation.input, scope).sendAndConfirm(\n      metaplex,\n      scope.confirmOptions\n    ),\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CancelBidBuilderParams = Omit<CancelBidInput, 'confirmOptions'> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CancelBidBuilderContext = Omit<CancelBidOutput, 'response'>;\n\n/**\n * Cancels the user's bid in the given auction house.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .cancelBid({ auctionHouse, bid });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const cancelBidBuilder = (\n  metaplex: Metaplex,\n  params: CancelBidBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<CancelBidBuilderContext> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { auctionHouse, auctioneerAuthority, bid } = params;\n\n  // Data.\n  const {\n    asset,\n    buyerAddress,\n    tradeStateAddress,\n    price,\n    receiptAddress,\n    tokens,\n    isPublic,\n  } = bid;\n  const {\n    authorityAddress,\n    address: auctionHouseAddress,\n    feeAccountAddress,\n    hasAuctioneer,\n  } = auctionHouse;\n\n  if (hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  // Accounts.\n  const tokenAccount = isPublic\n    ? metaplex\n        .tokens()\n        .pdas()\n        .associatedTokenAccount({\n          mint: asset.mint.address,\n          owner: toPublicKey(buyerAddress),\n          programs,\n        })\n    : (asset as SftWithToken | NftWithToken).token.address;\n\n  const accounts: CancelInstructionAccounts = {\n    wallet: buyerAddress,\n    tokenAccount,\n    tokenMint: asset.address,\n    authority: authorityAddress,\n    auctionHouse: auctionHouseAddress,\n    auctionHouseFeeAccount: feeAccountAddress,\n    tradeState: tradeStateAddress,\n  };\n\n  // Args.\n  const args = {\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Cancel Bid Instruction.\n  let cancelBidInstruction = createCancelInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    cancelBidInstruction = createAuctioneerCancelInstruction(\n      {\n        ...accounts,\n        auctioneerAuthority: auctioneerAuthority.publicKey,\n        ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n          auctionHouse: auctionHouseAddress,\n          auctioneerAuthority: auctioneerAuthority.publicKey,\n          programs,\n        }),\n      },\n      args\n    );\n  }\n\n  // Signers.\n  const cancelSigners = [auctioneerAuthority].filter(isSigner);\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Cancel Bid.\n      .add({\n        instruction: cancelBidInstruction,\n        signers: cancelSigners,\n        key: params.instructionKey ?? 'cancelBid',\n      })\n\n      // Cancel Bid Receipt.\n      .when(Boolean(receiptAddress), (builder) =>\n        builder.add({\n          instruction: createCancelBidReceiptInstruction({\n            receipt: receiptAddress as Pda,\n            instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n          }),\n          signers: [],\n          key: 'cancelBidReceipt',\n        })\n      )\n  );\n};\n"]},"metadata":{},"sourceType":"module"}