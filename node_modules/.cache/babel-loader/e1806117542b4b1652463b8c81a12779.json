{"ast":null,"code":"import { createUpdateInstruction, createSetCollectionInstruction, createSetMintAuthorityInstruction, createSetAuthorityInstruction } from '@metaplex-foundation/mpl-candy-machine-core';\nimport { removeUndefinedAttributes } from '../../../utils/common.mjs';\nimport { isCandyMachine, toCandyMachineData } from '../models/CandyMachine.mjs';\nimport { assertObjectHasDefinedKeys } from '../../../utils/assert.mjs';\nimport { NoInstructionsToSendError, MissingInputDataError } from '../../../errors/SdkError.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs';\nimport { toPublicKey } from '../../../types/PublicKey.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateCandyMachineOperation';\n/**\n * Updates the every aspect of an existing Candy Machine, including its\n * authorities, collection and guards (when associated with a Candy Guard).\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .update({\n *     candyMachine,\n *     sellerFeeBasisPoints: 500,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst updateCandyMachineOperation = _updateCandyMachineOperation; // eslint-disable-next-line @typescript-eslint/naming-convention\n\nfunction _updateCandyMachineOperation(input) {\n  return {\n    key: Key,\n    input\n  };\n}\n\n_updateCandyMachineOperation.key = Key;\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst updateCandyMachineOperationHandler = {\n  async handle(operation, metaplex, scope) {\n    const builder = updateCandyMachineBuilder(metaplex, operation.input, scope);\n\n    if (builder.isEmpty()) {\n      throw new NoInstructionsToSendError(Key);\n    }\n\n    return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Updates the every aspect of an existing Candy Machine, including its\n * authorities, collection and guards (when associated with a Candy Guard).\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachines()\n *   .builders()\n *   .update({\n *     candyMachine,\n *     sellerFeeBasisPoints: 500,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst updateCandyMachineBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    authority = metaplex.identity(),\n    candyGuardAuthority = authority\n  } = params;\n  return TransactionBuilder.make().setFeePayer(payer) // Update Candy Machine data.\n  .add(updateCandyMachineDataBuilder(metaplex, params, authority, programs)) // Update Candy Machine collection.\n  .add(updateCandyMachineCollectionBuilder(metaplex, params, authority, payer, programs)) // Update Candy Guard's guards and groups, if any.\n  .add(updateCandyGuardsBuilder(metaplex, params, candyGuardAuthority, payer, programs)) // Update Candy Machine mint authority.\n  .add(updateCandyMachineMintAuthorityBuilder(metaplex, params, authority, programs)) // Update Candy Machine authority.\n  .add(updateCandyMachineAuthorityBuilder(metaplex, params, authority, programs)) // Update Candy Guard authority.\n  .add(updateCandyGuardAuthorityBuilder(metaplex, params, candyGuardAuthority, payer, programs));\n};\n\nconst updateCandyMachineDataBuilder = (metaplex, params, authority, programs) => {\n  const dataToUpdate = removeUndefinedAttributes({\n    itemsAvailable: params.itemsAvailable,\n    symbol: params.symbol,\n    sellerFeeBasisPoints: params.sellerFeeBasisPoints,\n    maxEditionSupply: params.maxEditionSupply,\n    isMutable: params.isMutable,\n    creators: params.creators,\n    itemSettings: params.itemSettings\n  });\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n  let data;\n\n  if (Object.keys(dataToUpdate).length === 0) {\n    return TransactionBuilder.make();\n  } else if (isCandyMachine(params.candyMachine)) {\n    data = toCandyMachineData({ ...params.candyMachine,\n      ...dataToUpdate\n    });\n  } else {\n    assertObjectHasDefinedKeys(dataToUpdate, ['itemsAvailable', 'symbol', 'sellerFeeBasisPoints', 'maxEditionSupply', 'isMutable', 'creators', 'itemSettings'], onMissingInputError);\n    data = toCandyMachineData(dataToUpdate);\n  }\n\n  return TransactionBuilder.make().add({\n    instruction: createUpdateInstruction({\n      candyMachine: toPublicKey(params.candyMachine),\n      authority: authority.publicKey\n    }, {\n      data\n    }, candyMachineProgram.address),\n    signers: [authority],\n    key: params.updateDataInstructionKey ?? 'updateCandyMachineData'\n  });\n};\n\nconst updateCandyMachineCollectionBuilder = (metaplex, params, authority, payer, programs) => {\n  if (!params.collection) {\n    return TransactionBuilder.make();\n  }\n\n  const currentCollectionAddress = params.collection.currentCollectionAddress ?? (isCandyMachine(params.candyMachine) ? params.candyMachine.collectionMintAddress : null);\n\n  if (!currentCollectionAddress) {\n    throw onMissingInputError(['collection.currentCollectionAddress']);\n  } // Programs.\n\n\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs); // Addresses.\n\n  const candyMachineAddress = toPublicKey(params.candyMachine);\n  const collectionAddress = params.collection.address;\n  const collectionUpdateAuthority = params.collection.updateAuthority; // PDAs.\n\n  const authorityPda = metaplex.candyMachines().pdas().authority({\n    candyMachine: candyMachineAddress,\n    programs\n  });\n  const currentCollectionMetadata = metaplex.nfts().pdas().metadata({\n    mint: currentCollectionAddress\n  });\n  const currentCollectionAuthorityRecord = metaplex.nfts().pdas().collectionAuthorityRecord({\n    mint: currentCollectionAddress,\n    collectionAuthority: authorityPda\n  });\n  const collectionMetadata = metaplex.nfts().pdas().metadata({\n    mint: collectionAddress\n  });\n  const collectionMasterEdition = metaplex.nfts().pdas().masterEdition({\n    mint: collectionAddress\n  });\n  const collectionAuthorityRecord = metaplex.nfts().pdas().collectionAuthorityRecord({\n    mint: collectionAddress,\n    collectionAuthority: authorityPda\n  });\n  return TransactionBuilder.make().add({\n    instruction: createSetCollectionInstruction({\n      candyMachine: candyMachineAddress,\n      authority: authority.publicKey,\n      authorityPda,\n      payer: payer.publicKey,\n      collectionMint: currentCollectionAddress,\n      collectionMetadata: currentCollectionMetadata,\n      collectionAuthorityRecord: currentCollectionAuthorityRecord,\n      newCollectionUpdateAuthority: collectionUpdateAuthority.publicKey,\n      newCollectionMetadata: collectionMetadata,\n      newCollectionMint: collectionAddress,\n      newCollectionMasterEdition: collectionMasterEdition,\n      newCollectionAuthorityRecord: collectionAuthorityRecord,\n      tokenMetadataProgram: tokenMetadataProgram.address\n    }, candyMachineProgram.address),\n    signers: [authority, payer, collectionUpdateAuthority],\n    key: params.setCollectionInstructionKey ?? 'setCandyMachineCollection'\n  });\n};\n\nconst updateCandyGuardsBuilder = (metaplex, params, candyGuardAuthority, payer, programs) => {\n  const guardsToUpdate = removeUndefinedAttributes({\n    candyGuard: params.candyGuard,\n    guards: params.guards,\n    groups: params.groups\n  });\n  let args;\n\n  if (Object.keys(guardsToUpdate).length === 0) {\n    return TransactionBuilder.make();\n  }\n\n  if (isCandyMachine(params.candyMachine) && params.candyMachine.candyGuard) {\n    args = {\n      candyGuard: params.candyMachine.candyGuard.address,\n      guards: params.candyMachine.candyGuard.guards,\n      groups: params.candyMachine.candyGuard.groups,\n      ...guardsToUpdate\n    };\n  } else {\n    assertObjectHasDefinedKeys(guardsToUpdate, ['candyGuard', 'guards', 'groups'], onMissingInputError);\n    args = guardsToUpdate;\n  }\n\n  return metaplex.candyMachines().builders().updateCandyGuard({\n    candyGuard: args.candyGuard,\n    guards: args.guards,\n    groups: args.groups,\n    authority: candyGuardAuthority,\n    updateInstructionKey: params.updateCandyGuardInstructionKey ?? 'updateCandyGuard'\n  }, {\n    payer,\n    programs\n  });\n};\n\nconst updateCandyMachineMintAuthorityBuilder = (metaplex, params, authority, programs) => {\n  if (!params.newMintAuthority) {\n    return TransactionBuilder.make();\n  }\n\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n  return TransactionBuilder.make().add({\n    instruction: createSetMintAuthorityInstruction({\n      candyMachine: toPublicKey(params.candyMachine),\n      authority: authority.publicKey,\n      mintAuthority: params.newMintAuthority.publicKey\n    }, candyMachineProgram.address),\n    signers: [authority, params.newMintAuthority],\n    key: params.setAuthorityInstructionKey ?? 'setCandyMachineAuthority'\n  });\n};\n\nconst updateCandyMachineAuthorityBuilder = (metaplex, params, authority, programs) => {\n  if (!params.newAuthority) {\n    return TransactionBuilder.make();\n  }\n\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n  return TransactionBuilder.make().add({\n    instruction: createSetAuthorityInstruction({\n      candyMachine: toPublicKey(params.candyMachine),\n      authority: authority.publicKey\n    }, {\n      newAuthority: params.newAuthority\n    }, candyMachineProgram.address),\n    signers: [authority],\n    key: params.setAuthorityInstructionKey ?? 'setCandyMachineAuthority'\n  });\n};\n\nconst updateCandyGuardAuthorityBuilder = (metaplex, params, candyGuardAuthority, payer, programs) => {\n  if (!params.newCandyGuardAuthority) {\n    return TransactionBuilder.make();\n  }\n\n  const candyGuardAddress = params.candyGuard ?? (isCandyMachine(params.candyMachine) && params.candyMachine.candyGuard ? params.candyMachine.candyGuard.address : null);\n\n  if (!candyGuardAddress) {\n    throw onMissingInputError(['candyGuard']);\n  }\n\n  return TransactionBuilder.make().add(metaplex.candyMachines().builders().updateCandyGuardAuthority({\n    candyGuard: candyGuardAddress,\n    authority: candyGuardAuthority,\n    newAuthority: params.newCandyGuardAuthority,\n    instructionKey: params.setCandyGuardAuthorityInstructionKey\n  }, {\n    payer,\n    programs\n  }));\n};\n\nconst onMissingInputError = missingKeys => new MissingInputDataError(missingKeys, 'When passing the Candy Machine as a `PublicKey` instead of a Candy Machine model ' + 'the SDK cannot rely on current data to fill the gaps within the provided input. ' + 'Alternatively, you can pass the Candy Machine model instead.');\n\nexport { updateCandyMachineBuilder, updateCandyMachineOperation, updateCandyMachineOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineModule/operations/updateCandyMachine.ts"],"names":["Key","updateCandyMachineOperation","_updateCandyMachineOperation","input","key","updateCandyMachineOperationHandler","handle","operation","metaplex","scope","builder","updateCandyMachineBuilder","isEmpty","NoInstructionsToSendError","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","authority","identity","candyGuardAuthority","TransactionBuilder","make","setFeePayer","add","updateCandyMachineDataBuilder","updateCandyMachineCollectionBuilder","updateCandyGuardsBuilder","updateCandyMachineMintAuthorityBuilder","updateCandyMachineAuthorityBuilder","updateCandyGuardAuthorityBuilder","dataToUpdate","removeUndefinedAttributes","itemsAvailable","symbol","sellerFeeBasisPoints","maxEditionSupply","isMutable","creators","itemSettings","candyMachineProgram","getCandyMachine","data","Object","keys","length","isCandyMachine","candyMachine","toCandyMachineData","assertObjectHasDefinedKeys","onMissingInputError","instruction","createUpdateCandyMachineInstruction","toPublicKey","publicKey","address","signers","updateDataInstructionKey","collection","currentCollectionAddress","collectionMintAddress","tokenMetadataProgram","getTokenMetadata","candyMachineAddress","collectionAddress","collectionUpdateAuthority","updateAuthority","authorityPda","candyMachines","pdas","currentCollectionMetadata","nfts","metadata","mint","currentCollectionAuthorityRecord","collectionAuthorityRecord","collectionAuthority","collectionMetadata","collectionMasterEdition","masterEdition","createSetCollectionInstruction","collectionMint","newCollectionUpdateAuthority","newCollectionMetadata","newCollectionMint","newCollectionMasterEdition","newCollectionAuthorityRecord","setCollectionInstructionKey","guardsToUpdate","candyGuard","guards","groups","args","builders","updateCandyGuard","updateInstructionKey","updateCandyGuardInstructionKey","newMintAuthority","createSetMintAuthorityInstruction","mintAuthority","setAuthorityInstructionKey","newAuthority","createSetAuthorityInstruction","newCandyGuardAuthority","candyGuardAddress","updateCandyGuardAuthority","instructionKey","setCandyGuardAuthorityInstructionKey","missingKeys","MissingInputDataError"],"mappings":"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","sourcesContent":["import {\n  CandyMachineData,\n  createSetAuthorityInstruction,\n  createSetCollectionInstruction,\n  createSetMintAuthorityInstruction,\n  createUpdateInstruction as createUpdateCandyMachineInstruction,\n} from '@metaplex-foundation/mpl-candy-machine-core';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { CandyGuardsSettings, DefaultCandyGuardSettings } from '../guards';\nimport {\n  CandyMachine,\n  CandyMachineConfigLineSettings,\n  CandyMachineHiddenSettings,\n  isCandyMachine,\n  toCandyMachineData,\n} from '../models';\nimport { MissingInputDataError, NoInstructionsToSendError } from '@/errors';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  BigNumber,\n  Creator,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Program,\n  PublicKey,\n  Signer,\n  toPublicKey,\n} from '@/types';\nimport {\n  assertObjectHasDefinedKeys,\n  removeUndefinedAttributes,\n  TransactionBuilder,\n  TransactionBuilderOptions,\n} from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateCandyMachineOperation' as const;\n\n/**\n * Updates the every aspect of an existing Candy Machine, including its\n * authorities, collection and guards (when associated with a Candy Guard).\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .update({\n *     candyMachine,\n *     sellerFeeBasisPoints: 500,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const updateCandyMachineOperation = _updateCandyMachineOperation;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _updateCandyMachineOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(input: UpdateCandyMachineInput<T>): UpdateCandyMachineOperation<T> {\n  return { key: Key, input };\n}\n_updateCandyMachineOperation.key = Key;\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UpdateCandyMachineOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = Operation<typeof Key, UpdateCandyMachineInput<T>, UpdateCandyMachineOutput>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UpdateCandyMachineInput<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = {\n  /**\n   * The Candy Machine to update.\n   *\n   * This can either be a Candy Machine instance or its address.\n   * When passing its address, you will need to provide enough input\n   * so the SDK knows what to update.\n   *\n   * For instance, if you only want to update the `creators` array of the Candy Machine,\n   * you will also need to provide all other Candy Machine data such as its `symbol`,\n   * its `sellerFeeBasisPoints`, etc.\n   *\n   * That's because the program requires all data to be provided at once when updating.\n   * The SDK will raise an error if you don't provide enough data letting you know\n   * what's missing.\n   *\n   * Alternatively, if you provide a Candy Machine instance, the SDK will use its\n   * current data to fill all the gaps so you can focus on what you want to update.\n   */\n  candyMachine: PublicKey | CandyMachine<T>;\n\n  /**\n   * The address of the Candy Guard associated to the Candy Machine, if any.\n   * This is only required if `candyMachine` is provided as an address and\n   * you are trying to update the `guards` or `groups` parameters.\n   *\n   * @defaultValue `candyMachine.candyGuard?.address`\n   */\n  candyGuard?: PublicKey;\n\n  /**\n   * The Signer authorized to update the Candy Machine.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /**\n   * The Signer authorized to update the associated Candy Guard, if any.\n   * This is typically the same as the Candy Machine authority.\n   *\n   * @defaultValue Defaults to the `authority` parameter.\n   */\n  candyGuardAuthority?: Signer;\n\n  /**\n   * The new authority that will be allowed to manage the Candy Machine.\n   * This includes updating its data, authorities, inserting items, etc.\n   *\n   * Warning: This means the current `authority` Signer will no longer be able\n   * to manage the Candy Machine.\n   *\n   * Note that if your Candy Machine has a Candy Guard associated to it,\n   * you might want to also update the Candy Guard's authority using the\n   * `newCandyGuardAuthority` parameter.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newAuthority?: PublicKey;\n\n  /**\n   * The new authority that will be able to mint from this Candy Machine.\n   *\n   * This must be a Signer to ensure Candy Guards are not used to mint from\n   * unexpected Candy Machines as some of its guards could have side effects.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newMintAuthority?: Signer;\n\n  /**\n   * The new authority that will be allowed to manage the Candy Guard\n   * account associated with the Candy Machine.\n   *\n   * Warning: This means the current Candy Guard `authority` Signer will\n   * no longer be able to manage the Candy Guard account.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newCandyGuardAuthority?: PublicKey;\n\n  /**\n   * The Collection NFT that all NFTs minted from this Candy Machine should be part of.\n   * This must include its address and the update authority as a Signer.\n   *\n   * If the `candyMachine` attribute is passed as a `PublicKey`, you will also need to\n   * provide the mint address of the current collection that will be overriden.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  collection?: {\n    /** The mint address of the collection. */\n    address: PublicKey;\n\n    /** The update authority of the collection as a Signer. */\n    updateAuthority: Signer;\n\n    /** The mint address of the current collection that will be overriden. */\n    currentCollectionAddress?: PublicKey;\n  };\n\n  /**\n   * The royalties that should be set on minted NFTs in basis points.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  sellerFeeBasisPoints?: number;\n\n  /**\n   * The total number of items availble in the Candy Machine, minted or not.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  itemsAvailable?: BigNumber;\n\n  /**\n   * Settings related to the Candy Machine's items.\n   *\n   * These can either be inserted manually within the Candy Machine or\n   * they can be infered from a set of hidden settings.\n   *\n   * - If `type` is `hidden`, the Candy Machine is using hidden settings.\n   * - If `type` is `configLines`, the Candy Machine is using config line settings.\n   *\n   * @defaultValue Defaults to not being updated.\n   *\n   * @see {@link CandyMachineHiddenSettings}\n   * @see {@link CandyMachineConfigLineSettings}\n   */\n  itemSettings?: CandyMachineHiddenSettings | CandyMachineConfigLineSettings;\n\n  /**\n   * The symbol to use when minting NFTs (e.g. \"MYPROJECT\")\n   *\n   * This can be any string up to 10 bytes and can be made optional\n   * by providing an empty string.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  symbol?: string;\n\n  /**\n   * The maximum number of editions that can be printed from the\n   * minted NFTs.\n   *\n   * For most use cases, you'd want to set this to `0` to prevent\n   * minted NFTs to be printed multiple times.\n   *\n   * Note that you cannot set this to `null` which means unlimited editions\n   * are not supported by the Candy Machine program.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  maxEditionSupply?: BigNumber;\n\n  /**\n   * Whether the minted NFTs should be mutable or not.\n   *\n   * We recommend setting this to `true` unless you have a specific reason.\n   * You can always make NFTs immutable in the future but you cannot make\n   * immutable NFTs mutable ever again.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  isMutable?: boolean;\n\n  /**\n   * Array of creators that should be set on minted NFTs.\n   *\n   * @defaultValue Defaults to not being updated.\n   *\n   * @see {@link Creator}\n   */\n  creators?: Omit<Creator, 'verified'>[];\n\n  /**\n   * The settings of all guards we wish to activate.\n   *\n   * Note that this will override the existing `guards` settings\n   * so you must provide all guards you wish to activate.\n   *\n   * Any guard not provided or set to `null` will be disabled.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  guards?: Partial<T>;\n\n  /**\n   * This parameter allows us to create multiple minting groups that have their\n   * own set of requirements — i.e. guards.\n   *\n   * Note that this will override the existing `groups` settings\n   * so you must provide all groups and guards you wish to activate.\n   *\n   * When groups are provided, the `guards` parameter becomes a set of default\n   * guards that will be applied to all groups. If a specific group enables\n   * a guard that is also present in the default guards, the group's guard\n   * will override the default guard.\n   *\n   * For each group, any guard not provided or set to `null` will be disabled.\n   *\n   * You may disable groups by providing an empty array `[]`.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  groups?: { label: string; guards: Partial<T> }[];\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UpdateCandyMachineOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const updateCandyMachineOperationHandler: OperationHandler<UpdateCandyMachineOperation> =\n  {\n    async handle<T extends CandyGuardsSettings = DefaultCandyGuardSettings>(\n      operation: UpdateCandyMachineOperation<T>,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<UpdateCandyMachineOutput> {\n      const builder = updateCandyMachineBuilder(\n        metaplex,\n        operation.input,\n        scope\n      );\n\n      if (builder.isEmpty()) {\n        throw new NoInstructionsToSendError(Key);\n      }\n\n      return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UpdateCandyMachineBuilderParams<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = Omit<UpdateCandyMachineInput<T>, 'confirmOptions'> & {\n  /** A key to distinguish the instruction that updates the Candy Machine data. */\n  updateDataInstructionKey?: string;\n\n  /** A key to distinguish the instruction that updates the Candy Machine collection. */\n  setCollectionInstructionKey?: string;\n\n  /** A key to distinguish the instruction that updates the associated Candy Guard, if any. */\n  updateCandyGuardInstructionKey?: string;\n\n  /** A key to distinguish the instruction that updates the Candy Machine's mint authority. */\n  setMintAuthorityInstructionKey?: string;\n\n  /** A key to distinguish the instruction that updates the Candy Machine's authority. */\n  setAuthorityInstructionKey?: string;\n\n  /** A key to distinguish the instruction that updates the Candy Guard's authority. */\n  setCandyGuardAuthorityInstructionKey?: string;\n};\n\n/**\n * Updates the every aspect of an existing Candy Machine, including its\n * authorities, collection and guards (when associated with a Candy Guard).\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachines()\n *   .builders()\n *   .update({\n *     candyMachine,\n *     sellerFeeBasisPoints: 500,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const updateCandyMachineBuilder = <\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  metaplex: Metaplex,\n  params: UpdateCandyMachineBuilderParams<T>,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { authority = metaplex.identity(), candyGuardAuthority = authority } =\n    params;\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Update Candy Machine data.\n      .add(\n        updateCandyMachineDataBuilder<T>(metaplex, params, authority, programs)\n      )\n\n      // Update Candy Machine collection.\n      .add(\n        updateCandyMachineCollectionBuilder<T>(\n          metaplex,\n          params,\n          authority,\n          payer,\n          programs\n        )\n      )\n\n      // Update Candy Guard's guards and groups, if any.\n      .add(\n        updateCandyGuardsBuilder<T>(\n          metaplex,\n          params,\n          candyGuardAuthority,\n          payer,\n          programs\n        )\n      )\n\n      // Update Candy Machine mint authority.\n      .add(\n        updateCandyMachineMintAuthorityBuilder<T>(\n          metaplex,\n          params,\n          authority,\n          programs\n        )\n      )\n\n      // Update Candy Machine authority.\n      .add(\n        updateCandyMachineAuthorityBuilder<T>(\n          metaplex,\n          params,\n          authority,\n          programs\n        )\n      )\n\n      // Update Candy Guard authority.\n      .add(\n        updateCandyGuardAuthorityBuilder<T>(\n          metaplex,\n          params,\n          candyGuardAuthority,\n          payer,\n          programs\n        )\n      )\n  );\n};\n\nconst updateCandyMachineDataBuilder = <\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  metaplex: Metaplex,\n  params: UpdateCandyMachineBuilderParams<T>,\n  authority: Signer,\n  programs?: Program[]\n): TransactionBuilder => {\n  const dataToUpdate: Partial<CandyMachine> = removeUndefinedAttributes({\n    itemsAvailable: params.itemsAvailable,\n    symbol: params.symbol,\n    sellerFeeBasisPoints: params.sellerFeeBasisPoints,\n    maxEditionSupply: params.maxEditionSupply,\n    isMutable: params.isMutable,\n    creators: params.creators,\n    itemSettings: params.itemSettings,\n  });\n\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n\n  let data: CandyMachineData;\n  if (Object.keys(dataToUpdate).length === 0) {\n    return TransactionBuilder.make();\n  } else if (isCandyMachine(params.candyMachine)) {\n    data = toCandyMachineData({ ...params.candyMachine, ...dataToUpdate });\n  } else {\n    assertObjectHasDefinedKeys(\n      dataToUpdate,\n      [\n        'itemsAvailable',\n        'symbol',\n        'sellerFeeBasisPoints',\n        'maxEditionSupply',\n        'isMutable',\n        'creators',\n        'itemSettings',\n      ],\n      onMissingInputError\n    );\n    data = toCandyMachineData(dataToUpdate);\n  }\n\n  return TransactionBuilder.make().add({\n    instruction: createUpdateCandyMachineInstruction(\n      {\n        candyMachine: toPublicKey(params.candyMachine),\n        authority: authority.publicKey,\n      },\n      { data },\n      candyMachineProgram.address\n    ),\n    signers: [authority],\n    key: params.updateDataInstructionKey ?? 'updateCandyMachineData',\n  });\n};\n\nconst updateCandyMachineCollectionBuilder = <\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  metaplex: Metaplex,\n  params: UpdateCandyMachineBuilderParams<T>,\n  authority: Signer,\n  payer: Signer,\n  programs?: Program[]\n): TransactionBuilder => {\n  if (!params.collection) {\n    return TransactionBuilder.make();\n  }\n\n  const currentCollectionAddress =\n    params.collection.currentCollectionAddress ??\n    (isCandyMachine(params.candyMachine)\n      ? params.candyMachine.collectionMintAddress\n      : null);\n\n  if (!currentCollectionAddress) {\n    throw onMissingInputError(['collection.currentCollectionAddress']);\n  }\n\n  // Programs.\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n\n  // Addresses.\n  const candyMachineAddress = toPublicKey(params.candyMachine);\n  const collectionAddress = params.collection.address;\n  const collectionUpdateAuthority = params.collection.updateAuthority;\n\n  // PDAs.\n  const authorityPda = metaplex.candyMachines().pdas().authority({\n    candyMachine: candyMachineAddress,\n    programs,\n  });\n  const currentCollectionMetadata = metaplex.nfts().pdas().metadata({\n    mint: currentCollectionAddress,\n  });\n  const currentCollectionAuthorityRecord = metaplex\n    .nfts()\n    .pdas()\n    .collectionAuthorityRecord({\n      mint: currentCollectionAddress,\n      collectionAuthority: authorityPda,\n    });\n  const collectionMetadata = metaplex.nfts().pdas().metadata({\n    mint: collectionAddress,\n  });\n  const collectionMasterEdition = metaplex.nfts().pdas().masterEdition({\n    mint: collectionAddress,\n  });\n  const collectionAuthorityRecord = metaplex\n    .nfts()\n    .pdas()\n    .collectionAuthorityRecord({\n      mint: collectionAddress,\n      collectionAuthority: authorityPda,\n    });\n\n  return TransactionBuilder.make().add({\n    instruction: createSetCollectionInstruction(\n      {\n        candyMachine: candyMachineAddress,\n        authority: authority.publicKey,\n        authorityPda,\n        payer: payer.publicKey,\n        collectionMint: currentCollectionAddress,\n        collectionMetadata: currentCollectionMetadata,\n        collectionAuthorityRecord: currentCollectionAuthorityRecord,\n        newCollectionUpdateAuthority: collectionUpdateAuthority.publicKey,\n        newCollectionMetadata: collectionMetadata,\n        newCollectionMint: collectionAddress,\n        newCollectionMasterEdition: collectionMasterEdition,\n        newCollectionAuthorityRecord: collectionAuthorityRecord,\n        tokenMetadataProgram: tokenMetadataProgram.address,\n      },\n      candyMachineProgram.address\n    ),\n    signers: [authority, payer, collectionUpdateAuthority],\n    key: params.setCollectionInstructionKey ?? 'setCandyMachineCollection',\n  });\n};\n\nconst updateCandyGuardsBuilder = <\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  metaplex: Metaplex,\n  params: UpdateCandyMachineBuilderParams<T>,\n  candyGuardAuthority: Signer,\n  payer: Signer,\n  programs?: Program[]\n): TransactionBuilder => {\n  const guardsToUpdate: {\n    candyGuard?: PublicKey;\n    guards?: Partial<T>;\n    groups?: { label: string; guards: Partial<T> }[];\n  } = removeUndefinedAttributes({\n    candyGuard: params.candyGuard,\n    guards: params.guards,\n    groups: params.groups,\n  });\n\n  let args: {\n    candyGuard: PublicKey;\n    guards: Partial<T>;\n    groups: { label: string; guards: Partial<T> }[];\n  };\n\n  if (Object.keys(guardsToUpdate).length === 0) {\n    return TransactionBuilder.make();\n  }\n\n  if (\n    isCandyMachine<T>(params.candyMachine) &&\n    params.candyMachine.candyGuard\n  ) {\n    args = {\n      candyGuard: params.candyMachine.candyGuard.address,\n      guards: params.candyMachine.candyGuard.guards,\n      groups: params.candyMachine.candyGuard.groups,\n      ...guardsToUpdate,\n    };\n  } else {\n    assertObjectHasDefinedKeys(\n      guardsToUpdate,\n      ['candyGuard', 'guards', 'groups'],\n      onMissingInputError\n    );\n    args = guardsToUpdate;\n  }\n\n  return metaplex\n    .candyMachines()\n    .builders()\n    .updateCandyGuard<T>(\n      {\n        candyGuard: args.candyGuard,\n        guards: args.guards,\n        groups: args.groups,\n        authority: candyGuardAuthority,\n        updateInstructionKey:\n          params.updateCandyGuardInstructionKey ?? 'updateCandyGuard',\n      },\n      { payer, programs }\n    );\n};\n\nconst updateCandyMachineMintAuthorityBuilder = <\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  metaplex: Metaplex,\n  params: UpdateCandyMachineBuilderParams<T>,\n  authority: Signer,\n  programs?: Program[]\n): TransactionBuilder => {\n  if (!params.newMintAuthority) {\n    return TransactionBuilder.make();\n  }\n\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n\n  return TransactionBuilder.make().add({\n    instruction: createSetMintAuthorityInstruction(\n      {\n        candyMachine: toPublicKey(params.candyMachine),\n        authority: authority.publicKey,\n        mintAuthority: params.newMintAuthority.publicKey,\n      },\n      candyMachineProgram.address\n    ),\n    signers: [authority, params.newMintAuthority],\n    key: params.setAuthorityInstructionKey ?? 'setCandyMachineAuthority',\n  });\n};\n\nconst updateCandyMachineAuthorityBuilder = <\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  metaplex: Metaplex,\n  params: UpdateCandyMachineBuilderParams<T>,\n  authority: Signer,\n  programs?: Program[]\n): TransactionBuilder => {\n  if (!params.newAuthority) {\n    return TransactionBuilder.make();\n  }\n\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n\n  return TransactionBuilder.make().add({\n    instruction: createSetAuthorityInstruction(\n      {\n        candyMachine: toPublicKey(params.candyMachine),\n        authority: authority.publicKey,\n      },\n      { newAuthority: params.newAuthority },\n      candyMachineProgram.address\n    ),\n    signers: [authority],\n    key: params.setAuthorityInstructionKey ?? 'setCandyMachineAuthority',\n  });\n};\n\nconst updateCandyGuardAuthorityBuilder = <\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  metaplex: Metaplex,\n  params: UpdateCandyMachineBuilderParams<T>,\n  candyGuardAuthority: Signer,\n  payer: Signer,\n  programs?: Program[]\n): TransactionBuilder => {\n  if (!params.newCandyGuardAuthority) {\n    return TransactionBuilder.make();\n  }\n\n  const candyGuardAddress =\n    params.candyGuard ??\n    (isCandyMachine<T>(params.candyMachine) && params.candyMachine.candyGuard\n      ? params.candyMachine.candyGuard.address\n      : null);\n\n  if (!candyGuardAddress) {\n    throw onMissingInputError(['candyGuard']);\n  }\n\n  return TransactionBuilder.make().add(\n    metaplex.candyMachines().builders().updateCandyGuardAuthority(\n      {\n        candyGuard: candyGuardAddress,\n        authority: candyGuardAuthority,\n        newAuthority: params.newCandyGuardAuthority,\n        instructionKey: params.setCandyGuardAuthorityInstructionKey,\n      },\n      { payer, programs }\n    )\n  );\n};\n\nconst onMissingInputError = (missingKeys: string[]) =>\n  new MissingInputDataError(\n    missingKeys,\n    'When passing the Candy Machine as a `PublicKey` instead of a Candy Machine model ' +\n      'the SDK cannot rely on current data to fill the gaps within the provided input. ' +\n      'Alternatively, you can pass the Candy Machine model instead.'\n  );\n"]},"metadata":{},"sourceType":"module"}