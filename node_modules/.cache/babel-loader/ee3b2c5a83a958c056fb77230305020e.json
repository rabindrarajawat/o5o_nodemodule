{"ast":null,"code":"import { ACCOUNT_SIZE } from '../state/account.js';\nimport { MINT_SIZE } from '../state/mint.js';\nimport { MULTISIG_SIZE } from '../state/multisig.js';\nimport { ACCOUNT_TYPE_SIZE } from './accountType.js';\nimport { DEFAULT_ACCOUNT_STATE_SIZE } from './defaultAccountState/index.js';\nimport { IMMUTABLE_OWNER_SIZE } from './immutableOwner.js';\nimport { INTEREST_BEARING_MINT_CONFIG_STATE_SIZE } from './interestBearingMint/state.js';\nimport { MEMO_TRANSFER_SIZE } from './memoTransfer/index.js';\nimport { MINT_CLOSE_AUTHORITY_SIZE } from './mintCloseAuthority.js';\nimport { NON_TRANSFERABLE_SIZE } from './nonTransferable.js';\nimport { TRANSFER_FEE_AMOUNT_SIZE, TRANSFER_FEE_CONFIG_SIZE } from './transferFee/index.js';\nexport var ExtensionType;\n\n(function (ExtensionType) {\n  ExtensionType[ExtensionType[\"Uninitialized\"] = 0] = \"Uninitialized\";\n  ExtensionType[ExtensionType[\"TransferFeeConfig\"] = 1] = \"TransferFeeConfig\";\n  ExtensionType[ExtensionType[\"TransferFeeAmount\"] = 2] = \"TransferFeeAmount\";\n  ExtensionType[ExtensionType[\"MintCloseAuthority\"] = 3] = \"MintCloseAuthority\";\n  ExtensionType[ExtensionType[\"ConfidentialTransferMint\"] = 4] = \"ConfidentialTransferMint\";\n  ExtensionType[ExtensionType[\"ConfidentialTransferAccount\"] = 5] = \"ConfidentialTransferAccount\";\n  ExtensionType[ExtensionType[\"DefaultAccountState\"] = 6] = \"DefaultAccountState\";\n  ExtensionType[ExtensionType[\"ImmutableOwner\"] = 7] = \"ImmutableOwner\";\n  ExtensionType[ExtensionType[\"MemoTransfer\"] = 8] = \"MemoTransfer\";\n  ExtensionType[ExtensionType[\"NonTransferable\"] = 9] = \"NonTransferable\";\n  ExtensionType[ExtensionType[\"InterestBearingMint\"] = 10] = \"InterestBearingMint\";\n})(ExtensionType || (ExtensionType = {}));\n\nexport const TYPE_SIZE = 2;\nexport const LENGTH_SIZE = 2; // NOTE: All of these should eventually use their type's Span instead of these\n// constants.  This is provided for at least creation to work.\n\nexport function getTypeLen(e) {\n  switch (e) {\n    case ExtensionType.Uninitialized:\n      return 0;\n\n    case ExtensionType.TransferFeeConfig:\n      return TRANSFER_FEE_CONFIG_SIZE;\n\n    case ExtensionType.TransferFeeAmount:\n      return TRANSFER_FEE_AMOUNT_SIZE;\n\n    case ExtensionType.MintCloseAuthority:\n      return MINT_CLOSE_AUTHORITY_SIZE;\n\n    case ExtensionType.ConfidentialTransferMint:\n      return 97;\n\n    case ExtensionType.ConfidentialTransferAccount:\n      return 286;\n\n    case ExtensionType.DefaultAccountState:\n      return DEFAULT_ACCOUNT_STATE_SIZE;\n\n    case ExtensionType.ImmutableOwner:\n      return IMMUTABLE_OWNER_SIZE;\n\n    case ExtensionType.MemoTransfer:\n      return MEMO_TRANSFER_SIZE;\n\n    case ExtensionType.NonTransferable:\n      return NON_TRANSFERABLE_SIZE;\n\n    case ExtensionType.InterestBearingMint:\n      return INTEREST_BEARING_MINT_CONFIG_STATE_SIZE;\n\n    default:\n      throw Error(`Unknown extension type: ${e}`);\n  }\n}\nexport function getAccountTypeOfMintType(e) {\n  switch (e) {\n    case ExtensionType.TransferFeeConfig:\n      return ExtensionType.TransferFeeAmount;\n\n    case ExtensionType.ConfidentialTransferMint:\n      return ExtensionType.ConfidentialTransferAccount;\n\n    case ExtensionType.TransferFeeAmount:\n    case ExtensionType.ConfidentialTransferAccount:\n    case ExtensionType.DefaultAccountState:\n    case ExtensionType.ImmutableOwner:\n    case ExtensionType.MemoTransfer:\n    case ExtensionType.MintCloseAuthority:\n    case ExtensionType.NonTransferable:\n    case ExtensionType.Uninitialized:\n    case ExtensionType.InterestBearingMint:\n      return ExtensionType.Uninitialized;\n  }\n}\n\nfunction getLen(extensionTypes, baseSize) {\n  if (extensionTypes.length === 0) {\n    return baseSize;\n  } else {\n    const accountLength = ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE + extensionTypes.filter((element, i) => i === extensionTypes.indexOf(element)).map(element => getTypeLen(element) + TYPE_SIZE + LENGTH_SIZE).reduce((a, b) => a + b);\n\n    if (accountLength === MULTISIG_SIZE) {\n      return accountLength + TYPE_SIZE;\n    } else {\n      return accountLength;\n    }\n  }\n}\n\nexport function getMintLen(extensionTypes) {\n  return getLen(extensionTypes, MINT_SIZE);\n}\nexport function getAccountLen(extensionTypes) {\n  return getLen(extensionTypes, ACCOUNT_SIZE);\n}\nexport function getExtensionData(extension, tlvData) {\n  let extensionTypeIndex = 0;\n\n  while (extensionTypeIndex < tlvData.length) {\n    const entryType = tlvData.readUInt16LE(extensionTypeIndex);\n    const entryLength = tlvData.readUInt16LE(extensionTypeIndex + TYPE_SIZE);\n    const typeIndex = extensionTypeIndex + TYPE_SIZE + LENGTH_SIZE;\n\n    if (entryType == extension) {\n      return tlvData.slice(typeIndex, typeIndex + entryLength);\n    }\n\n    extensionTypeIndex = typeIndex + entryLength;\n  }\n\n  return null;\n}\nexport function getExtensionTypes(tlvData) {\n  const extensionTypes = [];\n  let extensionTypeIndex = 0;\n\n  while (extensionTypeIndex < tlvData.length) {\n    const entryType = tlvData.readUInt16LE(extensionTypeIndex);\n    extensionTypes.push(entryType);\n    const entryLength = tlvData.readUInt16LE(extensionTypeIndex + TYPE_SIZE);\n    extensionTypeIndex += TYPE_SIZE + LENGTH_SIZE + entryLength;\n  }\n\n  return extensionTypes;\n}\nexport function getAccountLenForMint(mint) {\n  const extensionTypes = getExtensionTypes(mint.tlvData);\n  const accountExtensions = extensionTypes.map(getAccountTypeOfMintType);\n  return getAccountLen(accountExtensions);\n}","map":{"version":3,"sources":["../../../src/extensions/extensionType.ts"],"names":[],"mappings":"AAAA,SAAS,YAAT,QAA6B,qBAA7B;AAEA,SAAS,SAAT,QAA0B,kBAA1B;AACA,SAAS,aAAT,QAA8B,sBAA9B;AACA,SAAS,iBAAT,QAAkC,kBAAlC;AACA,SAAS,0BAAT,QAA2C,gCAA3C;AACA,SAAS,oBAAT,QAAqC,qBAArC;AACA,SAAS,uCAAT,QAAwD,gCAAxD;AACA,SAAS,kBAAT,QAAmC,yBAAnC;AACA,SAAS,yBAAT,QAA0C,yBAA1C;AACA,SAAS,qBAAT,QAAsC,sBAAtC;AACA,SAAS,wBAAT,EAAmC,wBAAnC,QAAmE,wBAAnE;AAEA,OAAA,IAAY,aAAZ;;AAAA,CAAA,UAAY,aAAZ,EAAyB;EACrB,aAAA,CAAA,aAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eAAA;EACA,aAAA,CAAA,aAAA,CAAA,mBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,mBAAA;EACA,aAAA,CAAA,aAAA,CAAA,mBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,mBAAA;EACA,aAAA,CAAA,aAAA,CAAA,oBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,oBAAA;EACA,aAAA,CAAA,aAAA,CAAA,0BAAA,CAAA,GAAA,CAAA,CAAA,GAAA,0BAAA;EACA,aAAA,CAAA,aAAA,CAAA,6BAAA,CAAA,GAAA,CAAA,CAAA,GAAA,6BAAA;EACA,aAAA,CAAA,aAAA,CAAA,qBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,qBAAA;EACA,aAAA,CAAA,aAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gBAAA;EACA,aAAA,CAAA,aAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA;EACA,aAAA,CAAA,aAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,iBAAA;EACA,aAAA,CAAA,aAAA,CAAA,qBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,qBAAA;AACH,CAZD,EAAY,aAAa,KAAb,aAAa,GAAA,EAAA,CAAzB;;AAcA,OAAO,MAAM,SAAS,GAAG,CAAlB;AACP,OAAO,MAAM,WAAW,GAAG,CAApB,C,CAEP;AACA;;AACA,OAAM,SAAU,UAAV,CAAqB,CAArB,EAAqC;EACvC,QAAQ,CAAR;IACI,KAAK,aAAa,CAAC,aAAnB;MACI,OAAO,CAAP;;IACJ,KAAK,aAAa,CAAC,iBAAnB;MACI,OAAO,wBAAP;;IACJ,KAAK,aAAa,CAAC,iBAAnB;MACI,OAAO,wBAAP;;IACJ,KAAK,aAAa,CAAC,kBAAnB;MACI,OAAO,yBAAP;;IACJ,KAAK,aAAa,CAAC,wBAAnB;MACI,OAAO,EAAP;;IACJ,KAAK,aAAa,CAAC,2BAAnB;MACI,OAAO,GAAP;;IACJ,KAAK,aAAa,CAAC,mBAAnB;MACI,OAAO,0BAAP;;IACJ,KAAK,aAAa,CAAC,cAAnB;MACI,OAAO,oBAAP;;IACJ,KAAK,aAAa,CAAC,YAAnB;MACI,OAAO,kBAAP;;IACJ,KAAK,aAAa,CAAC,eAAnB;MACI,OAAO,qBAAP;;IACJ,KAAK,aAAa,CAAC,mBAAnB;MACI,OAAO,uCAAP;;IACJ;MACI,MAAM,KAAK,CAAC,2BAA2B,CAAC,EAA7B,CAAX;EAxBR;AA0BH;AAED,OAAM,SAAU,wBAAV,CAAmC,CAAnC,EAAmD;EACrD,QAAQ,CAAR;IACI,KAAK,aAAa,CAAC,iBAAnB;MACI,OAAO,aAAa,CAAC,iBAArB;;IACJ,KAAK,aAAa,CAAC,wBAAnB;MACI,OAAO,aAAa,CAAC,2BAArB;;IACJ,KAAK,aAAa,CAAC,iBAAnB;IACA,KAAK,aAAa,CAAC,2BAAnB;IACA,KAAK,aAAa,CAAC,mBAAnB;IACA,KAAK,aAAa,CAAC,cAAnB;IACA,KAAK,aAAa,CAAC,YAAnB;IACA,KAAK,aAAa,CAAC,kBAAnB;IACA,KAAK,aAAa,CAAC,eAAnB;IACA,KAAK,aAAa,CAAC,aAAnB;IACA,KAAK,aAAa,CAAC,mBAAnB;MACI,OAAO,aAAa,CAAC,aAArB;EAdR;AAgBH;;AAED,SAAS,MAAT,CAAgB,cAAhB,EAAiD,QAAjD,EAAiE;EAC7D,IAAI,cAAc,CAAC,MAAf,KAA0B,CAA9B,EAAiC;IAC7B,OAAO,QAAP;EACH,CAFD,MAEO;IACH,MAAM,aAAa,GACf,YAAY,GACZ,iBADA,GAEA,cAAc,CACT,MADL,CACY,CAAC,OAAD,EAAU,CAAV,KAAgB,CAAC,KAAK,cAAc,CAAC,OAAf,CAAuB,OAAvB,CADlC,EAEK,GAFL,CAEU,OAAD,IAAa,UAAU,CAAC,OAAD,CAAV,GAAsB,SAAtB,GAAkC,WAFxD,EAGK,MAHL,CAGY,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,GAAG,CAH1B,CAHJ;;IAOA,IAAI,aAAa,KAAK,aAAtB,EAAqC;MACjC,OAAO,aAAa,GAAG,SAAvB;IACH,CAFD,MAEO;MACH,OAAO,aAAP;IACH;EACJ;AACJ;;AAED,OAAM,SAAU,UAAV,CAAqB,cAArB,EAAoD;EACtD,OAAO,MAAM,CAAC,cAAD,EAAiB,SAAjB,CAAb;AACH;AAED,OAAM,SAAU,aAAV,CAAwB,cAAxB,EAAuD;EACzD,OAAO,MAAM,CAAC,cAAD,EAAiB,YAAjB,CAAb;AACH;AAED,OAAM,SAAU,gBAAV,CAA2B,SAA3B,EAAqD,OAArD,EAAoE;EACtE,IAAI,kBAAkB,GAAG,CAAzB;;EACA,OAAO,kBAAkB,GAAG,OAAO,CAAC,MAApC,EAA4C;IACxC,MAAM,SAAS,GAAG,OAAO,CAAC,YAAR,CAAqB,kBAArB,CAAlB;IACA,MAAM,WAAW,GAAG,OAAO,CAAC,YAAR,CAAqB,kBAAkB,GAAG,SAA1C,CAApB;IACA,MAAM,SAAS,GAAG,kBAAkB,GAAG,SAArB,GAAiC,WAAnD;;IACA,IAAI,SAAS,IAAI,SAAjB,EAA4B;MACxB,OAAO,OAAO,CAAC,KAAR,CAAc,SAAd,EAAyB,SAAS,GAAG,WAArC,CAAP;IACH;;IACD,kBAAkB,GAAG,SAAS,GAAG,WAAjC;EACH;;EACD,OAAO,IAAP;AACH;AAED,OAAM,SAAU,iBAAV,CAA4B,OAA5B,EAA2C;EAC7C,MAAM,cAAc,GAAG,EAAvB;EACA,IAAI,kBAAkB,GAAG,CAAzB;;EACA,OAAO,kBAAkB,GAAG,OAAO,CAAC,MAApC,EAA4C;IACxC,MAAM,SAAS,GAAG,OAAO,CAAC,YAAR,CAAqB,kBAArB,CAAlB;IACA,cAAc,CAAC,IAAf,CAAoB,SAApB;IACA,MAAM,WAAW,GAAG,OAAO,CAAC,YAAR,CAAqB,kBAAkB,GAAG,SAA1C,CAApB;IACA,kBAAkB,IAAI,SAAS,GAAG,WAAZ,GAA0B,WAAhD;EACH;;EACD,OAAO,cAAP;AACH;AAED,OAAM,SAAU,oBAAV,CAA+B,IAA/B,EAAyC;EAC3C,MAAM,cAAc,GAAG,iBAAiB,CAAC,IAAI,CAAC,OAAN,CAAxC;EACA,MAAM,iBAAiB,GAAG,cAAc,CAAC,GAAf,CAAmB,wBAAnB,CAA1B;EACA,OAAO,aAAa,CAAC,iBAAD,CAApB;AACH","sourceRoot":"","sourcesContent":["import { ACCOUNT_SIZE } from '../state/account.js';\nimport { MINT_SIZE } from '../state/mint.js';\nimport { MULTISIG_SIZE } from '../state/multisig.js';\nimport { ACCOUNT_TYPE_SIZE } from './accountType.js';\nimport { DEFAULT_ACCOUNT_STATE_SIZE } from './defaultAccountState/index.js';\nimport { IMMUTABLE_OWNER_SIZE } from './immutableOwner.js';\nimport { INTEREST_BEARING_MINT_CONFIG_STATE_SIZE } from './interestBearingMint/state.js';\nimport { MEMO_TRANSFER_SIZE } from './memoTransfer/index.js';\nimport { MINT_CLOSE_AUTHORITY_SIZE } from './mintCloseAuthority.js';\nimport { NON_TRANSFERABLE_SIZE } from './nonTransferable.js';\nimport { TRANSFER_FEE_AMOUNT_SIZE, TRANSFER_FEE_CONFIG_SIZE } from './transferFee/index.js';\nexport var ExtensionType;\n(function (ExtensionType) {\n    ExtensionType[ExtensionType[\"Uninitialized\"] = 0] = \"Uninitialized\";\n    ExtensionType[ExtensionType[\"TransferFeeConfig\"] = 1] = \"TransferFeeConfig\";\n    ExtensionType[ExtensionType[\"TransferFeeAmount\"] = 2] = \"TransferFeeAmount\";\n    ExtensionType[ExtensionType[\"MintCloseAuthority\"] = 3] = \"MintCloseAuthority\";\n    ExtensionType[ExtensionType[\"ConfidentialTransferMint\"] = 4] = \"ConfidentialTransferMint\";\n    ExtensionType[ExtensionType[\"ConfidentialTransferAccount\"] = 5] = \"ConfidentialTransferAccount\";\n    ExtensionType[ExtensionType[\"DefaultAccountState\"] = 6] = \"DefaultAccountState\";\n    ExtensionType[ExtensionType[\"ImmutableOwner\"] = 7] = \"ImmutableOwner\";\n    ExtensionType[ExtensionType[\"MemoTransfer\"] = 8] = \"MemoTransfer\";\n    ExtensionType[ExtensionType[\"NonTransferable\"] = 9] = \"NonTransferable\";\n    ExtensionType[ExtensionType[\"InterestBearingMint\"] = 10] = \"InterestBearingMint\";\n})(ExtensionType || (ExtensionType = {}));\nexport const TYPE_SIZE = 2;\nexport const LENGTH_SIZE = 2;\n// NOTE: All of these should eventually use their type's Span instead of these\n// constants.  This is provided for at least creation to work.\nexport function getTypeLen(e) {\n    switch (e) {\n        case ExtensionType.Uninitialized:\n            return 0;\n        case ExtensionType.TransferFeeConfig:\n            return TRANSFER_FEE_CONFIG_SIZE;\n        case ExtensionType.TransferFeeAmount:\n            return TRANSFER_FEE_AMOUNT_SIZE;\n        case ExtensionType.MintCloseAuthority:\n            return MINT_CLOSE_AUTHORITY_SIZE;\n        case ExtensionType.ConfidentialTransferMint:\n            return 97;\n        case ExtensionType.ConfidentialTransferAccount:\n            return 286;\n        case ExtensionType.DefaultAccountState:\n            return DEFAULT_ACCOUNT_STATE_SIZE;\n        case ExtensionType.ImmutableOwner:\n            return IMMUTABLE_OWNER_SIZE;\n        case ExtensionType.MemoTransfer:\n            return MEMO_TRANSFER_SIZE;\n        case ExtensionType.NonTransferable:\n            return NON_TRANSFERABLE_SIZE;\n        case ExtensionType.InterestBearingMint:\n            return INTEREST_BEARING_MINT_CONFIG_STATE_SIZE;\n        default:\n            throw Error(`Unknown extension type: ${e}`);\n    }\n}\nexport function getAccountTypeOfMintType(e) {\n    switch (e) {\n        case ExtensionType.TransferFeeConfig:\n            return ExtensionType.TransferFeeAmount;\n        case ExtensionType.ConfidentialTransferMint:\n            return ExtensionType.ConfidentialTransferAccount;\n        case ExtensionType.TransferFeeAmount:\n        case ExtensionType.ConfidentialTransferAccount:\n        case ExtensionType.DefaultAccountState:\n        case ExtensionType.ImmutableOwner:\n        case ExtensionType.MemoTransfer:\n        case ExtensionType.MintCloseAuthority:\n        case ExtensionType.NonTransferable:\n        case ExtensionType.Uninitialized:\n        case ExtensionType.InterestBearingMint:\n            return ExtensionType.Uninitialized;\n    }\n}\nfunction getLen(extensionTypes, baseSize) {\n    if (extensionTypes.length === 0) {\n        return baseSize;\n    }\n    else {\n        const accountLength = ACCOUNT_SIZE +\n            ACCOUNT_TYPE_SIZE +\n            extensionTypes\n                .filter((element, i) => i === extensionTypes.indexOf(element))\n                .map((element) => getTypeLen(element) + TYPE_SIZE + LENGTH_SIZE)\n                .reduce((a, b) => a + b);\n        if (accountLength === MULTISIG_SIZE) {\n            return accountLength + TYPE_SIZE;\n        }\n        else {\n            return accountLength;\n        }\n    }\n}\nexport function getMintLen(extensionTypes) {\n    return getLen(extensionTypes, MINT_SIZE);\n}\nexport function getAccountLen(extensionTypes) {\n    return getLen(extensionTypes, ACCOUNT_SIZE);\n}\nexport function getExtensionData(extension, tlvData) {\n    let extensionTypeIndex = 0;\n    while (extensionTypeIndex < tlvData.length) {\n        const entryType = tlvData.readUInt16LE(extensionTypeIndex);\n        const entryLength = tlvData.readUInt16LE(extensionTypeIndex + TYPE_SIZE);\n        const typeIndex = extensionTypeIndex + TYPE_SIZE + LENGTH_SIZE;\n        if (entryType == extension) {\n            return tlvData.slice(typeIndex, typeIndex + entryLength);\n        }\n        extensionTypeIndex = typeIndex + entryLength;\n    }\n    return null;\n}\nexport function getExtensionTypes(tlvData) {\n    const extensionTypes = [];\n    let extensionTypeIndex = 0;\n    while (extensionTypeIndex < tlvData.length) {\n        const entryType = tlvData.readUInt16LE(extensionTypeIndex);\n        extensionTypes.push(entryType);\n        const entryLength = tlvData.readUInt16LE(extensionTypeIndex + TYPE_SIZE);\n        extensionTypeIndex += TYPE_SIZE + LENGTH_SIZE + entryLength;\n    }\n    return extensionTypes;\n}\nexport function getAccountLenForMint(mint) {\n    const extensionTypes = getExtensionTypes(mint.tlvData);\n    const accountExtensions = extensionTypes.map(getAccountTypeOfMintType);\n    return getAccountLen(accountExtensions);\n}\n//# sourceMappingURL=extensionType.js.map"]},"metadata":{},"sourceType":"module"}