{"ast":null,"code":"import { createTransferInstruction } from '@solana/spl-token';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { toPublicKey } from '../../../types/PublicKey.mjs';\nimport { isSigner } from '../../../types/Signer.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'SendTokensOperation';\n/**\n * Send tokens from one account to another.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .send({\n *     mintAddress,\n *     toOwner,\n *     amount: token(100),\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst sendTokensOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst sendTokensOperationHandler = {\n  async handle(operation, metaplex, scope) {\n    const {\n      mintAddress,\n      toOwner = metaplex.identity().publicKey,\n      toToken\n    } = operation.input;\n    const destination = toToken ?? metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: toOwner,\n      programs: scope.programs\n    });\n    const destinationAddress = toPublicKey(destination);\n    const destinationAccountExists = await metaplex.rpc().accountExists(destinationAddress);\n    scope.throwIfCanceled();\n    const builder = await sendTokensBuilder(metaplex, { ...operation.input,\n      toTokenExists: destinationAccountExists\n    }, scope);\n    scope.throwIfCanceled();\n    return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Send tokens from one account to another.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .tokens()\n *   .builders()\n *   .send({\n *     mintAddress,\n *     toOwner,\n *     amount: token(100),\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst sendTokensBuilder = async function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    mintAddress,\n    amount,\n    toOwner = metaplex.identity().publicKey,\n    toToken,\n    toTokenExists = true,\n    fromOwner = metaplex.identity(),\n    fromToken,\n    fromMultiSigners = [],\n    delegateAuthority\n  } = params;\n  const [fromOwnerPublicKey, signers] = isSigner(fromOwner) ? [fromOwner.publicKey, [fromOwner]] : [fromOwner, [delegateAuthority, ...fromMultiSigners].filter(isSigner)];\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const source = fromToken ?? metaplex.tokens().pdas().associatedTokenAccount({\n    mint: mintAddress,\n    owner: fromOwnerPublicKey,\n    programs\n  });\n  const destination = toToken ?? metaplex.tokens().pdas().associatedTokenAccount({\n    mint: mintAddress,\n    owner: toOwner,\n    programs\n  });\n  return TransactionBuilder.make().setFeePayer(payer) // Create token account if missing.\n  .add(await metaplex.tokens().builders().createTokenIfMissing({ ...params,\n    mint: mintAddress,\n    owner: toOwner,\n    token: toToken,\n    tokenExists: toTokenExists,\n    tokenVariable: 'toToken'\n  }, {\n    programs,\n    payer\n  })) // Transfer tokens.\n  .add({\n    instruction: createTransferInstruction(source, toPublicKey(destination), delegateAuthority ? delegateAuthority.publicKey : fromOwnerPublicKey, amount.basisPoints.toNumber(), fromMultiSigners, tokenProgram.address),\n    signers,\n    key: params.transferTokensInstructionKey ?? 'transferTokens'\n  });\n};\n\nexport { sendTokensBuilder, sendTokensOperation, sendTokensOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/tokenModule/operations/sendTokens.ts"],"names":["Key","sendTokensOperation","useOperation","sendTokensOperationHandler","handle","operation","metaplex","scope","mintAddress","toOwner","identity","publicKey","toToken","input","destination","tokens","pdas","associatedTokenAccount","mint","owner","programs","destinationAddress","toPublicKey","destinationAccountExists","rpc","accountExists","throwIfCanceled","builder","sendTokensBuilder","toTokenExists","sendAndConfirm","confirmOptions","params","options","payer","getDefaultFeePayer","amount","fromOwner","fromToken","fromMultiSigners","delegateAuthority","fromOwnerPublicKey","signers","isSigner","filter","tokenProgram","getToken","source","TransactionBuilder","make","setFeePayer","add","builders","createTokenIfMissing","token","tokenExists","tokenVariable","instruction","createTransferInstruction","basisPoints","toNumber","address","key","transferTokensInstructionKey"],"mappings":"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","sourcesContent":["import { createTransferInstruction } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'SendTokensOperation' as const;\n\n/**\n * Send tokens from one account to another.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .send({\n *     mintAddress,\n *     toOwner,\n *     amount: token(100),\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const sendTokensOperation = useOperation<SendTokensOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type SendTokensOperation = Operation<\n  typeof Key,\n  SendTokensInput,\n  SendTokensOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type SendTokensInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The amount of tokens to send. */\n  amount: SplTokenAmount;\n\n  /**\n   * The owner of the destination token account.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  toOwner?: PublicKey;\n\n  /**\n   * The address of the destination token account.\n   *\n   * Note that this may be required as a `Signer` if the destination\n   * token account does not exist and we need to create it before\n   * sending the tokens.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `toOwner` parameters.\n   */\n  toToken?: PublicKey | Signer;\n\n  /**\n   * The owner of the source token account.\n   *\n   * This may be provided as a PublicKey if one of the following is true:\n   * - the owner of the source token account is a multisig and the\n   *   `fromMultiSigners` parameter is provided.\n   * - we are using a delegate authority to send the tokens and the\n   *   `delegateAuthority` parameter is provided.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  fromOwner?: PublicKey | Signer; // Defaults to mx.identity().\n\n  /**\n   * The address of the source token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `fromOwner` parameters.\n   */\n  fromToken?: PublicKey;\n\n  /**\n   * The signing accounts to use if the source token owner is a multisig.\n   *\n   * @defaultValue `[]`\n   */\n  fromMultiSigners?: KeypairSigner[];\n\n  /**\n   * The delegate authority of the source token account as a Signer.\n   *\n   * This is required when the owner of the source token account\n   * is provided as a PublicKey as someone needs to authorize\n   * that transfer of tokens.\n   *\n   * @defaultValue Defaults to not using a delegate authority.\n   */\n  delegateAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type SendTokensOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const sendTokensOperationHandler: OperationHandler<SendTokensOperation> =\n  {\n    async handle(\n      operation: SendTokensOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<SendTokensOutput> {\n      const {\n        mintAddress,\n        toOwner = metaplex.identity().publicKey,\n        toToken,\n      } = operation.input;\n\n      const destination =\n        toToken ??\n        metaplex.tokens().pdas().associatedTokenAccount({\n          mint: mintAddress,\n          owner: toOwner,\n          programs: scope.programs,\n        });\n      const destinationAddress = toPublicKey(destination);\n      const destinationAccountExists = await metaplex\n        .rpc()\n        .accountExists(destinationAddress);\n      scope.throwIfCanceled();\n\n      const builder = await sendTokensBuilder(\n        metaplex,\n        { ...operation.input, toTokenExists: destinationAccountExists },\n        scope\n      );\n      scope.throwIfCanceled();\n\n      return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type SendTokensBuilderParams = Omit<\n  SendTokensInput,\n  'confirmOptions'\n> & {\n  /**\n   * Whether or not the receiving token account already exists.\n   * If `false`, we'll add another instruction to create it.\n   *\n   * @defaultValue `true`\n   */\n  toTokenExists?: boolean;\n\n  /** A key to distinguish the instruction that creates the associated token account. */\n  createAssociatedTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the token account. */\n  createAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the token account. */\n  initializeTokenInstructionKey?: string;\n\n  /** A key to distinguish the instruction that transfers the tokens. */\n  transferTokensInstructionKey?: string;\n};\n\n/**\n * Send tokens from one account to another.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .tokens()\n *   .builders()\n *   .send({\n *     mintAddress,\n *     toOwner,\n *     amount: token(100),\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const sendTokensBuilder = async (\n  metaplex: Metaplex,\n  params: SendTokensBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    amount,\n    toOwner = metaplex.identity().publicKey,\n    toToken,\n    toTokenExists = true,\n    fromOwner = metaplex.identity(),\n    fromToken,\n    fromMultiSigners = [],\n    delegateAuthority,\n  } = params;\n\n  const [fromOwnerPublicKey, signers] = isSigner(fromOwner)\n    ? [fromOwner.publicKey, [fromOwner]]\n    : [fromOwner, [delegateAuthority, ...fromMultiSigners].filter(isSigner)];\n\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const source =\n    fromToken ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: fromOwnerPublicKey,\n      programs,\n    });\n  const destination =\n    toToken ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: toOwner,\n      programs,\n    });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Create token account if missing.\n      .add(\n        await metaplex\n          .tokens()\n          .builders()\n          .createTokenIfMissing(\n            {\n              ...params,\n              mint: mintAddress,\n              owner: toOwner,\n              token: toToken,\n              tokenExists: toTokenExists,\n              tokenVariable: 'toToken',\n            },\n            { programs, payer }\n          )\n      )\n\n      // Transfer tokens.\n      .add({\n        instruction: createTransferInstruction(\n          source,\n          toPublicKey(destination),\n          delegateAuthority ? delegateAuthority.publicKey : fromOwnerPublicKey,\n          amount.basisPoints.toNumber(),\n          fromMultiSigners,\n          tokenProgram.address\n        ),\n        signers,\n        key: params.transferTokensInstructionKey ?? 'transferTokens',\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}