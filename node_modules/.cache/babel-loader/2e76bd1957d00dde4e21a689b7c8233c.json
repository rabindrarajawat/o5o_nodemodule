{"ast":null,"code":"import { SystemProgram } from '@solana/web3.js';\nimport { useOperation } from '../../../types/Operation.mjs';\nimport { assertSol } from '../../../types/Amount.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'TransferSolOperation';\n/**\n * Transfers some SOL from one account to another.\n *\n * ```ts\n * await metaplex\n *   .system()\n *   .transferSol({\n *     to: new PublicKey(\"...\"),\n *     amount: sol(1.5),\n *   };\n * ````\n *\n * @group Operations\n * @category Constructors\n */\n\nconst transferSolOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst transferSolOperationHandler = {\n  async handle(operation, metaplex, scope) {\n    const builder = transferSolBuilder(metaplex, operation.input, scope);\n    return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n * Transfers some SOL from one account to another.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .system()\n *   .builders()\n *   .transferSol({\n *     to: new PublicKey(\"...\"),\n *     amount: sol(1.5),\n *   });\n * ````\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst transferSolBuilder = function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    from = metaplex.identity(),\n    to,\n    amount,\n    basePubkey,\n    seed\n  } = params;\n  assertSol(amount);\n  return TransactionBuilder.make().setFeePayer(payer).add({\n    instruction: SystemProgram.transfer({\n      fromPubkey: from.publicKey,\n      toPubkey: to,\n      lamports: amount.basisPoints.toNumber(),\n      ...(basePubkey ? {\n        basePubkey,\n        seed\n      } : {}),\n      programId: metaplex.programs().getSystem(programs).address\n    }),\n    signers: [from],\n    key: params.instructionKey ?? 'transferSol'\n  });\n};\n\nexport { transferSolBuilder, transferSolOperation, transferSolOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/systemModule/operations/transferSol.ts"],"names":["Key","transferSolOperation","useOperation","transferSolOperationHandler","handle","operation","metaplex","scope","builder","transferSolBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","from","identity","to","amount","basePubkey","seed","assertSol","TransactionBuilder","make","setFeePayer","add","instruction","SystemProgram","transfer","fromPubkey","publicKey","toPubkey","lamports","basisPoints","toNumber","programId","getSystem","address","signers","key","instructionKey"],"mappings":";;;4EAcA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,sBAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,oBAAoB,GAAGC,YAAY,CAAuBF,GAAvB,C;AAEhD;AACA;AACA;AACA;;AAiDA;AACA;AACA;AACA;;AACO,MAAMG,2BAAmE,GAC9E;EACE,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAI8B;IAC5B,MAAMC,OAAO,GAAGC,kBAAkB,CAACH,QAAD,EAAWD,SAAS,CAACK,KAArB,EAA4BH,KAA5B,CAAlC;IACA,OAAOC,OAAO,CAACG,cAARH,CAAuBF,QAAvBE,EAAiCD,KAAK,CAACK,cAAvCJ,CAAP;EACF;;AARF,CADK,C,CAYP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaC,MAAAA,kBAAkB,GAAG,UAChCH,QADgC,EAEhCO,MAFgC,EAIT;EAAA,IADvBC,OACuB,uEADc,EACd;EACvB,MAAM;IAAEC,QAAF;IAAYC,KAAK,GAAGV,QAAQ,CAACW,GAATX,GAAeY,kBAAfZ;EAApB,IAA4DQ,OAAlE;EACA,MAAM;IAAEK,IAAI,GAAGb,QAAQ,CAACc,QAATd,EAAT;IAA8Be,EAA9B;IAAkCC,MAAlC;IAA0CC,UAA1C;IAAsDC;EAAtD,IAA+DX,MAArE;EAEAY,SAAS,CAACH,MAAD,CAATG;EAEA,OAAOC,kBAAkB,CAACC,IAAnBD,GACJE,WADIF,CACQV,KADRU,EAEJG,GAFIH,CAEA;IACHI,WAAW,EAAEC,aAAa,CAACC,QAAdD,CAAuB;MAClCE,UAAU,EAAEd,IAAI,CAACe,SADiB;MAElCC,QAAQ,EAAEd,EAFwB;MAGlCe,QAAQ,EAAEd,MAAM,CAACe,WAAPf,CAAmBgB,QAAnBhB,EAHwB;MAIlC,IAAIC,UAAU,GAAG;QAAEA,UAAF;QAAcC;MAAd,CAAH,GAA0B,EAAxC,CAJkC;MAKlCe,SAAS,EAAEjC,QAAQ,CAACS,QAATT,GAAoBkC,SAApBlC,CAA8BS,QAA9BT,EAAwCmC;IALjB,CAAvBV,CADV;IAQHW,OAAO,EAAE,CAACvB,IAAD,CARN;IASHwB,GAAG,EAAE9B,MAAM,CAAC+B,cAAP/B,IAAyB;EAT3B,CAFAa,CAAP;AAaF,CAvBajB","sourcesContent":["import { PublicKey, SystemProgram } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  assertSol,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SolAmount,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'TransferSolOperation' as const;\n\n/**\n * Transfers some SOL from one account to another.\n *\n * ```ts\n * await metaplex\n *   .system()\n *   .transferSol({\n *     to: new PublicKey(\"...\"),\n *     amount: sol(1.5),\n *   };\n * ````\n *\n * @group Operations\n * @category Constructors\n */\nexport const transferSolOperation = useOperation<TransferSolOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type TransferSolOperation = Operation<\n  typeof Key,\n  TransferSolInput,\n  TransferSolOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type TransferSolInput = {\n  /**\n   * The account that sends the SOLs as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  from?: Signer;\n\n  /** The address of the account that receives the SOLs. */\n  to: PublicKey;\n\n  /** The amount of SOLs to send. */\n  amount: SolAmount;\n\n  /**\n   * Base public key to use to derive the funding account address.\n   *\n   * @defaultValue Defaults to not being used.\n   */\n  basePubkey?: PublicKey;\n\n  /**\n   * Seed to use to derive the funding account address.\n   *\n   * @defaultValue Defaults to not being used.\n   */\n  seed?: string;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type TransferSolOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const transferSolOperationHandler: OperationHandler<TransferSolOperation> =\n  {\n    async handle(\n      operation: TransferSolOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<TransferSolOutput> {\n      const builder = transferSolBuilder(metaplex, operation.input, scope);\n      return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type TransferSolBuilderParams = Omit<\n  TransferSolInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that transfers some SOL. */\n  instructionKey?: string;\n};\n\n/**\n * Transfers some SOL from one account to another.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .system()\n *   .builders()\n *   .transferSol({\n *     to: new PublicKey(\"...\"),\n *     amount: sol(1.5),\n *   });\n * ````\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const transferSolBuilder = (\n  metaplex: Metaplex,\n  params: TransferSolBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { from = metaplex.identity(), to, amount, basePubkey, seed } = params;\n\n  assertSol(amount);\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: SystemProgram.transfer({\n        fromPubkey: from.publicKey,\n        toPubkey: to,\n        lamports: amount.basisPoints.toNumber(),\n        ...(basePubkey ? { basePubkey, seed } : {}),\n        programId: metaplex.programs().getSystem(programs).address,\n      }),\n      signers: [from],\n      key: params.instructionKey ?? 'transferSol',\n    });\n};\n"]},"metadata":{},"sourceType":"module"}