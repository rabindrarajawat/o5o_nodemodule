{"ast":null,"code":"import { useOperation } from '../../../types/Operation.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindPurchaseByTradeStateOperation';\n/**\n * Finds a Purchase by its trade state address.\n *\n * ```ts\n * const nft = await metaplex\n *   .auctionHouse()\n *   .findPurchaseByTradeState({ sellerTradeState, buyerTradeState, auctionHouse };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst findPurchaseByTradeStateOperation = useOperation(Key);\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst findPurchaseByTradeStateOperationHandler = {\n  handle: async (operation, metaplex, scope) => {\n    const {\n      sellerTradeState,\n      buyerTradeState\n    } = operation.input;\n    const receiptAddress = metaplex.auctionHouse().pdas().purchaseReceipt({\n      listingTradeState: sellerTradeState,\n      bidTradeState: buyerTradeState,\n      programs: scope.programs\n    });\n    return metaplex.auctionHouse().findPurchaseByReceipt({\n      receiptAddress,\n      ...operation.input\n    }, scope);\n  }\n};\nexport { findPurchaseByTradeStateOperation, findPurchaseByTradeStateOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/auctionHouseModule/operations/findPurchaseByTradeState.ts"],"names":["Key","findPurchaseByTradeStateOperation","useOperation","findPurchaseByTradeStateOperationHandler","handle","operation","metaplex","scope","sellerTradeState","buyerTradeState","input","receiptAddress","auctionHouse","pdas","purchaseReceipt","listingTradeState","bidTradeState","programs","findPurchaseByReceipt"],"mappings":"6DAUA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,mCAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,iCAAiC,GAC5CC,YAAY,CAAoCF,GAApC,C;AAEd;AACA;AACA;AACA;;AA6BA;AACA;AACA;AACA;;AACO,MAAMG,wCAA6F,GACxG;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MAAEC,gBAAF;MAAoBC;IAApB,IAAwCJ,SAAS,CAACK,KAAxD;IACA,MAAMC,cAAc,GAAGL,QAAQ,CAACM,YAATN,GAAwBO,IAAxBP,GAA+BQ,eAA/BR,CAA+C;MACpES,iBAAiB,EAAEP,gBADiD;MAEpEQ,aAAa,EAAEP,eAFqD;MAGpEQ,QAAQ,EAAEV,KAAK,CAACU;IAHoD,CAA/CX,CAAvB;IAMA,OAAOA,QAAQ,CACZM,YADIN,GAEJY,qBAFIZ,CAEkB;MAAEK,cAAF;MAAkB,GAAGN,SAAS,CAACK;IAA/B,CAFlBJ,EAE0DC,KAF1DD,CAAP;EAGF;AAhBF,CADK","sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { AuctionHouse, Purchase } from '../models';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindPurchaseByTradeStateOperation' as const;\n\n/**\n * Finds a Purchase by its trade state address.\n *\n * ```ts\n * const nft = await metaplex\n *   .auctionHouse()\n *   .findPurchaseByTradeState({ sellerTradeState, buyerTradeState, auctionHouse };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findPurchaseByTradeStateOperation =\n  useOperation<FindPurchaseByTradeStateOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindPurchaseByTradeStateOperation = Operation<\n  typeof Key,\n  FindPurchaseByTradeStateInput,\n  Purchase\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindPurchaseByTradeStateInput = {\n  /** Seller trade state PDA account encoding the listing order. */\n  sellerTradeState: PublicKey;\n\n  /** Buyer trade state PDA account encoding the bid order. */\n  buyerTradeState: PublicKey;\n\n  /** A model of the Auction House related to this purchase. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * Whether or not we should fetch the JSON Metadata for the NFT or SFT.\n   *\n   * @defaultValue `true`\n   */\n  loadJsonMetadata?: boolean;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findPurchaseByTradeStateOperationHandler: OperationHandler<FindPurchaseByTradeStateOperation> =\n  {\n    handle: async (\n      operation: FindPurchaseByTradeStateOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) => {\n      const { sellerTradeState, buyerTradeState } = operation.input;\n      const receiptAddress = metaplex.auctionHouse().pdas().purchaseReceipt({\n        listingTradeState: sellerTradeState,\n        bidTradeState: buyerTradeState,\n        programs: scope.programs,\n      });\n\n      return metaplex\n        .auctionHouse()\n        .findPurchaseByReceipt({ receiptAddress, ...operation.input }, scope);\n    },\n  };\n"]},"metadata":{},"sourceType":"module"}