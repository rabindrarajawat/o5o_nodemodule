{"ast":null,"code":"import { createInitializeInstruction } from '@metaplex-foundation/mpl-candy-machine-core';\nimport { Keypair } from '@solana/web3.js';\nimport { toCandyMachineData, getCandyMachineSize } from '../models/CandyMachine.mjs';\nimport { makeConfirmOptionsFinalizedOnMainnet } from '../../../types/Operation.mjs';\nimport { toBigNumber } from '../../../types/BigNumber.mjs';\nimport { toPublicKey } from '../../../types/PublicKey.mjs';\nimport { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs';\nimport { isSigner } from '../../../types/Signer.mjs';\nimport { ExpectedSignerError } from '../../../errors/SdkError.mjs'; // -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateCandyMachineOperation';\n/**\n * Creates a brand new Candy Machine with the provided settings.\n *\n * Unless the `withoutCandyGuard` option is set to `true`, a\n * Candy Guard will be created with the given guards and\n * immediately linked to the Candy Machine.\n *\n * ```ts\n *  const { candyMachine } = await metaplex\n *    .candyMachines()\n *    .create({\n *      itemsAvailable: toBigNumber(5000),\n *      sellerFeeBasisPoints: 333, // 3.33%\n *      collection: {\n *        address: collectionNft.address,\n *        updateAuthority: collectionUpdateAuthority,\n *      },\n *    });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\n\nconst createCandyMachineOperation = _createCandyMachineOperation; // eslint-disable-next-line @typescript-eslint/naming-convention\n\nfunction _createCandyMachineOperation(input) {\n  return {\n    key: Key,\n    input\n  };\n}\n\n_createCandyMachineOperation.key = Key;\n/**\n * @group Operations\n * @category Types\n */\n\n/**\n * @group Operations\n * @category Handlers\n */\n\nconst createCandyMachineOperationHandler = {\n  async handle(operation, metaplex, scope) {\n    const builder = await createCandyMachineBuilder(metaplex, operation.input, scope);\n    scope.throwIfCanceled();\n    const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(metaplex, scope.confirmOptions);\n    const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n    scope.throwIfCanceled();\n    const candyMachine = await metaplex.candyMachines().findByAddress({\n      address: output.candyMachineSigner.publicKey\n    }, scope);\n    scope.throwIfCanceled();\n    return { ...output,\n      candyMachine\n    };\n  }\n\n}; // -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\n\n/**\n\n * Creates a brand new Candy Machine with the provided settings.\n *\n * Unless the `withoutCandyGuard` option is set to `true`, a\n * Candy Guard will be created with the given guards and\n * immediately linked to the Candy Machine.\n *\n * ```ts\n *  const transactionBuilder = await metaplex\n *    .candyMachines()\n *    .builders()\n *    .create({\n *      itemsAvailable: toBigNumber(5000),\n *      sellerFeeBasisPoints: 333, // 3.33%\n *      collection: {\n *        address: collectionNft.address,\n *        updateAuthority: collectionUpdateAuthority,\n *      },\n *    });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\n\nconst createCandyMachineBuilder = async function (metaplex, params) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // Input.\n  const {\n    programs,\n    payer = metaplex.rpc().getDefaultFeePayer()\n  } = options;\n  const {\n    candyMachine = Keypair.generate(),\n    authority = metaplex.identity(),\n    collection,\n    sellerFeeBasisPoints,\n    itemsAvailable,\n    symbol = '',\n    maxEditionSupply = toBigNumber(0),\n    isMutable = true,\n    withoutCandyGuard = false\n  } = params;\n  const creators = params.creators ?? [{\n    address: toPublicKey(authority),\n    share: 100\n  }];\n  const itemSettings = params.itemSettings ?? {\n    type: 'configLines',\n    prefixName: '',\n    nameLength: 32,\n    prefixUri: '',\n    uriLength: 200,\n    isSequential: false\n  }; // PDAs.\n\n  const authorityPda = metaplex.candyMachines().pdas().authority({\n    candyMachine: candyMachine.publicKey,\n    programs\n  });\n  const collectionMetadata = metaplex.nfts().pdas().metadata({\n    mint: collection.address,\n    programs\n  });\n  const collectionMasterEdition = metaplex.nfts().pdas().masterEdition({\n    mint: collection.address,\n    programs\n  });\n  const collectionAuthorityRecord = metaplex.nfts().pdas().collectionAuthorityRecord({\n    mint: collection.address,\n    collectionAuthority: authorityPda,\n    programs\n  }); // Programs.\n\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const candyMachineData = toCandyMachineData({\n    itemsAvailable,\n    symbol,\n    sellerFeeBasisPoints,\n    maxEditionSupply,\n    isMutable,\n    creators,\n    itemSettings\n  });\n  const builder = TransactionBuilder.make().setFeePayer(payer).setContext({\n    candyMachineSigner: candyMachine\n  });\n  let mintAuthority = toPublicKey(authority);\n\n  if (!withoutCandyGuard) {\n    const createCandyGuard = metaplex.candyMachines().builders().createCandyGuard({\n      base: candyMachine,\n      authority: toPublicKey(authority),\n      guards: params.guards ?? {},\n      groups: params.groups\n    }, {\n      programs,\n      payer\n    });\n    const {\n      candyGuardAddress\n    } = createCandyGuard.getContext();\n    mintAuthority = candyGuardAddress;\n    builder.add(createCandyGuard);\n  }\n\n  return builder.add(await metaplex.system().builders().createAccount({\n    space: getCandyMachineSize(candyMachineData),\n    newAccount: candyMachine,\n    program: candyMachineProgram.address\n  }, {\n    payer,\n    programs\n  })).add({\n    instruction: createInitializeInstruction({\n      candyMachine: candyMachine.publicKey,\n      authorityPda,\n      authority: toPublicKey(authority),\n      payer: payer.publicKey,\n      collectionMetadata,\n      collectionMint: collection.address,\n      collectionMasterEdition,\n      collectionUpdateAuthority: collection.updateAuthority.publicKey,\n      collectionAuthorityRecord,\n      tokenMetadataProgram: tokenMetadataProgram.address\n    }, {\n      data: candyMachineData\n    }, candyMachineProgram.address),\n    signers: [payer, candyMachine, collection.updateAuthority],\n    key: params.initializeCandyMachineInstructionKey ?? 'initializeCandyMachine'\n  }).when(!withoutCandyGuard, builder => {\n    if (!isSigner(authority)) {\n      throw new ExpectedSignerError('authority', 'PublicKey', 'In order to create a Candy Machine with an associated ' + 'Candy Guard you must provide the authority as a Signer.');\n    }\n\n    return builder.add(metaplex.candyMachines().builders().wrapCandyGuard({\n      candyMachine: candyMachine.publicKey,\n      candyMachineAuthority: authority,\n      candyGuard: mintAuthority,\n      candyGuardAuthority: authority,\n      wrapCandyGuardInstructionKey: params.wrapCandyGuardInstructionKey\n    }, {\n      payer,\n      programs\n    }));\n  });\n};\n\nexport { createCandyMachineBuilder, createCandyMachineOperation, createCandyMachineOperationHandler };","map":{"version":3,"sources":["../../../../../src/plugins/candyMachineModule/operations/createCandyMachine.ts"],"names":["Key","createCandyMachineOperation","_createCandyMachineOperation","input","key","createCandyMachineOperationHandler","handle","operation","metaplex","scope","builder","createCandyMachineBuilder","throwIfCanceled","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","candyMachine","candyMachines","findByAddress","address","candyMachineSigner","publicKey","params","options","programs","payer","rpc","getDefaultFeePayer","Keypair","generate","authority","identity","collection","sellerFeeBasisPoints","itemsAvailable","symbol","maxEditionSupply","toBigNumber","isMutable","withoutCandyGuard","creators","toPublicKey","share","itemSettings","type","prefixName","nameLength","prefixUri","uriLength","isSequential","authorityPda","pdas","collectionMetadata","nfts","metadata","mint","collectionMasterEdition","masterEdition","collectionAuthorityRecord","collectionAuthority","candyMachineProgram","getCandyMachine","tokenMetadataProgram","getTokenMetadata","candyMachineData","toCandyMachineData","TransactionBuilder","make","setFeePayer","setContext","mintAuthority","createCandyGuard","builders","base","guards","groups","candyGuardAddress","getContext","add","system","createAccount","space","getCandyMachineSize","newAccount","program","instruction","createInitializeInstruction","collectionMint","collectionUpdateAuthority","updateAuthority","data","signers","initializeCandyMachineInstructionKey","when","isSigner","ExpectedSignerError","wrapCandyGuard","candyMachineAuthority","candyGuard","candyGuardAuthority","wrapCandyGuardInstructionKey"],"mappings":"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","sourcesContent":["import { createInitializeInstruction } from '@metaplex-foundation/mpl-candy-machine-core';\nimport { Keypair } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { CandyGuardsSettings, DefaultCandyGuardSettings } from '../guards';\nimport {\n  CandyMachine,\n  CandyMachineConfigLineSettings,\n  CandyMachineHiddenSettings,\n  toCandyMachineData,\n  getCandyMachineSize,\n} from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  BigNumber,\n  Creator,\n  isSigner,\n  makeConfirmOptionsFinalizedOnMainnet,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  PublicKey,\n  Signer,\n  toBigNumber,\n  toPublicKey,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { ExpectedSignerError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateCandyMachineOperation' as const;\n\n/**\n * Creates a brand new Candy Machine with the provided settings.\n *\n * Unless the `withoutCandyGuard` option is set to `true`, a\n * Candy Guard will be created with the given guards and\n * immediately linked to the Candy Machine.\n *\n * ```ts\n *  const { candyMachine } = await metaplex\n *    .candyMachines()\n *    .create({\n *      itemsAvailable: toBigNumber(5000),\n *      sellerFeeBasisPoints: 333, // 3.33%\n *      collection: {\n *        address: collectionNft.address,\n *        updateAuthority: collectionUpdateAuthority,\n *      },\n *    });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createCandyMachineOperation = _createCandyMachineOperation;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _createCandyMachineOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(input: CreateCandyMachineInput<T>): CreateCandyMachineOperation<T> {\n  return { key: Key, input };\n}\n_createCandyMachineOperation.key = Key;\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateCandyMachineOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = Operation<\n  typeof Key,\n  CreateCandyMachineInput<T>,\n  CreateCandyMachineOutput<T>\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateCandyMachineInput<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = {\n  /**\n   * The Candy Machine to create as a Signer.\n   * This expects a brand new Keypair with no associated account.\n   *\n   * @defaultValue `Keypair.generate()`\n   */\n  candyMachine?: Signer;\n\n  /**\n   * Refers to the authority that is allowed to manage the Candy Machine.\n   * This includes updating its data, authorities, inserting items, etc.\n   *\n   * By default, it is required as a Signer in order to create and wrap its\n   * Candy Guard. However, when `withoutCandyGuard` is set to `true`, it\n   * may be provided as a PublicKey instead.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: PublicKey | Signer;\n\n  /**\n   * The Collection NFT that all NFTs minted from this Candy Machine should be part of.\n   * This must include its address and the update authority as a Signer.\n   *\n   * @example\n   * If you do not have a Collection NFT yet, you can create one using\n   * the `create` method of the NFT module and setting `isCollection` to `true`.\n   *\n   * ```ts\n   * const { nft } = await metaplex.\n   *   .nfts()\n   *   .create({ isCollection: true, name: 'My Collection', ... });\n   * ```\n   *\n   * You can now use `nft.address` as the address of the collection and\n   * provide the update authority as a signer, which by default, should\n   * be `metaplex.identity()`.\n   */\n  collection: {\n    address: PublicKey;\n    updateAuthority: Signer;\n  };\n\n  /**\n   * The royalties that should be set on minted NFTs in basis points.\n   *\n   * @example\n   * ```ts\n   * { sellerFeeBasisPoints: 250 } // For 2.5% royalties.\n   * ```\n   */\n  sellerFeeBasisPoints: number;\n\n  /**\n   * The total number of items availble in the Candy Machine, minted or not.\n   *\n   * @example\n   * ```ts\n   * { itemsAvailable: toBigNumber(1000) } // For 1000 items.\n   * ```\n   */\n  itemsAvailable: BigNumber;\n\n  /**\n   * Settings related to the Candy Machine's items.\n   *\n   * These can either be inserted manually within the Candy Machine or\n   * they can be infered from a set of hidden settings.\n   *\n   * - If `type` is `hidden`, the Candy Machine is using hidden settings.\n   * - If `type` is `configLines`, the Candy Machine is using config line settings.\n   *\n   * @defaultValue\n   * Defaults to using `configLines` settings with:\n   * - No prefixes.\n   * - A length of 32 for the name.\n   * - A length of 200 for the URI.\n   * - Random mint ordering.\n   *\n   * ```ts\n   * {\n   *   itemSettings: {\n   *     type: 'configLines',\n   *     prefixName: '',\n   *     nameLength: 32,\n   *     prefixUri: '',\n   *     uriLength: 200,\n   *     isSequential: false,\n   *   }\n   * }\n   * ```\n   *\n   * @see {@link CandyMachineHiddenSettings}\n   * @see {@link CandyMachineConfigLineSettings}\n   */\n  itemSettings?: CandyMachineHiddenSettings | CandyMachineConfigLineSettings;\n\n  /**\n   * The symbol to use when minting NFTs (e.g. \"MYPROJECT\")\n   *\n   * This can be any string up to 10 bytes and can be made optional\n   * by providing an empty string.\n   *\n   * @defaultValue `\"\"`\n   */\n  symbol?: string;\n\n  /**\n   * The maximum number of editions that can be printed from the\n   * minted NFTs.\n   *\n   * For most use cases, you'd want to set this to `0` to prevent\n   * minted NFTs to be printed multiple times.\n   *\n   * Note that you cannot set this to `null` which means unlimited editions\n   * are not supported by the Candy Machine program.\n   *\n   * @defaultValue `toBigNumber(0)`\n   */\n  maxEditionSupply?: BigNumber;\n\n  /**\n   * Whether the minted NFTs should be mutable or not.\n   *\n   * We recommend setting this to `true` unless you have a specific reason.\n   * You can always make NFTs immutable in the future but you cannot make\n   * immutable NFTs mutable ever again.\n   *\n   * @defaultValue `true`\n   */\n  isMutable?: boolean;\n\n  /**\n   * Array of creators that should be set on minted NFTs.\n   *\n   * @see {@link Creator}\n   *\n   * @defaultValue\n   * Defaults to using the `authority` parameter as the only creator.\n   *\n   * ```ts\n   * [{ address: authority, share: 100 }]\n   * ```\n   */\n  creators?: Omit<Creator, 'verified'>[];\n\n  /**\n   * The settings of all guards we wish to activate.\n   *\n   * Any guard not provided or set to `null` will be disabled.\n   *\n   * This parameter is ignored if `withoutCandyGuard` is set to `true`.\n   *\n   * @defaultValue `{}`, i.e. no guards are activated.\n   */\n  guards?: Partial<T>;\n\n  /**\n   * This parameter allows us to create multiple minting groups that have their\n   * own set of requirements — i.e. guards.\n   *\n   * When groups are provided, the `guards` parameter becomes a set of default\n   * guards that will be applied to all groups. If a specific group enables\n   * a guard that is also present in the default guards, the group's guard\n   * will override the default guard.\n   *\n   * For each group, any guard not provided or set to `null` will be disabled.\n   *\n   * This parameter is ignored if `withoutCandyGuard` is set to `true`.\n   *\n   * @defaultValue `[]`, i.e. no groups are created.\n   */\n  groups?: { label: string; guards: Partial<T> }[];\n\n  /**\n   * Whether to skip the part of this operation that creates a Candy Guard\n   * for the new Candy Machine. When set to `true`, no Candy Guard will be\n   * created for the Candy Machine.\n   *\n   * @defaultValue `false`\n   */\n  withoutCandyGuard?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateCandyMachineOutput<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n\n  /** The Candy Machine that was created. */\n  candyMachine: CandyMachine<T>;\n\n  /** The created Candy Machine has a Signer. */\n  candyMachineSigner: Signer;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createCandyMachineOperationHandler: OperationHandler<CreateCandyMachineOperation> =\n  {\n    async handle<T extends CandyGuardsSettings = DefaultCandyGuardSettings>(\n      operation: CreateCandyMachineOperation<T>,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) {\n      const builder = await createCandyMachineBuilder(\n        metaplex,\n        operation.input,\n        scope\n      );\n      scope.throwIfCanceled();\n\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      const candyMachine = await metaplex\n        .candyMachines()\n        .findByAddress<T>(\n          { address: output.candyMachineSigner.publicKey },\n          scope\n        );\n      scope.throwIfCanceled();\n\n      return { ...output, candyMachine };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateCandyMachineBuilderParams<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = Omit<CreateCandyMachineInput<T>, 'confirmOptions'> & {\n  /** A key to distinguish the instruction that creates the Candy Machine account. */\n  createCandyMachineAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the Candy Machine account. */\n  initializeCandyMachineInstructionKey?: string;\n\n  /** A key to distinguish the instruction that wraps the Candy Machine in a Candy Guard. */\n  wrapCandyGuardInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateCandyMachineBuilderContext = Omit<\n  CreateCandyMachineOutput,\n  'response' | 'candyMachine'\n>;\n\n/**\n\n * Creates a brand new Candy Machine with the provided settings.\n *\n * Unless the `withoutCandyGuard` option is set to `true`, a\n * Candy Guard will be created with the given guards and\n * immediately linked to the Candy Machine.\n *\n * ```ts\n *  const transactionBuilder = await metaplex\n *    .candyMachines()\n *    .builders()\n *    .create({\n *      itemsAvailable: toBigNumber(5000),\n *      sellerFeeBasisPoints: 333, // 3.33%\n *      collection: {\n *        address: collectionNft.address,\n *        updateAuthority: collectionUpdateAuthority,\n *      },\n *    });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createCandyMachineBuilder = async <\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  metaplex: Metaplex,\n  params: CreateCandyMachineBuilderParams<T>,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<CreateCandyMachineBuilderContext>> => {\n  // Input.\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    candyMachine = Keypair.generate(),\n    authority = metaplex.identity(),\n    collection,\n    sellerFeeBasisPoints,\n    itemsAvailable,\n    symbol = '',\n    maxEditionSupply = toBigNumber(0),\n    isMutable = true,\n    withoutCandyGuard = false,\n  } = params;\n  const creators = params.creators ?? [\n    { address: toPublicKey(authority), share: 100 },\n  ];\n  const itemSettings = params.itemSettings ?? {\n    type: 'configLines',\n    prefixName: '',\n    nameLength: 32,\n    prefixUri: '',\n    uriLength: 200,\n    isSequential: false,\n  };\n\n  // PDAs.\n  const authorityPda = metaplex.candyMachines().pdas().authority({\n    candyMachine: candyMachine.publicKey,\n    programs,\n  });\n  const collectionMetadata = metaplex.nfts().pdas().metadata({\n    mint: collection.address,\n    programs,\n  });\n  const collectionMasterEdition = metaplex.nfts().pdas().masterEdition({\n    mint: collection.address,\n    programs,\n  });\n  const collectionAuthorityRecord = metaplex\n    .nfts()\n    .pdas()\n    .collectionAuthorityRecord({\n      mint: collection.address,\n      collectionAuthority: authorityPda,\n      programs,\n    });\n\n  // Programs.\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  const candyMachineData = toCandyMachineData({\n    itemsAvailable,\n    symbol,\n    sellerFeeBasisPoints,\n    maxEditionSupply,\n    isMutable,\n    creators,\n    itemSettings,\n  });\n\n  const builder = TransactionBuilder.make<CreateCandyMachineBuilderContext>()\n    .setFeePayer(payer)\n    .setContext({ candyMachineSigner: candyMachine });\n\n  let mintAuthority = toPublicKey(authority);\n  if (!withoutCandyGuard) {\n    const createCandyGuard = metaplex\n      .candyMachines()\n      .builders()\n      .createCandyGuard<T>(\n        {\n          base: candyMachine,\n          authority: toPublicKey(authority),\n          guards: params.guards ?? {},\n          groups: params.groups,\n        },\n        { programs, payer }\n      );\n\n    const { candyGuardAddress } = createCandyGuard.getContext();\n    mintAuthority = candyGuardAddress;\n    builder.add(createCandyGuard);\n  }\n\n  return builder\n    .add(\n      await metaplex\n        .system()\n        .builders()\n        .createAccount(\n          {\n            space: getCandyMachineSize(candyMachineData),\n            newAccount: candyMachine,\n            program: candyMachineProgram.address,\n          },\n          { payer, programs }\n        )\n    )\n\n    .add({\n      instruction: createInitializeInstruction(\n        {\n          candyMachine: candyMachine.publicKey,\n          authorityPda,\n          authority: toPublicKey(authority),\n          payer: payer.publicKey,\n          collectionMetadata,\n          collectionMint: collection.address,\n          collectionMasterEdition,\n          collectionUpdateAuthority: collection.updateAuthority.publicKey,\n          collectionAuthorityRecord,\n          tokenMetadataProgram: tokenMetadataProgram.address,\n        },\n        { data: candyMachineData },\n        candyMachineProgram.address\n      ),\n      signers: [payer, candyMachine, collection.updateAuthority],\n      key:\n        params.initializeCandyMachineInstructionKey ?? 'initializeCandyMachine',\n    })\n\n    .when(!withoutCandyGuard, (builder) => {\n      if (!isSigner(authority)) {\n        throw new ExpectedSignerError(\n          'authority',\n          'PublicKey',\n          'In order to create a Candy Machine with an associated ' +\n            'Candy Guard you must provide the authority as a Signer.'\n        );\n      }\n\n      return builder.add(\n        metaplex.candyMachines().builders().wrapCandyGuard(\n          {\n            candyMachine: candyMachine.publicKey,\n            candyMachineAuthority: authority,\n            candyGuard: mintAuthority,\n            candyGuardAuthority: authority,\n            wrapCandyGuardInstructionKey: params.wrapCandyGuardInstructionKey,\n          },\n          { payer, programs }\n        )\n      );\n    });\n};\n"]},"metadata":{},"sourceType":"module"}