{"ast":null,"code":"import { s16, struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var InterestBearingMintInstruction;\n\n(function (InterestBearingMintInstruction) {\n  InterestBearingMintInstruction[InterestBearingMintInstruction[\"Initialize\"] = 0] = \"Initialize\";\n  InterestBearingMintInstruction[InterestBearingMintInstruction[\"UpdateRate\"] = 1] = \"UpdateRate\";\n})(InterestBearingMintInstruction || (InterestBearingMintInstruction = {}));\n\nexport const interestBearingMintInitializeInstructionData = struct([u8('instruction'), u8('interestBearingMintInstruction'), // TODO: Make this an optional public key\npublicKey('rateAuthority'), s16('rate')]);\nexport const interestBearingMintUpdateRateInstructionData = struct([u8('instruction'), u8('interestBearingMintInstruction'), s16('rate')]);\n/**\n * Construct an InitializeInterestBearingMint instruction\n *\n * @param mint           Mint to initialize\n * @param rateAuthority  The public key for the account that can update the rate\n * @param rate           The initial interest rate\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createInitializeInterestBearingMintInstruction(mint, rateAuthority, rate) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_2022_PROGRAM_ID;\n  const keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(interestBearingMintInitializeInstructionData.span);\n  interestBearingMintInitializeInstructionData.encode({\n    instruction: TokenInstruction.InterestBearingMintExtension,\n    interestBearingMintInstruction: InterestBearingMintInstruction.Initialize,\n    rateAuthority: rateAuthority,\n    rate: rate\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}\n/**\n * Construct an UpdateRateInterestBearingMint instruction\n *\n * @param mint           Mint to initialize\n * @param rateAuthority  The public key for the account that can update the rate\n * @param rate           The updated interest rate\n * @param multiSigners   Signing accounts if `rateAuthority` is a multisig\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createUpdateRateInterestBearingMintInstruction(mint, rateAuthority, rate) {\n  let multiSigners = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_2022_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: rateAuthority,\n    isSigner: !multiSigners.length,\n    isWritable: false\n  }], rateAuthority, multiSigners);\n  const data = Buffer.alloc(interestBearingMintUpdateRateInstructionData.span);\n  interestBearingMintUpdateRateInstructionData.encode({\n    instruction: TokenInstruction.InterestBearingMintExtension,\n    interestBearingMintInstruction: InterestBearingMintInstruction.UpdateRate,\n    rate: rate\n  }, data);\n  return new TransactionInstruction({\n    keys: keys,\n    programId: programId,\n    data: data\n  });\n}","map":{"version":3,"sources":["../../../../src/extensions/interestBearingMint/instructions.ts"],"names":[],"mappings":"AAAA,SAAS,GAAT,EAAc,MAAd,EAAsB,EAAtB,QAAgC,uBAAhC;AACA,SAAS,SAAT,QAA0B,6BAA1B;AAEA,SAAS,sBAAT,QAAuC,iBAAvC;AACA,SAAS,qBAAT,QAAsC,oBAAtC;AACA,SAAS,UAAT,QAA2B,gCAA3B;AACA,SAAS,gBAAT,QAAiC,6BAAjC;AAEA,OAAA,IAAY,8BAAZ;;AAAA,CAAA,UAAY,8BAAZ,EAA0C;EACtC,8BAAA,CAAA,8BAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;EACA,8BAAA,CAAA,8BAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;AACH,CAHD,EAAY,8BAA8B,KAA9B,8BAA8B,GAAA,EAAA,CAA1C;;AAkBA,OAAO,MAAM,4CAA4C,GAAG,MAAM,CAA+C,CAC7G,EAAE,CAAC,aAAD,CAD2G,EAE7G,EAAE,CAAC,gCAAD,CAF2G,EAG7G;AACA,SAAS,CAAC,eAAD,CAJoG,EAK7G,GAAG,CAAC,MAAD,CAL0G,CAA/C,CAA3D;AAQP,OAAO,MAAM,4CAA4C,GAAG,MAAM,CAA+C,CAC7G,EAAE,CAAC,aAAD,CAD2G,EAE7G,EAAE,CAAC,gCAAD,CAF2G,EAG7G,GAAG,CAAC,MAAD,CAH0G,CAA/C,CAA3D;AAMP;;;;;;;;;AASG;;AACH,OAAM,SAAU,8CAAV,CACF,IADE,EAEF,aAFE,EAGF,IAHE,EAI+B;EAAA,IAAjC,SAAiC,uEAArB,qBAAqB;EAEjC,MAAM,IAAI,GAAG,CAAC;IAAE,MAAM,EAAE,IAAV;IAAgB,QAAQ,EAAE,KAA1B;IAAiC,UAAU,EAAE;EAA7C,CAAD,CAAb;EACA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,4CAA4C,CAAC,IAA1D,CAAb;EACA,4CAA4C,CAAC,MAA7C,CACI;IACI,WAAW,EAAE,gBAAgB,CAAC,4BADlC;IAEI,8BAA8B,EAAE,8BAA8B,CAAC,UAFnE;IAGI,aAAa,EAAb,aAHJ;IAII,IAAI,EAAJ;EAJJ,CADJ,EAOI,IAPJ;EASA,OAAO,IAAI,sBAAJ,CAA2B;IAAE,IAAI,EAAJ,IAAF;IAAQ,SAAS,EAAT,SAAR;IAAmB,IAAI,EAAJ;EAAnB,CAA3B,CAAP;AACH;AAED;;;;;;;;;;AAUG;;AACH,OAAM,SAAU,8CAAV,CACF,IADE,EAEF,aAFE,EAGF,IAHE,EAK+B;EAAA,IADjC,YACiC,uEADR,EACQ;EAAA,IAAjC,SAAiC,uEAArB,qBAAqB;EAEjC,MAAM,IAAI,GAAG,UAAU,CACnB,CACI;IAAE,MAAM,EAAE,IAAV;IAAgB,QAAQ,EAAE,KAA1B;IAAiC,UAAU,EAAE;EAA7C,CADJ,EAEI;IAAE,MAAM,EAAE,aAAV;IAAyB,QAAQ,EAAE,CAAC,YAAY,CAAC,MAAjD;IAAyD,UAAU,EAAE;EAArE,CAFJ,CADmB,EAKnB,aALmB,EAMnB,YANmB,CAAvB;EAQA,MAAM,IAAI,GAAG,MAAM,CAAC,KAAP,CAAa,4CAA4C,CAAC,IAA1D,CAAb;EACA,4CAA4C,CAAC,MAA7C,CACI;IACI,WAAW,EAAE,gBAAgB,CAAC,4BADlC;IAEI,8BAA8B,EAAE,8BAA8B,CAAC,UAFnE;IAGI,IAAI,EAAJ;EAHJ,CADJ,EAMI,IANJ;EAQA,OAAO,IAAI,sBAAJ,CAA2B;IAAE,IAAI,EAAJ,IAAF;IAAQ,SAAS,EAAT,SAAR;IAAmB,IAAI,EAAJ;EAAnB,CAA3B,CAAP;AACH","sourceRoot":"","sourcesContent":["import { s16, struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_2022_PROGRAM_ID } from '../../constants.js';\nimport { addSigners } from '../../instructions/internal.js';\nimport { TokenInstruction } from '../../instructions/types.js';\nexport var InterestBearingMintInstruction;\n(function (InterestBearingMintInstruction) {\n    InterestBearingMintInstruction[InterestBearingMintInstruction[\"Initialize\"] = 0] = \"Initialize\";\n    InterestBearingMintInstruction[InterestBearingMintInstruction[\"UpdateRate\"] = 1] = \"UpdateRate\";\n})(InterestBearingMintInstruction || (InterestBearingMintInstruction = {}));\nexport const interestBearingMintInitializeInstructionData = struct([\n    u8('instruction'),\n    u8('interestBearingMintInstruction'),\n    // TODO: Make this an optional public key\n    publicKey('rateAuthority'),\n    s16('rate'),\n]);\nexport const interestBearingMintUpdateRateInstructionData = struct([\n    u8('instruction'),\n    u8('interestBearingMintInstruction'),\n    s16('rate'),\n]);\n/**\n * Construct an InitializeInterestBearingMint instruction\n *\n * @param mint           Mint to initialize\n * @param rateAuthority  The public key for the account that can update the rate\n * @param rate           The initial interest rate\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeInterestBearingMintInstruction(mint, rateAuthority, rate, programId = TOKEN_2022_PROGRAM_ID) {\n    const keys = [{ pubkey: mint, isSigner: false, isWritable: true }];\n    const data = Buffer.alloc(interestBearingMintInitializeInstructionData.span);\n    interestBearingMintInitializeInstructionData.encode({\n        instruction: TokenInstruction.InterestBearingMintExtension,\n        interestBearingMintInstruction: InterestBearingMintInstruction.Initialize,\n        rateAuthority,\n        rate,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Construct an UpdateRateInterestBearingMint instruction\n *\n * @param mint           Mint to initialize\n * @param rateAuthority  The public key for the account that can update the rate\n * @param rate           The updated interest rate\n * @param multiSigners   Signing accounts if `rateAuthority` is a multisig\n * @param programId      SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createUpdateRateInterestBearingMintInstruction(mint, rateAuthority, rate, multiSigners = [], programId = TOKEN_2022_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: rateAuthority, isSigner: !multiSigners.length, isWritable: false },\n    ], rateAuthority, multiSigners);\n    const data = Buffer.alloc(interestBearingMintUpdateRateInstructionData.span);\n    interestBearingMintUpdateRateInstructionData.encode({\n        instruction: TokenInstruction.InterestBearingMintExtension,\n        interestBearingMintInstruction: InterestBearingMintInstruction.UpdateRate,\n        rate,\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n//# sourceMappingURL=instructions.js.map"]},"metadata":{},"sourceType":"module"}