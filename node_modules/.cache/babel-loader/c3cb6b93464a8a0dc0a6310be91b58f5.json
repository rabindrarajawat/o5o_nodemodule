{"ast":null,"code":"import { Buffer } from 'buffer';\nimport { CandyMachineV2Program } from './program.mjs';\nimport { Pda } from '../../types/Pda.mjs';\n/** @group Pdas */\n\nconst findCandyMachineV2CreatorPda = function (candyMachine) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CandyMachineV2Program.publicKey;\n  return Pda.find(programId, [Buffer.from('candy_machine', 'utf8'), candyMachine.toBuffer()]);\n};\n/** @group Pdas */\n\n\nconst findCandyMachineV2CollectionPda = function (candyMachine) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CandyMachineV2Program.publicKey;\n  return Pda.find(programId, [Buffer.from('collection', 'utf8'), candyMachine.toBuffer()]);\n};\n\nexport { findCandyMachineV2CollectionPda, findCandyMachineV2CreatorPda };","map":{"version":3,"sources":["../../../../src/plugins/candyMachineV2Module/pdas.ts"],"names":["findCandyMachineV2CreatorPda","candyMachine","programId","CandyMachineV2Program","publicKey","Pda","find","Buffer","from","toBuffer","findCandyMachineV2CollectionPda"],"mappings":";;;AAKA;;AACO,MAAMA,4BAA4B,GAAG,UAC1CC,YAD0C,EAGlC;EAAA,IADRC,SACQ,uEADeC,qBAAqB,CAACC,SACrC;EACR,OAAOC,GAAG,CAACC,IAAJD,CAASH,SAATG,EAAoB,CACzBE,MAAM,CAACC,IAAPD,CAAY,eAAZA,EAA6B,MAA7BA,CADyB,EAEzBN,YAAY,CAACQ,QAAbR,EAFyB,CAApBI,CAAP;AAIF,CARO;AAUP;;;AACO,MAAMK,+BAA+B,GAAG,UAC7CT,YAD6C,EAGrC;EAAA,IADRC,SACQ,uEADeC,qBAAqB,CAACC,SACrC;EACR,OAAOC,GAAG,CAACC,IAAJD,CAASH,SAATG,EAAoB,CACzBE,MAAM,CAACC,IAAPD,CAAY,YAAZA,EAA0B,MAA1BA,CADyB,EAEzBN,YAAY,CAACQ,QAAbR,EAFyB,CAApBI,CAAP;AAIF,CARO","sourcesContent":["import { Buffer } from 'buffer';\nimport { PublicKey } from '@solana/web3.js';\nimport { CandyMachineV2Program } from './program';\nimport { Pda } from '@/types';\n\n/** @group Pdas */\nexport const findCandyMachineV2CreatorPda = (\n  candyMachine: PublicKey,\n  programId: PublicKey = CandyMachineV2Program.publicKey\n): Pda => {\n  return Pda.find(programId, [\n    Buffer.from('candy_machine', 'utf8'),\n    candyMachine.toBuffer(),\n  ]);\n};\n\n/** @group Pdas */\nexport const findCandyMachineV2CollectionPda = (\n  candyMachine: PublicKey,\n  programId: PublicKey = CandyMachineV2Program.publicKey\n): Pda => {\n  return Pda.find(programId, [\n    Buffer.from('collection', 'utf8'),\n    candyMachine.toBuffer(),\n  ]);\n};\n"]},"metadata":{},"sourceType":"module"}